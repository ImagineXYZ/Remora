
Quadtree_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ef40  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000164  20000000  0000ef40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d14  20000164  0000f0a4  00020164  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
  5 .debug_info   00068ce4  00000000  00000000  000201e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000092de  00000000  00000000  00088ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000194c4  00000000  00000000  000921a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000016a0  00000000  00000000  000ab66b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00002ce8  00000000  00000000  000acd0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000203fb  00000000  00000000  000af9f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b26a  00000000  00000000  000cfdee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0008b9d1  00000000  00000000  000eb058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00005a38  00000000  00000000  00176a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .stab         000000cc  00000000  00000000  0017c464  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .stabstr      000001b9  00000000  00000000  0017c530  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	00 80 00 20 01 43 00 00 e9 42 00 00 e9 42 00 00     ... .C...B...B..
	...
      2c:	e9 42 00 00 00 00 00 00 00 00 00 00 e9 42 00 00     .B...........B..
      3c:	55 43 00 00 e9 42 00 00 e9 42 00 00 e9 42 00 00     UC...B...B...B..
      4c:	e9 42 00 00 5d 5f 00 00 e9 42 00 00 e9 42 00 00     .B..]_...B...B..
      5c:	ed 42 00 00 e9 42 00 00 75 66 00 00 e9 42 00 00     .B...B..uf...B..
      6c:	0d 32 00 00 1d 32 00 00 e9 42 00 00 85 66 00 00     .2...2...B...f..
      7c:	e9 42 00 00 e9 42 00 00 e9 42 00 00 e9 42 00 00     .B...B...B...B..
      8c:	e9 42 00 00 00 00 00 00 e9 42 00 00 e9 42 00 00     .B.......B...B..
      9c:	e9 42 00 00 e9 42 00 00 e9 42 00 00 e9 42 00 00     .B...B...B...B..
      ac:	e9 42 00 00 00 00 00 00                             .B......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000164 	.word	0x20000164
      d4:	00000000 	.word	0x00000000
      d8:	0000ef3c 	.word	0x0000ef3c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000168 	.word	0x20000168
     108:	0000ef3c 	.word	0x0000ef3c
     10c:	20000160 	.word	0x20000160
     110:	00000000 	.word	0x00000000

00000114 <_ZN13Adafruit_FONA9availableEv>:
    // disconnect all sockets
    if (! sendCheckReply(F("AT+CIPSHUT"), F("SHUT OK"), 20000))
      return false;

    // close GPRS context
    if (! sendCheckReply(F("AT+SAPBR=0,1"), ok_reply, 10000))
     114:	30fc      	adds	r0, #252	; 0xfc
      return false;

    if (! sendCheckReply(F("AT+CGATT=0"), ok_reply, 10000))
     116:	b510      	push	{r4, lr}
     118:	6b00      	ldr	r0, [r0, #48]	; 0x30
     11a:	6803      	ldr	r3, [r0, #0]
     11c:	689b      	ldr	r3, [r3, #8]
     11e:	4798      	blx	r3
     120:	bd10      	pop	{r4, pc}

00000122 <_ZN13Adafruit_FONA5writeEh>:
      return false;

  }
  return true;
}
     122:	30fc      	adds	r0, #252	; 0xfc
     124:	b510      	push	{r4, lr}
     126:	6b00      	ldr	r0, [r0, #48]	; 0x30
     128:	6803      	ldr	r3, [r0, #0]
     12a:	681b      	ldr	r3, [r3, #0]
     12c:	4798      	blx	r3
     12e:	bd10      	pop	{r4, pc}

00000130 <_ZN13Adafruit_FONA4readEv>:
     130:	30fc      	adds	r0, #252	; 0xfc
     132:	b510      	push	{r4, lr}
     134:	6b00      	ldr	r0, [r0, #48]	; 0x30
     136:	6803      	ldr	r3, [r0, #0]
     138:	68db      	ldr	r3, [r3, #12]
     13a:	4798      	blx	r3
     13c:	bd10      	pop	{r4, pc}

0000013e <_ZN13Adafruit_FONA4peekEv>:
     13e:	30fc      	adds	r0, #252	; 0xfc
     140:	b510      	push	{r4, lr}
     142:	6b00      	ldr	r0, [r0, #48]	; 0x30
     144:	6803      	ldr	r3, [r0, #0]
     146:	691b      	ldr	r3, [r3, #16]
     148:	4798      	blx	r3
     14a:	bd10      	pop	{r4, pc}

0000014c <_ZN13Adafruit_FONA5flushEv>:
     14c:	30fc      	adds	r0, #252	; 0xfc
     14e:	b510      	push	{r4, lr}
     150:	6b00      	ldr	r0, [r0, #48]	; 0x30
     152:	6803      	ldr	r3, [r0, #0]
     154:	695b      	ldr	r3, [r3, #20]
     156:	4798      	blx	r3
     158:	bd10      	pop	{r4, pc}
	...

0000015c <_ZN13Adafruit_FONAC1Ea>:
     15c:	23fa      	movs	r3, #250	; 0xfa
     15e:	009b      	lsls	r3, r3, #2
     160:	6083      	str	r3, [r0, #8]
     162:	4b0a      	ldr	r3, [pc, #40]	; (18c <_ZN13Adafruit_FONAC1Ea+0x30>)
     164:	2200      	movs	r2, #0
     166:	6003      	str	r3, [r0, #0]

Adafruit_FONA::Adafruit_FONA(int8_t rst)
{
  _rstpin = rst;

  apn = F("FONAnet");
     168:	0003      	movs	r3, r0

#include "Adafruit_FONA.h"

Adafruit_FONA::Adafruit_FONA(int8_t rst)
{
  _rstpin = rst;
     16a:	7401      	strb	r1, [r0, #16]

  apn = F("FONAnet");
     16c:	4908      	ldr	r1, [pc, #32]	; (190 <_ZN13Adafruit_FONAC1Ea+0x34>)
     16e:	33fc      	adds	r3, #252	; 0xfc
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     170:	6042      	str	r2, [r0, #4]
     172:	6199      	str	r1, [r3, #24]
  apnusername = 0;
  apnpassword = 0;
  mySerial = 0;
  httpsredirect = false;
     174:	2190      	movs	r1, #144	; 0x90
     176:	0049      	lsls	r1, r1, #1
Adafruit_FONA::Adafruit_FONA(int8_t rst)
{
  _rstpin = rst;

  apn = F("FONAnet");
  apnusername = 0;
     178:	61da      	str	r2, [r3, #28]
  apnpassword = 0;
     17a:	621a      	str	r2, [r3, #32]
  mySerial = 0;
     17c:	631a      	str	r2, [r3, #48]	; 0x30
  httpsredirect = false;
     17e:	5442      	strb	r2, [r0, r1]
  useragent = F("FONA");
     180:	4a04      	ldr	r2, [pc, #16]	; (194 <_ZN13Adafruit_FONAC1Ea+0x38>)
     182:	629a      	str	r2, [r3, #40]	; 0x28
  ok_reply = F("OK");
     184:	4a04      	ldr	r2, [pc, #16]	; (198 <_ZN13Adafruit_FONAC1Ea+0x3c>)
     186:	62da      	str	r2, [r3, #44]	; 0x2c
}
     188:	4770      	bx	lr
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	0000da68 	.word	0x0000da68
     190:	0000db2e 	.word	0x0000db2e
     194:	0000db36 	.word	0x0000db36
     198:	0000db5a 	.word	0x0000db5a

0000019c <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>:
  return state;
}

void Adafruit_FONA::setGPRSNetworkSettings(FONAFlashStringPtr apn,
              FONAFlashStringPtr username, FONAFlashStringPtr password) {
  this->apn = apn;
     19c:	30fc      	adds	r0, #252	; 0xfc
     19e:	6181      	str	r1, [r0, #24]
  this->apnusername = username;
     1a0:	61c2      	str	r2, [r0, #28]
  this->apnpassword = password;
     1a2:	6203      	str	r3, [r0, #32]
}
     1a4:	4770      	bx	lr

000001a6 <_ZN13Adafruit_FONA10flushInputEv>:

inline void Adafruit_FONA::flush() {
  mySerial->flush();
}

void Adafruit_FONA::flushInput() {
     1a6:	b570      	push	{r4, r5, r6, lr}
    // Read all available serial input to flush pending data.
    uint16_t timeoutloop = 0;
     1a8:	2300      	movs	r3, #0

inline void Adafruit_FONA::flush() {
  mySerial->flush();
}

void Adafruit_FONA::flushInput() {
     1aa:	0005      	movs	r5, r0
    // Read all available serial input to flush pending data.
    uint16_t timeoutloop = 0;
    while (timeoutloop++ < 40) {
     1ac:	1c5c      	adds	r4, r3, #1
     1ae:	b2a4      	uxth	r4, r4
     1b0:	2b27      	cmp	r3, #39	; 0x27
     1b2:	d810      	bhi.n	1d6 <_ZN13Adafruit_FONA10flushInputEv+0x30>
        while(available()) {
     1b4:	682b      	ldr	r3, [r5, #0]
     1b6:	0028      	movs	r0, r5
     1b8:	689b      	ldr	r3, [r3, #8]
     1ba:	4798      	blx	r3
     1bc:	2800      	cmp	r0, #0
     1be:	d005      	beq.n	1cc <_ZN13Adafruit_FONA10flushInputEv+0x26>
            read();
     1c0:	682b      	ldr	r3, [r5, #0]
     1c2:	0028      	movs	r0, r5
     1c4:	68db      	ldr	r3, [r3, #12]
     1c6:	4798      	blx	r3
            timeoutloop = 0;  // If char was received reset the timer
     1c8:	2400      	movs	r4, #0

void Adafruit_FONA::flushInput() {
    // Read all available serial input to flush pending data.
    uint16_t timeoutloop = 0;
    while (timeoutloop++ < 40) {
        while(available()) {
     1ca:	e7f3      	b.n	1b4 <_ZN13Adafruit_FONA10flushInputEv+0xe>
            read();
            timeoutloop = 0;  // If char was received reset the timer
        }
        delay(1);
     1cc:	2001      	movs	r0, #1
     1ce:	f004 f8d5 	bl	437c <delay>
}

void Adafruit_FONA::flushInput() {
    // Read all available serial input to flush pending data.
    uint16_t timeoutloop = 0;
    while (timeoutloop++ < 40) {
     1d2:	0023      	movs	r3, r4
     1d4:	e7ea      	b.n	1ac <_ZN13Adafruit_FONA10flushInputEv+0x6>
            read();
            timeoutloop = 0;  // If char was received reset the timer
        }
        delay(1);
    }
}
     1d6:	bd70      	pop	{r4, r5, r6, pc}

000001d8 <_ZN13Adafruit_FONA7readRawEt>:

uint16_t Adafruit_FONA::readRaw(uint16_t b) {
     1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     1da:	0005      	movs	r5, r0
     1dc:	2400      	movs	r4, #0
     1de:	9101      	str	r1, [sp, #4]
     1e0:	b2a6      	uxth	r6, r4
  uint16_t idx = 0;

  while (b && (idx < sizeof(replybuffer)-1)) {
     1e2:	9b01      	ldr	r3, [sp, #4]
     1e4:	429c      	cmp	r4, r3
     1e6:	d012      	beq.n	20e <_ZN13Adafruit_FONA7readRawEt+0x36>
     1e8:	2cfe      	cmp	r4, #254	; 0xfe
     1ea:	d00f      	beq.n	20c <_ZN13Adafruit_FONA7readRawEt+0x34>
    if (mySerial->available()) {
     1ec:	002f      	movs	r7, r5
     1ee:	37fc      	adds	r7, #252	; 0xfc
     1f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
     1f2:	6803      	ldr	r3, [r0, #0]
     1f4:	689b      	ldr	r3, [r3, #8]
     1f6:	4798      	blx	r3
     1f8:	2800      	cmp	r0, #0
     1fa:	d0f2      	beq.n	1e2 <_ZN13Adafruit_FONA7readRawEt+0xa>
      replybuffer[idx] = mySerial->read();
     1fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
     1fe:	6803      	ldr	r3, [r0, #0]
     200:	68db      	ldr	r3, [r3, #12]
     202:	4798      	blx	r3
     204:	192b      	adds	r3, r5, r4
     206:	7498      	strb	r0, [r3, #18]
     208:	3401      	adds	r4, #1
     20a:	e7e9      	b.n	1e0 <_ZN13Adafruit_FONA7readRawEt+0x8>
     20c:	0026      	movs	r6, r4
      idx++;
      b--;
    }
  }
  replybuffer[idx] = 0;
     20e:	2300      	movs	r3, #0
     210:	19ad      	adds	r5, r5, r6

  return idx;
}
     212:	0030      	movs	r0, r6
      replybuffer[idx] = mySerial->read();
      idx++;
      b--;
    }
  }
  replybuffer[idx] = 0;
     214:	74ab      	strb	r3, [r5, #18]

  return idx;
}
     216:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00000218 <_ZN13Adafruit_FONA8readlineEtb>:

uint8_t Adafruit_FONA::readline(uint16_t timeout, boolean multiline) {
     218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     21a:	0006      	movs	r6, r0
     21c:	000d      	movs	r5, r1
  uint16_t replyidx = 0;
     21e:	2400      	movs	r4, #0
  replybuffer[idx] = 0;

  return idx;
}

uint8_t Adafruit_FONA::readline(uint16_t timeout, boolean multiline) {
     220:	9201      	str	r2, [sp, #4]
  uint16_t replyidx = 0;

  while (timeout--) {
     222:	2d00      	cmp	r5, #0
     224:	d024      	beq.n	270 <_ZN13Adafruit_FONA8readlineEtb+0x58>
    if (replyidx >= 254) {
     226:	2cfd      	cmp	r4, #253	; 0xfd
     228:	d822      	bhi.n	270 <_ZN13Adafruit_FONA8readlineEtb+0x58>
      //DEBUG_PRINTLN(F("SPACE"));
      break;
    }

    while(mySerial->available()) {
     22a:	0037      	movs	r7, r6
     22c:	37fc      	adds	r7, #252	; 0xfc
     22e:	6b38      	ldr	r0, [r7, #48]	; 0x30
     230:	6803      	ldr	r3, [r0, #0]
     232:	689b      	ldr	r3, [r3, #8]
     234:	4798      	blx	r3
     236:	2800      	cmp	r0, #0
     238:	d012      	beq.n	260 <_ZN13Adafruit_FONA8readlineEtb+0x48>
      char c =  mySerial->read();
     23a:	6b38      	ldr	r0, [r7, #48]	; 0x30
     23c:	6803      	ldr	r3, [r0, #0]
     23e:	68db      	ldr	r3, [r3, #12]
     240:	4798      	blx	r3
     242:	b2c0      	uxtb	r0, r0
      if (c == '\r') continue;
     244:	280d      	cmp	r0, #13
     246:	d0f0      	beq.n	22a <_ZN13Adafruit_FONA8readlineEtb+0x12>
      if (c == 0xA) {
     248:	280a      	cmp	r0, #10
     24a:	d104      	bne.n	256 <_ZN13Adafruit_FONA8readlineEtb+0x3e>
        if (replyidx == 0)   // the first 0x0A is ignored
     24c:	2c00      	cmp	r4, #0
     24e:	d0ec      	beq.n	22a <_ZN13Adafruit_FONA8readlineEtb+0x12>
          continue;

        if (!multiline) {
     250:	9b01      	ldr	r3, [sp, #4]
     252:	2b00      	cmp	r3, #0
     254:	d00c      	beq.n	270 <_ZN13Adafruit_FONA8readlineEtb+0x58>
          timeout = 0;         // the second 0x0A is the end of the line
          break;
        }
      }
      replybuffer[replyidx] = c;
     256:	1933      	adds	r3, r6, r4
      //DEBUG_PRINT(c, HEX); DEBUG_PRINT("#"); DEBUG_PRINTLN(c);
      replyidx++;
     258:	3401      	adds	r4, #1
        if (!multiline) {
          timeout = 0;         // the second 0x0A is the end of the line
          break;
        }
      }
      replybuffer[replyidx] = c;
     25a:	7498      	strb	r0, [r3, #18]
      //DEBUG_PRINT(c, HEX); DEBUG_PRINT("#"); DEBUG_PRINTLN(c);
      replyidx++;
     25c:	b2a4      	uxth	r4, r4
     25e:	e7e4      	b.n	22a <_ZN13Adafruit_FONA8readlineEtb+0x12>
     260:	3d01      	subs	r5, #1
     262:	b2ad      	uxth	r5, r5
    }

    if (timeout == 0) {
     264:	2d00      	cmp	r5, #0
     266:	d003      	beq.n	270 <_ZN13Adafruit_FONA8readlineEtb+0x58>
      //DEBUG_PRINTLN(F("TIMEOUT"));
      break;
    }
    delay(1);
     268:	2001      	movs	r0, #1
     26a:	f004 f887 	bl	437c <delay>
}

uint8_t Adafruit_FONA::readline(uint16_t timeout, boolean multiline) {
  uint16_t replyidx = 0;

  while (timeout--) {
     26e:	e7d8      	b.n	222 <_ZN13Adafruit_FONA8readlineEtb+0xa>
      //DEBUG_PRINTLN(F("TIMEOUT"));
      break;
    }
    delay(1);
  }
  replybuffer[replyidx] = 0;  // null term
     270:	2300      	movs	r3, #0
     272:	1936      	adds	r6, r6, r4
     274:	74b3      	strb	r3, [r6, #18]
  return replyidx;
     276:	b2e0      	uxtb	r0, r4
}
     278:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000027a <_ZN13Adafruit_FONA8getReplyEPct>:

uint8_t Adafruit_FONA::getReply(char *send, uint16_t timeout) {
     27a:	b570      	push	{r4, r5, r6, lr}
     27c:	0004      	movs	r4, r0
     27e:	0015      	movs	r5, r2
     280:	000e      	movs	r6, r1
  flushInput();
     282:	f7ff ff90 	bl	1a6 <_ZN13Adafruit_FONA10flushInputEv>


  DEBUG_PRINT(F("\t---> ")); DEBUG_PRINTLN(send);


  mySerial->println(send);
     286:	0023      	movs	r3, r4
     288:	33fc      	adds	r3, #252	; 0xfc
     28a:	0031      	movs	r1, r6
     28c:	6b18      	ldr	r0, [r3, #48]	; 0x30
     28e:	f004 f949 	bl	4524 <_ZN5Print7printlnEPKc>

  uint8_t l = readline(timeout);
     292:	0029      	movs	r1, r5
     294:	2200      	movs	r2, #0
     296:	0020      	movs	r0, r4
     298:	f7ff ffbe 	bl	218 <_ZN13Adafruit_FONA8readlineEtb>

  DEBUG_PRINT (F("\t<--- ")); DEBUG_PRINTLN(replybuffer);

  return l;
}
     29c:	bd70      	pop	{r4, r5, r6, pc}

0000029e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelpert>:

uint8_t Adafruit_FONA::getReply(FONAFlashStringPtr send, uint16_t timeout) {
     29e:	b570      	push	{r4, r5, r6, lr}
     2a0:	0004      	movs	r4, r0
     2a2:	0015      	movs	r5, r2
     2a4:	000e      	movs	r6, r1
  flushInput();
     2a6:	f7ff ff7e 	bl	1a6 <_ZN13Adafruit_FONA10flushInputEv>


  DEBUG_PRINT(F("\t---> ")); DEBUG_PRINTLN(send);


  mySerial->println(send);
     2aa:	0023      	movs	r3, r4
     2ac:	33fc      	adds	r3, #252	; 0xfc
     2ae:	0031      	movs	r1, r6
     2b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
     2b2:	f004 f941 	bl	4538 <_ZN5Print7printlnEPK19__FlashStringHelper>

  uint8_t l = readline(timeout);
     2b6:	0029      	movs	r1, r5
     2b8:	2200      	movs	r2, #0
     2ba:	0020      	movs	r0, r4
     2bc:	f7ff ffac 	bl	218 <_ZN13Adafruit_FONA8readlineEtb>

  DEBUG_PRINT (F("\t<--- ")); DEBUG_PRINTLN(replybuffer);

  return l;
}
     2c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000002c4 <_ZN13Adafruit_FONA9GPSstatusEv>:
    readline(2000); // eat '+CGPS: 0'
  }
  return true;
}

int8_t Adafruit_FONA::GPSstatus(void) {
     2c4:	b570      	push	{r4, r5, r6, lr}
     2c6:	0005      	movs	r5, r0
  if (_type == FONA808_V2) {
     2c8:	7c43      	ldrb	r3, [r0, #17]
    readline(2000); // eat '+CGPS: 0'
  }
  return true;
}

int8_t Adafruit_FONA::GPSstatus(void) {
     2ca:	0004      	movs	r4, r0
     2cc:	3512      	adds	r5, #18
  if (_type == FONA808_V2) {
     2ce:	2b03      	cmp	r3, #3
     2d0:	d11b      	bne.n	30a <_ZN13Adafruit_FONA9GPSstatusEv+0x46>
    // 808 V2 uses GNS commands and doesn't have an explicit 2D/3D fix status.
    // Instead just look for a fix and if found assume it's a 3D fix.
    getReply(F("AT+CGNSINF"));
     2d2:	22fa      	movs	r2, #250	; 0xfa
     2d4:	4925      	ldr	r1, [pc, #148]	; (36c <_ZN13Adafruit_FONA9GPSstatusEv+0xa8>)
     2d6:	0052      	lsls	r2, r2, #1
     2d8:	f7ff ffe1 	bl	29e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelpert>
    char *p = prog_char_strstr(replybuffer, (prog_char*)F("+CGNSINF: "));
     2dc:	0028      	movs	r0, r5
     2de:	4924      	ldr	r1, [pc, #144]	; (370 <_ZN13Adafruit_FONA9GPSstatusEv+0xac>)
     2e0:	f00a f8c5 	bl	a46e <strstr>
     2e4:	1e05      	subs	r5, r0, #0
    if (p == 0) return -1;
     2e6:	d102      	bne.n	2ee <_ZN13Adafruit_FONA9GPSstatusEv+0x2a>
     2e8:	2001      	movs	r0, #1
     2ea:	4240      	negs	r0, r0
     2ec:	e03c      	b.n	368 <_ZN13Adafruit_FONA9GPSstatusEv+0xa4>
    p+=10;
    readline(); // eat 'OK'
     2ee:	21fa      	movs	r1, #250	; 0xfa
     2f0:	2200      	movs	r2, #0
     2f2:	0049      	lsls	r1, r1, #1
     2f4:	0020      	movs	r0, r4
     2f6:	f7ff ff8f 	bl	218 <_ZN13Adafruit_FONA8readlineEtb>
    if (p[0] == '0') return 0; // GPS is not even on!
     2fa:	7aab      	ldrb	r3, [r5, #10]
     2fc:	2b30      	cmp	r3, #48	; 0x30
     2fe:	d02b      	beq.n	358 <_ZN13Adafruit_FONA9GPSstatusEv+0x94>

    p+=2; // Skip to second value, fix status.
    //DEBUG_PRINTLN(p);
    // Assume if the fix status is '1' then we have a 3D fix, otherwise no fix.
    if (p[0] == '1') return 3;
     300:	7b2b      	ldrb	r3, [r5, #12]
     302:	2b31      	cmp	r3, #49	; 0x31
     304:	d11a      	bne.n	33c <_ZN13Adafruit_FONA9GPSstatusEv+0x78>
     306:	2003      	movs	r0, #3
     308:	e02e      	b.n	368 <_ZN13Adafruit_FONA9GPSstatusEv+0xa4>
    else return 1;
  }
  if (_type == FONA3G_A || _type == FONA3G_E) {
    // FONA 3G doesn't have an explicit 2D/3D fix status.
    // Instead just look for a fix and if found assume it's a 3D fix.
    getReply(F("AT+CGPSINFO"));
     30a:	22fa      	movs	r2, #250	; 0xfa
    //DEBUG_PRINTLN(p);
    // Assume if the fix status is '1' then we have a 3D fix, otherwise no fix.
    if (p[0] == '1') return 3;
    else return 1;
  }
  if (_type == FONA3G_A || _type == FONA3G_E) {
     30c:	3b04      	subs	r3, #4
    // FONA 3G doesn't have an explicit 2D/3D fix status.
    // Instead just look for a fix and if found assume it's a 3D fix.
    getReply(F("AT+CGPSINFO"));
     30e:	0052      	lsls	r2, r2, #1
    //DEBUG_PRINTLN(p);
    // Assume if the fix status is '1' then we have a 3D fix, otherwise no fix.
    if (p[0] == '1') return 3;
    else return 1;
  }
  if (_type == FONA3G_A || _type == FONA3G_E) {
     310:	2b01      	cmp	r3, #1
     312:	d915      	bls.n	340 <_ZN13Adafruit_FONA9GPSstatusEv+0x7c>
    if (p[10] != ',') return 3; // if you get anything, its 3D fix
    return 0;
  }
  else {
    // 808 V1 looks for specific 2D or 3D fix state.
    getReply(F("AT+CGPSSTATUS?"));
     314:	4917      	ldr	r1, [pc, #92]	; (374 <_ZN13Adafruit_FONA9GPSstatusEv+0xb0>)
     316:	f7ff ffc2 	bl	29e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelpert>
    char *p = prog_char_strstr(replybuffer, (prog_char*)F("SSTATUS: Location "));
     31a:	0028      	movs	r0, r5
     31c:	4916      	ldr	r1, [pc, #88]	; (378 <_ZN13Adafruit_FONA9GPSstatusEv+0xb4>)
     31e:	f00a f8a6 	bl	a46e <strstr>
     322:	1e05      	subs	r5, r0, #0
    if (p == 0) return -1;
     324:	d0e0      	beq.n	2e8 <_ZN13Adafruit_FONA9GPSstatusEv+0x24>
    p+=18;
    readline(); // eat 'OK'
     326:	21fa      	movs	r1, #250	; 0xfa
     328:	2200      	movs	r2, #0
     32a:	0049      	lsls	r1, r1, #1
     32c:	0020      	movs	r0, r4
     32e:	f7ff ff73 	bl	218 <_ZN13Adafruit_FONA8readlineEtb>
    //DEBUG_PRINTLN(p);
    if (p[0] == 'U') return 0;
     332:	7cab      	ldrb	r3, [r5, #18]
     334:	2b55      	cmp	r3, #85	; 0x55
     336:	d00f      	beq.n	358 <_ZN13Adafruit_FONA9GPSstatusEv+0x94>
    if (p[0] == 'N') return 1;
     338:	2b4e      	cmp	r3, #78	; 0x4e
     33a:	d10f      	bne.n	35c <_ZN13Adafruit_FONA9GPSstatusEv+0x98>

    p+=2; // Skip to second value, fix status.
    //DEBUG_PRINTLN(p);
    // Assume if the fix status is '1' then we have a 3D fix, otherwise no fix.
    if (p[0] == '1') return 3;
    else return 1;
     33c:	2001      	movs	r0, #1
     33e:	e013      	b.n	368 <_ZN13Adafruit_FONA9GPSstatusEv+0xa4>
  }
  if (_type == FONA3G_A || _type == FONA3G_E) {
    // FONA 3G doesn't have an explicit 2D/3D fix status.
    // Instead just look for a fix and if found assume it's a 3D fix.
    getReply(F("AT+CGPSINFO"));
     340:	490e      	ldr	r1, [pc, #56]	; (37c <_ZN13Adafruit_FONA9GPSstatusEv+0xb8>)
     342:	f7ff ffac 	bl	29e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelpert>
    char *p = prog_char_strstr(replybuffer, (prog_char*)F("+CGPSINFO:"));
     346:	490e      	ldr	r1, [pc, #56]	; (380 <_ZN13Adafruit_FONA9GPSstatusEv+0xbc>)
     348:	0028      	movs	r0, r5
     34a:	f00a f890 	bl	a46e <strstr>
    if (p == 0) return -1;
     34e:	2800      	cmp	r0, #0
     350:	d0ca      	beq.n	2e8 <_ZN13Adafruit_FONA9GPSstatusEv+0x24>
    if (p[10] != ',') return 3; // if you get anything, its 3D fix
     352:	7a83      	ldrb	r3, [r0, #10]
     354:	2b2c      	cmp	r3, #44	; 0x2c
     356:	d1d6      	bne.n	306 <_ZN13Adafruit_FONA9GPSstatusEv+0x42>
    return 0;
     358:	2000      	movs	r0, #0
     35a:	e005      	b.n	368 <_ZN13Adafruit_FONA9GPSstatusEv+0xa4>
    p+=18;
    readline(); // eat 'OK'
    //DEBUG_PRINTLN(p);
    if (p[0] == 'U') return 0;
    if (p[0] == 'N') return 1;
    if (p[0] == '2') return 2;
     35c:	2002      	movs	r0, #2
     35e:	2b32      	cmp	r3, #50	; 0x32
     360:	d002      	beq.n	368 <_ZN13Adafruit_FONA9GPSstatusEv+0xa4>
    if (p[0] == '3') return 3;
     362:	2b33      	cmp	r3, #51	; 0x33
     364:	d1f8      	bne.n	358 <_ZN13Adafruit_FONA9GPSstatusEv+0x94>
     366:	e7ce      	b.n	306 <_ZN13Adafruit_FONA9GPSstatusEv+0x42>
  }
  // else
  return 0;
}
     368:	bd70      	pop	{r4, r5, r6, pc}
     36a:	46c0      	nop			; (mov r8, r8)
     36c:	0000dba7 	.word	0x0000dba7
     370:	0000dbb2 	.word	0x0000dbb2
     374:	0000dbd4 	.word	0x0000dbd4
     378:	0000dbe3 	.word	0x0000dbe3
     37c:	0000dbbd 	.word	0x0000dbbd
     380:	0000dbc9 	.word	0x0000dbc9

00000384 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlt>:

  return l;
}

// Send prefix, suffix, and newline. Return response (and also set replybuffer with response).
uint8_t Adafruit_FONA::getReply(FONAFlashStringPtr prefix, int32_t suffix, uint16_t timeout) {
     384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     386:	0004      	movs	r4, r0


  DEBUG_PRINT(F("\t---> ")); DEBUG_PRINT(prefix); DEBUG_PRINTLN(suffix, DEC);


  mySerial->print(prefix);
     388:	0025      	movs	r5, r4

  return l;
}

// Send prefix, suffix, and newline. Return response (and also set replybuffer with response).
uint8_t Adafruit_FONA::getReply(FONAFlashStringPtr prefix, int32_t suffix, uint16_t timeout) {
     38a:	0017      	movs	r7, r2
     38c:	001e      	movs	r6, r3


  DEBUG_PRINT(F("\t---> ")); DEBUG_PRINT(prefix); DEBUG_PRINTLN(suffix, DEC);


  mySerial->print(prefix);
     38e:	35fc      	adds	r5, #252	; 0xfc

  return l;
}

// Send prefix, suffix, and newline. Return response (and also set replybuffer with response).
uint8_t Adafruit_FONA::getReply(FONAFlashStringPtr prefix, int32_t suffix, uint16_t timeout) {
     390:	9101      	str	r1, [sp, #4]
  flushInput();
     392:	f7ff ff08 	bl	1a6 <_ZN13Adafruit_FONA10flushInputEv>


  DEBUG_PRINT(F("\t---> ")); DEBUG_PRINT(prefix); DEBUG_PRINTLN(suffix, DEC);


  mySerial->print(prefix);
     396:	9901      	ldr	r1, [sp, #4]
     398:	6b28      	ldr	r0, [r5, #48]	; 0x30
     39a:	f004 f89d 	bl	44d8 <_ZN5Print5printEPK19__FlashStringHelper>
  mySerial->println(suffix, DEC);
     39e:	0039      	movs	r1, r7
     3a0:	6b28      	ldr	r0, [r5, #48]	; 0x30
     3a2:	220a      	movs	r2, #10
     3a4:	f004 f937 	bl	4616 <_ZN5Print7printlnEli>

  uint8_t l = readline(timeout);
     3a8:	0031      	movs	r1, r6
     3aa:	2200      	movs	r2, #0
     3ac:	0020      	movs	r0, r4
     3ae:	f7ff ff33 	bl	218 <_ZN13Adafruit_FONA8readlineEtb>

  DEBUG_PRINT (F("\t<--- ")); DEBUG_PRINTLN(replybuffer);

  return l;
}
     3b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000003b4 <_ZN13Adafruit_FONA6getGPSEhPch>:
  }
  // else
  return 0;
}

uint8_t Adafruit_FONA::getGPS(uint8_t arg, char *buffer, uint8_t maxbuff) {
     3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3b6:	001c      	movs	r4, r3
  int32_t x = arg;

  if ( (_type == FONA3G_A) || (_type == FONA3G_E) ) {
     3b8:	7c43      	ldrb	r3, [r0, #17]
  }
  // else
  return 0;
}

uint8_t Adafruit_FONA::getGPS(uint8_t arg, char *buffer, uint8_t maxbuff) {
     3ba:	0016      	movs	r6, r2
  int32_t x = arg;

  if ( (_type == FONA3G_A) || (_type == FONA3G_E) ) {
     3bc:	1f1a      	subs	r2, r3, #4
  }
  // else
  return 0;
}

uint8_t Adafruit_FONA::getGPS(uint8_t arg, char *buffer, uint8_t maxbuff) {
     3be:	0005      	movs	r5, r0
  int32_t x = arg;

  if ( (_type == FONA3G_A) || (_type == FONA3G_E) ) {
     3c0:	2a01      	cmp	r2, #1
     3c2:	d803      	bhi.n	3cc <_ZN13Adafruit_FONA6getGPSEhPch+0x18>
    getReply(F("AT+CGPSINFO"));
     3c4:	22fa      	movs	r2, #250	; 0xfa
     3c6:	4919      	ldr	r1, [pc, #100]	; (42c <_ZN13Adafruit_FONA6getGPSEhPch+0x78>)
     3c8:	0052      	lsls	r2, r2, #1
     3ca:	e00b      	b.n	3e4 <_ZN13Adafruit_FONA6getGPSEhPch+0x30>
  } else if (_type == FONA808_V1) {
     3cc:	2b02      	cmp	r3, #2
     3ce:	d106      	bne.n	3de <_ZN13Adafruit_FONA6getGPSEhPch+0x2a>
    getReply(F("AT+CGPSINF="), x);
     3d0:	33f3      	adds	r3, #243	; 0xf3
     3d2:	000a      	movs	r2, r1
     3d4:	33ff      	adds	r3, #255	; 0xff
     3d6:	4916      	ldr	r1, [pc, #88]	; (430 <_ZN13Adafruit_FONA6getGPSEhPch+0x7c>)
     3d8:	f7ff ffd4 	bl	384 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlt>
     3dc:	e005      	b.n	3ea <_ZN13Adafruit_FONA6getGPSEhPch+0x36>
  } else {
    getReply(F("AT+CGNSINF"));
     3de:	22fa      	movs	r2, #250	; 0xfa
     3e0:	4914      	ldr	r1, [pc, #80]	; (434 <_ZN13Adafruit_FONA6getGPSEhPch+0x80>)
     3e2:	0052      	lsls	r2, r2, #1
     3e4:	0028      	movs	r0, r5
     3e6:	f7ff ff5a 	bl	29e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelpert>
  }

  char *p = prog_char_strstr(replybuffer, (prog_char*)F("SINF"));
     3ea:	0028      	movs	r0, r5
     3ec:	4912      	ldr	r1, [pc, #72]	; (438 <_ZN13Adafruit_FONA6getGPSEhPch+0x84>)
     3ee:	3012      	adds	r0, #18
     3f0:	f00a f83d 	bl	a46e <strstr>
  if (p == 0) {
     3f4:	2800      	cmp	r0, #0
     3f6:	d101      	bne.n	3fc <_ZN13Adafruit_FONA6getGPSEhPch+0x48>
    buffer[0] = 0;
     3f8:	7030      	strb	r0, [r6, #0]
    return 0;
     3fa:	e015      	b.n	428 <_ZN13Adafruit_FONA6getGPSEhPch+0x74>
  }

  p+=6;
     3fc:	1d87      	adds	r7, r0, #6

  uint8_t len = max(maxbuff-1, strlen(p));
     3fe:	0038      	movs	r0, r7
     400:	f00a f809 	bl	a416 <strlen>
     404:	1e63      	subs	r3, r4, #1
     406:	b2c4      	uxtb	r4, r0
     408:	4283      	cmp	r3, r0
     40a:	d900      	bls.n	40e <_ZN13Adafruit_FONA6getGPSEhPch+0x5a>
     40c:	b2dc      	uxtb	r4, r3
  strncpy(buffer, p, len);
     40e:	0022      	movs	r2, r4
     410:	0039      	movs	r1, r7
     412:	0030      	movs	r0, r6
     414:	f00a f818 	bl	a448 <strncpy>
  buffer[len] = 0;
     418:	2200      	movs	r2, #0

  readline(); // eat 'OK'
     41a:	21fa      	movs	r1, #250	; 0xfa

  p+=6;

  uint8_t len = max(maxbuff-1, strlen(p));
  strncpy(buffer, p, len);
  buffer[len] = 0;
     41c:	5532      	strb	r2, [r6, r4]

  readline(); // eat 'OK'
     41e:	0049      	lsls	r1, r1, #1
     420:	0028      	movs	r0, r5
     422:	f7ff fef9 	bl	218 <_ZN13Adafruit_FONA8readlineEtb>
  return len;
     426:	0020      	movs	r0, r4
}
     428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     42a:	46c0      	nop			; (mov r8, r8)
     42c:	0000dbbd 	.word	0x0000dbbd
     430:	0000dc0f 	.word	0x0000dc0f
     434:	0000dba7 	.word	0x0000dba7
     438:	0000dbad 	.word	0x0000dbad

0000043c <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_>:

boolean Adafruit_FONA::getGPS(double *date, float *lat, float *lon, float *speed_kph, float *heading, float *altitude) {
     43c:	b5f0      	push	{r4, r5, r6, r7, lr}
     43e:	b0a5      	sub	sp, #148	; 0x94
     440:	0004      	movs	r4, r0
     442:	000e      	movs	r6, r1
     444:	9200      	str	r2, [sp, #0]
     446:	9301      	str	r3, [sp, #4]

  char gpsbuffer[120];

  // we need at least a 2D fix
  if (GPSstatus() < 2)
     448:	f7ff ff3c 	bl	2c4 <_ZN13Adafruit_FONA9GPSstatusEv>
     44c:	2801      	cmp	r0, #1
     44e:	dc01      	bgt.n	454 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x18>
    return false;
     450:	2000      	movs	r0, #0
     452:	e22b      	b.n	8ac <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x470>

  // grab the mode 2^5 gps csv from the sim808
  uint8_t res_len = getGPS(32, gpsbuffer, 120);
     454:	2378      	movs	r3, #120	; 0x78
     456:	aa06      	add	r2, sp, #24
     458:	2120      	movs	r1, #32
     45a:	0020      	movs	r0, r4
     45c:	f7ff ffaa 	bl	3b4 <_ZN13Adafruit_FONA6getGPSEhPch>

  // make sure we have a response
  if (res_len == 0)
     460:	2800      	cmp	r0, #0
     462:	d0f5      	beq.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>
    return false;

  if (_type == FONA3G_A || _type == FONA3G_E) {
     464:	7c63      	ldrb	r3, [r4, #17]
     466:	4d92      	ldr	r5, [pc, #584]	; (6b0 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x274>)
     468:	1f1a      	subs	r2, r3, #4
    // +CGPSINFO:4043.000000,N,07400.000000,W,151015,203802.1,-12.0,0.0,0
    // skip beginning
    char *tok;

   // grab the latitude
    char *latp = strtok(gpsbuffer, ",");
     46a:	0029      	movs	r1, r5
     46c:	a806      	add	r0, sp, #24

  // make sure we have a response
  if (res_len == 0)
    return false;

  if (_type == FONA3G_A || _type == FONA3G_E) {
     46e:	2a01      	cmp	r2, #1
     470:	d900      	bls.n	474 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x38>
     472:	e0b6      	b.n	5e2 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x1a6>
    // +CGPSINFO:4043.000000,N,07400.000000,W,151015,203802.1,-12.0,0.0,0
    // skip beginning
    char *tok;

   // grab the latitude
    char *latp = strtok(gpsbuffer, ",");
     474:	f00a fe68 	bl	b148 <strtok>
     478:	1e06      	subs	r6, r0, #0
    if (! latp) return false;
     47a:	d0e9      	beq.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    // grab latitude direction
    char *latdir = strtok(NULL, ",");
     47c:	0029      	movs	r1, r5
     47e:	2000      	movs	r0, #0
     480:	f00a fe62 	bl	b148 <strtok>
     484:	9002      	str	r0, [sp, #8]
    if (! latdir) return false;
     486:	2800      	cmp	r0, #0
     488:	d0e2      	beq.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    // grab longitude
    char *longp = strtok(NULL, ",");
     48a:	0029      	movs	r1, r5
     48c:	2000      	movs	r0, #0
     48e:	f00a fe5b 	bl	b148 <strtok>
     492:	1e04      	subs	r4, r0, #0
    if (! longp) return false;
     494:	d0dc      	beq.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    // grab longitude direction
    char *longdir = strtok(NULL, ",");
     496:	0029      	movs	r1, r5
     498:	2000      	movs	r0, #0
     49a:	f00a fe55 	bl	b148 <strtok>
     49e:	9003      	str	r0, [sp, #12]
    if (! longdir) return false;
     4a0:	2800      	cmp	r0, #0
     4a2:	d0d5      	beq.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    // skip date & time
    tok = strtok(NULL, ",");
     4a4:	0029      	movs	r1, r5
     4a6:	2000      	movs	r0, #0
     4a8:	f00a fe4e 	bl	b148 <strtok>
    tok = strtok(NULL, ",");
     4ac:	0029      	movs	r1, r5
     4ae:	2000      	movs	r0, #0
     4b0:	f00a fe4a 	bl	b148 <strtok>

   // only grab altitude if needed
    if (altitude != NULL) {
     4b4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
     4b6:	2b00      	cmp	r3, #0
     4b8:	d00b      	beq.n	4d2 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x96>
      // grab altitude
      char *altp = strtok(NULL, ",");
     4ba:	0029      	movs	r1, r5
     4bc:	2000      	movs	r0, #0
     4be:	f00a fe43 	bl	b148 <strtok>
      if (! altp) return false;
     4c2:	2800      	cmp	r0, #0
     4c4:	d0c4      	beq.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>
      *altitude = atof(altp);
     4c6:	f009 f845 	bl	9554 <atof>
     4ca:	f008 ff79 	bl	93c0 <__aeabi_d2f>
     4ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
     4d0:	6018      	str	r0, [r3, #0]
    }

    // only grab speed if needed
    if (speed_kph != NULL) {
     4d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
     4d4:	2b00      	cmp	r3, #0
     4d6:	d00b      	beq.n	4f0 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0xb4>
      // grab the speed in km/h
      char *speedp = strtok(NULL, ",");
     4d8:	4975      	ldr	r1, [pc, #468]	; (6b0 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x274>)
     4da:	2000      	movs	r0, #0
     4dc:	f00a fe34 	bl	b148 <strtok>
      if (! speedp) return false;
     4e0:	2800      	cmp	r0, #0
     4e2:	d0b5      	beq.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

      *speed_kph = atof(speedp);
     4e4:	f009 f836 	bl	9554 <atof>
     4e8:	f008 ff6a 	bl	93c0 <__aeabi_d2f>
     4ec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
     4ee:	6018      	str	r0, [r3, #0]
    }

    // only grab heading if needed
    if (heading != NULL) {
     4f0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
     4f2:	2b00      	cmp	r3, #0
     4f4:	d00b      	beq.n	50e <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0xd2>

      // grab the speed in knots
      char *coursep = strtok(NULL, ",");
     4f6:	496e      	ldr	r1, [pc, #440]	; (6b0 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x274>)
     4f8:	2000      	movs	r0, #0
     4fa:	f00a fe25 	bl	b148 <strtok>
      if (! coursep) return false;
     4fe:	2800      	cmp	r0, #0
     500:	d0a6      	beq.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

      *heading = atof(coursep);
     502:	f009 f827 	bl	9554 <atof>
     506:	f008 ff5b 	bl	93c0 <__aeabi_d2f>
     50a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
     50c:	6018      	str	r0, [r3, #0]
    }

    double latitude = atof(latp);
     50e:	0030      	movs	r0, r6
     510:	f009 f820 	bl	9554 <atof>
     514:	0006      	movs	r6, r0
    double longitude = atof(longp);
     516:	0020      	movs	r0, r4
      if (! coursep) return false;

      *heading = atof(coursep);
    }

    double latitude = atof(latp);
     518:	000f      	movs	r7, r1
    double longitude = atof(longp);
     51a:	f009 f81b 	bl	9554 <atof>

    // convert latitude from minutes to decimal
    float degrees = floor(latitude / 100);
     51e:	2200      	movs	r2, #0
     520:	4b64      	ldr	r3, [pc, #400]	; (6b4 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x278>)

      *heading = atof(coursep);
    }

    double latitude = atof(latp);
    double longitude = atof(longp);
     522:	0004      	movs	r4, r0
     524:	000d      	movs	r5, r1

    // convert latitude from minutes to decimal
    float degrees = floor(latitude / 100);
     526:	0030      	movs	r0, r6
     528:	0039      	movs	r1, r7
     52a:	f007 fc75 	bl	7e18 <__aeabi_ddiv>
     52e:	f006 f991 	bl	6854 <floor>
     532:	f008 ff45 	bl	93c0 <__aeabi_d2f>
    double minutes = latitude - (100 * degrees);
     536:	4960      	ldr	r1, [pc, #384]	; (6b8 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x27c>)

    double latitude = atof(latp);
    double longitude = atof(longp);

    // convert latitude from minutes to decimal
    float degrees = floor(latitude / 100);
     538:	9004      	str	r0, [sp, #16]
    double minutes = latitude - (100 * degrees);
     53a:	f006 fe5f 	bl	71fc <__aeabi_fmul>
     53e:	f008 feeb 	bl	9318 <__aeabi_f2d>
     542:	0002      	movs	r2, r0
     544:	000b      	movs	r3, r1
     546:	0030      	movs	r0, r6
     548:	0039      	movs	r1, r7
     54a:	f008 fb03 	bl	8b54 <__aeabi_dsub>
    minutes /= 60;
    degrees += minutes;
     54e:	2200      	movs	r2, #0
     550:	4b5a      	ldr	r3, [pc, #360]	; (6bc <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x280>)
     552:	f007 fc61 	bl	7e18 <__aeabi_ddiv>
     556:	0006      	movs	r6, r0
     558:	9804      	ldr	r0, [sp, #16]
     55a:	000f      	movs	r7, r1
     55c:	f008 fedc 	bl	9318 <__aeabi_f2d>
     560:	000b      	movs	r3, r1
     562:	0002      	movs	r2, r0
     564:	0039      	movs	r1, r7
     566:	0030      	movs	r0, r6
     568:	f007 f92a 	bl	77c0 <__aeabi_dadd>
     56c:	f008 ff28 	bl	93c0 <__aeabi_d2f>

    // turn direction into + or -
    if (latdir[0] == 'S') degrees *= -1;
     570:	9b02      	ldr	r3, [sp, #8]
     572:	781b      	ldrb	r3, [r3, #0]
     574:	2b53      	cmp	r3, #83	; 0x53
     576:	d102      	bne.n	57e <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x142>
     578:	2380      	movs	r3, #128	; 0x80
     57a:	061b      	lsls	r3, r3, #24
     57c:	18c0      	adds	r0, r0, r3

    *lat = degrees;
     57e:	9b00      	ldr	r3, [sp, #0]

    // convert longitude from minutes to decimal
    degrees = floor(longitude / 100);
     580:	2200      	movs	r2, #0
    degrees += minutes;

    // turn direction into + or -
    if (latdir[0] == 'S') degrees *= -1;

    *lat = degrees;
     582:	6018      	str	r0, [r3, #0]

    // convert longitude from minutes to decimal
    degrees = floor(longitude / 100);
     584:	0029      	movs	r1, r5
     586:	4b4b      	ldr	r3, [pc, #300]	; (6b4 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x278>)
     588:	0020      	movs	r0, r4
     58a:	f007 fc45 	bl	7e18 <__aeabi_ddiv>
     58e:	f006 f961 	bl	6854 <floor>
     592:	f008 ff15 	bl	93c0 <__aeabi_d2f>
    minutes = longitude - (100 * degrees);
     596:	4948      	ldr	r1, [pc, #288]	; (6b8 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x27c>)
    if (latdir[0] == 'S') degrees *= -1;

    *lat = degrees;

    // convert longitude from minutes to decimal
    degrees = floor(longitude / 100);
     598:	1c06      	adds	r6, r0, #0
    minutes = longitude - (100 * degrees);
     59a:	f006 fe2f 	bl	71fc <__aeabi_fmul>
     59e:	f008 febb 	bl	9318 <__aeabi_f2d>
     5a2:	0002      	movs	r2, r0
     5a4:	000b      	movs	r3, r1
     5a6:	0020      	movs	r0, r4
     5a8:	0029      	movs	r1, r5
     5aa:	f008 fad3 	bl	8b54 <__aeabi_dsub>
    minutes /= 60;
    degrees += minutes;
     5ae:	2200      	movs	r2, #0
     5b0:	4b42      	ldr	r3, [pc, #264]	; (6bc <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x280>)
     5b2:	f007 fc31 	bl	7e18 <__aeabi_ddiv>
     5b6:	0004      	movs	r4, r0
     5b8:	1c30      	adds	r0, r6, #0
     5ba:	000d      	movs	r5, r1
     5bc:	f008 feac 	bl	9318 <__aeabi_f2d>
     5c0:	000b      	movs	r3, r1
     5c2:	0002      	movs	r2, r0
     5c4:	0029      	movs	r1, r5
     5c6:	0020      	movs	r0, r4
     5c8:	f007 f8fa 	bl	77c0 <__aeabi_dadd>
     5cc:	f008 fef8 	bl	93c0 <__aeabi_d2f>

    // turn direction into + or -
    if (longdir[0] == 'W') degrees *= -1;
     5d0:	9b03      	ldr	r3, [sp, #12]
     5d2:	781b      	ldrb	r3, [r3, #0]
     5d4:	2b57      	cmp	r3, #87	; 0x57
     5d6:	d102      	bne.n	5de <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x1a2>
     5d8:	2380      	movs	r3, #128	; 0x80
     5da:	061b      	lsls	r3, r3, #24
     5dc:	18c0      	adds	r0, r0, r3

    *lon = degrees;
     5de:	9b01      	ldr	r3, [sp, #4]
     5e0:	e162      	b.n	8a8 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x46c>

  } else if (_type == FONA808_V2) {
     5e2:	2b03      	cmp	r3, #3
     5e4:	d16c      	bne.n	6c0 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x284>
    // Parse 808 V2 response.  See table 2-3 from here for format:
    // http://www.adafruit.com/datasheets/SIM800%20Series_GNSS_Application%20Note%20V1.00.pdf

    // skip GPS run status
    char *tok = strtok(gpsbuffer, ",");
     5e6:	f00a fdaf 	bl	b148 <strtok>
    if (! tok) return false;
     5ea:	2800      	cmp	r0, #0
     5ec:	d100      	bne.n	5f0 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x1b4>
     5ee:	e72f      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    // skip fix status
    tok = strtok(NULL, ",");
     5f0:	0029      	movs	r1, r5
     5f2:	2000      	movs	r0, #0
     5f4:	f00a fda8 	bl	b148 <strtok>
    if (! tok) return false;
     5f8:	2800      	cmp	r0, #0
     5fa:	d100      	bne.n	5fe <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x1c2>
     5fc:	e728      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    // skip date
    char *datep = strtok(NULL, ",");
     5fe:	0029      	movs	r1, r5
     600:	2000      	movs	r0, #0
     602:	f00a fda1 	bl	b148 <strtok>
    if (! datep) return false;
     606:	2800      	cmp	r0, #0
     608:	d100      	bne.n	60c <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x1d0>
     60a:	e721      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>
    *date = atof(datep);
     60c:	f008 ffa2 	bl	9554 <atof>
     610:	6030      	str	r0, [r6, #0]
     612:	6071      	str	r1, [r6, #4]

    // grab the latitude
    char *latp = strtok(NULL, ",");
     614:	0029      	movs	r1, r5
     616:	2000      	movs	r0, #0
     618:	f00a fd96 	bl	b148 <strtok>
     61c:	1e04      	subs	r4, r0, #0
    if (! latp) return false;
     61e:	d100      	bne.n	622 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x1e6>
     620:	e716      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    // grab longitude
    char *longp = strtok(NULL, ",");
     622:	0029      	movs	r1, r5
     624:	2000      	movs	r0, #0
     626:	f00a fd8f 	bl	b148 <strtok>
     62a:	1e05      	subs	r5, r0, #0
    if (! longp) return false;
     62c:	d100      	bne.n	630 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x1f4>
     62e:	e70f      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    *lat = atof(latp);
     630:	0020      	movs	r0, r4
     632:	f008 ff8f 	bl	9554 <atof>
     636:	f008 fec3 	bl	93c0 <__aeabi_d2f>
     63a:	9b00      	ldr	r3, [sp, #0]
     63c:	6018      	str	r0, [r3, #0]
    *lon = atof(longp);
     63e:	0028      	movs	r0, r5
     640:	f008 ff88 	bl	9554 <atof>
     644:	f008 febc 	bl	93c0 <__aeabi_d2f>
     648:	9b01      	ldr	r3, [sp, #4]
     64a:	6018      	str	r0, [r3, #0]

    // only grab altitude if needed
    if (altitude != NULL) {
     64c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
     64e:	2b00      	cmp	r3, #0
     650:	d00c      	beq.n	66c <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x230>
      // grab altitude
      char *altp = strtok(NULL, ",");
     652:	4917      	ldr	r1, [pc, #92]	; (6b0 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x274>)
     654:	2000      	movs	r0, #0
     656:	f00a fd77 	bl	b148 <strtok>
      if (! altp) return false;
     65a:	2800      	cmp	r0, #0
     65c:	d100      	bne.n	660 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x224>
     65e:	e6f7      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

      *altitude = atof(altp);
     660:	f008 ff78 	bl	9554 <atof>
     664:	f008 feac 	bl	93c0 <__aeabi_d2f>
     668:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
     66a:	6018      	str	r0, [r3, #0]
    }

    // only grab speed if needed
    if (speed_kph != NULL) {
     66c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
     66e:	2b00      	cmp	r3, #0
     670:	d00c      	beq.n	68c <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x250>
      // grab the speed in km/h
      char *speedp = strtok(NULL, ",");
     672:	490f      	ldr	r1, [pc, #60]	; (6b0 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x274>)
     674:	2000      	movs	r0, #0
     676:	f00a fd67 	bl	b148 <strtok>
      if (! speedp) return false;
     67a:	2800      	cmp	r0, #0
     67c:	d100      	bne.n	680 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x244>
     67e:	e6e7      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

      *speed_kph = atof(speedp);
     680:	f008 ff68 	bl	9554 <atof>
     684:	f008 fe9c 	bl	93c0 <__aeabi_d2f>
     688:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
     68a:	6018      	str	r0, [r3, #0]
    }

    // only grab heading if needed
    if (heading != NULL) {
     68c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    if (! altp) return false;

    *altitude = atof(altp);
  }

  return true;
     68e:	2001      	movs	r0, #1

      *speed_kph = atof(speedp);
    }

    // only grab heading if needed
    if (heading != NULL) {
     690:	2b00      	cmp	r3, #0
     692:	d100      	bne.n	696 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x25a>
     694:	e10a      	b.n	8ac <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x470>

      // grab the speed in knots
      char *coursep = strtok(NULL, ",");
     696:	4906      	ldr	r1, [pc, #24]	; (6b0 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x274>)
     698:	2000      	movs	r0, #0
     69a:	f00a fd55 	bl	b148 <strtok>
      if (! coursep) return false;
     69e:	2800      	cmp	r0, #0
     6a0:	d100      	bne.n	6a4 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x268>
     6a2:	e6d5      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

      *heading = atof(coursep);
     6a4:	f008 ff56 	bl	9554 <atof>
     6a8:	f008 fe8a 	bl	93c0 <__aeabi_d2f>
     6ac:	9b2b      	ldr	r3, [sp, #172]	; 0xac
     6ae:	e0fb      	b.n	8a8 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x46c>
     6b0:	0000dee7 	.word	0x0000dee7
     6b4:	40590000 	.word	0x40590000
     6b8:	42c80000 	.word	0x42c80000
     6bc:	404e0000 	.word	0x404e0000
  }
  else {
    // Parse 808 V1 response.

    // skip mode
    char *tok = strtok(gpsbuffer, ",");
     6c0:	f00a fd42 	bl	b148 <strtok>
    if (! tok) return false;
     6c4:	2800      	cmp	r0, #0
     6c6:	d100      	bne.n	6ca <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x28e>
     6c8:	e6c2      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    // skip date
    tok = strtok(NULL, ",");
     6ca:	0029      	movs	r1, r5
     6cc:	2000      	movs	r0, #0
     6ce:	f00a fd3b 	bl	b148 <strtok>
    if (! tok) return false;
     6d2:	2800      	cmp	r0, #0
     6d4:	d100      	bne.n	6d8 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x29c>
     6d6:	e6bb      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    // skip fix
    tok = strtok(NULL, ",");
     6d8:	0029      	movs	r1, r5
     6da:	2000      	movs	r0, #0
     6dc:	f00a fd34 	bl	b148 <strtok>
    if (! tok) return false;
     6e0:	2800      	cmp	r0, #0
     6e2:	d100      	bne.n	6e6 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x2aa>
     6e4:	e6b4      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    // grab the latitude
    char *latp = strtok(NULL, ",");
     6e6:	0029      	movs	r1, r5
     6e8:	2000      	movs	r0, #0
     6ea:	f00a fd2d 	bl	b148 <strtok>
     6ee:	1e06      	subs	r6, r0, #0
    if (! latp) return false;
     6f0:	d100      	bne.n	6f4 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x2b8>
     6f2:	e6ad      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    // grab latitude direction
    char *latdir = strtok(NULL, ",");
     6f4:	0029      	movs	r1, r5
     6f6:	2000      	movs	r0, #0
     6f8:	f00a fd26 	bl	b148 <strtok>
     6fc:	9002      	str	r0, [sp, #8]
    if (! latdir) return false;
     6fe:	2800      	cmp	r0, #0
     700:	d100      	bne.n	704 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x2c8>
     702:	e6a5      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    // grab longitude
    char *longp = strtok(NULL, ",");
     704:	0029      	movs	r1, r5
     706:	2000      	movs	r0, #0
     708:	f00a fd1e 	bl	b148 <strtok>
     70c:	1e05      	subs	r5, r0, #0
    if (! longp) return false;
     70e:	d100      	bne.n	712 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x2d6>
     710:	e69e      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    // grab longitude direction
    char *longdir = strtok(NULL, ",");
     712:	4967      	ldr	r1, [pc, #412]	; (8b0 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x474>)
     714:	2000      	movs	r0, #0
     716:	f00a fd17 	bl	b148 <strtok>
     71a:	9003      	str	r0, [sp, #12]
    if (! longdir) return false;
     71c:	2800      	cmp	r0, #0
     71e:	d100      	bne.n	722 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x2e6>
     720:	e696      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    double latitude = atof(latp);
     722:	0030      	movs	r0, r6
     724:	f008 ff16 	bl	9554 <atof>
     728:	0006      	movs	r6, r0
    double longitude = atof(longp);
     72a:	0028      	movs	r0, r5

    // grab longitude direction
    char *longdir = strtok(NULL, ",");
    if (! longdir) return false;

    double latitude = atof(latp);
     72c:	000f      	movs	r7, r1
    double longitude = atof(longp);
     72e:	f008 ff11 	bl	9554 <atof>

    // convert latitude from minutes to decimal
    float degrees = floor(latitude / 100);
     732:	2200      	movs	r2, #0
     734:	4b5f      	ldr	r3, [pc, #380]	; (8b4 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x478>)
    // grab longitude direction
    char *longdir = strtok(NULL, ",");
    if (! longdir) return false;

    double latitude = atof(latp);
    double longitude = atof(longp);
     736:	9004      	str	r0, [sp, #16]
     738:	9105      	str	r1, [sp, #20]

    // convert latitude from minutes to decimal
    float degrees = floor(latitude / 100);
     73a:	0030      	movs	r0, r6
     73c:	0039      	movs	r1, r7
     73e:	f007 fb6b 	bl	7e18 <__aeabi_ddiv>
     742:	f006 f887 	bl	6854 <floor>
     746:	f008 fe3b 	bl	93c0 <__aeabi_d2f>
    double minutes = latitude - (100 * degrees);
     74a:	495b      	ldr	r1, [pc, #364]	; (8b8 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x47c>)

    double latitude = atof(latp);
    double longitude = atof(longp);

    // convert latitude from minutes to decimal
    float degrees = floor(latitude / 100);
     74c:	1c05      	adds	r5, r0, #0
    double minutes = latitude - (100 * degrees);
     74e:	f006 fd55 	bl	71fc <__aeabi_fmul>
     752:	f008 fde1 	bl	9318 <__aeabi_f2d>
     756:	0002      	movs	r2, r0
     758:	000b      	movs	r3, r1
     75a:	0030      	movs	r0, r6
     75c:	0039      	movs	r1, r7
     75e:	f008 f9f9 	bl	8b54 <__aeabi_dsub>
    minutes /= 60;
    degrees += minutes;
     762:	2200      	movs	r2, #0
     764:	4b55      	ldr	r3, [pc, #340]	; (8bc <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x480>)
     766:	f007 fb57 	bl	7e18 <__aeabi_ddiv>
     76a:	0006      	movs	r6, r0
     76c:	1c28      	adds	r0, r5, #0
     76e:	000f      	movs	r7, r1
     770:	f008 fdd2 	bl	9318 <__aeabi_f2d>
     774:	000b      	movs	r3, r1
     776:	0002      	movs	r2, r0
     778:	0039      	movs	r1, r7
     77a:	0030      	movs	r0, r6
     77c:	f007 f820 	bl	77c0 <__aeabi_dadd>
     780:	f008 fe1e 	bl	93c0 <__aeabi_d2f>

    // turn direction into + or -
    if (latdir[0] == 'S') degrees *= -1;
     784:	9b02      	ldr	r3, [sp, #8]
     786:	781b      	ldrb	r3, [r3, #0]
     788:	2b53      	cmp	r3, #83	; 0x53
     78a:	d102      	bne.n	792 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x356>
     78c:	2380      	movs	r3, #128	; 0x80
     78e:	061b      	lsls	r3, r3, #24
     790:	18c0      	adds	r0, r0, r3

    *lat = degrees;
     792:	9b00      	ldr	r3, [sp, #0]

    // convert longitude from minutes to decimal
    degrees = floor(longitude / 100);
     794:	2200      	movs	r2, #0
    degrees += minutes;

    // turn direction into + or -
    if (latdir[0] == 'S') degrees *= -1;

    *lat = degrees;
     796:	6018      	str	r0, [r3, #0]

    // convert longitude from minutes to decimal
    degrees = floor(longitude / 100);
     798:	4b46      	ldr	r3, [pc, #280]	; (8b4 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x478>)
     79a:	9804      	ldr	r0, [sp, #16]
     79c:	9905      	ldr	r1, [sp, #20]
     79e:	f007 fb3b 	bl	7e18 <__aeabi_ddiv>
     7a2:	f006 f857 	bl	6854 <floor>
     7a6:	f008 fe0b 	bl	93c0 <__aeabi_d2f>
    minutes = longitude - (100 * degrees);
     7aa:	4943      	ldr	r1, [pc, #268]	; (8b8 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x47c>)
    if (latdir[0] == 'S') degrees *= -1;

    *lat = degrees;

    // convert longitude from minutes to decimal
    degrees = floor(longitude / 100);
     7ac:	1c05      	adds	r5, r0, #0
    minutes = longitude - (100 * degrees);
     7ae:	f006 fd25 	bl	71fc <__aeabi_fmul>
     7b2:	f008 fdb1 	bl	9318 <__aeabi_f2d>
     7b6:	0002      	movs	r2, r0
     7b8:	000b      	movs	r3, r1
     7ba:	9804      	ldr	r0, [sp, #16]
     7bc:	9905      	ldr	r1, [sp, #20]
     7be:	f008 f9c9 	bl	8b54 <__aeabi_dsub>
    minutes /= 60;
    degrees += minutes;
     7c2:	2200      	movs	r2, #0
     7c4:	4b3d      	ldr	r3, [pc, #244]	; (8bc <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x480>)
     7c6:	f007 fb27 	bl	7e18 <__aeabi_ddiv>
     7ca:	0006      	movs	r6, r0
     7cc:	1c28      	adds	r0, r5, #0
     7ce:	000f      	movs	r7, r1
     7d0:	f008 fda2 	bl	9318 <__aeabi_f2d>
     7d4:	000b      	movs	r3, r1
     7d6:	0002      	movs	r2, r0
     7d8:	0039      	movs	r1, r7
     7da:	0030      	movs	r0, r6
     7dc:	f006 fff0 	bl	77c0 <__aeabi_dadd>
     7e0:	f008 fdee 	bl	93c0 <__aeabi_d2f>

    // turn direction into + or -
    if (longdir[0] == 'W') degrees *= -1;
     7e4:	9b03      	ldr	r3, [sp, #12]
     7e6:	781b      	ldrb	r3, [r3, #0]
     7e8:	2b57      	cmp	r3, #87	; 0x57
     7ea:	d102      	bne.n	7f2 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x3b6>
     7ec:	2380      	movs	r3, #128	; 0x80
     7ee:	061b      	lsls	r3, r3, #24
     7f0:	18c0      	adds	r0, r0, r3

    *lon = degrees;
     7f2:	9b01      	ldr	r3, [sp, #4]
     7f4:	6018      	str	r0, [r3, #0]

    // only grab speed if needed
    if (speed_kph != NULL) {
     7f6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
     7f8:	2b00      	cmp	r3, #0
     7fa:	d010      	beq.n	81e <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x3e2>

      // grab the speed in knots
      char *speedp = strtok(NULL, ",");
     7fc:	492c      	ldr	r1, [pc, #176]	; (8b0 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x474>)
     7fe:	2000      	movs	r0, #0
     800:	f00a fca2 	bl	b148 <strtok>
      if (! speedp) return false;
     804:	2800      	cmp	r0, #0
     806:	d100      	bne.n	80a <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x3ce>
     808:	e622      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

      // convert to kph
      *speed_kph = atof(speedp) * 1.852;
     80a:	f008 fea3 	bl	9554 <atof>
     80e:	4b2c      	ldr	r3, [pc, #176]	; (8c0 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x484>)
     810:	4a2c      	ldr	r2, [pc, #176]	; (8c4 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x488>)
     812:	f007 ff25 	bl	8660 <__aeabi_dmul>
     816:	f008 fdd3 	bl	93c0 <__aeabi_d2f>
     81a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
     81c:	6018      	str	r0, [r3, #0]

    }

    // only grab heading if needed
    if (heading != NULL) {
     81e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
     820:	2b00      	cmp	r3, #0
     822:	d00c      	beq.n	83e <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x402>

      // grab the speed in knots
      char *coursep = strtok(NULL, ",");
     824:	4922      	ldr	r1, [pc, #136]	; (8b0 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x474>)
     826:	2000      	movs	r0, #0
     828:	f00a fc8e 	bl	b148 <strtok>
      if (! coursep) return false;
     82c:	2800      	cmp	r0, #0
     82e:	d100      	bne.n	832 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x3f6>
     830:	e60e      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

      *heading = atof(coursep);
     832:	f008 fe8f 	bl	9554 <atof>
     836:	f008 fdc3 	bl	93c0 <__aeabi_d2f>
     83a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
     83c:	6018      	str	r0, [r3, #0]

    }

    // no need to continue
    if (altitude == NULL)
     83e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
      return true;
     840:	2001      	movs	r0, #1
      *heading = atof(coursep);

    }

    // no need to continue
    if (altitude == NULL)
     842:	2b00      	cmp	r3, #0
     844:	d032      	beq.n	8ac <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x470>
      return true;

    // we need at least a 3D fix for altitude
    if (GPSstatus() < 3)
     846:	0020      	movs	r0, r4
     848:	f7ff fd3c 	bl	2c4 <_ZN13Adafruit_FONA9GPSstatusEv>
     84c:	2802      	cmp	r0, #2
     84e:	dc00      	bgt.n	852 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x416>
     850:	e5fe      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>
      return false;

    // grab the mode 0 gps csv from the sim808
    res_len = getGPS(0, gpsbuffer, 120);
     852:	2378      	movs	r3, #120	; 0x78
     854:	aa06      	add	r2, sp, #24
     856:	2100      	movs	r1, #0
     858:	0020      	movs	r0, r4
     85a:	f7ff fdab 	bl	3b4 <_ZN13Adafruit_FONA6getGPSEhPch>

    // make sure we have a response
    if (res_len == 0)
     85e:	2800      	cmp	r0, #0
     860:	d100      	bne.n	864 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x428>
     862:	e5f5      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>
      return false;

    // skip mode
    tok = strtok(gpsbuffer, ",");
     864:	4c12      	ldr	r4, [pc, #72]	; (8b0 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x474>)
     866:	a806      	add	r0, sp, #24
     868:	0021      	movs	r1, r4
     86a:	f00a fc6d 	bl	b148 <strtok>
    if (! tok) return false;
     86e:	2800      	cmp	r0, #0
     870:	d100      	bne.n	874 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x438>
     872:	e5ed      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    // skip lat
    tok = strtok(NULL, ",");
     874:	0021      	movs	r1, r4
     876:	2000      	movs	r0, #0
     878:	f00a fc66 	bl	b148 <strtok>
    if (! tok) return false;
     87c:	2800      	cmp	r0, #0
     87e:	d100      	bne.n	882 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x446>
     880:	e5e6      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    // skip long
    tok = strtok(NULL, ",");
     882:	0021      	movs	r1, r4
     884:	2000      	movs	r0, #0
     886:	f00a fc5f 	bl	b148 <strtok>
    if (! tok) return false;
     88a:	2800      	cmp	r0, #0
     88c:	d100      	bne.n	890 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x454>
     88e:	e5df      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    // grab altitude
    char *altp = strtok(NULL, ",");
     890:	0021      	movs	r1, r4
     892:	2000      	movs	r0, #0
     894:	f00a fc58 	bl	b148 <strtok>
    if (! altp) return false;
     898:	2800      	cmp	r0, #0
     89a:	d100      	bne.n	89e <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x462>
     89c:	e5d8      	b.n	450 <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_+0x14>

    *altitude = atof(altp);
     89e:	f008 fe59 	bl	9554 <atof>
     8a2:	f008 fd8d 	bl	93c0 <__aeabi_d2f>
     8a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
     8a8:	6018      	str	r0, [r3, #0]
  }

  return true;
     8aa:	2001      	movs	r0, #1

}
     8ac:	b025      	add	sp, #148	; 0x94
     8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8b0:	0000dee7 	.word	0x0000dee7
     8b4:	40590000 	.word	0x40590000
     8b8:	42c80000 	.word	0x42c80000
     8bc:	404e0000 	.word	0x404e0000
     8c0:	3ffda1ca 	.word	0x3ffda1ca
     8c4:	c083126f 	.word	0xc083126f

000008c8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t>:
  DEBUG_PRINTLN();
  */
  return (strcmp(replybuffer, reply) == 0);
}

boolean Adafruit_FONA::sendCheckReply(FONAFlashStringPtr send, FONAFlashStringPtr reply, uint16_t timeout) {
     8c8:	b570      	push	{r4, r5, r6, lr}
     8ca:	0015      	movs	r5, r2
	if (! getReply(send, timeout) )
     8cc:	001a      	movs	r2, r3
  DEBUG_PRINTLN();
  */
  return (strcmp(replybuffer, reply) == 0);
}

boolean Adafruit_FONA::sendCheckReply(FONAFlashStringPtr send, FONAFlashStringPtr reply, uint16_t timeout) {
     8ce:	0004      	movs	r4, r0
	if (! getReply(send, timeout) )
     8d0:	f7ff fce5 	bl	29e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelpert>
		return false;
     8d4:	2300      	movs	r3, #0
  */
  return (strcmp(replybuffer, reply) == 0);
}

boolean Adafruit_FONA::sendCheckReply(FONAFlashStringPtr send, FONAFlashStringPtr reply, uint16_t timeout) {
	if (! getReply(send, timeout) )
     8d6:	4298      	cmp	r0, r3
     8d8:	d007      	beq.n	8ea <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t+0x22>
}

boolean Adafruit_FONA::sendCheckReply(char* send, FONAFlashStringPtr reply, uint16_t timeout) {
  if (! getReply(send, timeout) )
	  return false;
  return (prog_char_strcmp(replybuffer, (prog_char*)reply) == 0);
     8da:	0020      	movs	r0, r4
     8dc:	0029      	movs	r1, r5
     8de:	3012      	adds	r0, #18
     8e0:	f009 fd87 	bl	a3f2 <strcmp>
     8e4:	4243      	negs	r3, r0
     8e6:	4143      	adcs	r3, r0
     8e8:	b2db      	uxtb	r3, r3
boolean Adafruit_FONA::sendCheckReply(FONAFlashStringPtr send, FONAFlashStringPtr reply, uint16_t timeout) {
	if (! getReply(send, timeout) )
		return false;

  return (prog_char_strcmp(replybuffer, (prog_char*)reply) == 0);
}
     8ea:	0018      	movs	r0, r3
     8ec:	bd70      	pop	{r4, r5, r6, pc}
	...

000008f0 <_ZN13Adafruit_FONA5beginER6Stream>:

uint8_t Adafruit_FONA::type(void) {
  return _type;
}

boolean Adafruit_FONA::begin(Stream &port) {
     8f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  mySerial = &port;
     8f2:	0005      	movs	r5, r0

uint8_t Adafruit_FONA::type(void) {
  return _type;
}

boolean Adafruit_FONA::begin(Stream &port) {
     8f4:	0004      	movs	r4, r0
  mySerial = &port;

  pinMode(_rstpin, OUTPUT);
     8f6:	2010      	movs	r0, #16
uint8_t Adafruit_FONA::type(void) {
  return _type;
}

boolean Adafruit_FONA::begin(Stream &port) {
  mySerial = &port;
     8f8:	35fc      	adds	r5, #252	; 0xfc
     8fa:	6329      	str	r1, [r5, #48]	; 0x30

  pinMode(_rstpin, OUTPUT);
     8fc:	5620      	ldrsb	r0, [r4, r0]
     8fe:	2101      	movs	r1, #1
     900:	f005 fbf0 	bl	60e4 <pinMode>
  digitalWrite(_rstpin, HIGH);
     904:	2010      	movs	r0, #16
     906:	2101      	movs	r1, #1
     908:	5620      	ldrsb	r0, [r4, r0]
     90a:	f005 fc3f 	bl	618c <digitalWrite>
  delay(10);
     90e:	200a      	movs	r0, #10
     910:	f003 fd34 	bl	437c <delay>
  digitalWrite(_rstpin, LOW);
     914:	2010      	movs	r0, #16
     916:	2100      	movs	r1, #0
     918:	5620      	ldrsb	r0, [r4, r0]
     91a:	f005 fc37 	bl	618c <digitalWrite>
  delay(100);
     91e:	2064      	movs	r0, #100	; 0x64
     920:	f003 fd2c 	bl	437c <delay>
  digitalWrite(_rstpin, HIGH);
     924:	2010      	movs	r0, #16
     926:	2101      	movs	r1, #1
     928:	5620      	ldrsb	r0, [r4, r0]
     92a:	f005 fc2f 	bl	618c <digitalWrite>
     92e:	270e      	movs	r7, #14
  DEBUG_PRINTLN(F("Attempting to open comm with ATs"));
  // give 7 seconds to reboot
  int16_t timeout = 7000;

  while (timeout > 0) {
    while (mySerial->available()) mySerial->read();
     930:	6b28      	ldr	r0, [r5, #48]	; 0x30
     932:	6803      	ldr	r3, [r0, #0]
     934:	689b      	ldr	r3, [r3, #8]
     936:	4798      	blx	r3
     938:	2800      	cmp	r0, #0
     93a:	d004      	beq.n	946 <_ZN13Adafruit_FONA5beginER6Stream+0x56>
     93c:	6b28      	ldr	r0, [r5, #48]	; 0x30
     93e:	6803      	ldr	r3, [r0, #0]
     940:	68db      	ldr	r3, [r3, #12]
     942:	4798      	blx	r3
     944:	e7f4      	b.n	930 <_ZN13Adafruit_FONA5beginER6Stream+0x40>
    if (sendCheckReply(F("AT"), ok_reply))
     946:	23fa      	movs	r3, #250	; 0xfa
     948:	4e59      	ldr	r6, [pc, #356]	; (ab0 <_ZN13Adafruit_FONA5beginER6Stream+0x1c0>)
     94a:	005b      	lsls	r3, r3, #1
     94c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     94e:	0031      	movs	r1, r6
     950:	0020      	movs	r0, r4
     952:	f7ff ffb9 	bl	8c8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t>
     956:	2800      	cmp	r0, #0
     958:	d139      	bne.n	9ce <_ZN13Adafruit_FONA5beginER6Stream+0xde>
      break;
    while (mySerial->available()) mySerial->read();
     95a:	6b28      	ldr	r0, [r5, #48]	; 0x30
     95c:	6803      	ldr	r3, [r0, #0]
     95e:	689b      	ldr	r3, [r3, #8]
     960:	4798      	blx	r3
     962:	2800      	cmp	r0, #0
     964:	d004      	beq.n	970 <_ZN13Adafruit_FONA5beginER6Stream+0x80>
     966:	6b28      	ldr	r0, [r5, #48]	; 0x30
     968:	6803      	ldr	r3, [r0, #0]
     96a:	68db      	ldr	r3, [r3, #12]
     96c:	4798      	blx	r3
     96e:	e7f4      	b.n	95a <_ZN13Adafruit_FONA5beginER6Stream+0x6a>
    if (sendCheckReply(F("AT"), F("AT"))) 
     970:	23fa      	movs	r3, #250	; 0xfa
     972:	0032      	movs	r2, r6
     974:	005b      	lsls	r3, r3, #1
     976:	0031      	movs	r1, r6
     978:	0020      	movs	r0, r4
     97a:	f7ff ffa5 	bl	8c8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t>
     97e:	2800      	cmp	r0, #0
     980:	d125      	bne.n	9ce <_ZN13Adafruit_FONA5beginER6Stream+0xde>
      break;
    delay(500);
     982:	30f5      	adds	r0, #245	; 0xf5
     984:	3f01      	subs	r7, #1
     986:	30ff      	adds	r0, #255	; 0xff
     988:	b2bf      	uxth	r7, r7
     98a:	f003 fcf7 	bl	437c <delay>
  digitalWrite(_rstpin, HIGH);
  DEBUG_PRINTLN(F("Attempting to open comm with ATs"));
  // give 7 seconds to reboot
  int16_t timeout = 7000;

  while (timeout > 0) {
     98e:	2f00      	cmp	r7, #0
     990:	d1ce      	bne.n	930 <_ZN13Adafruit_FONA5beginER6Stream+0x40>

  if (timeout <= 0) {
#ifdef ADAFRUIT_FONA_DEBUG
    DEBUG_PRINTLN(F("Timeout: No response to AT... last ditch attempt."));
#endif
    sendCheckReply(F("AT"), ok_reply);
     992:	23fa      	movs	r3, #250	; 0xfa
     994:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     996:	005b      	lsls	r3, r3, #1
     998:	0031      	movs	r1, r6
     99a:	0020      	movs	r0, r4
     99c:	f7ff ff94 	bl	8c8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t>
    delay(100);
     9a0:	2064      	movs	r0, #100	; 0x64
     9a2:	f003 fceb 	bl	437c <delay>
    sendCheckReply(F("AT"), ok_reply);
     9a6:	23fa      	movs	r3, #250	; 0xfa
     9a8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     9aa:	005b      	lsls	r3, r3, #1
     9ac:	0031      	movs	r1, r6
     9ae:	0020      	movs	r0, r4
     9b0:	f7ff ff8a 	bl	8c8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t>
    delay(100);
     9b4:	2064      	movs	r0, #100	; 0x64
     9b6:	f003 fce1 	bl	437c <delay>
    sendCheckReply(F("AT"), ok_reply);
     9ba:	23fa      	movs	r3, #250	; 0xfa
     9bc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     9be:	005b      	lsls	r3, r3, #1
     9c0:	0031      	movs	r1, r6
     9c2:	0020      	movs	r0, r4
     9c4:	f7ff ff80 	bl	8c8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t>
    delay(100);
     9c8:	2064      	movs	r0, #100	; 0x64
     9ca:	f003 fcd7 	bl	437c <delay>
  }

  // turn off Echo!
  sendCheckReply(F("ATE0"), ok_reply);
     9ce:	23fa      	movs	r3, #250	; 0xfa
     9d0:	4e38      	ldr	r6, [pc, #224]	; (ab4 <_ZN13Adafruit_FONA5beginER6Stream+0x1c4>)
     9d2:	005b      	lsls	r3, r3, #1
     9d4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     9d6:	0031      	movs	r1, r6
     9d8:	0020      	movs	r0, r4
     9da:	f7ff ff75 	bl	8c8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t>
  delay(100);
     9de:	2064      	movs	r0, #100	; 0x64
     9e0:	f003 fccc 	bl	437c <delay>

  if (! sendCheckReply(F("ATE0"), ok_reply)) {
     9e4:	23fa      	movs	r3, #250	; 0xfa
     9e6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     9e8:	005b      	lsls	r3, r3, #1
     9ea:	0031      	movs	r1, r6
     9ec:	0020      	movs	r0, r4
     9ee:	f7ff ff6b 	bl	8c8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t>
     9f2:	9001      	str	r0, [sp, #4]
     9f4:	2800      	cmp	r0, #0
     9f6:	d058      	beq.n	aaa <_ZN13Adafruit_FONA5beginER6Stream+0x1ba>
    return false;
  }

  // turn on hangupitude
  sendCheckReply(F("AT+CVHU=0"), ok_reply);
     9f8:	23fa      	movs	r3, #250	; 0xfa
     9fa:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     9fc:	005b      	lsls	r3, r3, #1
     9fe:	492e      	ldr	r1, [pc, #184]	; (ab8 <_ZN13Adafruit_FONA5beginER6Stream+0x1c8>)
     a00:	0020      	movs	r0, r4
     a02:	f7ff ff61 	bl	8c8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t>

  delay(100);
     a06:	2064      	movs	r0, #100	; 0x64
     a08:	f003 fcb8 	bl	437c <delay>
  flushInput();
     a0c:	0020      	movs	r0, r4
     a0e:	f7ff fbca 	bl	1a6 <_ZN13Adafruit_FONA10flushInputEv>


  DEBUG_PRINT(F("\t---> ")); DEBUG_PRINTLN("ATI");

  mySerial->println("ATI");
     a12:	492a      	ldr	r1, [pc, #168]	; (abc <_ZN13Adafruit_FONA5beginER6Stream+0x1cc>)
     a14:	6b28      	ldr	r0, [r5, #48]	; 0x30
     a16:	f003 fd85 	bl	4524 <_ZN5Print7printlnEPKc>

  DEBUG_PRINT (F("\t<--- ")); DEBUG_PRINTLN(replybuffer);



  if (prog_char_strstr(replybuffer, (prog_char *)F("SIM808 R14")) != 0) {
     a1a:	0026      	movs	r6, r4


  DEBUG_PRINT(F("\t---> ")); DEBUG_PRINTLN("ATI");

  mySerial->println("ATI");
  readline(500, true);
     a1c:	21fa      	movs	r1, #250	; 0xfa
     a1e:	2201      	movs	r2, #1
     a20:	0049      	lsls	r1, r1, #1
     a22:	0020      	movs	r0, r4

  DEBUG_PRINT (F("\t<--- ")); DEBUG_PRINTLN(replybuffer);



  if (prog_char_strstr(replybuffer, (prog_char *)F("SIM808 R14")) != 0) {
     a24:	3612      	adds	r6, #18


  DEBUG_PRINT(F("\t---> ")); DEBUG_PRINTLN("ATI");

  mySerial->println("ATI");
  readline(500, true);
     a26:	f7ff fbf7 	bl	218 <_ZN13Adafruit_FONA8readlineEtb>

  DEBUG_PRINT (F("\t<--- ")); DEBUG_PRINTLN(replybuffer);



  if (prog_char_strstr(replybuffer, (prog_char *)F("SIM808 R14")) != 0) {
     a2a:	4925      	ldr	r1, [pc, #148]	; (ac0 <_ZN13Adafruit_FONA5beginER6Stream+0x1d0>)
     a2c:	0030      	movs	r0, r6
     a2e:	f009 fd1e 	bl	a46e <strstr>
    _type = FONA808_V2;
     a32:	2303      	movs	r3, #3

  DEBUG_PRINT (F("\t<--- ")); DEBUG_PRINTLN(replybuffer);



  if (prog_char_strstr(replybuffer, (prog_char *)F("SIM808 R14")) != 0) {
     a34:	2800      	cmp	r0, #0
     a36:	d11b      	bne.n	a70 <_ZN13Adafruit_FONA5beginER6Stream+0x180>
    _type = FONA808_V2;
  } else if (prog_char_strstr(replybuffer, (prog_char *)F("SIM808 R13")) != 0) {
     a38:	4922      	ldr	r1, [pc, #136]	; (ac4 <_ZN13Adafruit_FONA5beginER6Stream+0x1d4>)
     a3a:	0030      	movs	r0, r6
     a3c:	f009 fd17 	bl	a46e <strstr>
    _type = FONA808_V1;
     a40:	2302      	movs	r3, #2



  if (prog_char_strstr(replybuffer, (prog_char *)F("SIM808 R14")) != 0) {
    _type = FONA808_V2;
  } else if (prog_char_strstr(replybuffer, (prog_char *)F("SIM808 R13")) != 0) {
     a42:	2800      	cmp	r0, #0
     a44:	d114      	bne.n	a70 <_ZN13Adafruit_FONA5beginER6Stream+0x180>
    _type = FONA808_V1;
  } else if (prog_char_strstr(replybuffer, (prog_char *)F("SIM800 R13")) != 0) {
     a46:	4920      	ldr	r1, [pc, #128]	; (ac8 <_ZN13Adafruit_FONA5beginER6Stream+0x1d8>)
     a48:	0030      	movs	r0, r6
     a4a:	f009 fd10 	bl	a46e <strstr>
    _type = FONA800L;
     a4e:	2301      	movs	r3, #1

  if (prog_char_strstr(replybuffer, (prog_char *)F("SIM808 R14")) != 0) {
    _type = FONA808_V2;
  } else if (prog_char_strstr(replybuffer, (prog_char *)F("SIM808 R13")) != 0) {
    _type = FONA808_V1;
  } else if (prog_char_strstr(replybuffer, (prog_char *)F("SIM800 R13")) != 0) {
     a50:	2800      	cmp	r0, #0
     a52:	d10d      	bne.n	a70 <_ZN13Adafruit_FONA5beginER6Stream+0x180>
    _type = FONA800L;
  } else if (prog_char_strstr(replybuffer, (prog_char *)F("SIMCOM_SIM5320A")) != 0) {
     a54:	491d      	ldr	r1, [pc, #116]	; (acc <_ZN13Adafruit_FONA5beginER6Stream+0x1dc>)
     a56:	0030      	movs	r0, r6
     a58:	f009 fd09 	bl	a46e <strstr>
    _type = FONA3G_A;
     a5c:	2304      	movs	r3, #4
    _type = FONA808_V2;
  } else if (prog_char_strstr(replybuffer, (prog_char *)F("SIM808 R13")) != 0) {
    _type = FONA808_V1;
  } else if (prog_char_strstr(replybuffer, (prog_char *)F("SIM800 R13")) != 0) {
    _type = FONA800L;
  } else if (prog_char_strstr(replybuffer, (prog_char *)F("SIMCOM_SIM5320A")) != 0) {
     a5e:	2800      	cmp	r0, #0
     a60:	d106      	bne.n	a70 <_ZN13Adafruit_FONA5beginER6Stream+0x180>
    _type = FONA3G_A;
  } else if (prog_char_strstr(replybuffer, (prog_char *)F("SIMCOM_SIM5320E")) != 0) {
     a62:	491b      	ldr	r1, [pc, #108]	; (ad0 <_ZN13Adafruit_FONA5beginER6Stream+0x1e0>)
     a64:	0030      	movs	r0, r6
     a66:	f009 fd02 	bl	a46e <strstr>
     a6a:	2800      	cmp	r0, #0
     a6c:	d001      	beq.n	a72 <_ZN13Adafruit_FONA5beginER6Stream+0x182>
    _type = FONA3G_E;
     a6e:	2305      	movs	r3, #5
     a70:	7463      	strb	r3, [r4, #17]
  }

  if (_type == FONA800L) {
     a72:	7c67      	ldrb	r7, [r4, #17]
     a74:	2f01      	cmp	r7, #1
     a76:	d111      	bne.n	a9c <_ZN13Adafruit_FONA5beginER6Stream+0x1ac>
    // determine if L or H

  DEBUG_PRINT(F("\t---> ")); DEBUG_PRINTLN("AT+GMM");

    mySerial->println("AT+GMM");
     a78:	4916      	ldr	r1, [pc, #88]	; (ad4 <_ZN13Adafruit_FONA5beginER6Stream+0x1e4>)
     a7a:	6b28      	ldr	r0, [r5, #48]	; 0x30
     a7c:	f003 fd52 	bl	4524 <_ZN5Print7printlnEPKc>
    readline(500, true);
     a80:	21fa      	movs	r1, #250	; 0xfa
     a82:	003a      	movs	r2, r7
     a84:	0049      	lsls	r1, r1, #1
     a86:	0020      	movs	r0, r4
     a88:	f7ff fbc6 	bl	218 <_ZN13Adafruit_FONA8readlineEtb>

  DEBUG_PRINT (F("\t<--- ")); DEBUG_PRINTLN(replybuffer);


    if (prog_char_strstr(replybuffer, (prog_char *)F("SIM800H")) != 0) {
     a8c:	4912      	ldr	r1, [pc, #72]	; (ad8 <_ZN13Adafruit_FONA5beginER6Stream+0x1e8>)
     a8e:	0030      	movs	r0, r6
     a90:	f009 fced 	bl	a46e <strstr>
     a94:	2800      	cmp	r0, #0
     a96:	d001      	beq.n	a9c <_ZN13Adafruit_FONA5beginER6Stream+0x1ac>
      _type = FONA800H;
     a98:	2306      	movs	r3, #6
     a9a:	7463      	strb	r3, [r4, #17]
    }
  }

#if defined(FONA_PREF_SMS_STORAGE)
  sendCheckReply(F("AT+CPMS=\"" FONA_PREF_SMS_STORAGE "\""), ok_reply);
     a9c:	23fa      	movs	r3, #250	; 0xfa
     a9e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     aa0:	005b      	lsls	r3, r3, #1
     aa2:	490e      	ldr	r1, [pc, #56]	; (adc <_ZN13Adafruit_FONA5beginER6Stream+0x1ec>)
     aa4:	0020      	movs	r0, r4
     aa6:	f7ff ff0f 	bl	8c8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t>
#endif

  return true;
}
     aaa:	9801      	ldr	r0, [sp, #4]
     aac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     aae:	46c0      	nop			; (mov r8, r8)
     ab0:	0000dc1b 	.word	0x0000dc1b
     ab4:	0000dc1e 	.word	0x0000dc1e
     ab8:	0000dc23 	.word	0x0000dc23
     abc:	0000dc2d 	.word	0x0000dc2d
     ac0:	0000dc31 	.word	0x0000dc31
     ac4:	0000dc3c 	.word	0x0000dc3c
     ac8:	0000dc47 	.word	0x0000dc47
     acc:	0000dc52 	.word	0x0000dc52
     ad0:	0000dc62 	.word	0x0000dc62
     ad4:	0000dc72 	.word	0x0000dc72
     ad8:	0000dc79 	.word	0x0000dc79
     adc:	0000dc81 	.word	0x0000dc81

00000ae0 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelpert>:
		return false;

  return (prog_char_strcmp(replybuffer, (prog_char*)reply) == 0);
}

boolean Adafruit_FONA::sendCheckReply(char* send, FONAFlashStringPtr reply, uint16_t timeout) {
     ae0:	b570      	push	{r4, r5, r6, lr}
     ae2:	0015      	movs	r5, r2
  if (! getReply(send, timeout) )
     ae4:	001a      	movs	r2, r3
		return false;

  return (prog_char_strcmp(replybuffer, (prog_char*)reply) == 0);
}

boolean Adafruit_FONA::sendCheckReply(char* send, FONAFlashStringPtr reply, uint16_t timeout) {
     ae6:	0004      	movs	r4, r0
  if (! getReply(send, timeout) )
     ae8:	f7ff fbc7 	bl	27a <_ZN13Adafruit_FONA8getReplyEPct>
	  return false;
     aec:	2300      	movs	r3, #0

  return (prog_char_strcmp(replybuffer, (prog_char*)reply) == 0);
}

boolean Adafruit_FONA::sendCheckReply(char* send, FONAFlashStringPtr reply, uint16_t timeout) {
  if (! getReply(send, timeout) )
     aee:	4298      	cmp	r0, r3
     af0:	d007      	beq.n	b02 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelpert+0x22>
	  return false;
  return (prog_char_strcmp(replybuffer, (prog_char*)reply) == 0);
     af2:	0020      	movs	r0, r4
     af4:	0029      	movs	r1, r5
     af6:	3012      	adds	r0, #18
     af8:	f009 fc7b 	bl	a3f2 <strcmp>
     afc:	4243      	negs	r3, r0
     afe:	4143      	adcs	r3, r0
     b00:	b2db      	uxtb	r3, r3
}
     b02:	0018      	movs	r0, r3
     b04:	bd70      	pop	{r4, r5, r6, pc}
	...

00000b08 <_ZN13Adafruit_FONA7sendSMSEPcS0_>:
  // Drop any remaining data from the response.
  flushInput();
  return result;
}

boolean Adafruit_FONA::sendSMS(char *smsaddr, char *smsmsg) {
     b08:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return false;
     b0a:	0005      	movs	r5, r0
     b0c:	23fa      	movs	r3, #250	; 0xfa
     b0e:	35fc      	adds	r5, #252	; 0xfc
  // Drop any remaining data from the response.
  flushInput();
  return result;
}

boolean Adafruit_FONA::sendSMS(char *smsaddr, char *smsmsg) {
     b10:	b089      	sub	sp, #36	; 0x24
     b12:	000f      	movs	r7, r1
     b14:	0016      	movs	r6, r2
  if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return false;
     b16:	005b      	lsls	r3, r3, #1
     b18:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     b1a:	492f      	ldr	r1, [pc, #188]	; (bd8 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0xd0>)
  // Drop any remaining data from the response.
  flushInput();
  return result;
}

boolean Adafruit_FONA::sendSMS(char *smsaddr, char *smsmsg) {
     b1c:	0004      	movs	r4, r0
  if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return false;
     b1e:	f7ff fed3 	bl	8c8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t>
     b22:	2800      	cmp	r0, #0
     b24:	d101      	bne.n	b2a <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x22>
     b26:	2000      	movs	r0, #0
     b28:	e054      	b.n	bd4 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0xcc>

  char sendcmd[30] = "AT+CMGS=\"";
     b2a:	492c      	ldr	r1, [pc, #176]	; (bdc <_ZN13Adafruit_FONA7sendSMSEPcS0_+0xd4>)
     b2c:	220a      	movs	r2, #10
     b2e:	310e      	adds	r1, #14
     b30:	4668      	mov	r0, sp
     b32:	f008 fd88 	bl	9646 <memcpy>
     b36:	200a      	movs	r0, #10
     b38:	2214      	movs	r2, #20
     b3a:	2100      	movs	r1, #0
     b3c:	4468      	add	r0, sp
     b3e:	f008 fda0 	bl	9682 <memset>
  strncpy(sendcmd+9, smsaddr, 30-9-2);  // 9 bytes beginning, 2 bytes for close quote + null
     b42:	2009      	movs	r0, #9
     b44:	2213      	movs	r2, #19
     b46:	0039      	movs	r1, r7
     b48:	4468      	add	r0, sp
     b4a:	f009 fc7d 	bl	a448 <strncpy>
  sendcmd[strlen(sendcmd)] = '\"';
     b4e:	4668      	mov	r0, sp
     b50:	f009 fc61 	bl	a416 <strlen>
     b54:	2322      	movs	r3, #34	; 0x22
     b56:	466a      	mov	r2, sp
     b58:	5413      	strb	r3, [r2, r0]

  if (! sendCheckReply(sendcmd, F("> "))) return false;
     b5a:	33d3      	adds	r3, #211	; 0xd3
     b5c:	33ff      	adds	r3, #255	; 0xff
     b5e:	4a20      	ldr	r2, [pc, #128]	; (be0 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0xd8>)
     b60:	4669      	mov	r1, sp
     b62:	0020      	movs	r0, r4
     b64:	f7ff ffbc 	bl	ae0 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelpert>
     b68:	2800      	cmp	r0, #0
     b6a:	d0dc      	beq.n	b26 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x1e>

  DEBUG_PRINT(F("> ")); DEBUG_PRINTLN(smsmsg);

  mySerial->println(smsmsg);
     b6c:	0031      	movs	r1, r6
     b6e:	6b28      	ldr	r0, [r5, #48]	; 0x30
     b70:	f003 fcd8 	bl	4524 <_ZN5Print7printlnEPKc>
  mySerial->println();
     b74:	6b28      	ldr	r0, [r5, #48]	; 0x30
     b76:	f003 fcc3 	bl	4500 <_ZN5Print7printlnEv>
  mySerial->write(0x1A);
     b7a:	6b28      	ldr	r0, [r5, #48]	; 0x30
     b7c:	211a      	movs	r1, #26
     b7e:	6803      	ldr	r3, [r0, #0]
     b80:	681b      	ldr	r3, [r3, #0]
     b82:	4798      	blx	r3

  DEBUG_PRINTLN("^Z");

  if ( (_type == FONA3G_A) || (_type == FONA3G_E) ) {
     b84:	7c63      	ldrb	r3, [r4, #17]
     b86:	3b04      	subs	r3, #4
     b88:	2b01      	cmp	r3, #1
     b8a:	d809      	bhi.n	ba0 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x98>
    // Eat two sets of CRLF
    readline(200);
     b8c:	2200      	movs	r2, #0
     b8e:	21c8      	movs	r1, #200	; 0xc8
     b90:	0020      	movs	r0, r4
     b92:	f7ff fb41 	bl	218 <_ZN13Adafruit_FONA8readlineEtb>
    //DEBUG_PRINT("Line 1: "); DEBUG_PRINTLN(strlen(replybuffer));
    readline(200);
     b96:	2200      	movs	r2, #0
     b98:	21c8      	movs	r1, #200	; 0xc8
     b9a:	0020      	movs	r0, r4
     b9c:	f7ff fb3c 	bl	218 <_ZN13Adafruit_FONA8readlineEtb>
    //DEBUG_PRINT("Line 2: "); DEBUG_PRINTLN(strlen(replybuffer));
  }
  readline(10000); // read the +CMGS reply, wait up to 10 seconds!!!
  //DEBUG_PRINT("Line 3: "); DEBUG_PRINTLN(strlen(replybuffer));
  if (strstr(replybuffer, "+CMGS") == 0) {
     ba0:	0025      	movs	r5, r4
    readline(200);
    //DEBUG_PRINT("Line 1: "); DEBUG_PRINTLN(strlen(replybuffer));
    readline(200);
    //DEBUG_PRINT("Line 2: "); DEBUG_PRINTLN(strlen(replybuffer));
  }
  readline(10000); // read the +CMGS reply, wait up to 10 seconds!!!
     ba2:	4910      	ldr	r1, [pc, #64]	; (be4 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0xdc>)
     ba4:	2200      	movs	r2, #0
     ba6:	0020      	movs	r0, r4
  //DEBUG_PRINT("Line 3: "); DEBUG_PRINTLN(strlen(replybuffer));
  if (strstr(replybuffer, "+CMGS") == 0) {
     ba8:	3512      	adds	r5, #18
    readline(200);
    //DEBUG_PRINT("Line 1: "); DEBUG_PRINTLN(strlen(replybuffer));
    readline(200);
    //DEBUG_PRINT("Line 2: "); DEBUG_PRINTLN(strlen(replybuffer));
  }
  readline(10000); // read the +CMGS reply, wait up to 10 seconds!!!
     baa:	f7ff fb35 	bl	218 <_ZN13Adafruit_FONA8readlineEtb>
  //DEBUG_PRINT("Line 3: "); DEBUG_PRINTLN(strlen(replybuffer));
  if (strstr(replybuffer, "+CMGS") == 0) {
     bae:	490e      	ldr	r1, [pc, #56]	; (be8 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0xe0>)
     bb0:	0028      	movs	r0, r5
     bb2:	f009 fc5c 	bl	a46e <strstr>
     bb6:	2800      	cmp	r0, #0
     bb8:	d0b5      	beq.n	b26 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x1e>
    return false;
  }
  readline(1000); // read OK
     bba:	21fa      	movs	r1, #250	; 0xfa
     bbc:	2200      	movs	r2, #0
     bbe:	0089      	lsls	r1, r1, #2
     bc0:	0020      	movs	r0, r4
     bc2:	f7ff fb29 	bl	218 <_ZN13Adafruit_FONA8readlineEtb>
  //DEBUG_PRINT("* "); DEBUG_PRINTLN(replybuffer);

  if (strcmp(replybuffer, "OK") != 0) {
     bc6:	4909      	ldr	r1, [pc, #36]	; (bec <_ZN13Adafruit_FONA7sendSMSEPcS0_+0xe4>)
     bc8:	0028      	movs	r0, r5
     bca:	f009 fc12 	bl	a3f2 <strcmp>
     bce:	4243      	negs	r3, r0
     bd0:	4158      	adcs	r0, r3
     bd2:	b2c0      	uxtb	r0, r0
    return false;
  }

  return true;
}
     bd4:	b009      	add	sp, #36	; 0x24
     bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bd8:	0000dd55 	.word	0x0000dd55
     bdc:	0000da80 	.word	0x0000da80
     be0:	0000e204 	.word	0x0000e204
     be4:	00002710 	.word	0x00002710
     be8:	0000dd5f 	.word	0x0000dd5f
     bec:	0000db5a 	.word	0x0000db5a

00000bf0 <_ZN13Adafruit_FONA9deleteSMSEh>:


boolean Adafruit_FONA::deleteSMS(uint8_t i) {
     bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return false;
     bf2:	0007      	movs	r7, r0
     bf4:	23fa      	movs	r3, #250	; 0xfa
     bf6:	37fc      	adds	r7, #252	; 0xfc

  return true;
}


boolean Adafruit_FONA::deleteSMS(uint8_t i) {
     bf8:	b085      	sub	sp, #20
     bfa:	000d      	movs	r5, r1
    if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return false;
     bfc:	005b      	lsls	r3, r3, #1
     bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     c00:	4915      	ldr	r1, [pc, #84]	; (c58 <_ZN13Adafruit_FONA9deleteSMSEh+0x68>)

  return true;
}


boolean Adafruit_FONA::deleteSMS(uint8_t i) {
     c02:	0006      	movs	r6, r0
    if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return false;
     c04:	f7ff fe60 	bl	8c8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t>
     c08:	2800      	cmp	r0, #0
     c0a:	d023      	beq.n	c54 <_ZN13Adafruit_FONA9deleteSMSEh+0x64>
  // read an sms
  char sendbuff[12] = "AT+CMGD=000";
     c0c:	ac01      	add	r4, sp, #4
     c0e:	220c      	movs	r2, #12
     c10:	4912      	ldr	r1, [pc, #72]	; (c5c <_ZN13Adafruit_FONA9deleteSMSEh+0x6c>)
     c12:	0020      	movs	r0, r4
     c14:	f008 fd17 	bl	9646 <memcpy>
  sendbuff[8] = (i / 100) + '0';
     c18:	2164      	movs	r1, #100	; 0x64
     c1a:	0028      	movs	r0, r5
     c1c:	f005 febc 	bl	6998 <__aeabi_uidiv>
     c20:	3030      	adds	r0, #48	; 0x30
     c22:	7220      	strb	r0, [r4, #8]
  i %= 100;
     c24:	2164      	movs	r1, #100	; 0x64
     c26:	0028      	movs	r0, r5
     c28:	f005 ff3c 	bl	6aa4 <__aeabi_uidivmod>
     c2c:	b2cd      	uxtb	r5, r1
  sendbuff[9] = (i / 10) + '0';
     c2e:	0028      	movs	r0, r5
     c30:	210a      	movs	r1, #10
     c32:	f005 feb1 	bl	6998 <__aeabi_uidiv>
     c36:	3030      	adds	r0, #48	; 0x30
     c38:	7260      	strb	r0, [r4, #9]
  i %= 10;
  sendbuff[10] = i + '0';
     c3a:	210a      	movs	r1, #10
     c3c:	0028      	movs	r0, r5
     c3e:	f005 ff31 	bl	6aa4 <__aeabi_uidivmod>

  return sendCheckReply(sendbuff, ok_reply, 2000);
     c42:	23fa      	movs	r3, #250	; 0xfa
  char sendbuff[12] = "AT+CMGD=000";
  sendbuff[8] = (i / 100) + '0';
  i %= 100;
  sendbuff[9] = (i / 10) + '0';
  i %= 10;
  sendbuff[10] = i + '0';
     c44:	3130      	adds	r1, #48	; 0x30
     c46:	72a1      	strb	r1, [r4, #10]

  return sendCheckReply(sendbuff, ok_reply, 2000);
     c48:	00db      	lsls	r3, r3, #3
     c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     c4c:	0021      	movs	r1, r4
     c4e:	0030      	movs	r0, r6
     c50:	f7ff ff46 	bl	ae0 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelpert>
}
     c54:	b005      	add	sp, #20
     c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c58:	0000dd55 	.word	0x0000dd55
     c5c:	0000dd65 	.word	0x0000dd65

00000c60 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPtch>:
  return (prog_char_strcmp(replybuffer, (prog_char*)reply) == 0);
}


boolean Adafruit_FONA::parseReply(FONAFlashStringPtr toreply,
          uint16_t *v, char divider, uint8_t index) {
     c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     c62:	001e      	movs	r6, r3
  char *p = prog_char_strstr(replybuffer, (prog_char*)toreply);  // get the pointer to the voltage
     c64:	3012      	adds	r0, #18
  return (prog_char_strcmp(replybuffer, (prog_char*)reply) == 0);
}


boolean Adafruit_FONA::parseReply(FONAFlashStringPtr toreply,
          uint16_t *v, char divider, uint8_t index) {
     c66:	ab08      	add	r3, sp, #32
     c68:	000d      	movs	r5, r1
     c6a:	9201      	str	r2, [sp, #4]
     c6c:	781f      	ldrb	r7, [r3, #0]
  char *p = prog_char_strstr(replybuffer, (prog_char*)toreply);  // get the pointer to the voltage
     c6e:	f009 fbfe 	bl	a46e <strstr>
     c72:	1e04      	subs	r4, r0, #0
  if (p == 0) return false;
     c74:	d013      	beq.n	c9e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPtch+0x3e>
  p+=prog_char_strlen((prog_char*)toreply);
     c76:	0028      	movs	r0, r5
     c78:	f009 fbcd 	bl	a416 <strlen>
     c7c:	2500      	movs	r5, #0
     c7e:	1820      	adds	r0, r4, r0
  //DEBUG_PRINTLN(p);
  for (uint8_t i=0; i<index;i++) {
     c80:	42af      	cmp	r7, r5
     c82:	d007      	beq.n	c94 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPtch+0x34>
    // increment dividers
    p = strchr(p, divider);
     c84:	0031      	movs	r1, r6
     c86:	f009 fba6 	bl	a3d6 <strchr>
     c8a:	3501      	adds	r5, #1
    if (!p) return false;
     c8c:	2800      	cmp	r0, #0
     c8e:	d006      	beq.n	c9e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPtch+0x3e>
    p++;
     c90:	3001      	adds	r0, #1
          uint16_t *v, char divider, uint8_t index) {
  char *p = prog_char_strstr(replybuffer, (prog_char*)toreply);  // get the pointer to the voltage
  if (p == 0) return false;
  p+=prog_char_strlen((prog_char*)toreply);
  //DEBUG_PRINTLN(p);
  for (uint8_t i=0; i<index;i++) {
     c92:	e7f5      	b.n	c80 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPtch+0x20>
    if (!p) return false;
    p++;
    //DEBUG_PRINTLN(p);

  }
  *v = atoi(p);
     c94:	f008 fc63 	bl	955e <atoi>
     c98:	9b01      	ldr	r3, [sp, #4]
     c9a:	8018      	strh	r0, [r3, #0]

  return true;
     c9c:	2001      	movs	r0, #1
}
     c9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00000ca0 <_ZN13Adafruit_FONA7readSMSEhPctPt>:
}

// Reading SMS's is a bit involved so we don't use helpers that may cause delays or debug
// printouts!
boolean Adafruit_FONA::readSMS(uint8_t i, char *smsbuff,
			       uint16_t maxlen, uint16_t *readlen) {
     ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
  // text mode
  if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return false;
     ca2:	0005      	movs	r5, r0
}

// Reading SMS's is a bit involved so we don't use helpers that may cause delays or debug
// printouts!
boolean Adafruit_FONA::readSMS(uint8_t i, char *smsbuff,
			       uint16_t maxlen, uint16_t *readlen) {
     ca4:	001f      	movs	r7, r3
  // text mode
  if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return false;
     ca6:	23fa      	movs	r3, #250	; 0xfa
}

// Reading SMS's is a bit involved so we don't use helpers that may cause delays or debug
// printouts!
boolean Adafruit_FONA::readSMS(uint8_t i, char *smsbuff,
			       uint16_t maxlen, uint16_t *readlen) {
     ca8:	b087      	sub	sp, #28
  // text mode
  if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return false;
     caa:	35fc      	adds	r5, #252	; 0xfc
}

// Reading SMS's is a bit involved so we don't use helpers that may cause delays or debug
// printouts!
boolean Adafruit_FONA::readSMS(uint8_t i, char *smsbuff,
			       uint16_t maxlen, uint16_t *readlen) {
     cac:	9103      	str	r1, [sp, #12]
     cae:	9202      	str	r2, [sp, #8]
  // text mode
  if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return false;
     cb0:	005b      	lsls	r3, r3, #1
     cb2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     cb4:	4926      	ldr	r1, [pc, #152]	; (d50 <_ZN13Adafruit_FONA7readSMSEhPctPt+0xb0>)
}

// Reading SMS's is a bit involved so we don't use helpers that may cause delays or debug
// printouts!
boolean Adafruit_FONA::readSMS(uint8_t i, char *smsbuff,
			       uint16_t maxlen, uint16_t *readlen) {
     cb6:	0004      	movs	r4, r0
  // text mode
  if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return false;
     cb8:	f7ff fe06 	bl	8c8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t>
     cbc:	2800      	cmp	r0, #0
     cbe:	d101      	bne.n	cc4 <_ZN13Adafruit_FONA7readSMSEhPctPt+0x24>
     cc0:	2500      	movs	r5, #0
     cc2:	e041      	b.n	d48 <_ZN13Adafruit_FONA7readSMSEhPctPt+0xa8>

  // show all text mode parameters
  if (! sendCheckReply(F("AT+CSDH=1"), ok_reply)) return false;
     cc4:	23fa      	movs	r3, #250	; 0xfa
     cc6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     cc8:	005b      	lsls	r3, r3, #1
     cca:	4922      	ldr	r1, [pc, #136]	; (d54 <_ZN13Adafruit_FONA7readSMSEhPctPt+0xb4>)
     ccc:	0020      	movs	r0, r4
     cce:	f7ff fdfb 	bl	8c8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t>
     cd2:	2800      	cmp	r0, #0
     cd4:	d0f4      	beq.n	cc0 <_ZN13Adafruit_FONA7readSMSEhPctPt+0x20>

  // parse out the SMS len
  uint16_t thesmslen = 0;
     cd6:	260e      	movs	r6, #14
     cd8:	ab02      	add	r3, sp, #8
     cda:	18f6      	adds	r6, r6, r3
     cdc:	2300      	movs	r3, #0
  DEBUG_PRINT(F("AT+CMGR="));
  DEBUG_PRINTLN(i);


  //getReply(F("AT+CMGR="), i, 1000);  //  do not print debug!
  mySerial->print(F("AT+CMGR="));
     cde:	491e      	ldr	r1, [pc, #120]	; (d58 <_ZN13Adafruit_FONA7readSMSEhPctPt+0xb8>)
     ce0:	6b28      	ldr	r0, [r5, #48]	; 0x30

  // show all text mode parameters
  if (! sendCheckReply(F("AT+CSDH=1"), ok_reply)) return false;

  // parse out the SMS len
  uint16_t thesmslen = 0;
     ce2:	8033      	strh	r3, [r6, #0]
  DEBUG_PRINT(F("AT+CMGR="));
  DEBUG_PRINTLN(i);


  //getReply(F("AT+CMGR="), i, 1000);  //  do not print debug!
  mySerial->print(F("AT+CMGR="));
     ce4:	f003 fbf8 	bl	44d8 <_ZN5Print5printEPK19__FlashStringHelper>
  mySerial->println(i);
     ce8:	220a      	movs	r2, #10
     cea:	9903      	ldr	r1, [sp, #12]
     cec:	6b28      	ldr	r0, [r5, #48]	; 0x30
     cee:	f003 fc5e 	bl	45ae <_ZN5Print7printlnEhi>
  readline(1000); // timeout
     cf2:	21fa      	movs	r1, #250	; 0xfa
     cf4:	2200      	movs	r2, #0
     cf6:	0089      	lsls	r1, r1, #2
     cf8:	0020      	movs	r0, r4
     cfa:	f7ff fa8d 	bl	218 <_ZN13Adafruit_FONA8readlineEtb>


  DEBUG_PRINTLN(replybuffer);

  
  if (! parseReply(F("+CMGR:"), &thesmslen, ',', 11)) {
     cfe:	230b      	movs	r3, #11
     d00:	0032      	movs	r2, r6
     d02:	9300      	str	r3, [sp, #0]
     d04:	4915      	ldr	r1, [pc, #84]	; (d5c <_ZN13Adafruit_FONA7readSMSEhPctPt+0xbc>)
     d06:	3321      	adds	r3, #33	; 0x21
     d08:	0020      	movs	r0, r4
     d0a:	f7ff ffa9 	bl	c60 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPtch>
     d0e:	1e05      	subs	r5, r0, #0
     d10:	d102      	bne.n	d18 <_ZN13Adafruit_FONA7readSMSEhPctPt+0x78>
    *readlen = 0;
     d12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     d14:	8018      	strh	r0, [r3, #0]
    return false;
     d16:	e017      	b.n	d48 <_ZN13Adafruit_FONA7readSMSEhPctPt+0xa8>
  }

  readRaw(thesmslen);
     d18:	8831      	ldrh	r1, [r6, #0]
     d1a:	0020      	movs	r0, r4
     d1c:	f7ff fa5c 	bl	1d8 <_ZN13Adafruit_FONA7readRawEt>

  flushInput();
     d20:	0020      	movs	r0, r4

  uint16_t thelen = min(maxlen, strlen(replybuffer));
     d22:	3412      	adds	r4, #18
    return false;
  }

  readRaw(thesmslen);

  flushInput();
     d24:	f7ff fa3f 	bl	1a6 <_ZN13Adafruit_FONA10flushInputEv>

  uint16_t thelen = min(maxlen, strlen(replybuffer));
     d28:	0020      	movs	r0, r4
     d2a:	f009 fb74 	bl	a416 <strlen>
     d2e:	4287      	cmp	r7, r0
     d30:	d300      	bcc.n	d34 <_ZN13Adafruit_FONA7readSMSEhPctPt+0x94>
     d32:	b287      	uxth	r7, r0
  strncpy(smsbuff, replybuffer, thelen);
     d34:	003a      	movs	r2, r7
     d36:	0021      	movs	r1, r4
     d38:	9802      	ldr	r0, [sp, #8]
     d3a:	f009 fb85 	bl	a448 <strncpy>
  smsbuff[thelen] = 0; // end the string
     d3e:	2300      	movs	r3, #0
     d40:	9a02      	ldr	r2, [sp, #8]
     d42:	55d3      	strb	r3, [r2, r7]


  DEBUG_PRINTLN(replybuffer);

  *readlen = thelen;
     d44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     d46:	801f      	strh	r7, [r3, #0]
  return true;
}
     d48:	0028      	movs	r0, r5
     d4a:	b007      	add	sp, #28
     d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d4e:	46c0      	nop			; (mov r8, r8)
     d50:	0000dd55 	.word	0x0000dd55
     d54:	0000df66 	.word	0x0000df66
     d58:	0000df70 	.word	0x0000df70
     d5c:	0000df79 	.word	0x0000df79

00000d60 <_ZN13Adafruit_FONA16parseReplyQuotedEPK19__FlashStringHelperPcich>:
// Parse a quoted string in the response fields and copy its value (without quotes)
// to the specified character array (v).  Only up to maxlen characters are copied
// into the result buffer, so make sure to pass a large enough buffer to handle the
// response.
boolean Adafruit_FONA::parseReplyQuoted(FONAFlashStringPtr toreply,
          char *v, int maxlen, char divider, uint8_t index) {
     d60:	b5f0      	push	{r4, r5, r6, r7, lr}
     d62:	b085      	sub	sp, #20
     d64:	9302      	str	r3, [sp, #8]
     d66:	ab0a      	add	r3, sp, #40	; 0x28
     d68:	781f      	ldrb	r7, [r3, #0]
     d6a:	ab0b      	add	r3, sp, #44	; 0x2c
     d6c:	781b      	ldrb	r3, [r3, #0]
  uint8_t i=0, j;
  // Verify response starts with toreply.
  char *p = prog_char_strstr(replybuffer, (prog_char*)toreply);
     d6e:	3012      	adds	r0, #18
// Parse a quoted string in the response fields and copy its value (without quotes)
// to the specified character array (v).  Only up to maxlen characters are copied
// into the result buffer, so make sure to pass a large enough buffer to handle the
// response.
boolean Adafruit_FONA::parseReplyQuoted(FONAFlashStringPtr toreply,
          char *v, int maxlen, char divider, uint8_t index) {
     d70:	000e      	movs	r6, r1
     d72:	9201      	str	r2, [sp, #4]
     d74:	9303      	str	r3, [sp, #12]
  uint8_t i=0, j;
  // Verify response starts with toreply.
  char *p = prog_char_strstr(replybuffer, (prog_char*)toreply);
     d76:	f009 fb7a 	bl	a46e <strstr>
     d7a:	1e05      	subs	r5, r0, #0
  if (p == 0) return false;
     d7c:	d02b      	beq.n	dd6 <_ZN13Adafruit_FONA16parseReplyQuotedEPK19__FlashStringHelperPcich+0x76>
  p+=prog_char_strlen((prog_char*)toreply);
     d7e:	0030      	movs	r0, r6
     d80:	f009 fb49 	bl	a416 <strlen>
     d84:	182c      	adds	r4, r5, r0
     d86:	2500      	movs	r5, #0

  // Find location of desired response field.
  for (i=0; i<index;i++) {
     d88:	9b03      	ldr	r3, [sp, #12]
     d8a:	42ab      	cmp	r3, r5
     d8c:	d102      	bne.n	d94 <_ZN13Adafruit_FONA16parseReplyQuotedEPK19__FlashStringHelperPcich+0x34>
     d8e:	2500      	movs	r5, #0
     d90:	002e      	movs	r6, r5
     d92:	e018      	b.n	dc6 <_ZN13Adafruit_FONA16parseReplyQuotedEPK19__FlashStringHelperPcich+0x66>
    // increment dividers
    p = strchr(p, divider);
     d94:	0039      	movs	r1, r7
     d96:	0020      	movs	r0, r4
     d98:	f009 fb1d 	bl	a3d6 <strchr>
     d9c:	3501      	adds	r5, #1
    if (!p) return false;
     d9e:	2800      	cmp	r0, #0
     da0:	d019      	beq.n	dd6 <_ZN13Adafruit_FONA16parseReplyQuotedEPK19__FlashStringHelperPcich+0x76>
    p++;
     da2:	1c44      	adds	r4, r0, #1
  char *p = prog_char_strstr(replybuffer, (prog_char*)toreply);
  if (p == 0) return false;
  p+=prog_char_strlen((prog_char*)toreply);

  // Find location of desired response field.
  for (i=0; i<index;i++) {
     da4:	e7f0      	b.n	d88 <_ZN13Adafruit_FONA16parseReplyQuotedEPK19__FlashStringHelperPcich+0x28>
    if (!p) return false;
    p++;
  }

  // Copy characters from response field into result string.
  for(i=0, j=0; j<maxlen && i<strlen(p); ++i) {
     da6:	0020      	movs	r0, r4
     da8:	f009 fb35 	bl	a416 <strlen>
     dac:	4286      	cmp	r6, r0
     dae:	d20e      	bcs.n	dce <_ZN13Adafruit_FONA16parseReplyQuotedEPK19__FlashStringHelperPcich+0x6e>
    // Stop if a divier is found.
    if(p[i] == divider)
     db0:	5da3      	ldrb	r3, [r4, r6]
     db2:	429f      	cmp	r7, r3
     db4:	d00b      	beq.n	dce <_ZN13Adafruit_FONA16parseReplyQuotedEPK19__FlashStringHelperPcich+0x6e>
      break;
    // Skip any quotation marks.
    else if(p[i] == '"')
     db6:	2b22      	cmp	r3, #34	; 0x22
     db8:	d003      	beq.n	dc2 <_ZN13Adafruit_FONA16parseReplyQuotedEPK19__FlashStringHelperPcich+0x62>
      continue;
    v[j++] = p[i];
     dba:	9901      	ldr	r1, [sp, #4]
     dbc:	1c6a      	adds	r2, r5, #1
     dbe:	554b      	strb	r3, [r1, r5]
     dc0:	b2d5      	uxtb	r5, r2
    if (!p) return false;
    p++;
  }

  // Copy characters from response field into result string.
  for(i=0, j=0; j<maxlen && i<strlen(p); ++i) {
     dc2:	3601      	adds	r6, #1
     dc4:	b2f6      	uxtb	r6, r6
     dc6:	9b02      	ldr	r3, [sp, #8]
     dc8:	429d      	cmp	r5, r3
     dca:	dbec      	blt.n	da6 <_ZN13Adafruit_FONA16parseReplyQuotedEPK19__FlashStringHelperPcich+0x46>
     dcc:	e002      	b.n	dd4 <_ZN13Adafruit_FONA16parseReplyQuotedEPK19__FlashStringHelperPcich+0x74>
    v[j++] = p[i];
  }

  // Add a null terminator if result string buffer was not filled.
  if (j < maxlen)
    v[j] = '\0';
     dce:	2300      	movs	r3, #0
     dd0:	9a01      	ldr	r2, [sp, #4]
     dd2:	5553      	strb	r3, [r2, r5]

  return true;
     dd4:	2001      	movs	r0, #1
}
     dd6:	b005      	add	sp, #20
     dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00000ddc <_ZN13Adafruit_FONA12getSMSSenderEhPci>:
// Retrieve the sender of the specified SMS message and copy it as a string to
// the sender buffer.  Up to senderlen characters of the sender will be copied
// and a null terminator will be added if less than senderlen charactesr are
// copied to the result.  Returns true if a result was successfully retrieved,
// otherwise false.
boolean Adafruit_FONA::getSMSSender(uint8_t i, char *sender, int senderlen) {
     ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Ensure text mode and all text mode parameters are sent.
  if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return false;
     dde:	0005      	movs	r5, r0
// Retrieve the sender of the specified SMS message and copy it as a string to
// the sender buffer.  Up to senderlen characters of the sender will be copied
// and a null terminator will be added if less than senderlen charactesr are
// copied to the result.  Returns true if a result was successfully retrieved,
// otherwise false.
boolean Adafruit_FONA::getSMSSender(uint8_t i, char *sender, int senderlen) {
     de0:	001e      	movs	r6, r3
  // Ensure text mode and all text mode parameters are sent.
  if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return false;
     de2:	23fa      	movs	r3, #250	; 0xfa
// Retrieve the sender of the specified SMS message and copy it as a string to
// the sender buffer.  Up to senderlen characters of the sender will be copied
// and a null terminator will be added if less than senderlen charactesr are
// copied to the result.  Returns true if a result was successfully retrieved,
// otherwise false.
boolean Adafruit_FONA::getSMSSender(uint8_t i, char *sender, int senderlen) {
     de4:	b085      	sub	sp, #20
  // Ensure text mode and all text mode parameters are sent.
  if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return false;
     de6:	35fc      	adds	r5, #252	; 0xfc
// Retrieve the sender of the specified SMS message and copy it as a string to
// the sender buffer.  Up to senderlen characters of the sender will be copied
// and a null terminator will be added if less than senderlen charactesr are
// copied to the result.  Returns true if a result was successfully retrieved,
// otherwise false.
boolean Adafruit_FONA::getSMSSender(uint8_t i, char *sender, int senderlen) {
     de8:	000f      	movs	r7, r1
     dea:	9203      	str	r2, [sp, #12]
  // Ensure text mode and all text mode parameters are sent.
  if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return false;
     dec:	005b      	lsls	r3, r3, #1
     dee:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     df0:	4918      	ldr	r1, [pc, #96]	; (e54 <_ZN13Adafruit_FONA12getSMSSenderEhPci+0x78>)
// Retrieve the sender of the specified SMS message and copy it as a string to
// the sender buffer.  Up to senderlen characters of the sender will be copied
// and a null terminator will be added if less than senderlen charactesr are
// copied to the result.  Returns true if a result was successfully retrieved,
// otherwise false.
boolean Adafruit_FONA::getSMSSender(uint8_t i, char *sender, int senderlen) {
     df2:	0004      	movs	r4, r0
  // Ensure text mode and all text mode parameters are sent.
  if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return false;
     df4:	f7ff fd68 	bl	8c8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t>
     df8:	2800      	cmp	r0, #0
     dfa:	d101      	bne.n	e00 <_ZN13Adafruit_FONA12getSMSSenderEhPci+0x24>
     dfc:	2000      	movs	r0, #0
     dfe:	e026      	b.n	e4e <_ZN13Adafruit_FONA12getSMSSenderEhPci+0x72>
  if (! sendCheckReply(F("AT+CSDH=1"), ok_reply)) return false;
     e00:	23fa      	movs	r3, #250	; 0xfa
     e02:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     e04:	005b      	lsls	r3, r3, #1
     e06:	4914      	ldr	r1, [pc, #80]	; (e58 <_ZN13Adafruit_FONA12getSMSSenderEhPci+0x7c>)
     e08:	0020      	movs	r0, r4
     e0a:	f7ff fd5d 	bl	8c8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t>
     e0e:	2800      	cmp	r0, #0
     e10:	d0f4      	beq.n	dfc <_ZN13Adafruit_FONA12getSMSSenderEhPci+0x20>
  DEBUG_PRINT(F("AT+CMGR="));
  DEBUG_PRINTLN(i);


  // Send command to retrieve SMS message and parse a line of response.
  mySerial->print(F("AT+CMGR="));
     e12:	4912      	ldr	r1, [pc, #72]	; (e5c <_ZN13Adafruit_FONA12getSMSSenderEhPci+0x80>)
     e14:	6b28      	ldr	r0, [r5, #48]	; 0x30
     e16:	f003 fb5f 	bl	44d8 <_ZN5Print5printEPK19__FlashStringHelper>
  mySerial->println(i);
     e1a:	220a      	movs	r2, #10
     e1c:	0039      	movs	r1, r7
     e1e:	6b28      	ldr	r0, [r5, #48]	; 0x30
     e20:	f003 fbc5 	bl	45ae <_ZN5Print7printlnEhi>
  readline(1000);
     e24:	21fa      	movs	r1, #250	; 0xfa
     e26:	2200      	movs	r2, #0
     e28:	0089      	lsls	r1, r1, #2
     e2a:	0020      	movs	r0, r4
     e2c:	f7ff f9f4 	bl	218 <_ZN13Adafruit_FONA8readlineEtb>

  DEBUG_PRINTLN(replybuffer);


  // Parse the second field in the response.
  boolean result = parseReplyQuoted(F("+CMGR:"), sender, senderlen, ',', 1);
     e30:	2301      	movs	r3, #1
     e32:	9301      	str	r3, [sp, #4]
     e34:	332b      	adds	r3, #43	; 0x2b
     e36:	9300      	str	r3, [sp, #0]
     e38:	9a03      	ldr	r2, [sp, #12]
     e3a:	0033      	movs	r3, r6
     e3c:	4908      	ldr	r1, [pc, #32]	; (e60 <_ZN13Adafruit_FONA12getSMSSenderEhPci+0x84>)
     e3e:	0020      	movs	r0, r4
     e40:	f7ff ff8e 	bl	d60 <_ZN13Adafruit_FONA16parseReplyQuotedEPK19__FlashStringHelperPcich>
     e44:	0005      	movs	r5, r0
  // Drop any remaining data from the response.
  flushInput();
     e46:	0020      	movs	r0, r4
     e48:	f7ff f9ad 	bl	1a6 <_ZN13Adafruit_FONA10flushInputEv>
  return result;
     e4c:	0028      	movs	r0, r5
}
     e4e:	b005      	add	sp, #20
     e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e52:	46c0      	nop			; (mov r8, r8)
     e54:	0000dd55 	.word	0x0000dd55
     e58:	0000df66 	.word	0x0000df66
     e5c:	0000df70 	.word	0x0000df70
     e60:	0000df79 	.word	0x0000df79

00000e64 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Ptch>:
  return true;
}

boolean Adafruit_FONA::sendParseReply(FONAFlashStringPtr tosend,
				      FONAFlashStringPtr toreply,
				      uint16_t *v, char divider, uint8_t index) {
     e64:	b5f0      	push	{r4, r5, r6, r7, lr}
     e66:	0015      	movs	r5, r2
  getReply(tosend);
     e68:	22fa      	movs	r2, #250	; 0xfa
  return true;
}

boolean Adafruit_FONA::sendParseReply(FONAFlashStringPtr tosend,
				      FONAFlashStringPtr toreply,
				      uint16_t *v, char divider, uint8_t index) {
     e6a:	0004      	movs	r4, r0
     e6c:	001e      	movs	r6, r3
     e6e:	b085      	sub	sp, #20
     e70:	ab0a      	add	r3, sp, #40	; 0x28
     e72:	781b      	ldrb	r3, [r3, #0]
  getReply(tosend);
     e74:	0052      	lsls	r2, r2, #1
  return true;
}

boolean Adafruit_FONA::sendParseReply(FONAFlashStringPtr tosend,
				      FONAFlashStringPtr toreply,
				      uint16_t *v, char divider, uint8_t index) {
     e76:	9303      	str	r3, [sp, #12]
     e78:	ab0b      	add	r3, sp, #44	; 0x2c
     e7a:	781f      	ldrb	r7, [r3, #0]
  getReply(tosend);
     e7c:	f7ff fa0f 	bl	29e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelpert>

  if (! parseReply(toreply, v, divider, index)) return false;
     e80:	0029      	movs	r1, r5
     e82:	9700      	str	r7, [sp, #0]
     e84:	9b03      	ldr	r3, [sp, #12]
     e86:	0032      	movs	r2, r6
     e88:	0020      	movs	r0, r4
     e8a:	f7ff fee9 	bl	c60 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPtch>
     e8e:	1e05      	subs	r5, r0, #0
     e90:	d005      	beq.n	e9e <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Ptch+0x3a>

  readline(); // eat 'OK'
     e92:	21fa      	movs	r1, #250	; 0xfa
     e94:	2200      	movs	r2, #0
     e96:	0049      	lsls	r1, r1, #1
     e98:	0020      	movs	r0, r4
     e9a:	f7ff f9bd 	bl	218 <_ZN13Adafruit_FONA8readlineEtb>

  return true;
}
     e9e:	0028      	movs	r0, r5
     ea0:	b005      	add	sp, #20
     ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000ea4 <_ZN13Adafruit_FONA7getRSSIEv>:

  return status;
}


uint8_t Adafruit_FONA::getRSSI(void) {
     ea4:	b530      	push	{r4, r5, lr}
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
     ea6:	250e      	movs	r5, #14
     ea8:	2400      	movs	r4, #0
     eaa:	232c      	movs	r3, #44	; 0x2c

  return status;
}


uint8_t Adafruit_FONA::getRSSI(void) {
     eac:	b085      	sub	sp, #20
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
     eae:	446d      	add	r5, sp
     eb0:	9300      	str	r3, [sp, #0]
     eb2:	9401      	str	r4, [sp, #4]
     eb4:	002b      	movs	r3, r5
     eb6:	4a05      	ldr	r2, [pc, #20]	; (ecc <_ZN13Adafruit_FONA7getRSSIEv+0x28>)
     eb8:	4905      	ldr	r1, [pc, #20]	; (ed0 <_ZN13Adafruit_FONA7getRSSIEv+0x2c>)
     eba:	f7ff ffd3 	bl	e64 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Ptch>
     ebe:	42a0      	cmp	r0, r4
     ec0:	d000      	beq.n	ec4 <_ZN13Adafruit_FONA7getRSSIEv+0x20>

  return reply;
     ec2:	782c      	ldrb	r4, [r5, #0]
}
     ec4:	0020      	movs	r0, r4
     ec6:	b005      	add	sp, #20
     ec8:	bd30      	pop	{r4, r5, pc}
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	0000e07a 	.word	0x0000e07a
     ed0:	0000e081 	.word	0x0000e081

00000ed4 <_ZN13Adafruit_FONA9getNumSMSEv>:

int8_t Adafruit_FONA::getNumSMS(void) {
  uint16_t numsms;

  // get into text mode
  if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return -1;
     ed4:	0002      	movs	r2, r0
     ed6:	23fa      	movs	r3, #250	; 0xfa

boolean Adafruit_FONA::setSMSInterrupt(uint8_t i) {
  return sendCheckReply(F("AT+CFGRI="), i, ok_reply);
}

int8_t Adafruit_FONA::getNumSMS(void) {
     ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t numsms;

  // get into text mode
  if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return -1;
     eda:	32fc      	adds	r2, #252	; 0xfc

boolean Adafruit_FONA::setSMSInterrupt(uint8_t i) {
  return sendCheckReply(F("AT+CFGRI="), i, ok_reply);
}

int8_t Adafruit_FONA::getNumSMS(void) {
     edc:	b085      	sub	sp, #20
  uint16_t numsms;

  // get into text mode
  if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return -1;
     ede:	005b      	lsls	r3, r3, #1
     ee0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     ee2:	4913      	ldr	r1, [pc, #76]	; (f30 <_ZN13Adafruit_FONA9getNumSMSEv+0x5c>)

boolean Adafruit_FONA::setSMSInterrupt(uint8_t i) {
  return sendCheckReply(F("AT+CFGRI="), i, ok_reply);
}

int8_t Adafruit_FONA::getNumSMS(void) {
     ee4:	0005      	movs	r5, r0
  uint16_t numsms;

  // get into text mode
  if (! sendCheckReply(F("AT+CMGF=1"), ok_reply)) return -1;
     ee6:	f7ff fcef 	bl	8c8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t>
     eea:	2800      	cmp	r0, #0
     eec:	d102      	bne.n	ef4 <_ZN13Adafruit_FONA9getNumSMSEv+0x20>
     eee:	2001      	movs	r0, #1
     ef0:	4240      	negs	r0, r0
     ef2:	e01a      	b.n	f2a <_ZN13Adafruit_FONA9getNumSMSEv+0x56>

  // ask how many sms are stored
  if (sendParseReply(F("AT+CPMS?"), F("\"SM\","), &numsms)) 
     ef4:	240e      	movs	r4, #14
     ef6:	2300      	movs	r3, #0
     ef8:	272c      	movs	r7, #44	; 0x2c
     efa:	4e0e      	ldr	r6, [pc, #56]	; (f34 <_ZN13Adafruit_FONA9getNumSMSEv+0x60>)
     efc:	446c      	add	r4, sp
     efe:	9301      	str	r3, [sp, #4]
     f00:	9700      	str	r7, [sp, #0]
     f02:	0023      	movs	r3, r4
     f04:	4a0c      	ldr	r2, [pc, #48]	; (f38 <_ZN13Adafruit_FONA9getNumSMSEv+0x64>)
     f06:	0031      	movs	r1, r6
     f08:	0028      	movs	r0, r5
     f0a:	f7ff ffab 	bl	e64 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Ptch>
     f0e:	2800      	cmp	r0, #0
     f10:	d109      	bne.n	f26 <_ZN13Adafruit_FONA9getNumSMSEv+0x52>
    return numsms;
  if (sendParseReply(F("AT+CPMS?"), F("\"SM_P\","), &numsms)) 
     f12:	9001      	str	r0, [sp, #4]
     f14:	9700      	str	r7, [sp, #0]
     f16:	0023      	movs	r3, r4
     f18:	4a08      	ldr	r2, [pc, #32]	; (f3c <_ZN13Adafruit_FONA9getNumSMSEv+0x68>)
     f1a:	0031      	movs	r1, r6
     f1c:	0028      	movs	r0, r5
     f1e:	f7ff ffa1 	bl	e64 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Ptch>
     f22:	2800      	cmp	r0, #0
     f24:	d0e3      	beq.n	eee <_ZN13Adafruit_FONA9getNumSMSEv+0x1a>
    return numsms;
     f26:	2000      	movs	r0, #0
     f28:	5620      	ldrsb	r0, [r4, r0]
  return -1;
}
     f2a:	b005      	add	sp, #20
     f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f2e:	46c0      	nop			; (mov r8, r8)
     f30:	0000dd55 	.word	0x0000dd55
     f34:	0000e0db 	.word	0x0000e0db
     f38:	0000e0d5 	.word	0x0000e0d5
     f3c:	0000e0e4 	.word	0x0000e0e4

00000f40 <_ZN13Adafruit_FONA9enableGPSEb>:
}

/********* GPS **********************************************************/


boolean Adafruit_FONA::enableGPS(boolean onoff) {
     f40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     f42:	250e      	movs	r5, #14
     f44:	2300      	movs	r3, #0
  uint16_t state;

  // first check if its already on or off

  if (_type == FONA808_V2) {
     f46:	7c42      	ldrb	r2, [r0, #17]
}

/********* GPS **********************************************************/


boolean Adafruit_FONA::enableGPS(boolean onoff) {
     f48:	0004      	movs	r4, r0
     f4a:	000e      	movs	r6, r1
     f4c:	446d      	add	r5, sp
  uint16_t state;

  // first check if its already on or off

  if (_type == FONA808_V2) {
    if (! sendParseReply(F("AT+CGNSPWR?"), F("+CGNSPWR: "), &state) )
     f4e:	9301      	str	r3, [sp, #4]
boolean Adafruit_FONA::enableGPS(boolean onoff) {
  uint16_t state;

  // first check if its already on or off

  if (_type == FONA808_V2) {
     f50:	2a03      	cmp	r2, #3
     f52:	d10e      	bne.n	f72 <_ZN13Adafruit_FONA9enableGPSEb+0x32>
    if (! sendParseReply(F("AT+CGNSPWR?"), F("+CGNSPWR: "), &state) )
     f54:	332c      	adds	r3, #44	; 0x2c
     f56:	9300      	str	r3, [sp, #0]
     f58:	002b      	movs	r3, r5
     f5a:	4a1e      	ldr	r2, [pc, #120]	; (fd4 <_ZN13Adafruit_FONA9enableGPSEb+0x94>)
     f5c:	491e      	ldr	r1, [pc, #120]	; (fd8 <_ZN13Adafruit_FONA9enableGPSEb+0x98>)
     f5e:	0020      	movs	r0, r4
     f60:	f7ff ff80 	bl	e64 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Ptch>
     f64:	2800      	cmp	r0, #0
     f66:	d002      	beq.n	f6e <_ZN13Adafruit_FONA9enableGPSEb+0x2e>
  } else {
    if (! sendParseReply(F("AT+CGPSPWR?"), F("+CGPSPWR: "), &state))
      return false;
  }

  if (onoff && !state) {
     f68:	2e00      	cmp	r6, #0
     f6a:	d108      	bne.n	f7e <_ZN13Adafruit_FONA9enableGPSEb+0x3e>
     f6c:	e01a      	b.n	fa4 <_ZN13Adafruit_FONA9enableGPSEb+0x64>

  // first check if its already on or off

  if (_type == FONA808_V2) {
    if (! sendParseReply(F("AT+CGNSPWR?"), F("+CGNSPWR: "), &state) )
      return false;
     f6e:	2000      	movs	r0, #0
     f70:	e02d      	b.n	fce <_ZN13Adafruit_FONA9enableGPSEb+0x8e>
  } else {
    if (! sendParseReply(F("AT+CGPSPWR?"), F("+CGPSPWR: "), &state))
     f72:	232c      	movs	r3, #44	; 0x2c
     f74:	4a19      	ldr	r2, [pc, #100]	; (fdc <_ZN13Adafruit_FONA9enableGPSEb+0x9c>)
     f76:	9300      	str	r3, [sp, #0]
     f78:	4919      	ldr	r1, [pc, #100]	; (fe0 <_ZN13Adafruit_FONA9enableGPSEb+0xa0>)
     f7a:	002b      	movs	r3, r5
     f7c:	e7ef      	b.n	f5e <_ZN13Adafruit_FONA9enableGPSEb+0x1e>
      return false;
  }

  if (onoff && !state) {
     f7e:	882b      	ldrh	r3, [r5, #0]
    } else {
      if (! sendCheckReply(F("AT+CGPSPWR=0"), ok_reply))
	return false;
    }
  }
  return true;
     f80:	2001      	movs	r0, #1
  } else {
    if (! sendParseReply(F("AT+CGPSPWR?"), F("+CGPSPWR: "), &state))
      return false;
  }

  if (onoff && !state) {
     f82:	2b00      	cmp	r3, #0
     f84:	d123      	bne.n	fce <_ZN13Adafruit_FONA9enableGPSEb+0x8e>
     f86:	0022      	movs	r2, r4
    if (_type == FONA808_V2) {
     f88:	7c63      	ldrb	r3, [r4, #17]
     f8a:	32fc      	adds	r2, #252	; 0xfc
     f8c:	2b03      	cmp	r3, #3
     f8e:	d104      	bne.n	f9a <_ZN13Adafruit_FONA9enableGPSEb+0x5a>
      if (! sendCheckReply(F("AT+CGNSPWR=1"), ok_reply))  // try GNS command
     f90:	33f2      	adds	r3, #242	; 0xf2
     f92:	33ff      	adds	r3, #255	; 0xff
     f94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     f96:	4913      	ldr	r1, [pc, #76]	; (fe4 <_ZN13Adafruit_FONA9enableGPSEb+0xa4>)
     f98:	e016      	b.n	fc8 <_ZN13Adafruit_FONA9enableGPSEb+0x88>
	return false;
    } else {
      if (! sendCheckReply(F("AT+CGPSPWR=1"), ok_reply))
     f9a:	23fa      	movs	r3, #250	; 0xfa
     f9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     f9e:	005b      	lsls	r3, r3, #1
     fa0:	4911      	ldr	r1, [pc, #68]	; (fe8 <_ZN13Adafruit_FONA9enableGPSEb+0xa8>)
     fa2:	e011      	b.n	fc8 <_ZN13Adafruit_FONA9enableGPSEb+0x88>
	return false;
    }
  } else if (!onoff && state) {
     fa4:	882b      	ldrh	r3, [r5, #0]
    } else {
      if (! sendCheckReply(F("AT+CGPSPWR=0"), ok_reply))
	return false;
    }
  }
  return true;
     fa6:	2001      	movs	r0, #1
	return false;
    } else {
      if (! sendCheckReply(F("AT+CGPSPWR=1"), ok_reply))
	return false;
    }
  } else if (!onoff && state) {
     fa8:	2b00      	cmp	r3, #0
     faa:	d010      	beq.n	fce <_ZN13Adafruit_FONA9enableGPSEb+0x8e>
     fac:	0022      	movs	r2, r4
    if (_type == FONA808_V2) {
     fae:	7c63      	ldrb	r3, [r4, #17]
     fb0:	32fc      	adds	r2, #252	; 0xfc
     fb2:	2b03      	cmp	r3, #3
     fb4:	d104      	bne.n	fc0 <_ZN13Adafruit_FONA9enableGPSEb+0x80>
      if (! sendCheckReply(F("AT+CGNSPWR=0"), ok_reply)) // try GNS command
     fb6:	33f2      	adds	r3, #242	; 0xf2
     fb8:	33ff      	adds	r3, #255	; 0xff
     fba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     fbc:	490b      	ldr	r1, [pc, #44]	; (fec <_ZN13Adafruit_FONA9enableGPSEb+0xac>)
     fbe:	e003      	b.n	fc8 <_ZN13Adafruit_FONA9enableGPSEb+0x88>
	return false;
    } else {
      if (! sendCheckReply(F("AT+CGPSPWR=0"), ok_reply))
     fc0:	23fa      	movs	r3, #250	; 0xfa
     fc2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     fc4:	490a      	ldr	r1, [pc, #40]	; (ff0 <_ZN13Adafruit_FONA9enableGPSEb+0xb0>)
     fc6:	005b      	lsls	r3, r3, #1
     fc8:	0020      	movs	r0, r4
     fca:	f7ff fc7d 	bl	8c8 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_t>
	return false;
    }
  }
  return true;
}
     fce:	b004      	add	sp, #16
     fd0:	bd70      	pop	{r4, r5, r6, pc}
     fd2:	46c0      	nop			; (mov r8, r8)
     fd4:	0000e0ec 	.word	0x0000e0ec
     fd8:	0000e0f7 	.word	0x0000e0f7
     fdc:	0000e103 	.word	0x0000e103
     fe0:	0000e10e 	.word	0x0000e10e
     fe4:	0000e11a 	.word	0x0000e11a
     fe8:	0000e127 	.word	0x0000e127
     fec:	0000e134 	.word	0x0000e134
     ff0:	0000e141 	.word	0x0000e141

00000ff4 <_ZN10IridiumSBD15setPowerProfileEi>:
}

// Define capacitor recharge times
void IridiumSBD::setPowerProfile(int profile)
{
   switch(profile)
     ff4:	2900      	cmp	r1, #0
     ff6:	d005      	beq.n	1004 <_ZN10IridiumSBD15setPowerProfileEi+0x10>
     ff8:	2901      	cmp	r1, #1
     ffa:	d107      	bne.n	100c <_ZN10IridiumSBD15setPowerProfileEi+0x18>
      this->csqInterval = ISBD_DEFAULT_CSQ_INTERVAL;
      this->sbdixInterval = ISBD_DEFAULT_SBDIX_INTERVAL;
      break;

   case 1:
      this->csqInterval = ISBD_DEFAULT_CSQ_INTERVAL_USB;
     ffc:	2314      	movs	r3, #20
     ffe:	62c3      	str	r3, [r0, #44]	; 0x2c
      this->sbdixInterval = ISBD_DEFAULT_SBDIX_INTERVAL_USB;
    1000:	330a      	adds	r3, #10
    1002:	e002      	b.n	100a <_ZN10IridiumSBD15setPowerProfileEi+0x16>
void IridiumSBD::setPowerProfile(int profile)
{
   switch(profile)
   {
   case 0:
      this->csqInterval = ISBD_DEFAULT_CSQ_INTERVAL;
    1004:	230a      	movs	r3, #10
    1006:	62c3      	str	r3, [r0, #44]	; 0x2c
      this->sbdixInterval = ISBD_DEFAULT_SBDIX_INTERVAL;
    1008:	3314      	adds	r3, #20
      break;

   case 1:
      this->csqInterval = ISBD_DEFAULT_CSQ_INTERVAL_USB;
      this->sbdixInterval = ISBD_DEFAULT_SBDIX_INTERVAL_USB;
    100a:	6303      	str	r3, [r0, #48]	; 0x30
      break;
   }
}
    100c:	4770      	bx	lr
	...

00001010 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
    1010:	b5f0      	push	{r4, r5, r6, r7, lr}
   diag.print(F("Waiting for response "));
    1012:	0004      	movs	r4, r0
    1014:	340c      	adds	r4, #12

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
    1016:	b087      	sub	sp, #28
    1018:	000e      	movs	r6, r1
    101a:	0007      	movs	r7, r0
   diag.print(F("Waiting for response "));
    101c:	4943      	ldr	r1, [pc, #268]	; (112c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x11c>)
    101e:	0020      	movs	r0, r4

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
    1020:	9203      	str	r2, [sp, #12]
    1022:	9302      	str	r3, [sp, #8]
   diag.print(F("Waiting for response "));
    1024:	f003 fa58 	bl	44d8 <_ZN5Print5printEPK19__FlashStringHelper>
   diag.print(terminator);
    1028:	990c      	ldr	r1, [sp, #48]	; 0x30
    102a:	0020      	movs	r0, r4
    102c:	f003 fa5f 	bl	44ee <_ZN5Print5printEPKc>
   diag.print(F("\r\n"));
    1030:	493f      	ldr	r1, [pc, #252]	; (1130 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x120>)
    1032:	0020      	movs	r0, r4
    1034:	f003 fa50 	bl	44d8 <_ZN5Print5printEPK19__FlashStringHelper>

   if (response)
    1038:	2e00      	cmp	r6, #0
    103a:	d004      	beq.n	1046 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x36>
      memset(response, 0, responseSize);
    103c:	9a03      	ldr	r2, [sp, #12]
    103e:	2100      	movs	r1, #0
    1040:	0030      	movs	r0, r6
    1042:	f008 fb1e 	bl	9682 <memset>

   bool done = false;
   int matchPromptPos = 0; // Matches chars in prompt
   int matchTerminatorPos = 0; // Matches chars in terminator
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
    1046:	9b02      	ldr	r3, [sp, #8]
   cons.print(F("<< "));
    1048:	493a      	ldr	r1, [pc, #232]	; (1134 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x124>)

   bool done = false;
   int matchPromptPos = 0; // Matches chars in prompt
   int matchTerminatorPos = 0; // Matches chars in terminator
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
    104a:	425a      	negs	r2, r3
    104c:	4153      	adcs	r3, r2
    104e:	005b      	lsls	r3, r3, #1
    1050:	9301      	str	r3, [sp, #4]
   cons.print(F("<< "));
    1052:	003b      	movs	r3, r7
    1054:	331c      	adds	r3, #28
    1056:	0018      	movs	r0, r3
    1058:	9304      	str	r3, [sp, #16]
   if (response)
      memset(response, 0, responseSize);

   bool done = false;
   int matchPromptPos = 0; // Matches chars in prompt
   int matchTerminatorPos = 0; // Matches chars in terminator
    105a:	2500      	movs	r5, #0
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
   cons.print(F("<< "));
    105c:	f003 fa3c 	bl	44d8 <_ZN5Print5printEPK19__FlashStringHelper>
   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
    1060:	f003 f986 	bl	4370 <millis>

   if (response)
      memset(response, 0, responseSize);

   bool done = false;
   int matchPromptPos = 0; // Matches chars in prompt
    1064:	9500      	str	r5, [sp, #0]
   int matchTerminatorPos = 0; // Matches chars in terminator
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
   cons.print(F("<< "));
   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
    1066:	9005      	str	r0, [sp, #20]
    1068:	f003 f982 	bl	4370 <millis>
    106c:	9b05      	ldr	r3, [sp, #20]
    106e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1070:	1ac0      	subs	r0, r0, r3
    1072:	23fa      	movs	r3, #250	; 0xfa
    1074:	009b      	lsls	r3, r3, #2
    1076:	4353      	muls	r3, r2
    1078:	4298      	cmp	r0, r3
    107a:	d253      	bcs.n	1124 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x114>
   return false;
}

bool IridiumSBD::cancelled()
{
   if (ISBDCallback != NULL)
    107c:	4b2e      	ldr	r3, [pc, #184]	; (1138 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x128>)
    107e:	2b00      	cmp	r3, #0
    1080:	d003      	beq.n	108a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x7a>
      return !ISBDCallback();
    1082:	e000      	b.n	1086 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x76>
    1084:	bf00      	nop
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
   cons.print(F("<< "));
   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
   {
      if (cancelled())
    1086:	2800      	cmp	r0, #0
    1088:	d04c      	beq.n	1124 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x114>
         return false;

      while (stream.available() > 0)
    108a:	6838      	ldr	r0, [r7, #0]
    108c:	6803      	ldr	r3, [r0, #0]
    108e:	689b      	ldr	r3, [r3, #8]
    1090:	4798      	blx	r3
    1092:	2800      	cmp	r0, #0
    1094:	dde8      	ble.n	1068 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x58>
      {
         char c = stream.read();
    1096:	6838      	ldr	r0, [r7, #0]
    1098:	6803      	ldr	r3, [r0, #0]
    109a:	68db      	ldr	r3, [r3, #12]
    109c:	4798      	blx	r3
    109e:	b2c4      	uxtb	r4, r0
         cons.print(c);
    10a0:	0021      	movs	r1, r4
    10a2:	9804      	ldr	r0, [sp, #16]
    10a4:	f003 fa27 	bl	44f6 <_ZN5Print5printEc>
         if (prompt)
    10a8:	9b02      	ldr	r3, [sp, #8]
    10aa:	2b00      	cmp	r3, #0
    10ac:	d029      	beq.n	1102 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xf2>
            switch(promptState)
    10ae:	9b01      	ldr	r3, [sp, #4]
    10b0:	2b00      	cmp	r3, #0
    10b2:	d002      	beq.n	10ba <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xaa>
    10b4:	2b01      	cmp	r3, #1
    10b6:	d016      	beq.n	10e6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xd6>
    10b8:	e023      	b.n	1102 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xf2>
         {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
    10ba:	9b02      	ldr	r3, [sp, #8]
    10bc:	9a00      	ldr	r2, [sp, #0]
    10be:	5c9b      	ldrb	r3, [r3, r2]
    10c0:	42a3      	cmp	r3, r4
    10c2:	d109      	bne.n	10d8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xc8>
               {
                  ++matchPromptPos;
    10c4:	0013      	movs	r3, r2
    10c6:	3301      	adds	r3, #1
    10c8:	9300      	str	r3, [sp, #0]
    10ca:	9a00      	ldr	r2, [sp, #0]
    10cc:	9b02      	ldr	r3, [sp, #8]
    10ce:	5c9b      	ldrb	r3, [r3, r2]
    10d0:	425a      	negs	r2, r3
    10d2:	415a      	adcs	r2, r3
    10d4:	9201      	str	r2, [sp, #4]
    10d6:	e014      	b.n	1102 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xf2>
                     promptState = GATHERING_RESPONSE;
               }

               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
    10d8:	9b02      	ldr	r3, [sp, #8]
    10da:	781b      	ldrb	r3, [r3, #0]
    10dc:	1b1b      	subs	r3, r3, r4
    10de:	425a      	negs	r2, r3
    10e0:	415a      	adcs	r2, r3
    10e2:	9200      	str	r2, [sp, #0]
    10e4:	e00d      	b.n	1102 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xf2>
               }

               break;
            case GATHERING_RESPONSE: // gathering reponse from end of prompt to first \r
               if (response)
    10e6:	2e00      	cmp	r6, #0
    10e8:	d00b      	beq.n	1102 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xf2>
               {
                  if (c == '\r' || responseSize < 2)
    10ea:	2c0d      	cmp	r4, #13
    10ec:	d007      	beq.n	10fe <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xee>
    10ee:	9b03      	ldr	r3, [sp, #12]
    10f0:	2b01      	cmp	r3, #1
    10f2:	dd04      	ble.n	10fe <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xee>
                     promptState = LOOKING_FOR_TERMINATOR;
                  }
                  else
                  {
                     *response++ = c;
                     responseSize--;
    10f4:	3b01      	subs	r3, #1
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
                  }
                  else
                  {
                     *response++ = c;
    10f6:	7034      	strb	r4, [r6, #0]
                     responseSize--;
    10f8:	9303      	str	r3, [sp, #12]
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
                  }
                  else
                  {
                     *response++ = c;
    10fa:	3601      	adds	r6, #1
    10fc:	e001      	b.n	1102 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xf2>
            case GATHERING_RESPONSE: // gathering reponse from end of prompt to first \r
               if (response)
               {
                  if (c == '\r' || responseSize < 2)
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
    10fe:	2302      	movs	r3, #2
    1100:	9301      	str	r3, [sp, #4]
                  }
               }
               break;
         }

         if (c == terminator[matchTerminatorPos])
    1102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1104:	5d5b      	ldrb	r3, [r3, r5]
    1106:	42a3      	cmp	r3, r4
    1108:	d106      	bne.n	1118 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x108>
         {
            ++matchTerminatorPos;
            if (terminator[matchTerminatorPos] == '\0')
    110a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
               break;
         }

         if (c == terminator[matchTerminatorPos])
         {
            ++matchTerminatorPos;
    110c:	3501      	adds	r5, #1
            if (terminator[matchTerminatorPos] == '\0')
    110e:	5d5b      	ldrb	r3, [r3, r5]
    1110:	2b00      	cmp	r3, #0
    1112:	d1ba      	bne.n	108a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x7a>
               return true;
    1114:	2001      	movs	r0, #1
    1116:	e006      	b.n	1126 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x116>
               break;
         }

         if (c == terminator[matchTerminatorPos])
         {
            ++matchTerminatorPos;
    1118:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    111a:	781d      	ldrb	r5, [r3, #0]
    111c:	1b2c      	subs	r4, r5, r4
    111e:	4265      	negs	r5, r4
    1120:	4165      	adcs	r5, r4
    1122:	e7b2      	b.n	108a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x7a>
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
         }
      } // while (stream.available() > 0)
   } // timer loop
   return false;
    1124:	2000      	movs	r0, #0
}
    1126:	b007      	add	sp, #28
    1128:	bdf0      	pop	{r4, r5, r6, r7, pc}
    112a:	46c0      	nop			; (mov r8, r8)
    112c:	0000e1b0 	.word	0x0000e1b0
    1130:	0000e200 	.word	0x0000e200
    1134:	0000e1c6 	.word	0x0000e1c6
    1138:	00000000 	.word	0x00000000

0000113c <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
    113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   this->asleep = !on;
    113e:	2601      	movs	r6, #1
    1140:	0003      	movs	r3, r0
    1142:	0032      	movs	r2, r6

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
    1144:	0004      	movs	r4, r0
   this->asleep = !on;

   if (this->sleepPin == -1)
    1146:	6c40      	ldr	r0, [r0, #68]	; 0x44
   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
   this->asleep = !on;
    1148:	404a      	eors	r2, r1
    114a:	3340      	adds	r3, #64	; 0x40

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
    114c:	000f      	movs	r7, r1
   this->asleep = !on;
    114e:	701a      	strb	r2, [r3, #0]

   if (this->sleepPin == -1)
    1150:	1c43      	adds	r3, r0, #1
    1152:	d025      	beq.n	11a0 <_ZN10IridiumSBD5powerEb+0x64>
    1154:	0025      	movs	r5, r4
      return;

   pinMode(this->sleepPin, OUTPUT);
    1156:	0031      	movs	r1, r6
    1158:	f004 ffc4 	bl	60e4 <pinMode>
    115c:	350c      	adds	r5, #12

   if (on)
    115e:	2f00      	cmp	r7, #0
    1160:	d00b      	beq.n	117a <_ZN10IridiumSBD5powerEb+0x3e>
   {
      diag.print(F("Powering on RockBLOCK...!\r\n"));
    1162:	4910      	ldr	r1, [pc, #64]	; (11a4 <_ZN10IridiumSBD5powerEb+0x68>)
    1164:	0028      	movs	r0, r5
    1166:	f003 f9b7 	bl	44d8 <_ZN5Print5printEPK19__FlashStringHelper>
      digitalWrite(this->sleepPin, HIGH); // HIGH = awake
    116a:	0031      	movs	r1, r6
    116c:	6c60      	ldr	r0, [r4, #68]	; 0x44
    116e:	f005 f80d 	bl	618c <digitalWrite>
      lastPowerOnTime = millis();
    1172:	f003 f8fd 	bl	4370 <millis>
    1176:	6520      	str	r0, [r4, #80]	; 0x50
    1178:	e012      	b.n	11a0 <_ZN10IridiumSBD5powerEb+0x64>

   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
    117a:	f003 f8f9 	bl	4370 <millis>
    117e:	6d23      	ldr	r3, [r4, #80]	; 0x50
    1180:	1ac0      	subs	r0, r0, r3
      if (elapsed < 2000UL)
    1182:	4b09      	ldr	r3, [pc, #36]	; (11a8 <_ZN10IridiumSBD5powerEb+0x6c>)
    1184:	4298      	cmp	r0, r3
    1186:	d803      	bhi.n	1190 <_ZN10IridiumSBD5powerEb+0x54>
         delay(2000UL - elapsed);
    1188:	3301      	adds	r3, #1
    118a:	1a18      	subs	r0, r3, r0
    118c:	f003 f8f6 	bl	437c <delay>

      diag.print(F("Powering off RockBLOCK...!\r\n"));
    1190:	4906      	ldr	r1, [pc, #24]	; (11ac <_ZN10IridiumSBD5powerEb+0x70>)
    1192:	0028      	movs	r0, r5
    1194:	f003 f9a0 	bl	44d8 <_ZN5Print5printEPK19__FlashStringHelper>
      digitalWrite(this->sleepPin, LOW); // LOW = asleep
    1198:	2100      	movs	r1, #0
    119a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    119c:	f004 fff6 	bl	618c <digitalWrite>
   }
}
    11a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	0000e1ca 	.word	0x0000e1ca
    11a8:	000007cf 	.word	0x000007cf
    11ac:	0000e1e6 	.word	0x0000e1e6

000011b0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
    11b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11b2:	0004      	movs	r4, r0
    11b4:	0005      	movs	r5, r0
    11b6:	000e      	movs	r6, r1
    11b8:	001f      	movs	r7, r3
    11ba:	341c      	adds	r4, #28
   if (beginLine)
    11bc:	2a00      	cmp	r2, #0
    11be:	d003      	beq.n	11c8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x18>
      cons.print(F(">> "));
    11c0:	4909      	ldr	r1, [pc, #36]	; (11e8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x38>)
    11c2:	0020      	movs	r0, r4
    11c4:	f003 f988 	bl	44d8 <_ZN5Print5printEPK19__FlashStringHelper>
   cons.print(str);
    11c8:	0031      	movs	r1, r6
    11ca:	0020      	movs	r0, r4
    11cc:	f003 f984 	bl	44d8 <_ZN5Print5printEPK19__FlashStringHelper>
   if (endLine)
    11d0:	2f00      	cmp	r7, #0
    11d2:	d003      	beq.n	11dc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x2c>
      cons.print(F("\r\n"));
    11d4:	4905      	ldr	r1, [pc, #20]	; (11ec <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3c>)
    11d6:	0020      	movs	r0, r4
    11d8:	f003 f97e 	bl	44d8 <_ZN5Print5printEPK19__FlashStringHelper>
   stream.print(str);
    11dc:	0031      	movs	r1, r6
    11de:	6828      	ldr	r0, [r5, #0]
    11e0:	f003 f97a 	bl	44d8 <_ZN5Print5printEPK19__FlashStringHelper>
}
    11e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11e6:	46c0      	nop			; (mov r8, r8)
    11e8:	0000e203 	.word	0x0000e203
    11ec:	0000e200 	.word	0x0000e200

000011f0 <_ZN10IridiumSBD13internalBeginEv>:
/* 
Private interface
*/

int IridiumSBD::internalBegin()
{
    11f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   diag.print(F("Calling internalBegin\r\n"));
    11f2:	0006      	movs	r6, r0
/* 
Private interface
*/

int IridiumSBD::internalBegin()
{
    11f4:	0004      	movs	r4, r0
   diag.print(F("Calling internalBegin\r\n"));
    11f6:	360c      	adds	r6, #12
    11f8:	493a      	ldr	r1, [pc, #232]	; (12e4 <_ZN10IridiumSBD13internalBeginEv+0xf4>)
/* 
Private interface
*/

int IridiumSBD::internalBegin()
{
    11fa:	b08b      	sub	sp, #44	; 0x2c
   diag.print(F("Calling internalBegin\r\n"));
    11fc:	0030      	movs	r0, r6
    11fe:	f003 f96b 	bl	44d8 <_ZN5Print5printEPK19__FlashStringHelper>

   if (!this->asleep)
    1202:	0023      	movs	r3, r4
    1204:	3340      	adds	r3, #64	; 0x40
    1206:	781b      	ldrb	r3, [r3, #0]
      return ISBD_ALREADY_AWAKE;
    1208:	2101      	movs	r1, #1

int IridiumSBD::internalBegin()
{
   diag.print(F("Calling internalBegin\r\n"));

   if (!this->asleep)
    120a:	2b00      	cmp	r3, #0
    120c:	d067      	beq.n	12de <_ZN10IridiumSBD13internalBeginEv+0xee>
      return ISBD_ALREADY_AWAKE;

   power(true); // power on
    120e:	0020      	movs	r0, r4
    1210:	f7ff ff94 	bl	113c <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;

   unsigned long startupTime = 500; //ms
   for (unsigned long start = millis(); millis() - start < startupTime;)
    1214:	f003 f8ac 	bl	4370 <millis>
    1218:	0005      	movs	r5, r0
    121a:	f003 f8a9 	bl	4370 <millis>
    121e:	23f4      	movs	r3, #244	; 0xf4
    1220:	33ff      	adds	r3, #255	; 0xff
    1222:	1b40      	subs	r0, r0, r5
    1224:	4298      	cmp	r0, r3
    1226:	d808      	bhi.n	123a <_ZN10IridiumSBD13internalBeginEv+0x4a>
   return false;
}

bool IridiumSBD::cancelled()
{
   if (ISBDCallback != NULL)
    1228:	4b2f      	ldr	r3, [pc, #188]	; (12e8 <_ZN10IridiumSBD13internalBeginEv+0xf8>)
    122a:	2b00      	cmp	r3, #0
    122c:	d0f5      	beq.n	121a <_ZN10IridiumSBD13internalBeginEv+0x2a>
      return !ISBDCallback();
    122e:	e000      	b.n	1232 <_ZN10IridiumSBD13internalBeginEv+0x42>
    1230:	bf00      	nop

   bool modemAlive = false;

   unsigned long startupTime = 500; //ms
   for (unsigned long start = millis(); millis() - start < startupTime;)
      if (cancelled())
    1232:	2800      	cmp	r0, #0
    1234:	d1f1      	bne.n	121a <_ZN10IridiumSBD13internalBeginEv+0x2a>
         return ISBD_CANCELLED;
    1236:	2104      	movs	r1, #4
    1238:	e051      	b.n	12de <_ZN10IridiumSBD13internalBeginEv+0xee>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * ISBD_STARTUP_MAX_TIME;)
    123a:	f003 f899 	bl	4370 <millis>
    123e:	9003      	str	r0, [sp, #12]
    1240:	f003 f896 	bl	4370 <millis>
    1244:	9b03      	ldr	r3, [sp, #12]
    1246:	1ac0      	subs	r0, r0, r3
    1248:	4b28      	ldr	r3, [pc, #160]	; (12ec <_ZN10IridiumSBD13internalBeginEv+0xfc>)
    124a:	4298      	cmp	r0, r3
    124c:	d842      	bhi.n	12d4 <_ZN10IridiumSBD13internalBeginEv+0xe4>
   {
      send(F("AT\r"));
    124e:	2301      	movs	r3, #1
    1250:	4927      	ldr	r1, [pc, #156]	; (12f0 <_ZN10IridiumSBD13internalBeginEv+0x100>)
    1252:	001a      	movs	r2, r3
    1254:	0020      	movs	r0, r4
    1256:	f7ff ffab 	bl	11b0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
    125a:	2300      	movs	r3, #0
    125c:	4d25      	ldr	r5, [pc, #148]	; (12f4 <_ZN10IridiumSBD13internalBeginEv+0x104>)
    125e:	001a      	movs	r2, r3
    1260:	9500      	str	r5, [sp, #0]
    1262:	0019      	movs	r1, r3
    1264:	0020      	movs	r0, r4
    1266:	f7ff fed3 	bl	1010 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
   return false;
}

bool IridiumSBD::cancelled()
{
   if (ISBDCallback != NULL)
    126a:	4f1f      	ldr	r7, [pc, #124]	; (12e8 <_ZN10IridiumSBD13internalBeginEv+0xf8>)

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * ISBD_STARTUP_MAX_TIME;)
   {
      send(F("AT\r"));
      modemAlive = waitForATResponse();
    126c:	9004      	str	r0, [sp, #16]
    126e:	9505      	str	r5, [sp, #20]
   return false;
}

bool IridiumSBD::cancelled()
{
   if (ISBDCallback != NULL)
    1270:	2f00      	cmp	r7, #0
    1272:	d108      	bne.n	1286 <_ZN10IridiumSBD13internalBeginEv+0x96>
   for (unsigned long start = millis(); millis() - start < startupTime;)
      if (cancelled())
         return ISBD_CANCELLED;

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * ISBD_STARTUP_MAX_TIME;)
    1274:	9b04      	ldr	r3, [sp, #16]
    1276:	2b00      	cmp	r3, #0
    1278:	d0e2      	beq.n	1240 <_ZN10IridiumSBD13internalBeginEv+0x50>
   {
      diag.print(F("No modem detected.\r\n"));
      return ISBD_NO_MODEM_DETECTED;
   }

   FlashString strings[3] = { F("ATE1\r"), F("AT&D0\r"), F("AT&K0\r") };
    127a:	4b1f      	ldr	r3, [pc, #124]	; (12f8 <_ZN10IridiumSBD13internalBeginEv+0x108>)
    127c:	aa07      	add	r2, sp, #28
    127e:	cb23      	ldmia	r3!, {r0, r1, r5}
    1280:	c223      	stmia	r2!, {r0, r1, r5}
    1282:	2500      	movs	r5, #0
    1284:	e004      	b.n	1290 <_ZN10IridiumSBD13internalBeginEv+0xa0>
}

bool IridiumSBD::cancelled()
{
   if (ISBDCallback != NULL)
      return !ISBDCallback();
    1286:	e000      	b.n	128a <_ZN10IridiumSBD13internalBeginEv+0x9a>
    1288:	bf00      	nop
   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * ISBD_STARTUP_MAX_TIME;)
   {
      send(F("AT\r"));
      modemAlive = waitForATResponse();
      if (cancelled())
    128a:	2800      	cmp	r0, #0
    128c:	d1f2      	bne.n	1274 <_ZN10IridiumSBD13internalBeginEv+0x84>
    128e:	e7d2      	b.n	1236 <_ZN10IridiumSBD13internalBeginEv+0x46>
   }

   FlashString strings[3] = { F("ATE1\r"), F("AT&D0\r"), F("AT&K0\r") };
   for (int i=0; i<3; ++i)
   {
      send(strings[i]); 
    1290:	2301      	movs	r3, #1
    1292:	a907      	add	r1, sp, #28
    1294:	001a      	movs	r2, r3
    1296:	5869      	ldr	r1, [r5, r1]
    1298:	0020      	movs	r0, r4
    129a:	f7ff ff89 	bl	11b0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      if (!waitForATResponse())
    129e:	9b05      	ldr	r3, [sp, #20]
    12a0:	0020      	movs	r0, r4
    12a2:	9300      	str	r3, [sp, #0]
    12a4:	2300      	movs	r3, #0
    12a6:	001a      	movs	r2, r3
    12a8:	0019      	movs	r1, r3
    12aa:	f7ff feb1 	bl	1010 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
    12ae:	2800      	cmp	r0, #0
    12b0:	d107      	bne.n	12c2 <_ZN10IridiumSBD13internalBeginEv+0xd2>
   return false;
}

bool IridiumSBD::cancelled()
{
   if (ISBDCallback != NULL)
    12b2:	2f00      	cmp	r7, #0
    12b4:	d003      	beq.n	12be <_ZN10IridiumSBD13internalBeginEv+0xce>
      return !ISBDCallback();
    12b6:	e000      	b.n	12ba <_ZN10IridiumSBD13internalBeginEv+0xca>
    12b8:	bf00      	nop
   FlashString strings[3] = { F("ATE1\r"), F("AT&D0\r"), F("AT&K0\r") };
   for (int i=0; i<3; ++i)
   {
      send(strings[i]); 
      if (!waitForATResponse())
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
    12ba:	2800      	cmp	r0, #0
    12bc:	d0bb      	beq.n	1236 <_ZN10IridiumSBD13internalBeginEv+0x46>
    12be:	2103      	movs	r1, #3
    12c0:	e00d      	b.n	12de <_ZN10IridiumSBD13internalBeginEv+0xee>
    12c2:	3504      	adds	r5, #4
      diag.print(F("No modem detected.\r\n"));
      return ISBD_NO_MODEM_DETECTED;
   }

   FlashString strings[3] = { F("ATE1\r"), F("AT&D0\r"), F("AT&K0\r") };
   for (int i=0; i<3; ++i)
    12c4:	2d0c      	cmp	r5, #12
    12c6:	d1e3      	bne.n	1290 <_ZN10IridiumSBD13internalBeginEv+0xa0>
      send(strings[i]); 
      if (!waitForATResponse())
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
   }

   diag.print(F("InternalBegin: success!\r\n"));
    12c8:	490c      	ldr	r1, [pc, #48]	; (12fc <_ZN10IridiumSBD13internalBeginEv+0x10c>)
    12ca:	0030      	movs	r0, r6
    12cc:	f003 f904 	bl	44d8 <_ZN5Print5printEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
    12d0:	2100      	movs	r1, #0
    12d2:	e004      	b.n	12de <_ZN10IridiumSBD13internalBeginEv+0xee>
         return ISBD_CANCELLED;
   }

   if (!modemAlive)
   {
      diag.print(F("No modem detected.\r\n"));
    12d4:	490a      	ldr	r1, [pc, #40]	; (1300 <_ZN10IridiumSBD13internalBeginEv+0x110>)
    12d6:	0030      	movs	r0, r6
    12d8:	f003 f8fe 	bl	44d8 <_ZN5Print5printEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
    12dc:	2105      	movs	r1, #5
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
   }

   diag.print(F("InternalBegin: success!\r\n"));
   return ISBD_SUCCESS;
}
    12de:	0008      	movs	r0, r1
    12e0:	b00b      	add	sp, #44	; 0x2c
    12e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12e4:	0000e207 	.word	0x0000e207
    12e8:	00000000 	.word	0x00000000
    12ec:	0003a97f 	.word	0x0003a97f
    12f0:	0000e239 	.word	0x0000e239
    12f4:	0000e2ef 	.word	0x0000e2ef
    12f8:	0000e1a4 	.word	0x0000e1a4
    12fc:	0000e21f 	.word	0x0000e21f
    1300:	0000e23d 	.word	0x0000e23d

00001304 <_ZN10IridiumSBD5beginEv>:

#include "IridiumSBD.h"

// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
    1304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if (this->reentrant)
    1306:	0006      	movs	r6, r0
    1308:	3641      	adds	r6, #65	; 0x41
    130a:	7835      	ldrb	r5, [r6, #0]

#include "IridiumSBD.h"

// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
    130c:	0004      	movs	r4, r0
   if (this->reentrant)
      return ISBD_REENTRANT;
    130e:	2109      	movs	r1, #9
#include "IridiumSBD.h"

// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
   if (this->reentrant)
    1310:	2d00      	cmp	r5, #0
    1312:	d10c      	bne.n	132e <_ZN10IridiumSBD5beginEv+0x2a>
      return ISBD_REENTRANT;

   this->reentrant = true;
    1314:	2301      	movs	r3, #1
    1316:	7033      	strb	r3, [r6, #0]
   int ret = internalBegin();
    1318:	f7ff ff6a 	bl	11f0 <_ZN10IridiumSBD13internalBeginEv>
   this->reentrant = false;
    131c:	7035      	strb	r5, [r6, #0]
{
   if (this->reentrant)
      return ISBD_REENTRANT;

   this->reentrant = true;
   int ret = internalBegin();
    131e:	0007      	movs	r7, r0
    1320:	0029      	movs	r1, r5
   this->reentrant = false;

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
    1322:	2800      	cmp	r0, #0
    1324:	d003      	beq.n	132e <_ZN10IridiumSBD5beginEv+0x2a>
      power(false);
    1326:	0020      	movs	r0, r4
    1328:	f7ff ff08 	bl	113c <_ZN10IridiumSBD5powerEb>
    132c:	0039      	movs	r1, r7

   return ret;
}
    132e:	0008      	movs	r0, r1
    1330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001334 <_ZN10IridiumSBD13internalSleepEv>:
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
   if (this->asleep)
    1334:	0003      	movs	r3, r0
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
    1336:	b537      	push	{r0, r1, r2, r4, r5, lr}
   if (this->asleep)
    1338:	3340      	adds	r3, #64	; 0x40
    133a:	781c      	ldrb	r4, [r3, #0]
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
    133c:	0005      	movs	r5, r0
   if (this->asleep)
      return ISBD_IS_ASLEEP;
    133e:	230a      	movs	r3, #10
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
   if (this->asleep)
    1340:	2c00      	cmp	r4, #0
    1342:	d118      	bne.n	1376 <_ZN10IridiumSBD13internalSleepEv+0x42>
      return ISBD_IS_ASLEEP;

   // Best Practices Guide suggests this before shutdown
   send(F("AT*F\r"));
    1344:	3b09      	subs	r3, #9
    1346:	001a      	movs	r2, r3
    1348:	490c      	ldr	r1, [pc, #48]	; (137c <_ZN10IridiumSBD13internalSleepEv+0x48>)
    134a:	f7ff ff31 	bl	11b0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>

   if (!waitForATResponse())
    134e:	4b0c      	ldr	r3, [pc, #48]	; (1380 <_ZN10IridiumSBD13internalSleepEv+0x4c>)
    1350:	0022      	movs	r2, r4
    1352:	9300      	str	r3, [sp, #0]
    1354:	0021      	movs	r1, r4
    1356:	0023      	movs	r3, r4
    1358:	0028      	movs	r0, r5
    135a:	f7ff fe59 	bl	1010 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;

   return ISBD_SUCCESS;
    135e:	0023      	movs	r3, r4
      return ISBD_IS_ASLEEP;

   // Best Practices Guide suggests this before shutdown
   send(F("AT*F\r"));

   if (!waitForATResponse())
    1360:	2800      	cmp	r0, #0
    1362:	d108      	bne.n	1376 <_ZN10IridiumSBD13internalSleepEv+0x42>
   return false;
}

bool IridiumSBD::cancelled()
{
   if (ISBDCallback != NULL)
    1364:	4b07      	ldr	r3, [pc, #28]	; (1384 <_ZN10IridiumSBD13internalSleepEv+0x50>)
    1366:	2b00      	cmp	r3, #0
    1368:	d004      	beq.n	1374 <_ZN10IridiumSBD13internalSleepEv+0x40>
      return !ISBDCallback();
    136a:	e000      	b.n	136e <_ZN10IridiumSBD13internalSleepEv+0x3a>
    136c:	bf00      	nop

   // Best Practices Guide suggests this before shutdown
   send(F("AT*F\r"));

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
    136e:	2304      	movs	r3, #4
    1370:	2800      	cmp	r0, #0
    1372:	d000      	beq.n	1376 <_ZN10IridiumSBD13internalSleepEv+0x42>
    1374:	2303      	movs	r3, #3

   return ISBD_SUCCESS;
}
    1376:	0018      	movs	r0, r3
    1378:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	0000e273 	.word	0x0000e273
    1380:	0000e2ef 	.word	0x0000e2ef
    1384:	00000000 	.word	0x00000000

00001388 <_ZN10IridiumSBD5sleepEv>:
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
    1388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if (this->reentrant)
    138a:	0006      	movs	r6, r0
    138c:	3641      	adds	r6, #65	; 0x41
    138e:	7837      	ldrb	r7, [r6, #0]
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
    1390:	0005      	movs	r5, r0
   if (this->reentrant)
      return ISBD_REENTRANT;
    1392:	2409      	movs	r4, #9
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
   if (this->reentrant)
    1394:	2f00      	cmp	r7, #0
    1396:	d10e      	bne.n	13b6 <_ZN10IridiumSBD5sleepEv+0x2e>
      return ISBD_REENTRANT;

   if (this->sleepPin == -1)
    1398:	6c43      	ldr	r3, [r0, #68]	; 0x44
      return ISBD_NO_SLEEP_PIN;
    139a:	3402      	adds	r4, #2
int IridiumSBD::sleep()
{
   if (this->reentrant)
      return ISBD_REENTRANT;

   if (this->sleepPin == -1)
    139c:	3301      	adds	r3, #1
    139e:	d00a      	beq.n	13b6 <_ZN10IridiumSBD5sleepEv+0x2e>
      return ISBD_NO_SLEEP_PIN;

   this->reentrant = true;
    13a0:	2301      	movs	r3, #1
    13a2:	7033      	strb	r3, [r6, #0]
   int ret = internalSleep();
    13a4:	f7ff ffc6 	bl	1334 <_ZN10IridiumSBD13internalSleepEv>
   this->reentrant = false;
    13a8:	7037      	strb	r7, [r6, #0]
    13aa:	1e04      	subs	r4, r0, #0

   if (ret == ISBD_SUCCESS)
    13ac:	d103      	bne.n	13b6 <_ZN10IridiumSBD5sleepEv+0x2e>
      power(false); // power off
    13ae:	0001      	movs	r1, r0
    13b0:	0028      	movs	r0, r5
    13b2:	f7ff fec3 	bl	113c <_ZN10IridiumSBD5powerEb>
   return ret;
}
    13b6:	0020      	movs	r0, r4
    13b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000013bc <_ZNKSt6vectorI4DataSaIS0_EE12_M_check_lenEjPKc.isra.18>:

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    13bc:	c80c      	ldmia	r0!, {r2, r3}
    13be:	1a9b      	subs	r3, r3, r2
    13c0:	4a08      	ldr	r2, [pc, #32]	; (13e4 <_ZNKSt6vectorI4DataSaIS0_EE12_M_check_lenEjPKc.isra.18+0x28>)
    13c2:	109b      	asrs	r3, r3, #2
    13c4:	4353      	muls	r3, r2
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
    13c6:	1e1a      	subs	r2, r3, #0
    13c8:	428a      	cmp	r2, r1
    13ca:	d200      	bcs.n	13ce <_ZNKSt6vectorI4DataSaIS0_EE12_M_check_lenEjPKc.isra.18+0x12>
    13cc:	000a      	movs	r2, r1
    13ce:	4906      	ldr	r1, [pc, #24]	; (13e8 <_ZNKSt6vectorI4DataSaIS0_EE12_M_check_lenEjPKc.isra.18+0x2c>)
    13d0:	18d2      	adds	r2, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    13d2:	0008      	movs	r0, r1
    13d4:	4293      	cmp	r3, r2
    13d6:	d803      	bhi.n	13e0 <_ZNKSt6vectorI4DataSaIS0_EE12_M_check_lenEjPKc.isra.18+0x24>
    13d8:	1e10      	subs	r0, r2, #0
    13da:	4288      	cmp	r0, r1
    13dc:	d900      	bls.n	13e0 <_ZNKSt6vectorI4DataSaIS0_EE12_M_check_lenEjPKc.isra.18+0x24>
    13de:	0008      	movs	r0, r1
      }
    13e0:	4770      	bx	lr
    13e2:	46c0      	nop			; (mov r8, r8)
    13e4:	aaaaaaab 	.word	0xaaaaaaab
    13e8:	15555555 	.word	0x15555555

000013ec <_ZSt22__uninitialized_move_aIP4DataS1_SaIS0_EET0_T_S4_S3_RT1_.isra.26>:
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
    13ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    13ee:	468c      	mov	ip, r1
    13f0:	0004      	movs	r4, r0
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
    13f2:	0013      	movs	r3, r2
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
    13f4:	9201      	str	r2, [sp, #4]
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
    13f6:	45a4      	cmp	ip, r4
    13f8:	d008      	beq.n	140c <_ZSt22__uninitialized_move_aIP4DataS1_SaIS0_EET0_T_S4_S3_RT1_.isra.26+0x20>
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
    13fa:	2b00      	cmp	r3, #0
    13fc:	d003      	beq.n	1406 <_ZSt22__uninitialized_move_aIP4DataS1_SaIS0_EET0_T_S4_S3_RT1_.isra.26+0x1a>
    13fe:	001d      	movs	r5, r3
    1400:	0026      	movs	r6, r4
    1402:	ce86      	ldmia	r6!, {r1, r2, r7}
    1404:	c586      	stmia	r5!, {r1, r2, r7}
      { return _M_current; }

      move_iterator&
      operator++()
      {
	++_M_current;
    1406:	340c      	adds	r4, #12
    1408:	330c      	adds	r3, #12
    140a:	e7f4      	b.n	13f6 <_ZSt22__uninitialized_move_aIP4DataS1_SaIS0_EET0_T_S4_S3_RT1_.isra.26+0xa>
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
					 __result, __alloc);
    140c:	4663      	mov	r3, ip
    140e:	1a19      	subs	r1, r3, r0
    1410:	200c      	movs	r0, #12
    1412:	4b04      	ldr	r3, [pc, #16]	; (1424 <_ZSt22__uninitialized_move_aIP4DataS1_SaIS0_EET0_T_S4_S3_RT1_.isra.26+0x38>)
    1414:	0889      	lsrs	r1, r1, #2
    1416:	4359      	muls	r1, r3
    1418:	0089      	lsls	r1, r1, #2
    141a:	0889      	lsrs	r1, r1, #2
    141c:	4348      	muls	r0, r1
    141e:	9b01      	ldr	r3, [sp, #4]
    1420:	1818      	adds	r0, r3, r0
    }
    1422:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1424:	2aaaaaab 	.word	0x2aaaaaab

00001428 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIP4DataSt6vectorIS2_SaIS2_EEEES3_S2_ET0_T_S9_S8_RSaIT1_E.isra.23>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
    1428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    142a:	468c      	mov	ip, r1
    142c:	0003      	movs	r3, r0
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
    142e:	0014      	movs	r4, r2
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
    1430:	9201      	str	r2, [sp, #4]
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
    1432:	459c      	cmp	ip, r3
    1434:	d008      	beq.n	1448 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIP4DataSt6vectorIS2_SaIS2_EEEES3_S2_ET0_T_S9_S8_RSaIT1_E.isra.23+0x20>
    1436:	2c00      	cmp	r4, #0
    1438:	d003      	beq.n	1442 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIP4DataSt6vectorIS2_SaIS2_EEEES3_S2_ET0_T_S9_S8_RSaIT1_E.isra.23+0x1a>
    143a:	0025      	movs	r5, r4
    143c:	001e      	movs	r6, r3
    143e:	ce86      	ldmia	r6!, {r1, r2, r7}
    1440:	c586      	stmia	r5!, {r1, r2, r7}
    1442:	340c      	adds	r4, #12
    1444:	330c      	adds	r3, #12
    1446:	e7f4      	b.n	1432 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIP4DataSt6vectorIS2_SaIS2_EEEES3_S2_ET0_T_S9_S8_RSaIT1_E.isra.23+0xa>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
    1448:	4663      	mov	r3, ip
    144a:	1a19      	subs	r1, r3, r0
    144c:	200c      	movs	r0, #12
    144e:	4b04      	ldr	r3, [pc, #16]	; (1460 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIP4DataSt6vectorIS2_SaIS2_EEEES3_S2_ET0_T_S9_S8_RSaIT1_E.isra.23+0x38>)
    1450:	0889      	lsrs	r1, r1, #2
    1452:	4359      	muls	r1, r3
    1454:	0089      	lsls	r1, r1, #2
    1456:	0889      	lsrs	r1, r1, #2
    1458:	4348      	muls	r0, r1
    145a:	9b01      	ldr	r3, [sp, #4]
    145c:	1818      	adds	r0, r3, r0
    145e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1460:	2aaaaaab 	.word	0x2aaaaaab

00001464 <_ZNK8Boundary8containsERK5Point>:
struct Boundary
{
    Point centre;
    float half_size;

    bool contains(const Point& a) const
    1464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    {
        if(a.x < centre.x + half_size && a.x > centre.x - half_size)
    1466:	6884      	ldr	r4, [r0, #8]
    1468:	6807      	ldr	r7, [r0, #0]
    146a:	680b      	ldr	r3, [r1, #0]
struct Boundary
{
    Point centre;
    float half_size;

    bool contains(const Point& a) const
    146c:	0005      	movs	r5, r0
    146e:	000e      	movs	r6, r1
    {
        if(a.x < centre.x + half_size && a.x > centre.x - half_size)
    1470:	1c38      	adds	r0, r7, #0
    1472:	1c21      	adds	r1, r4, #0
    1474:	9301      	str	r3, [sp, #4]
    1476:	f005 fc9b 	bl	6db0 <__aeabi_fadd>
    147a:	1c01      	adds	r1, r0, #0
    147c:	9801      	ldr	r0, [sp, #4]
    147e:	f005 fc51 	bl	6d24 <__aeabi_fcmplt>
    1482:	2800      	cmp	r0, #0
    1484:	d022      	beq.n	14cc <_ZNK8Boundary8containsERK5Point+0x68>
    1486:	1c21      	adds	r1, r4, #0
    1488:	1c38      	adds	r0, r7, #0
    148a:	f005 ffcb 	bl	7424 <__aeabi_fsub>
    148e:	1c01      	adds	r1, r0, #0
    1490:	9801      	ldr	r0, [sp, #4]
    1492:	f005 fc5b 	bl	6d4c <__aeabi_fcmpgt>
    1496:	2800      	cmp	r0, #0
    1498:	d018      	beq.n	14cc <_ZNK8Boundary8containsERK5Point+0x68>
        {
            if(a.y < centre.y + half_size && a.y > centre.y - half_size)
    149a:	686d      	ldr	r5, [r5, #4]
    149c:	1c20      	adds	r0, r4, #0
    149e:	1c29      	adds	r1, r5, #0
    14a0:	f005 fc86 	bl	6db0 <__aeabi_fadd>
    14a4:	6876      	ldr	r6, [r6, #4]
    14a6:	1c01      	adds	r1, r0, #0
    14a8:	1c30      	adds	r0, r6, #0
    14aa:	f005 fc3b 	bl	6d24 <__aeabi_fcmplt>
    14ae:	2800      	cmp	r0, #0
    14b0:	d00c      	beq.n	14cc <_ZNK8Boundary8containsERK5Point+0x68>
    14b2:	1c21      	adds	r1, r4, #0
    14b4:	1c28      	adds	r0, r5, #0
    14b6:	f005 ffb5 	bl	7424 <__aeabi_fsub>
    14ba:	1c01      	adds	r1, r0, #0
    14bc:	1c30      	adds	r0, r6, #0
    14be:	2401      	movs	r4, #1
    14c0:	f005 fc44 	bl	6d4c <__aeabi_fcmpgt>
    14c4:	2800      	cmp	r0, #0
    14c6:	d100      	bne.n	14ca <_ZNK8Boundary8containsERK5Point+0x66>
    14c8:	1c04      	adds	r4, r0, #0
    14ca:	b2e0      	uxtb	r0, r4
            {
                return true;
            }
        }
        return false;
    }
    14cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000014ce <_ZSt17__throw_bad_allocv>:

namespace std {
  void __throw_length_error(char const*) {
  }
  void __throw_bad_alloc(){
  }
    14ce:	4770      	bx	lr

000014d0 <_ZN8QuadtreeC1Ev>:

Quadtree::Quadtree():
    nw{nullptr},
    ne{nullptr},
    sw{nullptr},
    se{nullptr}
    14d0:	2300      	movs	r3, #0
struct Point
{
    float x, y;

    Point(float pos_x = 0.0f, float pos_y = 0.0f){
        x = pos_x;
    14d2:	2200      	movs	r2, #0
    14d4:	6003      	str	r3, [r0, #0]
    14d6:	6043      	str	r3, [r0, #4]
    14d8:	6083      	str	r3, [r0, #8]
    14da:	60c3      	str	r3, [r0, #12]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    14dc:	61c3      	str	r3, [r0, #28]
    14de:	6203      	str	r3, [r0, #32]
    14e0:	6243      	str	r3, [r0, #36]	; 0x24
{
    this->boundary = Boundary(Boundary(0.0f, 0.0f, 180.0f));
    14e2:	4b02      	ldr	r3, [pc, #8]	; (14ec <_ZN8QuadtreeC1Ev+0x1c>)
    14e4:	6102      	str	r2, [r0, #16]
        y = pos_y;
    14e6:	6142      	str	r2, [r0, #20]
    14e8:	6183      	str	r3, [r0, #24]
}
    14ea:	4770      	bx	lr
    14ec:	43340000 	.word	0x43340000

000014f0 <_ZN8QuadtreeC1E8Boundary>:


Quadtree::Quadtree(Boundary boundary):
    14f0:	b530      	push	{r4, r5, lr}
    14f2:	b085      	sub	sp, #20
    14f4:	9303      	str	r3, [sp, #12]
    nw{nullptr},
    ne{nullptr},
    sw{nullptr},
    se{nullptr}
    14f6:	2300      	movs	r3, #0
    14f8:	6003      	str	r3, [r0, #0]
    14fa:	6043      	str	r3, [r0, #4]
    14fc:	6083      	str	r3, [r0, #8]
    14fe:	60c3      	str	r3, [r0, #12]
    1500:	61c3      	str	r3, [r0, #28]
    1502:	6203      	str	r3, [r0, #32]
    1504:	6243      	str	r3, [r0, #36]	; 0x24
{
    this->boundary = boundary;
    1506:	0003      	movs	r3, r0
{
    this->boundary = Boundary(Boundary(0.0f, 0.0f, 180.0f));
}


Quadtree::Quadtree(Boundary boundary):
    1508:	ac01      	add	r4, sp, #4
    150a:	9101      	str	r1, [sp, #4]
    150c:	9202      	str	r2, [sp, #8]
    nw{nullptr},
    ne{nullptr},
    sw{nullptr},
    se{nullptr}
{
    this->boundary = boundary;
    150e:	3310      	adds	r3, #16
    1510:	cc26      	ldmia	r4!, {r1, r2, r5}
    1512:	c326      	stmia	r3!, {r1, r2, r5}
}
    1514:	b005      	add	sp, #20
    1516:	bd30      	pop	{r4, r5, pc}

00001518 <_ZN8Quadtree9subdivideEv>:
    delete ne;
    delete se;
}

void Quadtree::subdivide()
{
    1518:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    float q_size = boundary.half_size;
    151a:	6985      	ldr	r5, [r0, #24]
    delete ne;
    delete se;
}

void Quadtree::subdivide()
{
    151c:	0004      	movs	r4, r0
    float q_size = boundary.half_size;
    Point q_center = Point(boundary.centre.x - q_size, boundary.centre.y - q_size);
    151e:	1c29      	adds	r1, r5, #0
    1520:	6940      	ldr	r0, [r0, #20]
    1522:	f005 ff7f 	bl	7424 <__aeabi_fsub>
        centre = Point(pos_x, pos_y);
        half_size = h_size;
    }

    Boundary(Point p_point, float h_size = 0.0f){
        centre = p_point;
    1526:	1c29      	adds	r1, r5, #0
    1528:	1c06      	adds	r6, r0, #0
    152a:	6920      	ldr	r0, [r4, #16]
    152c:	f005 ff7a 	bl	7424 <__aeabi_fsub>
    1530:	9001      	str	r0, [sp, #4]

    nw = new Quadtree(Boundary(q_center, q_size));
    1532:	2028      	movs	r0, #40	; 0x28
    1534:	9602      	str	r6, [sp, #8]
        half_size = h_size;
    1536:	9503      	str	r5, [sp, #12]
    1538:	f002 ffa4 	bl	4484 <_Znwj>
    153c:	0006      	movs	r6, r0
    153e:	9a02      	ldr	r2, [sp, #8]
    1540:	9b03      	ldr	r3, [sp, #12]
    1542:	9901      	ldr	r1, [sp, #4]
    1544:	f7ff ffd4 	bl	14f0 <_ZN8QuadtreeC1E8Boundary>
    1548:	6026      	str	r6, [r4, #0]

    q_center = Point(boundary.centre.x + q_size, boundary.centre.y - q_size);
    154a:	1c29      	adds	r1, r5, #0
    154c:	6960      	ldr	r0, [r4, #20]
    154e:	f005 ff69 	bl	7424 <__aeabi_fsub>
        centre = Point(pos_x, pos_y);
        half_size = h_size;
    }

    Boundary(Point p_point, float h_size = 0.0f){
        centre = p_point;
    1552:	1c29      	adds	r1, r5, #0
    1554:	1c06      	adds	r6, r0, #0
    1556:	6920      	ldr	r0, [r4, #16]
    1558:	f005 fc2a 	bl	6db0 <__aeabi_fadd>
    155c:	9001      	str	r0, [sp, #4]
    ne = new Quadtree(Boundary(q_center, q_size));
    155e:	2028      	movs	r0, #40	; 0x28
    1560:	9602      	str	r6, [sp, #8]
        half_size = h_size;
    1562:	9503      	str	r5, [sp, #12]
    1564:	f002 ff8e 	bl	4484 <_Znwj>
    1568:	0006      	movs	r6, r0
    156a:	9a02      	ldr	r2, [sp, #8]
    156c:	9b03      	ldr	r3, [sp, #12]
    156e:	9901      	ldr	r1, [sp, #4]
    1570:	f7ff ffbe 	bl	14f0 <_ZN8QuadtreeC1E8Boundary>

    q_center = Point(boundary.centre.x - q_size, boundary.centre.y + q_size);
    1574:	6961      	ldr	r1, [r4, #20]
    Point q_center = Point(boundary.centre.x - q_size, boundary.centre.y - q_size);

    nw = new Quadtree(Boundary(q_center, q_size));

    q_center = Point(boundary.centre.x + q_size, boundary.centre.y - q_size);
    ne = new Quadtree(Boundary(q_center, q_size));
    1576:	6066      	str	r6, [r4, #4]

    q_center = Point(boundary.centre.x - q_size, boundary.centre.y + q_size);
    1578:	1c28      	adds	r0, r5, #0
    157a:	f005 fc19 	bl	6db0 <__aeabi_fadd>
        centre = Point(pos_x, pos_y);
        half_size = h_size;
    }

    Boundary(Point p_point, float h_size = 0.0f){
        centre = p_point;
    157e:	1c29      	adds	r1, r5, #0
    1580:	1c06      	adds	r6, r0, #0
    1582:	6920      	ldr	r0, [r4, #16]
    1584:	f005 ff4e 	bl	7424 <__aeabi_fsub>
    1588:	9001      	str	r0, [sp, #4]
    sw = new Quadtree(Boundary(q_center, q_size));
    158a:	2028      	movs	r0, #40	; 0x28
    158c:	9602      	str	r6, [sp, #8]
        half_size = h_size;
    158e:	9503      	str	r5, [sp, #12]
    1590:	f002 ff78 	bl	4484 <_Znwj>
    1594:	0006      	movs	r6, r0
    1596:	9a02      	ldr	r2, [sp, #8]
    1598:	9b03      	ldr	r3, [sp, #12]
    159a:	9901      	ldr	r1, [sp, #4]
    159c:	f7ff ffa8 	bl	14f0 <_ZN8QuadtreeC1E8Boundary>

    q_center = Point(boundary.centre.x + q_size, boundary.centre.y + q_size);
    15a0:	6961      	ldr	r1, [r4, #20]

    q_center = Point(boundary.centre.x + q_size, boundary.centre.y - q_size);
    ne = new Quadtree(Boundary(q_center, q_size));

    q_center = Point(boundary.centre.x - q_size, boundary.centre.y + q_size);
    sw = new Quadtree(Boundary(q_center, q_size));
    15a2:	60a6      	str	r6, [r4, #8]

    q_center = Point(boundary.centre.x + q_size, boundary.centre.y + q_size);
    15a4:	1c28      	adds	r0, r5, #0
    15a6:	f005 fc03 	bl	6db0 <__aeabi_fadd>
        centre = Point(pos_x, pos_y);
        half_size = h_size;
    }

    Boundary(Point p_point, float h_size = 0.0f){
        centre = p_point;
    15aa:	1c29      	adds	r1, r5, #0
    15ac:	1c06      	adds	r6, r0, #0
    15ae:	6920      	ldr	r0, [r4, #16]
    15b0:	f005 fbfe 	bl	6db0 <__aeabi_fadd>
    15b4:	9001      	str	r0, [sp, #4]
    se = new Quadtree(Boundary(q_center, q_size));
    15b6:	2028      	movs	r0, #40	; 0x28
    15b8:	9602      	str	r6, [sp, #8]
        half_size = h_size;
    15ba:	9503      	str	r5, [sp, #12]
    15bc:	f002 ff62 	bl	4484 <_Znwj>
    15c0:	0005      	movs	r5, r0
    15c2:	9901      	ldr	r1, [sp, #4]
    15c4:	9a02      	ldr	r2, [sp, #8]
    15c6:	9b03      	ldr	r3, [sp, #12]
    15c8:	f7ff ff92 	bl	14f0 <_ZN8QuadtreeC1E8Boundary>
    15cc:	60e5      	str	r5, [r4, #12]
}
    15ce:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

000015d0 <_ZNSt6vectorI4DataSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
    15d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    15d2:	6843      	ldr	r3, [r0, #4]
    15d4:	6882      	ldr	r2, [r0, #8]
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
    15d6:	0004      	movs	r4, r0
    15d8:	000d      	movs	r5, r1
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    15da:	4293      	cmp	r3, r2
    15dc:	d007      	beq.n	15ee <_ZNSt6vectorI4DataSaIS0_EE9push_backERKS0_+0x1e>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    15de:	2b00      	cmp	r3, #0
    15e0:	d002      	beq.n	15e8 <_ZNSt6vectorI4DataSaIS0_EE9push_backERKS0_+0x18>
    15e2:	001a      	movs	r2, r3
    15e4:	cd43      	ldmia	r5!, {r0, r1, r6}
    15e6:	c243      	stmia	r2!, {r0, r1, r6}
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
	    ++this->_M_impl._M_finish;
    15e8:	330c      	adds	r3, #12
    15ea:	6063      	str	r3, [r4, #4]
    15ec:	e028      	b.n	1640 <_ZNSt6vectorI4DataSaIS0_EE9push_backERKS0_+0x70>
      void
      vector<_Tp, _Alloc>::
      _M_emplace_back_aux(_Args&&... __args)
      {
	const size_type __len =
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
    15ee:	2101      	movs	r1, #1
    15f0:	f7ff fee4 	bl	13bc <_ZNKSt6vectorI4DataSaIS0_EE12_M_check_lenEjPKc.isra.18>
    15f4:	0007      	movs	r7, r0

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    15f6:	1e06      	subs	r6, r0, #0
    15f8:	d004      	beq.n	1604 <_ZNSt6vectorI4DataSaIS0_EE9push_backERKS0_+0x34>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    15fa:	200c      	movs	r0, #12
    15fc:	4378      	muls	r0, r7
    15fe:	f002 ff41 	bl	4484 <_Znwj>
    1602:	0006      	movs	r6, r0

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    1604:	6863      	ldr	r3, [r4, #4]
    1606:	469c      	mov	ip, r3
    1608:	6823      	ldr	r3, [r4, #0]
    160a:	9301      	str	r3, [sp, #4]
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
    160c:	4663      	mov	r3, ip
    160e:	9a01      	ldr	r2, [sp, #4]
    1610:	1a9b      	subs	r3, r3, r2
    1612:	18f3      	adds	r3, r6, r3

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    1614:	2b00      	cmp	r3, #0
    1616:	d001      	beq.n	161c <_ZNSt6vectorI4DataSaIS0_EE9push_backERKS0_+0x4c>
    1618:	cd07      	ldmia	r5!, {r0, r1, r2}
    161a:	c307      	stmia	r3!, {r0, r1, r2}
				     std::forward<_Args>(__args)...);
	    __new_finish = pointer();

	    __new_finish
    161c:	0032      	movs	r2, r6
    161e:	4661      	mov	r1, ip
    1620:	9801      	ldr	r0, [sp, #4]
    1622:	f7ff fee3 	bl	13ec <_ZSt22__uninitialized_move_aIP4DataS1_SaIS0_EET0_T_S4_S3_RT1_.isra.26>
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
    1626:	300c      	adds	r0, #12
    1628:	0005      	movs	r5, r0
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
    162a:	6820      	ldr	r0, [r4, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
    162c:	2800      	cmp	r0, #0
    162e:	d001      	beq.n	1634 <_ZNSt6vectorI4DataSaIS0_EE9push_backERKS0_+0x64>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
    1630:	f002 ff2c 	bl	448c <_ZdlPv>
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
    1634:	230c      	movs	r3, #12
    1636:	435f      	muls	r7, r3
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
    1638:	6026      	str	r6, [r4, #0]
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
    163a:	19f6      	adds	r6, r6, r7
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
    163c:	6065      	str	r5, [r4, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
    163e:	60a6      	str	r6, [r4, #8]
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
#else
	  _M_insert_aux(end(), __x);
#endif
      }
    1640:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

00001644 <_ZN8Quadtree6insertE4Data>:

bool Quadtree::insert(Data d)
{
    1644:	b530      	push	{r4, r5, lr}
    1646:	0004      	movs	r4, r0
    1648:	b085      	sub	sp, #20
    164a:	9101      	str	r1, [sp, #4]
    164c:	9202      	str	r2, [sp, #8]
    164e:	9303      	str	r3, [sp, #12]
    if(!boundary.contains(d.pos))
    1650:	0020      	movs	r0, r4
    1652:	a901      	add	r1, sp, #4
    1654:	3010      	adds	r0, #16
    1656:	f7ff ff05 	bl	1464 <_ZNK8Boundary8containsERK5Point>
    165a:	1e05      	subs	r5, r0, #0
    165c:	d02d      	beq.n	16ba <_ZN8Quadtree6insertE4Data+0x76>
    {
        return false;
    }

    if(objects.size() < CAPACITY)
    165e:	69e2      	ldr	r2, [r4, #28]
    1660:	6a23      	ldr	r3, [r4, #32]
    1662:	1a9b      	subs	r3, r3, r2
    1664:	4a16      	ldr	r2, [pc, #88]	; (16c0 <_ZN8Quadtree6insertE4Data+0x7c>)
    1666:	109b      	asrs	r3, r3, #2
    1668:	4353      	muls	r3, r2
    166a:	2b03      	cmp	r3, #3
    166c:	d805      	bhi.n	167a <_ZN8Quadtree6insertE4Data+0x36>
    {
        objects.push_back(d);
    166e:	0020      	movs	r0, r4
    1670:	a901      	add	r1, sp, #4
    1672:	301c      	adds	r0, #28
    1674:	f7ff ffac 	bl	15d0 <_ZNSt6vectorI4DataSaIS0_EE9push_backERKS0_>
        return true;
    1678:	e01f      	b.n	16ba <_ZN8Quadtree6insertE4Data+0x76>
    }

    if(nw == nullptr)
    167a:	6823      	ldr	r3, [r4, #0]
    167c:	2b00      	cmp	r3, #0
    167e:	d102      	bne.n	1686 <_ZN8Quadtree6insertE4Data+0x42>
    {
        subdivide();
    1680:	0020      	movs	r0, r4
    1682:	f7ff ff49 	bl	1518 <_ZN8Quadtree9subdivideEv>
    }

    if(nw->insert(d))
    1686:	9901      	ldr	r1, [sp, #4]
    1688:	9a02      	ldr	r2, [sp, #8]
    168a:	9b03      	ldr	r3, [sp, #12]
    168c:	6820      	ldr	r0, [r4, #0]
    168e:	f7ff ffd9 	bl	1644 <_ZN8Quadtree6insertE4Data>
    1692:	2800      	cmp	r0, #0
    1694:	d111      	bne.n	16ba <_ZN8Quadtree6insertE4Data+0x76>
    {
        return true;
    }
    if(ne->insert(d))
    1696:	9901      	ldr	r1, [sp, #4]
    1698:	9a02      	ldr	r2, [sp, #8]
    169a:	9b03      	ldr	r3, [sp, #12]
    169c:	6860      	ldr	r0, [r4, #4]
    169e:	f7ff ffd1 	bl	1644 <_ZN8Quadtree6insertE4Data>
    16a2:	2800      	cmp	r0, #0
    16a4:	d109      	bne.n	16ba <_ZN8Quadtree6insertE4Data+0x76>
    {
        return true;
    }
    if(sw->insert(d))
    16a6:	9901      	ldr	r1, [sp, #4]
    16a8:	9a02      	ldr	r2, [sp, #8]
    16aa:	9b03      	ldr	r3, [sp, #12]
    16ac:	68a0      	ldr	r0, [r4, #8]
    16ae:	f7ff ffc9 	bl	1644 <_ZN8Quadtree6insertE4Data>
    16b2:	2800      	cmp	r0, #0
    16b4:	d101      	bne.n	16ba <_ZN8Quadtree6insertE4Data+0x76>
    {
        return true;
    }
    if(se->insert(d))
    16b6:	68e4      	ldr	r4, [r4, #12]
    16b8:	e7ca      	b.n	1650 <_ZN8Quadtree6insertE4Data+0xc>
    {
        return true;
    }

    return false;   
}
    16ba:	0028      	movs	r0, r5
    16bc:	b005      	add	sp, #20
    16be:	bd30      	pop	{r4, r5, pc}
    16c0:	aaaaaaab 	.word	0xaaaaaaab

000016c4 <_ZN8Quadtree6insertEfft>:

bool Quadtree::insert(float pos_x, float pos_y, uint16_t area){
    16c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Point pos;
    uint16_t range;

    Data(float pos_x = 0.0f, float pos_y = 0.0f, uint16_t area = 0x0){
        pos = Point(pos_x, pos_y);
        range = area;
    16c6:	ac01      	add	r4, sp, #4
{
    Point pos;
    uint16_t range;

    Data(float pos_x = 0.0f, float pos_y = 0.0f, uint16_t area = 0x0){
        pos = Point(pos_x, pos_y);
    16c8:	9101      	str	r1, [sp, #4]
    16ca:	9202      	str	r2, [sp, #8]
        range = area;
    16cc:	8123      	strh	r3, [r4, #8]
    return this->insert(Data(pos_x,pos_y,area));
    16ce:	9901      	ldr	r1, [sp, #4]
    16d0:	9a02      	ldr	r2, [sp, #8]
    16d2:	9b03      	ldr	r3, [sp, #12]
    16d4:	f7ff ffb6 	bl	1644 <_ZN8Quadtree6insertE4Data>
}
    16d8:	b004      	add	sp, #16
    16da:	bd10      	pop	{r4, pc}

000016dc <_ZNSt12_Vector_baseI4DataSaIS0_EED1Ev>:
	    _M_create_storage(__n);
	  }
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
    16dc:	b510      	push	{r4, lr}
    16de:	0004      	movs	r4, r0
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
    16e0:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
    16e2:	2800      	cmp	r0, #0
    16e4:	d001      	beq.n	16ea <_ZNSt12_Vector_baseI4DataSaIS0_EED1Ev+0xe>
    16e6:	f002 fed1 	bl	448c <_ZdlPv>
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
    16ea:	0020      	movs	r0, r4
    16ec:	bd10      	pop	{r4, pc}

000016ee <_ZN8QuadtreeD1Ev>:
{
    this->boundary = boundary;
}


Quadtree::~Quadtree()
    16ee:	b570      	push	{r4, r5, r6, lr}
{
    delete nw;
    16f0:	6805      	ldr	r5, [r0, #0]
{
    this->boundary = boundary;
}


Quadtree::~Quadtree()
    16f2:	0004      	movs	r4, r0
{
    delete nw;
    16f4:	2d00      	cmp	r5, #0
    16f6:	d005      	beq.n	1704 <_ZN8QuadtreeD1Ev+0x16>
    16f8:	0028      	movs	r0, r5
    16fa:	f7ff fff8 	bl	16ee <_ZN8QuadtreeD1Ev>
    16fe:	0028      	movs	r0, r5
    1700:	f002 fec4 	bl	448c <_ZdlPv>
    delete sw;
    1704:	68a5      	ldr	r5, [r4, #8]
    1706:	2d00      	cmp	r5, #0
    1708:	d005      	beq.n	1716 <_ZN8QuadtreeD1Ev+0x28>
    170a:	0028      	movs	r0, r5
    170c:	f7ff ffef 	bl	16ee <_ZN8QuadtreeD1Ev>
    1710:	0028      	movs	r0, r5
    1712:	f002 febb 	bl	448c <_ZdlPv>
    delete ne;
    1716:	6865      	ldr	r5, [r4, #4]
    1718:	2d00      	cmp	r5, #0
    171a:	d005      	beq.n	1728 <_ZN8QuadtreeD1Ev+0x3a>
    171c:	0028      	movs	r0, r5
    171e:	f7ff ffe6 	bl	16ee <_ZN8QuadtreeD1Ev>
    1722:	0028      	movs	r0, r5
    1724:	f002 feb2 	bl	448c <_ZdlPv>
    delete se;
    1728:	68e5      	ldr	r5, [r4, #12]
    172a:	2d00      	cmp	r5, #0
    172c:	d005      	beq.n	173a <_ZN8QuadtreeD1Ev+0x4c>
    172e:	0028      	movs	r0, r5
    1730:	f7ff ffdd 	bl	16ee <_ZN8QuadtreeD1Ev>
    1734:	0028      	movs	r0, r5
    1736:	f002 fea9 	bl	448c <_ZdlPv>
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
    173a:	0020      	movs	r0, r4
    173c:	301c      	adds	r0, #28
    173e:	f7ff ffcd 	bl	16dc <_ZNSt12_Vector_baseI4DataSaIS0_EED1Ev>
}
    1742:	0020      	movs	r0, r4
    1744:	bd70      	pop	{r4, r5, r6, pc}

00001746 <_ZNSt6vectorI4DataSaIS0_EE14_M_move_assignEOS2_St17integral_constantIbLb1EE.isra.14>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
    1746:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1748:	6803      	ldr	r3, [r0, #0]
    174a:	6842      	ldr	r2, [r0, #4]
    174c:	9301      	str	r3, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
    174e:	2300      	movs	r3, #0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1750:	9202      	str	r2, [sp, #8]
    1752:	6882      	ldr	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
    1754:	6003      	str	r3, [r0, #0]
    1756:	6083      	str	r3, [r0, #8]
    1758:	6043      	str	r3, [r0, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    175a:	9203      	str	r2, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
    175c:	680a      	ldr	r2, [r1, #0]
    175e:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    1760:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    1762:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
    1764:	684a      	ldr	r2, [r1, #4]
    1766:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
    1768:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    176a:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
    176c:	688a      	ldr	r2, [r1, #8]
    176e:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
    1770:	608b      	str	r3, [r1, #8]
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
    1772:	a801      	add	r0, sp, #4
    1774:	f7ff ffb2 	bl	16dc <_ZNSt12_Vector_baseI4DataSaIS0_EED1Ev>
      {
	vector __tmp(get_allocator());
	this->_M_impl._M_swap_data(__tmp._M_impl);
	this->_M_impl._M_swap_data(__x._M_impl);
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }
    1778:	b005      	add	sp, #20
    177a:	bd00      	pop	{pc}

0000177c <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIP4DataSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    177c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    177e:	1a09      	subs	r1, r1, r0
    1780:	4c0c      	ldr	r4, [pc, #48]	; (17b4 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIP4DataSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_+0x38>)
    1782:	1089      	asrs	r1, r1, #2
    1784:	434c      	muls	r4, r1
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    1786:	0007      	movs	r7, r0
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    1788:	0026      	movs	r6, r4
    178a:	2500      	movs	r5, #0
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    178c:	9201      	str	r2, [sp, #4]
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    178e:	2e00      	cmp	r6, #0
    1790:	dd08      	ble.n	17a4 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIP4DataSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_+0x28>
	    {
	      *__result = *__first;
    1792:	9b01      	ldr	r3, [sp, #4]
    1794:	1979      	adds	r1, r7, r5
    1796:	1958      	adds	r0, r3, r5
    1798:	220a      	movs	r2, #10
    179a:	f007 ff54 	bl	9646 <memcpy>
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    179e:	3e01      	subs	r6, #1
    17a0:	350c      	adds	r5, #12
    17a2:	e7f4      	b.n	178e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIP4DataSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_+0x12>
    17a4:	43e0      	mvns	r0, r4
    17a6:	230c      	movs	r3, #12
    17a8:	17c0      	asrs	r0, r0, #31
    17aa:	4020      	ands	r0, r4
    17ac:	4358      	muls	r0, r3
    17ae:	9b01      	ldr	r3, [sp, #4]
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
	       __result));
    }
    17b0:	1818      	adds	r0, r3, r0
    17b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    17b4:	aaaaaaab 	.word	0xaaaaaaab

000017b8 <_ZNSt6vectorI4DataSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
    17b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ba:	b087      	sub	sp, #28
    17bc:	0004      	movs	r4, r0
    17be:	000e      	movs	r6, r1
    17c0:	9201      	str	r2, [sp, #4]
    17c2:	9302      	str	r3, [sp, #8]
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
    17c4:	4293      	cmp	r3, r2
    17c6:	d079      	beq.n	18bc <_ZNSt6vectorI4DataSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0x104>
  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
    17c8:	1a9b      	subs	r3, r3, r2
	  {
	    const size_type __n = std::distance(__first, __last);
    17ca:	109f      	asrs	r7, r3, #2
    17cc:	9304      	str	r3, [sp, #16]
    17ce:	4b3c      	ldr	r3, [pc, #240]	; (18c0 <_ZNSt6vectorI4DataSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0x108>)
	    if (size_type(this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_finish) >= __n)
    17d0:	6845      	ldr	r5, [r0, #4]
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
	  {
	    const size_type __n = std::distance(__first, __last);
    17d2:	437b      	muls	r3, r7
    17d4:	9303      	str	r3, [sp, #12]
	    if (size_type(this->_M_impl._M_end_of_storage
    17d6:	6883      	ldr	r3, [r0, #8]
    17d8:	4a39      	ldr	r2, [pc, #228]	; (18c0 <_ZNSt6vectorI4DataSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0x108>)
    17da:	1b5b      	subs	r3, r3, r5
    17dc:	109b      	asrs	r3, r3, #2
    17de:	4353      	muls	r3, r2
    17e0:	9a03      	ldr	r2, [sp, #12]
    17e2:	429a      	cmp	r2, r3
    17e4:	d844      	bhi.n	1870 <_ZNSt6vectorI4DataSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0xb8>
    17e6:	1a6b      	subs	r3, r5, r1
			  - this->_M_impl._M_finish) >= __n)
	      {
		const size_type __elems_after = end() - __position;
    17e8:	109f      	asrs	r7, r3, #2
    17ea:	9305      	str	r3, [sp, #20]
    17ec:	4b34      	ldr	r3, [pc, #208]	; (18c0 <_ZNSt6vectorI4DataSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0x108>)
    17ee:	435f      	muls	r7, r3
		pointer __old_finish(this->_M_impl._M_finish);
		if (__elems_after > __n)
    17f0:	42ba      	cmp	r2, r7
    17f2:	d21d      	bcs.n	1830 <_ZNSt6vectorI4DataSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0x78>
		  {
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
    17f4:	9b04      	ldr	r3, [sp, #16]
    17f6:	002a      	movs	r2, r5
    17f8:	1aef      	subs	r7, r5, r3
    17fa:	0029      	movs	r1, r5
    17fc:	0038      	movs	r0, r7
    17fe:	f7ff fdf5 	bl	13ec <_ZSt22__uninitialized_move_aIP4DataS1_SaIS0_EET0_T_S4_S3_RT1_.isra.26>
						this->_M_impl._M_finish,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __n;
    1802:	6862      	ldr	r2, [r4, #4]
    1804:	9b04      	ldr	r3, [sp, #16]
    1806:	4694      	mov	ip, r2
    1808:	4463      	add	r3, ip
    180a:	6063      	str	r3, [r4, #4]
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
	  typename iterator_traits<_BI1>::difference_type __n;
	  for (__n = __last - __first; __n > 0; --__n)
    180c:	1bbc      	subs	r4, r7, r6
    180e:	4b2c      	ldr	r3, [pc, #176]	; (18c0 <_ZNSt6vectorI4DataSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0x108>)
    1810:	10a4      	asrs	r4, r4, #2
    1812:	435c      	muls	r4, r3
    1814:	2c00      	cmp	r4, #0
    1816:	dd08      	ble.n	182a <_ZNSt6vectorI4DataSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0x72>
	    *--__result = std::move(*--__last);
    1818:	3d0c      	subs	r5, #12
    181a:	3f0c      	subs	r7, #12
    181c:	220a      	movs	r2, #10
    181e:	0039      	movs	r1, r7
    1820:	0028      	movs	r0, r5
    1822:	f007 ff10 	bl	9646 <memcpy>
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
	  typename iterator_traits<_BI1>::difference_type __n;
	  for (__n = __last - __first; __n > 0; --__n)
    1826:	3c01      	subs	r4, #1
    1828:	e7f4      	b.n	1814 <_ZNSt6vectorI4DataSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0x5c>
		    _GLIBCXX_MOVE_BACKWARD3(__position.base(),
					    __old_finish - __n, __old_finish);
		    std::copy(__first, __last, __position);
    182a:	0032      	movs	r2, r6
    182c:	9902      	ldr	r1, [sp, #8]
    182e:	e01b      	b.n	1868 <_ZNSt6vectorI4DataSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0xb0>
		  }
		else
		  {
		    _ForwardIterator __mid = __first;
		    std::advance(__mid, __elems_after);
		    std::__uninitialized_copy_a(__mid, __last,
    1830:	1a6a      	subs	r2, r5, r1
    1832:	4694      	mov	ip, r2
    1834:	9b01      	ldr	r3, [sp, #4]
    1836:	002a      	movs	r2, r5
    1838:	4463      	add	r3, ip
    183a:	9902      	ldr	r1, [sp, #8]
    183c:	0018      	movs	r0, r3
    183e:	9304      	str	r3, [sp, #16]
    1840:	f7ff fdf2 	bl	1428 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIP4DataSt6vectorIS2_SaIS2_EEEES3_S2_ET0_T_S9_S8_RSaIT1_E.isra.23>
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __n - __elems_after;
    1844:	9b03      	ldr	r3, [sp, #12]
		    std::__uninitialized_move_a(__position.base(),
    1846:	0029      	movs	r1, r5
		    _ForwardIterator __mid = __first;
		    std::advance(__mid, __elems_after);
		    std::__uninitialized_copy_a(__mid, __last,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __n - __elems_after;
    1848:	1bda      	subs	r2, r3, r7
    184a:	230c      	movs	r3, #12
    184c:	435a      	muls	r2, r3
    184e:	6863      	ldr	r3, [r4, #4]
		    std::__uninitialized_move_a(__position.base(),
    1850:	0030      	movs	r0, r6
		    _ForwardIterator __mid = __first;
		    std::advance(__mid, __elems_after);
		    std::__uninitialized_copy_a(__mid, __last,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __n - __elems_after;
    1852:	189a      	adds	r2, r3, r2
    1854:	6062      	str	r2, [r4, #4]
		    std::__uninitialized_move_a(__position.base(),
    1856:	f7ff fdc9 	bl	13ec <_ZSt22__uninitialized_move_aIP4DataS1_SaIS0_EET0_T_S4_S3_RT1_.isra.26>
						__old_finish,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __elems_after;
    185a:	6862      	ldr	r2, [r4, #4]
    185c:	9b05      	ldr	r3, [sp, #20]
    185e:	4694      	mov	ip, r2
		    std::copy(__first, __mid, __position);
    1860:	0032      	movs	r2, r6
		    this->_M_impl._M_finish += __n - __elems_after;
		    std::__uninitialized_move_a(__position.base(),
						__old_finish,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __elems_after;
    1862:	4463      	add	r3, ip
		    std::copy(__first, __mid, __position);
    1864:	9904      	ldr	r1, [sp, #16]
		    this->_M_impl._M_finish += __n - __elems_after;
		    std::__uninitialized_move_a(__position.base(),
						__old_finish,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __elems_after;
    1866:	6063      	str	r3, [r4, #4]
		    std::copy(__first, __mid, __position);
    1868:	9801      	ldr	r0, [sp, #4]
    186a:	f7ff ff87 	bl	177c <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIP4DataSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
    186e:	e025      	b.n	18bc <_ZNSt6vectorI4DataSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0x104>
		  }
	      }
	    else
	      {
		const size_type __len =
		  _M_check_len(__n, "vector::_M_range_insert");
    1870:	9903      	ldr	r1, [sp, #12]
    1872:	f7ff fda3 	bl	13bc <_ZNKSt6vectorI4DataSaIS0_EE12_M_check_lenEjPKc.isra.18>
    1876:	0007      	movs	r7, r0

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    1878:	1e05      	subs	r5, r0, #0
    187a:	d004      	beq.n	1886 <_ZNSt6vectorI4DataSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0xce>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    187c:	200c      	movs	r0, #12
    187e:	4378      	muls	r0, r7
    1880:	f002 fe00 	bl	4484 <_Znwj>
    1884:	0005      	movs	r5, r0
		pointer __new_start(this->_M_allocate(__len));
		pointer __new_finish(__new_start);
		__try
		  {
		    __new_finish
    1886:	0031      	movs	r1, r6
    1888:	002a      	movs	r2, r5
    188a:	6820      	ldr	r0, [r4, #0]
    188c:	f7ff fdae 	bl	13ec <_ZSt22__uninitialized_move_aIP4DataS1_SaIS0_EET0_T_S4_S3_RT1_.isra.26>
		      = std::__uninitialized_move_if_noexcept_a
		      (this->_M_impl._M_start, __position.base(),
		       __new_start, _M_get_Tp_allocator());
		    __new_finish
    1890:	9902      	ldr	r1, [sp, #8]
		  _M_check_len(__n, "vector::_M_range_insert");
		pointer __new_start(this->_M_allocate(__len));
		pointer __new_finish(__new_start);
		__try
		  {
		    __new_finish
    1892:	0002      	movs	r2, r0
		      = std::__uninitialized_move_if_noexcept_a
		      (this->_M_impl._M_start, __position.base(),
		       __new_start, _M_get_Tp_allocator());
		    __new_finish
    1894:	9801      	ldr	r0, [sp, #4]
    1896:	f7ff fdc7 	bl	1428 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIP4DataSt6vectorIS2_SaIS2_EEEES3_S2_ET0_T_S9_S8_RSaIT1_E.isra.23>
		      = std::__uninitialized_copy_a(__first, __last,
						    __new_finish,
						    _M_get_Tp_allocator());
		    __new_finish
    189a:	6861      	ldr	r1, [r4, #4]
		  {
		    __new_finish
		      = std::__uninitialized_move_if_noexcept_a
		      (this->_M_impl._M_start, __position.base(),
		       __new_start, _M_get_Tp_allocator());
		    __new_finish
    189c:	0002      	movs	r2, r0
		      = std::__uninitialized_copy_a(__first, __last,
						    __new_finish,
						    _M_get_Tp_allocator());
		    __new_finish
    189e:	0030      	movs	r0, r6
    18a0:	f7ff fda4 	bl	13ec <_ZSt22__uninitialized_move_aIP4DataS1_SaIS0_EET0_T_S4_S3_RT1_.isra.26>
    18a4:	0006      	movs	r6, r0
		  }
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			      _M_get_Tp_allocator());
		_M_deallocate(this->_M_impl._M_start,
			      this->_M_impl._M_end_of_storage
			      - this->_M_impl._M_start);
    18a6:	6820      	ldr	r0, [r4, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
    18a8:	2800      	cmp	r0, #0
    18aa:	d001      	beq.n	18b0 <_ZNSt6vectorI4DataSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0xf8>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
    18ac:	f002 fdee 	bl	448c <_ZdlPv>
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
    18b0:	230c      	movs	r3, #12
    18b2:	435f      	muls	r7, r3
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			      _M_get_Tp_allocator());
		_M_deallocate(this->_M_impl._M_start,
			      this->_M_impl._M_end_of_storage
			      - this->_M_impl._M_start);
		this->_M_impl._M_start = __new_start;
    18b4:	6025      	str	r5, [r4, #0]
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
    18b6:	19ed      	adds	r5, r5, r7
			      _M_get_Tp_allocator());
		_M_deallocate(this->_M_impl._M_start,
			      this->_M_impl._M_end_of_storage
			      - this->_M_impl._M_start);
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
    18b8:	6066      	str	r6, [r4, #4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
    18ba:	60a5      	str	r5, [r4, #8]
	      }
	  }
      }
    18bc:	b007      	add	sp, #28
    18be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18c0:	aaaaaaab 	.word	0xaaaaaaab

000018c4 <_ZNSt6vectorI4DataSaIS0_EE6insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEvEES7_NS5_IPKS0_S2_EET_SB_>:
       *  consider using std::list.
       */
      template<typename _InputIterator,
	       typename = std::_RequireInputIter<_InputIterator>>
        iterator
        insert(const_iterator __position, _InputIterator __first,
    18c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    18c6:	0005      	movs	r5, r0
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current + __n); }
    18c8:	6800      	ldr	r0, [r0, #0]
        _M_insert_dispatch(iterator __pos, _InputIterator __first,
			   _InputIterator __last, __false_type)
        {
	  typedef typename std::iterator_traits<_InputIterator>::
	    iterator_category _IterCategory;
	  _M_range_insert(__pos, __first, __last, _IterCategory());
    18ca:	2600      	movs	r6, #0
    18cc:	1a0c      	subs	r4, r1, r0
    18ce:	4668      	mov	r0, sp
    18d0:	7006      	strb	r6, [r0, #0]
    18d2:	0028      	movs	r0, r5
    18d4:	f7ff ff70 	bl	17b8 <_ZNSt6vectorI4DataSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag>
    18d8:	6828      	ldr	r0, [r5, #0]
        {
	  difference_type __offset = __position - cbegin();
	  _M_insert_dispatch(begin() + __offset,
			     __first, __last, __false_type());
	  return begin() + __offset;
	}
    18da:	1900      	adds	r0, r0, r4
    18dc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

000018e0 <_ZNK8Quadtree11query_rangeE8Boundary>:
bool Quadtree::insert(float pos_x, float pos_y, uint16_t area){
    return this->insert(Data(pos_x,pos_y,area));
}

vector<Data> Quadtree::query_range(Boundary range) const
{
    18e0:	b082      	sub	sp, #8
    18e2:	b5f0      	push	{r4, r5, r6, r7, lr}
    18e4:	b08d      	sub	sp, #52	; 0x34
    18e6:	9313      	str	r3, [sp, #76]	; 0x4c
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    18e8:	2300      	movs	r3, #0
    18ea:	9212      	str	r2, [sp, #72]	; 0x48
    18ec:	6003      	str	r3, [r0, #0]
    18ee:	6043      	str	r3, [r0, #4]
    18f0:	6083      	str	r3, [r0, #8]
    }

    bool intersects(const Boundary& other) const
    {
        //this right > that left                                          this left <s that right
        if(centre.x + half_size > other.centre.x - other.half_size || centre.x - half_size < other.centre.x + other.half_size)
    18f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    18f4:	690f      	ldr	r7, [r1, #16]
    18f6:	698e      	ldr	r6, [r1, #24]
    18f8:	9304      	str	r3, [sp, #16]
    18fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
    18fc:	0004      	movs	r4, r0
    18fe:	000d      	movs	r5, r1
    1900:	1c38      	adds	r0, r7, #0
    1902:	1c31      	adds	r1, r6, #0
    1904:	9303      	str	r3, [sp, #12]
    1906:	f005 fa53 	bl	6db0 <__aeabi_fadd>
    190a:	9903      	ldr	r1, [sp, #12]
    190c:	9005      	str	r0, [sp, #20]
    190e:	9804      	ldr	r0, [sp, #16]
    1910:	f005 fd88 	bl	7424 <__aeabi_fsub>
    1914:	1c01      	adds	r1, r0, #0
    1916:	9805      	ldr	r0, [sp, #20]
    1918:	f005 fa18 	bl	6d4c <__aeabi_fcmpgt>
    191c:	2800      	cmp	r0, #0
    191e:	d10f      	bne.n	1940 <_ZNK8Quadtree11query_rangeE8Boundary+0x60>
    1920:	1c31      	adds	r1, r6, #0
    1922:	1c38      	adds	r0, r7, #0
    1924:	f005 fd7e 	bl	7424 <__aeabi_fsub>
    1928:	9903      	ldr	r1, [sp, #12]
    192a:	1c07      	adds	r7, r0, #0
    192c:	9804      	ldr	r0, [sp, #16]
    192e:	f005 fa3f 	bl	6db0 <__aeabi_fadd>
    1932:	1c01      	adds	r1, r0, #0
    1934:	1c38      	adds	r0, r7, #0
    1936:	f005 f9f5 	bl	6d24 <__aeabi_fcmplt>
    193a:	2800      	cmp	r0, #0
    193c:	d100      	bne.n	1940 <_ZNK8Quadtree11query_rangeE8Boundary+0x60>
    193e:	e08c      	b.n	1a5a <_ZNK8Quadtree11query_rangeE8Boundary+0x17a>
        {
        // This bottom > that top
            if(centre.y + half_size > other.centre.y - other.half_size || centre.y - half_size < other.centre.y + other.half_size)
    1940:	696b      	ldr	r3, [r5, #20]
    1942:	1c30      	adds	r0, r6, #0
    1944:	9304      	str	r3, [sp, #16]
    1946:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1948:	9904      	ldr	r1, [sp, #16]
    194a:	9305      	str	r3, [sp, #20]
    194c:	f005 fa30 	bl	6db0 <__aeabi_fadd>
    1950:	9903      	ldr	r1, [sp, #12]
    1952:	1c07      	adds	r7, r0, #0
    1954:	9805      	ldr	r0, [sp, #20]
    1956:	f005 fd65 	bl	7424 <__aeabi_fsub>
    195a:	1c01      	adds	r1, r0, #0
    195c:	1c38      	adds	r0, r7, #0
    195e:	f005 f9f5 	bl	6d4c <__aeabi_fcmpgt>
    1962:	1e07      	subs	r7, r0, #0
    1964:	d10f      	bne.n	1986 <_ZNK8Quadtree11query_rangeE8Boundary+0xa6>
    1966:	1c31      	adds	r1, r6, #0
    1968:	9804      	ldr	r0, [sp, #16]
    196a:	f005 fd5b 	bl	7424 <__aeabi_fsub>
    196e:	9905      	ldr	r1, [sp, #20]
    1970:	1c06      	adds	r6, r0, #0
    1972:	9803      	ldr	r0, [sp, #12]
    1974:	f005 fa1c 	bl	6db0 <__aeabi_fadd>
    1978:	1c01      	adds	r1, r0, #0
    197a:	1c30      	adds	r0, r6, #0
    197c:	f005 f9d2 	bl	6d24 <__aeabi_fcmplt>
    1980:	2800      	cmp	r0, #0
    1982:	d06a      	beq.n	1a5a <_ZNK8Quadtree11query_rangeE8Boundary+0x17a>
    1984:	e000      	b.n	1988 <_ZNK8Quadtree11query_rangeE8Boundary+0xa8>
    1986:	2700      	movs	r7, #0

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    1988:	69e9      	ldr	r1, [r5, #28]
    if(!boundary.intersects(range))
    {
        return p_in_range;
    }

    for(int i = 0; i < objects.size(); i++)
    198a:	6a2b      	ldr	r3, [r5, #32]
    198c:	4a36      	ldr	r2, [pc, #216]	; (1a68 <_ZNK8Quadtree11query_rangeE8Boundary+0x188>)
    198e:	1a5b      	subs	r3, r3, r1
    1990:	109b      	asrs	r3, r3, #2
    1992:	4353      	muls	r3, r2
    1994:	429f      	cmp	r7, r3
    1996:	d20e      	bcs.n	19b6 <_ZNK8Quadtree11query_rangeE8Boundary+0xd6>
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      const_reference
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
      { return *(this->_M_impl._M_start + __n); }
    1998:	260c      	movs	r6, #12
    199a:	437e      	muls	r6, r7
    199c:	198e      	adds	r6, r1, r6
    {
        if(range.contains(objects.at(i).pos))
    199e:	0031      	movs	r1, r6
    19a0:	a812      	add	r0, sp, #72	; 0x48
    19a2:	f7ff fd5f 	bl	1464 <_ZNK8Boundary8containsERK5Point>
    19a6:	2800      	cmp	r0, #0
    19a8:	d003      	beq.n	19b2 <_ZNK8Quadtree11query_rangeE8Boundary+0xd2>
        {
            p_in_range.push_back(objects.at(i));
    19aa:	0031      	movs	r1, r6
    19ac:	0020      	movs	r0, r4
    19ae:	f7ff fe0f 	bl	15d0 <_ZNSt6vectorI4DataSaIS0_EE9push_backERKS0_>
    if(!boundary.intersects(range))
    {
        return p_in_range;
    }

    for(int i = 0; i < objects.size(); i++)
    19b2:	3701      	adds	r7, #1
    19b4:	e7e8      	b.n	1988 <_ZNK8Quadtree11query_rangeE8Boundary+0xa8>
        {
            p_in_range.push_back(objects.at(i));
        }
    }

    if(nw == nullptr)
    19b6:	6829      	ldr	r1, [r5, #0]
    19b8:	2900      	cmp	r1, #0
    19ba:	d04e      	beq.n	1a5a <_ZNK8Quadtree11query_rangeE8Boundary+0x17a>
    {
        return p_in_range;
   }

    vector<Data> temp = nw->query_range(range);
    19bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    19be:	9a12      	ldr	r2, [sp, #72]	; 0x48
    19c0:	9300      	str	r3, [sp, #0]
    19c2:	a806      	add	r0, sp, #24
    19c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    19c6:	f7ff ff8b 	bl	18e0 <_ZNK8Quadtree11query_rangeE8Boundary>
    p_in_range.insert(p_in_range.end(), temp.begin(), temp.end());
    19ca:	9b07      	ldr	r3, [sp, #28]
    19cc:	9a06      	ldr	r2, [sp, #24]
    19ce:	6861      	ldr	r1, [r4, #4]
    19d0:	0020      	movs	r0, r4
    19d2:	f7ff ff77 	bl	18c4 <_ZNSt6vectorI4DataSaIS0_EE6insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEvEES7_NS5_IPKS0_S2_EET_SB_>

    temp = ne->query_range(range);
    19d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    19d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    19da:	9300      	str	r3, [sp, #0]
    19dc:	6869      	ldr	r1, [r5, #4]
    19de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    19e0:	a809      	add	r0, sp, #36	; 0x24
    19e2:	f7ff ff7d 	bl	18e0 <_ZNK8Quadtree11query_rangeE8Boundary>
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
        constexpr bool __move_storage =
          _Alloc_traits::_S_propagate_on_move_assign()
          || _Alloc_traits::_S_always_equal();
        _M_move_assign(std::move(__x),
    19e6:	a909      	add	r1, sp, #36	; 0x24
    19e8:	a806      	add	r0, sp, #24
    19ea:	f7ff feac 	bl	1746 <_ZNSt6vectorI4DataSaIS0_EE14_M_move_assignEOS2_St17integral_constantIbLb1EE.isra.14>
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
    19ee:	a809      	add	r0, sp, #36	; 0x24
    19f0:	f7ff fe74 	bl	16dc <_ZNSt12_Vector_baseI4DataSaIS0_EED1Ev>
    p_in_range.insert(p_in_range.end(), temp.begin(), temp.end());
    19f4:	9b07      	ldr	r3, [sp, #28]
    19f6:	9a06      	ldr	r2, [sp, #24]
    19f8:	6861      	ldr	r1, [r4, #4]
    19fa:	0020      	movs	r0, r4
    19fc:	f7ff ff62 	bl	18c4 <_ZNSt6vectorI4DataSaIS0_EE6insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEvEES7_NS5_IPKS0_S2_EET_SB_>

    temp = sw->query_range(range);
    1a00:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1a02:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1a04:	9300      	str	r3, [sp, #0]
    1a06:	68a9      	ldr	r1, [r5, #8]
    1a08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1a0a:	a809      	add	r0, sp, #36	; 0x24
    1a0c:	f7ff ff68 	bl	18e0 <_ZNK8Quadtree11query_rangeE8Boundary>
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
        constexpr bool __move_storage =
          _Alloc_traits::_S_propagate_on_move_assign()
          || _Alloc_traits::_S_always_equal();
        _M_move_assign(std::move(__x),
    1a10:	a909      	add	r1, sp, #36	; 0x24
    1a12:	a806      	add	r0, sp, #24
    1a14:	f7ff fe97 	bl	1746 <_ZNSt6vectorI4DataSaIS0_EE14_M_move_assignEOS2_St17integral_constantIbLb1EE.isra.14>
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
    1a18:	a809      	add	r0, sp, #36	; 0x24
    1a1a:	f7ff fe5f 	bl	16dc <_ZNSt12_Vector_baseI4DataSaIS0_EED1Ev>
    p_in_range.insert(p_in_range.end(), temp.begin(), temp.end());
    1a1e:	9b07      	ldr	r3, [sp, #28]
    1a20:	9a06      	ldr	r2, [sp, #24]
    1a22:	6861      	ldr	r1, [r4, #4]
    1a24:	0020      	movs	r0, r4
    1a26:	f7ff ff4d 	bl	18c4 <_ZNSt6vectorI4DataSaIS0_EE6insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEvEES7_NS5_IPKS0_S2_EET_SB_>

    temp = se->query_range(range);
    1a2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1a2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1a2e:	9300      	str	r3, [sp, #0]
    1a30:	68e9      	ldr	r1, [r5, #12]
    1a32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1a34:	a809      	add	r0, sp, #36	; 0x24
    1a36:	f7ff ff53 	bl	18e0 <_ZNK8Quadtree11query_rangeE8Boundary>
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
        constexpr bool __move_storage =
          _Alloc_traits::_S_propagate_on_move_assign()
          || _Alloc_traits::_S_always_equal();
        _M_move_assign(std::move(__x),
    1a3a:	a909      	add	r1, sp, #36	; 0x24
    1a3c:	a806      	add	r0, sp, #24
    1a3e:	f7ff fe82 	bl	1746 <_ZNSt6vectorI4DataSaIS0_EE14_M_move_assignEOS2_St17integral_constantIbLb1EE.isra.14>
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
    1a42:	a809      	add	r0, sp, #36	; 0x24
    1a44:	f7ff fe4a 	bl	16dc <_ZNSt12_Vector_baseI4DataSaIS0_EED1Ev>
    p_in_range.insert(p_in_range.end(), temp.begin(), temp.end());
    1a48:	9b07      	ldr	r3, [sp, #28]
    1a4a:	9a06      	ldr	r2, [sp, #24]
    1a4c:	6861      	ldr	r1, [r4, #4]
    1a4e:	0020      	movs	r0, r4
    1a50:	f7ff ff38 	bl	18c4 <_ZNSt6vectorI4DataSaIS0_EE6insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEvEES7_NS5_IPKS0_S2_EET_SB_>
    1a54:	a806      	add	r0, sp, #24
    1a56:	f7ff fe41 	bl	16dc <_ZNSt12_Vector_baseI4DataSaIS0_EED1Ev>

    return p_in_range;
}
    1a5a:	0020      	movs	r0, r4
    1a5c:	b00d      	add	sp, #52	; 0x34
    1a5e:	bcf0      	pop	{r4, r5, r6, r7}
    1a60:	bc08      	pop	{r3}
    1a62:	b002      	add	sp, #8
    1a64:	4718      	bx	r3
    1a66:	46c0      	nop			; (mov r8, r8)
    1a68:	aaaaaaab 	.word	0xaaaaaaab

00001a6c <_ZN8Quadtree14nearest_pointsEfff>:

vector<Data> Quadtree::nearest_points(float lat, float lon, float los){
    1a6c:	b510      	push	{r4, lr}
    1a6e:	0004      	movs	r4, r0
    1a70:	b088      	sub	sp, #32
        }
        return false;
    }

    Boundary(float pos_x = 0.0f, float pos_y = 0.0f, float h_size = 0.0f){
        centre = Point(pos_x, pos_y);
    1a72:	9305      	str	r3, [sp, #20]
        half_size = h_size;
    1a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        }
        return false;
    }

    Boundary(float pos_x = 0.0f, float pos_y = 0.0f, float h_size = 0.0f){
        centre = Point(pos_x, pos_y);
    1a76:	9206      	str	r2, [sp, #24]
        half_size = h_size;
    1a78:	9307      	str	r3, [sp, #28]
    return this->query_range(Boundary(lon, lat, los));
    1a7a:	9b07      	ldr	r3, [sp, #28]
    1a7c:	9a05      	ldr	r2, [sp, #20]
    1a7e:	9303      	str	r3, [sp, #12]
    1a80:	9300      	str	r3, [sp, #0]
    1a82:	9b06      	ldr	r3, [sp, #24]
    1a84:	f7ff ff2c 	bl	18e0 <_ZNK8Quadtree11query_rangeE8Boundary>
    1a88:	0020      	movs	r0, r4
    1a8a:	b008      	add	sp, #32
    1a8c:	bd10      	pop	{r4, pc}

00001a8e <_ZN5SDLib4File5writeEh>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    1a8e:	b513      	push	{r0, r1, r4, lr}
    1a90:	466b      	mov	r3, sp
  return write(&val, 1);
    1a92:	6802      	ldr	r2, [r0, #0]
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    1a94:	71d9      	strb	r1, [r3, #7]
    1a96:	3307      	adds	r3, #7
  return write(&val, 1);
    1a98:	6854      	ldr	r4, [r2, #4]
    1a9a:	0019      	movs	r1, r3
    1a9c:	2201      	movs	r2, #1
    1a9e:	47a0      	blx	r4
}
    1aa0:	bd16      	pop	{r1, r2, r4, pc}

00001aa2 <_ZN5SDLib4File5writeEPKhj>:

size_t File::write(const uint8_t *buf, size_t size) {
    1aa2:	b510      	push	{r4, lr}
    1aa4:	0004      	movs	r4, r0
  size_t t;
  if (!_file) {
    1aa6:	6a00      	ldr	r0, [r0, #32]
    1aa8:	2800      	cmp	r0, #0
    1aaa:	d103      	bne.n	1ab4 <_ZN5SDLib4File5writeEPKhj+0x12>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1aac:	2301      	movs	r3, #1
    setWriteError();
    return 0;
    1aae:	2000      	movs	r0, #0
    1ab0:	6063      	str	r3, [r4, #4]
    1ab2:	e008      	b.n	1ac6 <_ZN5SDLib4File5writeEPKhj+0x24>
    1ab4:	2300      	movs	r3, #0
  }
  _file->clearWriteError();
  t = _file->write(buf, size);
    1ab6:	b292      	uxth	r2, r2
    1ab8:	6043      	str	r3, [r0, #4]
    1aba:	f000 ffc5 	bl	2a48 <_ZN6SdFile5writeEPKvt>
    1abe:	6a23      	ldr	r3, [r4, #32]
  if (_file->getWriteError()) {
    1ac0:	685b      	ldr	r3, [r3, #4]
    1ac2:	2b00      	cmp	r3, #0
    1ac4:	d1f2      	bne.n	1aac <_ZN5SDLib4File5writeEPKhj+0xa>
    setWriteError();
    return 0;
  }
  return t;
}
    1ac6:	bd10      	pop	{r4, pc}

00001ac8 <_ZN5SDLib4File5flushEv>:

  return n > 0X7FFF ? 0X7FFF : n;
}

void File::flush() {
  if (_file)
    1ac8:	6a00      	ldr	r0, [r0, #32]
  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}

void File::flush() {
    1aca:	b510      	push	{r4, lr}
  if (_file)
    1acc:	2800      	cmp	r0, #0
    1ace:	d001      	beq.n	1ad4 <_ZN5SDLib4File5flushEv+0xc>
    _file->sync();
    1ad0:	f000 fe16 	bl	2700 <_ZN6SdFile4syncEv>
}
    1ad4:	bd10      	pop	{r4, pc}

00001ad6 <_ZN6SdFile4readEv>:
   * Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    1ad6:	b513      	push	{r0, r1, r4, lr}
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    1ad8:	466b      	mov	r3, sp
    1ada:	1ddc      	adds	r4, r3, #7
    1adc:	2201      	movs	r2, #1
    1ade:	0021      	movs	r1, r4
    1ae0:	f000 fd3a 	bl	2558 <_ZN6SdFile4readEPvt>
    1ae4:	2801      	cmp	r0, #1
    1ae6:	d101      	bne.n	1aec <_ZN6SdFile4readEv+0x16>
    1ae8:	7820      	ldrb	r0, [r4, #0]
    1aea:	e001      	b.n	1af0 <_ZN6SdFile4readEv+0x1a>
    1aec:	2001      	movs	r0, #1
    1aee:	4240      	negs	r0, r0
  }
    1af0:	bd16      	pop	{r1, r2, r4, pc}

00001af2 <_ZN5SDLib4File4readEv>:
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
  if (_file) 
    1af2:	6a00      	ldr	r0, [r0, #32]
  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
    1af4:	b510      	push	{r4, lr}
  if (_file) 
    1af6:	2800      	cmp	r0, #0
    1af8:	d002      	beq.n	1b00 <_ZN5SDLib4File4readEv+0xe>
    return _file->read();
    1afa:	f7ff ffec 	bl	1ad6 <_ZN6SdFile4readEv>
    1afe:	e001      	b.n	1b04 <_ZN5SDLib4File4readEv+0x12>
  return -1;
    1b00:	2001      	movs	r0, #1
    1b02:	4240      	negs	r0, r0
}
    1b04:	bd10      	pop	{r4, pc}

00001b06 <_ZN5SDLib4File4peekEv>:
    return 0;
  }
  return t;
}

int File::peek() {
    1b06:	b570      	push	{r4, r5, r6, lr}
    1b08:	0005      	movs	r5, r0
  if (! _file) 
    1b0a:	6a00      	ldr	r0, [r0, #32]
    return 0;
    1b0c:	1e03      	subs	r3, r0, #0
  }
  return t;
}

int File::peek() {
  if (! _file) 
    1b0e:	d00b      	beq.n	1b28 <_ZN5SDLib4File4peekEv+0x22>
    return 0;

  int c = _file->read();
    1b10:	f7ff ffe1 	bl	1ad6 <_ZN6SdFile4readEv>
    1b14:	0004      	movs	r4, r0
    1b16:	0003      	movs	r3, r0
  if (c != -1) _file->seekCur(-1);
    1b18:	1c42      	adds	r2, r0, #1
    1b1a:	d005      	beq.n	1b28 <_ZN5SDLib4File4peekEv+0x22>
    1b1c:	6a28      	ldr	r0, [r5, #32]
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    return seekSet(curPosition_ + pos);
    1b1e:	6903      	ldr	r3, [r0, #16]
    1b20:	1e59      	subs	r1, r3, #1
    1b22:	f000 fdbb 	bl	269c <_ZN6SdFile7seekSetEm>
    1b26:	0023      	movs	r3, r4
  return c;
}
    1b28:	0018      	movs	r0, r3
    1b2a:	bd70      	pop	{r4, r5, r6, pc}

00001b2c <_ZN5SDLib4FileC1E6SdFilePKc>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    1b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1b2e:	23fa      	movs	r3, #250	; 0xfa
  public:
    Print() : write_error(0) {}
    1b30:	2500      	movs	r5, #0
    1b32:	009b      	lsls	r3, r3, #2
    1b34:	6083      	str	r3, [r0, #8]
    1b36:	4b0d      	ldr	r3, [pc, #52]	; (1b6c <_ZN5SDLib4FileC1E6SdFilePKc+0x40>)
    1b38:	0004      	movs	r4, r0
    1b3a:	3308      	adds	r3, #8
    1b3c:	6045      	str	r5, [r0, #4]
    1b3e:	6003      	str	r3, [r0, #0]
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    1b40:	2028      	movs	r0, #40	; 0x28

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    1b42:	000f      	movs	r7, r1
    1b44:	0016      	movs	r6, r2
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    1b46:	f007 fd5b 	bl	9600 <malloc>
    1b4a:	6220      	str	r0, [r4, #32]
  if (_file) {
    1b4c:	42a8      	cmp	r0, r5
    1b4e:	d00a      	beq.n	1b66 <_ZN5SDLib4FileC1E6SdFilePKc+0x3a>
    memcpy(_file, &f, sizeof(SdFile));
    1b50:	2228      	movs	r2, #40	; 0x28
    1b52:	0039      	movs	r1, r7
    1b54:	f007 fd77 	bl	9646 <memcpy>
    
    strncpy(_name, n, 12);
    1b58:	0020      	movs	r0, r4
    1b5a:	220c      	movs	r2, #12
    1b5c:	0031      	movs	r1, r6
    1b5e:	3010      	adds	r0, #16
    1b60:	f008 fc72 	bl	a448 <strncpy>
    _name[12] = 0;
    1b64:	7725      	strb	r5, [r4, #28]
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
    1b66:	0020      	movs	r0, r4
    1b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b6a:	46c0      	nop			; (mov r8, r8)
    1b6c:	0000e3a0 	.word	0x0000e3a0

00001b70 <_ZN5SDLib4FileC1Ev>:
    1b70:	22fa      	movs	r2, #250	; 0xfa
    1b72:	2300      	movs	r3, #0
    1b74:	0092      	lsls	r2, r2, #2
    1b76:	6082      	str	r2, [r0, #8]

File::File(void) {
    1b78:	4a03      	ldr	r2, [pc, #12]	; (1b88 <_ZN5SDLib4FileC1Ev+0x18>)
    1b7a:	6043      	str	r3, [r0, #4]
    1b7c:	3208      	adds	r2, #8
    1b7e:	6002      	str	r2, [r0, #0]
  _file = 0;
    1b80:	6203      	str	r3, [r0, #32]
  _name[0] = 0;
    1b82:	7403      	strb	r3, [r0, #16]
  //Serial.print("Created empty file object");
}
    1b84:	4770      	bx	lr
    1b86:	46c0      	nop			; (mov r8, r8)
    1b88:	0000e3a0 	.word	0x0000e3a0

00001b8c <_ZN5SDLib4File8positionEv>:

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
    1b8c:	6a03      	ldr	r3, [r0, #32]
    1b8e:	2b00      	cmp	r3, #0
    1b90:	d001      	beq.n	1b96 <_ZN5SDLib4File8positionEv+0xa>
    1b92:	6918      	ldr	r0, [r3, #16]
  return _file->curPosition();
    1b94:	e001      	b.n	1b9a <_ZN5SDLib4File8positionEv+0xe>

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
    1b96:	2001      	movs	r0, #1
    1b98:	4240      	negs	r0, r0
  return _file->curPosition();
}
    1b9a:	4770      	bx	lr

00001b9c <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
    1b9c:	6a03      	ldr	r3, [r0, #32]
    1b9e:	1e18      	subs	r0, r3, #0
    1ba0:	d000      	beq.n	1ba4 <_ZN5SDLib4File4sizeEv+0x8>
    1ba2:	69d8      	ldr	r0, [r3, #28]
  return _file->fileSize();
}
    1ba4:	4770      	bx	lr
	...

00001ba8 <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
    1ba8:	b570      	push	{r4, r5, r6, lr}
    1baa:	0005      	movs	r5, r0
  if (! _file) return 0;
    1bac:	6a00      	ldr	r0, [r0, #32]
    1bae:	2800      	cmp	r0, #0
    1bb0:	d00b      	beq.n	1bca <_ZN5SDLib4File9availableEv+0x22>

  uint32_t n = size() - position();
    1bb2:	0028      	movs	r0, r5
    1bb4:	f7ff fff2 	bl	1b9c <_ZN5SDLib4File4sizeEv>
    1bb8:	0004      	movs	r4, r0
    1bba:	0028      	movs	r0, r5
    1bbc:	f7ff ffe6 	bl	1b8c <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    1bc0:	4b02      	ldr	r3, [pc, #8]	; (1bcc <_ZN5SDLib4File9availableEv+0x24>)
    1bc2:	1a20      	subs	r0, r4, r0
    1bc4:	4298      	cmp	r0, r3
    1bc6:	d900      	bls.n	1bca <_ZN5SDLib4File9availableEv+0x22>
    1bc8:	0018      	movs	r0, r3
}
    1bca:	bd70      	pop	{r4, r5, r6, pc}
    1bcc:	00007fff 	.word	0x00007fff

00001bd0 <_ZN5SDLib4File5closeEv>:
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    1bd0:	b510      	push	{r4, lr}
    1bd2:	0004      	movs	r4, r0
  if (_file) {
    1bd4:	6a00      	ldr	r0, [r0, #32]
    1bd6:	2800      	cmp	r0, #0
    1bd8:	d006      	beq.n	1be8 <_ZN5SDLib4File5closeEv+0x18>
    _file->close();
    1bda:	f000 fdcd 	bl	2778 <_ZN6SdFile5closeEv>
    free(_file); 
    1bde:	6a20      	ldr	r0, [r4, #32]
    1be0:	f007 fd18 	bl	9614 <free>
    _file = 0;
    1be4:	2300      	movs	r3, #0
    1be6:	6223      	str	r3, [r4, #32]
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */
  }
}
    1be8:	bd10      	pop	{r4, pc}

00001bea <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
  if (_file) 
    1bea:	6a03      	ldr	r3, [r0, #32]
    return  _file->isOpen();
  return false;
    1bec:	1e18      	subs	r0, r3, #0
    */
  }
}

File::operator bool() {
  if (_file) 
    1bee:	d003      	beq.n	1bf8 <_ZN5SDLib4FilecvbEv+0xe>
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    1bf0:	7a58      	ldrb	r0, [r3, #9]
    1bf2:	1e43      	subs	r3, r0, #1
    1bf4:	4198      	sbcs	r0, r3
    1bf6:	b2c0      	uxtb	r0, r0
    return  _file->isOpen();
  return false;
}
    1bf8:	4770      	bx	lr

00001bfa <_ZN5SDLib15callback_removeER6SdFilePKcbPv>:
  */



boolean callback_remove(SdFile& parentDir, const char *filePathComponent, 
			boolean isLastComponent, void * /* object */) {
    1bfa:	b510      	push	{r4, lr}
  if (isLastComponent) {
    return SdFile::remove(parentDir, filePathComponent);
  }
  return true;
    1bfc:	2301      	movs	r3, #1



boolean callback_remove(SdFile& parentDir, const char *filePathComponent, 
			boolean isLastComponent, void * /* object */) {
  if (isLastComponent) {
    1bfe:	2a00      	cmp	r2, #0
    1c00:	d004      	beq.n	1c0c <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x12>
  int8_t readDir(dir_t& dir) {return readDir(&dir);}  // NOLINT
  /** \deprecated Use:
   * static uint8_t SdFile::remove(SdFile* dirFile, const char* fileName);
   */
  static uint8_t remove(SdFile& dirFile, const char* fileName) {  // NOLINT
    return remove(&dirFile, fileName);
    1c02:	f000 ff09 	bl	2a18 <_ZN6SdFile6removeEPS_PKc>
    return SdFile::remove(parentDir, filePathComponent);
    1c06:	1e43      	subs	r3, r0, #1
    1c08:	4198      	sbcs	r0, r3
    1c0a:	b2c3      	uxtb	r3, r0
  }
  return true;
}
    1c0c:	0018      	movs	r0, r3
    1c0e:	bd10      	pop	{r4, pc}

00001c10 <_ZN8SdVolume4initEP7Sd2Card>:
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    1c10:	b570      	push	{r4, r5, r6, lr}
    1c12:	2201      	movs	r2, #1
    1c14:	0004      	movs	r4, r0
    1c16:	000d      	movs	r5, r1
    1c18:	f001 f984 	bl	2f24 <_ZN8SdVolume4initEP7Sd2Cardh>
    1c1c:	0002      	movs	r2, r0
    1c1e:	2001      	movs	r0, #1
    1c20:	2a00      	cmp	r2, #0
    1c22:	d103      	bne.n	1c2c <_ZN8SdVolume4initEP7Sd2Card+0x1c>
    1c24:	0029      	movs	r1, r5
    1c26:	0020      	movs	r0, r4
    1c28:	f001 f97c 	bl	2f24 <_ZN8SdVolume4initEP7Sd2Cardh>
    1c2c:	bd70      	pop	{r4, r5, r6, pc}

00001c2e <_ZN5SDLib20getNextPathComponentEPKcPjPc>:
// Used by `getNextPathComponent`
#define MAX_COMPONENT_LEN 12 // What is max length?
#define PATH_COMPONENT_BUFFER_LEN MAX_COMPONENT_LEN+1

bool getNextPathComponent(const char *path, unsigned int *p_offset,
			  char *buffer) {
    1c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
  // TODO: Have buffer local to this function, so we know it's the
  //       correct length?

  int bufferOffset = 0;

  int offset = *p_offset;
    1c30:	680b      	ldr	r3, [r1, #0]

  // Skip root or other separator
  if (path[offset] == '/') {
    1c32:	5cc4      	ldrb	r4, [r0, r3]
    offset++;
    1c34:	3c2f      	subs	r4, #47	; 0x2f
    1c36:	4265      	negs	r5, r4
    1c38:	416c      	adcs	r4, r5
    1c3a:	191b      	adds	r3, r3, r4
    1c3c:	001f      	movs	r7, r3
    1c3e:	001e      	movs	r6, r3
    1c40:	370c      	adds	r7, #12
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    1c42:	5cc5      	ldrb	r5, [r0, r3]
    1c44:	1b9c      	subs	r4, r3, r6
    1c46:	2d2f      	cmp	r5, #47	; 0x2f
    1c48:	d008      	beq.n	1c5c <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x2e>
	 && (path[offset] != '\0')) {
    1c4a:	2d00      	cmp	r5, #0
    1c4c:	d006      	beq.n	1c5c <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x2e>
    buffer[bufferOffset++] = path[offset++];
    1c4e:	3301      	adds	r3, #1
    1c50:	1b9c      	subs	r4, r3, r6
    1c52:	3c01      	subs	r4, #1
    1c54:	5515      	strb	r5, [r2, r4]
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    1c56:	42bb      	cmp	r3, r7
    1c58:	d1f3      	bne.n	1c42 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x14>
    1c5a:	240c      	movs	r4, #12
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    1c5c:	2500      	movs	r5, #0
    1c5e:	5515      	strb	r5, [r2, r4]

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
    1c60:	5cc2      	ldrb	r2, [r0, r3]
    offset++;
    1c62:	3a2f      	subs	r2, #47	; 0x2f
    1c64:	4254      	negs	r4, r2
    1c66:	4162      	adcs	r2, r4
    1c68:	189b      	adds	r3, r3, r2
  }

  *p_offset = offset;
    1c6a:	600b      	str	r3, [r1, #0]

  return (path[offset] != '\0');
    1c6c:	5cc0      	ldrb	r0, [r0, r3]
    1c6e:	1e43      	subs	r3, r0, #1
    1c70:	4198      	sbcs	r0, r3
    1c72:	b2c0      	uxtb	r0, r0
}
    1c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00001c78 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>:
boolean walkPath(const char *filepath, SdFile& parentDir,
		 boolean (*callback)(SdFile& parentDir,
				     const char *filePathComponent,
				     boolean isLastComponent,
				     void *object),
		 void *object = NULL) {
    1c78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c7a:	000e      	movs	r6, r1
    1c7c:	b09f      	sub	sp, #124	; 0x7c
    1c7e:	9202      	str	r2, [sp, #8]
    1c80:	9303      	str	r3, [sp, #12]
    1c82:	aa0a      	add	r2, sp, #40	; 0x28
    1c84:	2300      	movs	r3, #0
  SdFile subfile1;
  SdFile subfile2;

  char buffer[PATH_COMPONENT_BUFFER_LEN]; 

  unsigned int offset = 0;
    1c86:	0034      	movs	r4, r6
  SdFile *p_parent;
  SdFile *p_child;

  SdFile *p_tmp_sdfile;  
  
  p_child = &subfile1;
    1c88:	0017      	movs	r7, r2
boolean walkPath(const char *filepath, SdFile& parentDir,
		 boolean (*callback)(SdFile& parentDir,
				     const char *filePathComponent,
				     boolean isLastComponent,
				     void *object),
		 void *object = NULL) {
    1c8a:	9001      	str	r0, [sp, #4]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1c8c:	4821      	ldr	r0, [pc, #132]	; (1d14 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9c>)
    1c8e:	a914      	add	r1, sp, #80	; 0x50
    1c90:	930b      	str	r3, [sp, #44]	; 0x2c
    1c92:	900a      	str	r0, [sp, #40]	; 0x28
    1c94:	7253      	strb	r3, [r2, #9]
    1c96:	9315      	str	r3, [sp, #84]	; 0x54
    1c98:	9014      	str	r0, [sp, #80]	; 0x50
    1c9a:	724b      	strb	r3, [r1, #9]
  SdFile subfile1;
  SdFile subfile2;

  char buffer[PATH_COMPONENT_BUFFER_LEN]; 

  unsigned int offset = 0;
    1c9c:	9305      	str	r3, [sp, #20]
  
  p_parent = &parentDir;

  while (true) {

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);
    1c9e:	aa06      	add	r2, sp, #24
    1ca0:	a905      	add	r1, sp, #20
    1ca2:	9801      	ldr	r0, [sp, #4]
    1ca4:	f7ff ffc3 	bl	1c2e <_ZN5SDLib20getNextPathComponentEPKcPjPc>

    boolean shouldContinue = callback((*p_parent), buffer, !moreComponents, object);
    1ca8:	2201      	movs	r2, #1
    1caa:	4042      	eors	r2, r0
  
  p_parent = &parentDir;

  while (true) {

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);
    1cac:	9000      	str	r0, [sp, #0]

    boolean shouldContinue = callback((*p_parent), buffer, !moreComponents, object);
    1cae:	b2d2      	uxtb	r2, r2
    1cb0:	9b03      	ldr	r3, [sp, #12]
    1cb2:	a906      	add	r1, sp, #24
    1cb4:	0020      	movs	r0, r4
    1cb6:	9d02      	ldr	r5, [sp, #8]
    1cb8:	47a8      	blx	r5

    if (!shouldContinue) {
    1cba:	2800      	cmp	r0, #0
    1cbc:	d107      	bne.n	1cce <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x56>
      // TODO: Don't repeat this code?
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
    1cbe:	42b4      	cmp	r4, r6
    1cc0:	d101      	bne.n	1cc6 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x4e>
        (*p_parent).close();
      }
      return false;
    1cc2:	2000      	movs	r0, #0
    1cc4:	e024      	b.n	1d10 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x98>
    if (!shouldContinue) {
      // TODO: Don't repeat this code?
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
        (*p_parent).close();
    1cc6:	0020      	movs	r0, r4
    1cc8:	f000 fd56 	bl	2778 <_ZN6SdFile5closeEv>
    1ccc:	e7f9      	b.n	1cc2 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x4a>
      }
      return false;
    }
    
    if (!moreComponents) {
    1cce:	9b00      	ldr	r3, [sp, #0]
    1cd0:	2b00      	cmp	r3, #0
    1cd2:	d011      	beq.n	1cf8 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x80>
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    1cd4:	2301      	movs	r3, #1
    1cd6:	aa06      	add	r2, sp, #24
    1cd8:	0021      	movs	r1, r4
    1cda:	0038      	movs	r0, r7
    1cdc:	f000 fdea 	bl	28b4 <_ZN6SdFile4openEPS_PKch>
    1ce0:	0005      	movs	r5, r0
    
    boolean exists = (*p_child).open(*p_parent, buffer, O_RDONLY);

    // If it's one we've created then we
    // don't need the parent handle anymore.
    if (p_parent != &parentDir) {
    1ce2:	42b4      	cmp	r4, r6
    1ce4:	d010      	beq.n	1d08 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x90>
      (*p_parent).close();
    1ce6:	0020      	movs	r0, r4
    1ce8:	f000 fd46 	bl	2778 <_ZN6SdFile5closeEv>
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    1cec:	2d00      	cmp	r5, #0
    1cee:	d0e8      	beq.n	1cc2 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x4a>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
        p_parent = &subfile2;
    1cf0:	0023      	movs	r3, r4
    1cf2:	003c      	movs	r4, r7
    1cf4:	001f      	movs	r7, r3
    1cf6:	e7d2      	b.n	1c9e <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x26>
  
  if (p_parent != &parentDir) {
    (*p_parent).close(); // TODO: Return/ handle different?
  }

  return true;
    1cf8:	2001      	movs	r0, #1
    } else {
      return false;
    }
  }
  
  if (p_parent != &parentDir) {
    1cfa:	42b4      	cmp	r4, r6
    1cfc:	d008      	beq.n	1d10 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x98>
    (*p_parent).close(); // TODO: Return/ handle different?
    1cfe:	0020      	movs	r0, r4
    1d00:	f000 fd3a 	bl	2778 <_ZN6SdFile5closeEv>
  }

  return true;
    1d04:	2001      	movs	r0, #1
    1d06:	e003      	b.n	1d10 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x98>
    if (p_parent != &parentDir) {
      (*p_parent).close();
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    1d08:	2800      	cmp	r0, #0
    1d0a:	d0da      	beq.n	1cc2 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x4a>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
        p_parent = &subfile2;
    1d0c:	ac14      	add	r4, sp, #80	; 0x50
    1d0e:	e7ef      	b.n	1cf0 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x78>
  if (p_parent != &parentDir) {
    (*p_parent).close(); // TODO: Return/ handle different?
  }

  return true;
}
    1d10:	b01f      	add	sp, #124	; 0x7c
    1d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d14:	0000e3dc 	.word	0x0000e3dc

00001d18 <_ZN5SDLib7SDClass5beginEh>:

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    1d18:	b570      	push	{r4, r5, r6, lr}
    1d1a:	000a      	movs	r2, r1
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    1d1c:	2101      	movs	r1, #1

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    1d1e:	0004      	movs	r4, r0
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    1d20:	f000 f9ca 	bl	20b8 <_ZN7Sd2Card4initEhh>
         volume.init(card) &&
    1d24:	2800      	cmp	r0, #0
    1d26:	d101      	bne.n	1d2c <_ZN5SDLib7SDClass5beginEh+0x14>
    1d28:	2000      	movs	r0, #0
    1d2a:	e00f      	b.n	1d4c <_ZN5SDLib7SDClass5beginEh+0x34>
    1d2c:	0025      	movs	r5, r4
    1d2e:	3510      	adds	r5, #16
  static Sd2Card* sdCard(void) {return sdCard_;}
//------------------------------------------------------------------------------
#if ALLOW_DEPRECATED_FUNCTIONS
  // Deprecated functions  - suppress cpplint warnings with NOLINT comment
  /** \deprecated Use: uint8_t SdVolume::init(Sd2Card* dev); */
  uint8_t init(Sd2Card& dev) {return init(&dev);}  // NOLINT
    1d30:	0021      	movs	r1, r4
    1d32:	0028      	movs	r0, r5
    1d34:	f7ff ff6c 	bl	1c10 <_ZN8SdVolume4initEP7Sd2Card>
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    1d38:	2800      	cmp	r0, #0
    1d3a:	d0f5      	beq.n	1d28 <_ZN5SDLib7SDClass5beginEh+0x10>
         volume.init(card) &&
         root.openRoot(volume);
    1d3c:	0020      	movs	r0, r4
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    1d3e:	0029      	movs	r1, r5
    1d40:	3038      	adds	r0, #56	; 0x38
    1d42:	f000 fbdf 	bl	2504 <_ZN6SdFile8openRootEP8SdVolume>

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
         volume.init(card) &&
    1d46:	1e43      	subs	r3, r0, #1
    1d48:	4198      	sbcs	r0, r3
    1d4a:	b2c0      	uxtb	r0, r0
         root.openRoot(volume);
}
    1d4c:	bd70      	pop	{r4, r5, r6, pc}
	...

00001d50 <_ZN6SdFileC1ERKS_>:
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    1d50:	684b      	ldr	r3, [r1, #4]
    1d52:	6043      	str	r3, [r0, #4]
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    1d54:	4b0a      	ldr	r3, [pc, #40]	; (1d80 <_ZN6SdFileC1ERKS_+0x30>)
    1d56:	6003      	str	r3, [r0, #0]
    1d58:	7a0b      	ldrb	r3, [r1, #8]
    1d5a:	7203      	strb	r3, [r0, #8]
    1d5c:	7a4b      	ldrb	r3, [r1, #9]
    1d5e:	7243      	strb	r3, [r0, #9]
    1d60:	68cb      	ldr	r3, [r1, #12]
    1d62:	60c3      	str	r3, [r0, #12]
    1d64:	690b      	ldr	r3, [r1, #16]
    1d66:	6103      	str	r3, [r0, #16]
    1d68:	694b      	ldr	r3, [r1, #20]
    1d6a:	6143      	str	r3, [r0, #20]
    1d6c:	7e0b      	ldrb	r3, [r1, #24]
    1d6e:	7603      	strb	r3, [r0, #24]
    1d70:	69cb      	ldr	r3, [r1, #28]
    1d72:	61c3      	str	r3, [r0, #28]
    1d74:	6a0b      	ldr	r3, [r1, #32]
    1d76:	6203      	str	r3, [r0, #32]
    1d78:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    1d7a:	6243      	str	r3, [r0, #36]	; 0x24
    1d7c:	4770      	bx	lr
    1d7e:	46c0      	nop			; (mov r8, r8)
    1d80:	0000e3dc 	.word	0x0000e3dc

00001d84 <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
         volume.init(card) &&
         root.openRoot(volume);
}

// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    1d84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d86:	b09d      	sub	sp, #116	; 0x74
    1d88:	0007      	movs	r7, r0
  // get parent directory
  SdFile d1 = root; // start with the mostparent, root!
    1d8a:	3138      	adds	r1, #56	; 0x38
    1d8c:	a808      	add	r0, sp, #32
         volume.init(card) &&
         root.openRoot(volume);
}

// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    1d8e:	9202      	str	r2, [sp, #8]
    1d90:	9303      	str	r3, [sp, #12]
  // get parent directory
  SdFile d1 = root; // start with the mostparent, root!
    1d92:	f7ff ffdd 	bl	1d50 <_ZN6SdFileC1ERKS_>
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1d96:	2300      	movs	r3, #0
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1d98:	4a24      	ldr	r2, [pc, #144]	; (1e2c <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xa8>)
    1d9a:	ae12      	add	r6, sp, #72	; 0x48
    1d9c:	9c02      	ldr	r4, [sp, #8]
    1d9e:	6073      	str	r3, [r6, #4]
    1da0:	9212      	str	r2, [sp, #72]	; 0x48
    1da2:	7273      	strb	r3, [r6, #9]
  SdFile d2;

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
    1da4:	ad08      	add	r5, sp, #32
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    1da6:	212f      	movs	r1, #47	; 0x2f
    1da8:	0020      	movs	r0, r4
    1daa:	f008 fb14 	bl	a3d6 <strchr>
    1dae:	2800      	cmp	r0, #0
    1db0:	d031      	beq.n	1e16 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x92>

    // get rid of leading /'s
    if (filepath[0] == '/') {
    1db2:	7823      	ldrb	r3, [r4, #0]
    1db4:	2b2f      	cmp	r3, #47	; 0x2f
    1db6:	d107      	bne.n	1dc8 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x44>
      filepath++;
      continue;
    1db8:	0033      	movs	r3, r6
    1dba:	002e      	movs	r6, r5
    1dbc:	001d      	movs	r5, r3

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
      filepath++;
    1dbe:	3401      	adds	r4, #1
      continue;
    1dc0:	002b      	movs	r3, r5
    1dc2:	0035      	movs	r5, r6
    1dc4:	001e      	movs	r6, r3
    1dc6:	e7ee      	b.n	1da6 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x22>
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    1dc8:	1b00      	subs	r0, r0, r4
    1dca:	b2c0      	uxtb	r0, r0
    1dcc:	1c03      	adds	r3, r0, #0
    1dce:	280c      	cmp	r0, #12
    1dd0:	d900      	bls.n	1dd4 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x50>
    1dd2:	230c      	movs	r3, #12
    1dd4:	b2db      	uxtb	r3, r3
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    1dd6:	001a      	movs	r2, r3
    1dd8:	0021      	movs	r1, r4
    1dda:	a804      	add	r0, sp, #16
    1ddc:	9301      	str	r3, [sp, #4]
    1dde:	f008 fb33 	bl	a448 <strncpy>
    subdirname[idx] = 0;
    1de2:	2300      	movs	r3, #0
    1de4:	9901      	ldr	r1, [sp, #4]
    1de6:	aa04      	add	r2, sp, #16

    // close the subdir (we reuse them) if open
    subdir->close();
    1de8:	0030      	movs	r0, r6
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    subdirname[idx] = 0;
    1dea:	5453      	strb	r3, [r2, r1]

    // close the subdir (we reuse them) if open
    subdir->close();
    1dec:	f000 fcc4 	bl	2778 <_ZN6SdFile5closeEv>
    if (! subdir->open(parent, subdirname, O_READ)) {
    1df0:	2301      	movs	r3, #1
    1df2:	aa04      	add	r2, sp, #16
    1df4:	0029      	movs	r1, r5
    1df6:	0030      	movs	r0, r6
    1df8:	f000 fd5c 	bl	28b4 <_ZN6SdFile4openEPS_PKch>
    1dfc:	2800      	cmp	r0, #0
    1dfe:	d104      	bne.n	1e0a <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x86>
    1e00:	4b0a      	ldr	r3, [pc, #40]	; (1e2c <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xa8>)
    1e02:	6078      	str	r0, [r7, #4]
    1e04:	603b      	str	r3, [r7, #0]
    1e06:	7278      	strb	r0, [r7, #9]
    1e08:	e00d      	b.n	1e26 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xa2>
      // failed to open one of the subdirectories
      return SdFile();
    }
    // move forward to the next subdirectory
    filepath += idx;
    1e0a:	9b01      	ldr	r3, [sp, #4]

    // we reuse the objects, close it.
    parent->close();
    1e0c:	0028      	movs	r0, r5
    if (! subdir->open(parent, subdirname, O_READ)) {
      // failed to open one of the subdirectories
      return SdFile();
    }
    // move forward to the next subdirectory
    filepath += idx;
    1e0e:	18e4      	adds	r4, r4, r3

    // we reuse the objects, close it.
    parent->close();
    1e10:	f000 fcb2 	bl	2778 <_ZN6SdFile5closeEv>
    1e14:	e7d4      	b.n	1dc0 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x3c>
    SdFile *t = parent;
    parent = subdir;
    subdir = t;
  }

  *index = (int)(filepath - origpath);
    1e16:	9b02      	ldr	r3, [sp, #8]
  // parent is now the parent diretory of the file!
  return *parent;
    1e18:	0029      	movs	r1, r5
    SdFile *t = parent;
    parent = subdir;
    subdir = t;
  }

  *index = (int)(filepath - origpath);
    1e1a:	1ae4      	subs	r4, r4, r3
    1e1c:	9b03      	ldr	r3, [sp, #12]
  // parent is now the parent diretory of the file!
  return *parent;
    1e1e:	0038      	movs	r0, r7
    SdFile *t = parent;
    parent = subdir;
    subdir = t;
  }

  *index = (int)(filepath - origpath);
    1e20:	601c      	str	r4, [r3, #0]
  // parent is now the parent diretory of the file!
  return *parent;
    1e22:	f7ff ff95 	bl	1d50 <_ZN6SdFileC1ERKS_>
}
    1e26:	0038      	movs	r0, r7
    1e28:	b01d      	add	sp, #116	; 0x74
    1e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e2c:	0000e3dc 	.word	0x0000e3dc

00001e30 <_ZN5SDLib7SDClass4openEPKch>:


File SDClass::open(const char *filepath, uint8_t mode) {
    1e30:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e32:	0014      	movs	r4, r2
    1e34:	b0a3      	sub	sp, #140	; 0x8c
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    1e36:	ae04      	add	r6, sp, #16
  // parent is now the parent diretory of the file!
  return *parent;
}


File SDClass::open(const char *filepath, uint8_t mode) {
    1e38:	9300      	str	r3, [sp, #0]
    1e3a:	0007      	movs	r7, r0
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    1e3c:	ab03      	add	r3, sp, #12
    1e3e:	0030      	movs	r0, r6
  // parent is now the parent diretory of the file!
  return *parent;
}


File SDClass::open(const char *filepath, uint8_t mode) {
    1e40:	9101      	str	r1, [sp, #4]
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    1e42:	f7ff ff9f 	bl	1d84 <_ZN5SDLib7SDClass12getParentDirEPKcPi>
  // no more subdirs!

  filepath += pathidx;
    1e46:	9b03      	ldr	r3, [sp, #12]
    1e48:	18e4      	adds	r4, r4, r3

  if (! filepath[0]) {
    1e4a:	7823      	ldrb	r3, [r4, #0]
    1e4c:	2b00      	cmp	r3, #0
    1e4e:	d105      	bne.n	1e5c <_ZN5SDLib7SDClass4openEPKch+0x2c>
    // it was the directory itself!
    return File(parentdir, "/");
    1e50:	0031      	movs	r1, r6
    1e52:	a818      	add	r0, sp, #96	; 0x60
    1e54:	f7ff ff7c 	bl	1d50 <_ZN6SdFileC1ERKS_>
    1e58:	4a1d      	ldr	r2, [pc, #116]	; (1ed0 <_ZN5SDLib7SDClass4openEPKch+0xa0>)
    1e5a:	e031      	b.n	1ec0 <_ZN5SDLib7SDClass4openEPKch+0x90>
    1e5c:	2300      	movs	r3, #0
    1e5e:	ad0e      	add	r5, sp, #56	; 0x38
    1e60:	606b      	str	r3, [r5, #4]
    1e62:	4a1c      	ldr	r2, [pc, #112]	; (1ed4 <_ZN5SDLib7SDClass4openEPKch+0xa4>)
    1e64:	726b      	strb	r3, [r5, #9]
    1e66:	7a73      	ldrb	r3, [r6, #9]
    1e68:	920e      	str	r2, [sp, #56]	; 0x38

  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    1e6a:	2b00      	cmp	r3, #0
    1e6c:	d103      	bne.n	1e76 <_ZN5SDLib7SDClass4openEPKch+0x46>
    return File();
    1e6e:	0038      	movs	r0, r7
    1e70:	f7ff fe7e 	bl	1b70 <_ZN5SDLib4FileC1Ev>
    1e74:	e028      	b.n	1ec8 <_ZN5SDLib7SDClass4openEPKch+0x98>

  // there is a special case for the Root directory since its a static dir
  if (parentdir.isRoot()) {
    1e76:	3b02      	subs	r3, #2
    1e78:	2b01      	cmp	r3, #1
    1e7a:	d809      	bhi.n	1e90 <_ZN5SDLib7SDClass4openEPKch+0x60>
    if ( ! file.open(root, filepath, mode)) {
    1e7c:	9901      	ldr	r1, [sp, #4]
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    1e7e:	9b00      	ldr	r3, [sp, #0]
    1e80:	3138      	adds	r1, #56	; 0x38
    1e82:	0022      	movs	r2, r4
    1e84:	0028      	movs	r0, r5
    1e86:	f000 fd15 	bl	28b4 <_ZN6SdFile4openEPS_PKch>
    1e8a:	2800      	cmp	r0, #0
    1e8c:	d10b      	bne.n	1ea6 <_ZN5SDLib7SDClass4openEPKch+0x76>
    1e8e:	e7ee      	b.n	1e6e <_ZN5SDLib7SDClass4openEPKch+0x3e>
    1e90:	9b00      	ldr	r3, [sp, #0]
    1e92:	0022      	movs	r2, r4
    1e94:	0031      	movs	r1, r6
    1e96:	0028      	movs	r0, r5
    1e98:	f000 fd0c 	bl	28b4 <_ZN6SdFile4openEPS_PKch>
      // failed to open the file :(
      return File();
    }
    // dont close the root!
  } else {
    if ( ! file.open(parentdir, filepath, mode)) {
    1e9c:	2800      	cmp	r0, #0
    1e9e:	d0e6      	beq.n	1e6e <_ZN5SDLib7SDClass4openEPKch+0x3e>
      return File();
    }
    // close the parent
    parentdir.close();
    1ea0:	0030      	movs	r0, r6
    1ea2:	f000 fc69 	bl	2778 <_ZN6SdFile5closeEv>
  }

  if (mode & (O_APPEND | O_WRITE)) 
    1ea6:	2306      	movs	r3, #6
    1ea8:	9a00      	ldr	r2, [sp, #0]
    1eaa:	421a      	tst	r2, r3
    1eac:	d003      	beq.n	1eb6 <_ZN5SDLib7SDClass4openEPKch+0x86>
    file.seekSet(file.fileSize());
    1eae:	9915      	ldr	r1, [sp, #84]	; 0x54
    1eb0:	0028      	movs	r0, r5
    1eb2:	f000 fbf3 	bl	269c <_ZN6SdFile7seekSetEm>
  return File(file, filepath);
    1eb6:	0029      	movs	r1, r5
    1eb8:	a818      	add	r0, sp, #96	; 0x60
    1eba:	f7ff ff49 	bl	1d50 <_ZN6SdFileC1ERKS_>
    1ebe:	0022      	movs	r2, r4
    1ec0:	a918      	add	r1, sp, #96	; 0x60
    1ec2:	0038      	movs	r0, r7
    1ec4:	f7ff fe32 	bl	1b2c <_ZN5SDLib4FileC1E6SdFilePKc>
}
    1ec8:	0038      	movs	r0, r7
    1eca:	b023      	add	sp, #140	; 0x8c
    1ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ece:	46c0      	nop			; (mov r8, r8)
    1ed0:	0000e3c0 	.word	0x0000e3c0
    1ed4:	0000e3dc 	.word	0x0000e3dc

00001ed8 <_ZN5SDLib7SDClass6removeEPKc>:
  
   */
  return walkPath(filepath, root, callback_rmdir);
}

boolean SDClass::remove(const char *filepath) {
    1ed8:	b510      	push	{r4, lr}
    1eda:	000c      	movs	r4, r1
  return walkPath(filepath, root, callback_remove);
    1edc:	0001      	movs	r1, r0
    1ede:	2300      	movs	r3, #0
    1ee0:	3138      	adds	r1, #56	; 0x38
    1ee2:	4a02      	ldr	r2, [pc, #8]	; (1eec <_ZN5SDLib7SDClass6removeEPKc+0x14>)
    1ee4:	0020      	movs	r0, r4
    1ee6:	f7ff fec7 	bl	1c78 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>
}
    1eea:	bd10      	pop	{r4, pc}
    1eec:	00001bfb 	.word	0x00001bfb

00001ef0 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    1ef0:	2102      	movs	r1, #2
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    1ef2:	4b08      	ldr	r3, [pc, #32]	; (1f14 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc+0x24>)
    1ef4:	2200      	movs	r2, #0
    1ef6:	6119      	str	r1, [r3, #16]
    1ef8:	0019      	movs	r1, r3
    1efa:	3130      	adds	r1, #48	; 0x30
    1efc:	700a      	strb	r2, [r1, #0]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1efe:	4906      	ldr	r1, [pc, #24]	; (1f18 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc+0x28>)
    1f00:	715a      	strb	r2, [r3, #5]
    1f02:	719a      	strb	r2, [r3, #6]
    1f04:	729a      	strb	r2, [r3, #10]
    1f06:	731a      	strb	r2, [r3, #12]
    1f08:	63da      	str	r2, [r3, #60]	; 0x3c
    1f0a:	6399      	str	r1, [r3, #56]	; 0x38
    1f0c:	3341      	adds	r3, #65	; 0x41
    1f0e:	701a      	strb	r2, [r3, #0]
    _file->rewind();
}

SDClass SD;

};
    1f10:	4770      	bx	lr
    1f12:	46c0      	nop			; (mov r8, r8)
    1f14:	20000180 	.word	0x20000180
    1f18:	0000e3dc 	.word	0x0000e3dc

00001f1c <_ZL7spiSendh>:
#include <SPI.h>
static SPISettings settings;
#endif
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
    1f1c:	b510      	push	{r4, lr}
    1f1e:	0001      	movs	r1, r0
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SDCARD_SPI.transfer(b);
    1f20:	4801      	ldr	r0, [pc, #4]	; (1f28 <_ZL7spiSendh+0xc>)
    1f22:	f001 f923 	bl	316c <_ZN8SPIClass8transferEh>
#endif
}
    1f26:	bd10      	pop	{r4, pc}
    1f28:	20000408 	.word	0x20000408

00001f2c <_ZL6spiRecv>:
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
    1f2c:	b510      	push	{r4, lr}
#ifndef USE_SPI_LIB
  spiSend(0XFF);
  return SPDR;
#else
  return SDCARD_SPI.transfer(0xFF);
    1f2e:	21ff      	movs	r1, #255	; 0xff
    1f30:	4801      	ldr	r0, [pc, #4]	; (1f38 <_ZL6spiRecv+0xc>)
    1f32:	f001 f91b 	bl	316c <_ZN8SPIClass8transferEh>
#endif
}
    1f36:	bd10      	pop	{r4, pc}
    1f38:	20000408 	.word	0x20000408

00001f3c <_ZN7Sd2Card14chipSelectHighEv>:
  }
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
    1f3c:	b510      	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    1f3e:	2101      	movs	r1, #1
    1f40:	7900      	ldrb	r0, [r0, #4]
    1f42:	f004 f923 	bl	618c <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    1f46:	4b05      	ldr	r3, [pc, #20]	; (1f5c <_ZN7Sd2Card14chipSelectHighEv+0x20>)
    1f48:	781a      	ldrb	r2, [r3, #0]
    1f4a:	2a00      	cmp	r2, #0
    1f4c:	d004      	beq.n	1f58 <_ZN7Sd2Card14chipSelectHighEv+0x1c>
    chip_select_asserted = 0;
    1f4e:	2200      	movs	r2, #0
    SDCARD_SPI.endTransaction();
    1f50:	4803      	ldr	r0, [pc, #12]	; (1f60 <_ZN7Sd2Card14chipSelectHighEv+0x24>)

void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    chip_select_asserted = 0;
    1f52:	701a      	strb	r2, [r3, #0]
    SDCARD_SPI.endTransaction();
    1f54:	f001 f8f6 	bl	3144 <_ZN8SPIClass14endTransactionEv>
  }
#endif
}
    1f58:	bd10      	pop	{r4, pc}
    1f5a:	46c0      	nop			; (mov r8, r8)
    1f5c:	200001ec 	.word	0x200001ec
    1f60:	20000408 	.word	0x20000408

00001f64 <_ZN7Sd2Card13chipSelectLowEv>:
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    1f64:	b510      	push	{r4, lr}
#ifdef USE_SPI_LIB
  if (!chip_select_asserted) {
    1f66:	4b08      	ldr	r3, [pc, #32]	; (1f88 <_ZN7Sd2Card13chipSelectLowEv+0x24>)
    SDCARD_SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    1f68:	0004      	movs	r4, r0
#ifdef USE_SPI_LIB
  if (!chip_select_asserted) {
    1f6a:	781a      	ldrb	r2, [r3, #0]
    1f6c:	2a00      	cmp	r2, #0
    1f6e:	d106      	bne.n	1f7e <_ZN7Sd2Card13chipSelectLowEv+0x1a>
    chip_select_asserted = 1;
    1f70:	3201      	adds	r2, #1
    1f72:	701a      	strb	r2, [r3, #0]
    SDCARD_SPI.beginTransaction(settings);
    1f74:	4b05      	ldr	r3, [pc, #20]	; (1f8c <_ZN7Sd2Card13chipSelectLowEv+0x28>)
    1f76:	4806      	ldr	r0, [pc, #24]	; (1f90 <_ZN7Sd2Card13chipSelectLowEv+0x2c>)
    1f78:	cb06      	ldmia	r3!, {r1, r2}
    1f7a:	f001 f8c7 	bl	310c <_ZN8SPIClass16beginTransactionE11SPISettings>
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    1f7e:	7920      	ldrb	r0, [r4, #4]
    1f80:	2100      	movs	r1, #0
    1f82:	f004 f903 	bl	618c <digitalWrite>
}
    1f86:	bd10      	pop	{r4, pc}
    1f88:	200001ec 	.word	0x200001ec
    1f8c:	200001e4 	.word	0x200001e4
    1f90:	20000408 	.word	0x20000408

00001f94 <_ZN7Sd2Card7readEndEv>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
    1f94:	b510      	push	{r4, lr}
  if (inBlock_) {
    1f96:	7983      	ldrb	r3, [r0, #6]
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
    1f98:	0004      	movs	r4, r0
  if (inBlock_) {
    1f9a:	2b00      	cmp	r3, #0
    1f9c:	d00d      	beq.n	1fba <_ZN7Sd2Card7readEndEv+0x26>
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)))
      ;
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
    1f9e:	8923      	ldrh	r3, [r4, #8]
    1fa0:	1c5a      	adds	r2, r3, #1
    1fa2:	8122      	strh	r2, [r4, #8]
    1fa4:	4a05      	ldr	r2, [pc, #20]	; (1fbc <_ZN7Sd2Card7readEndEv+0x28>)
    1fa6:	4293      	cmp	r3, r2
    1fa8:	d802      	bhi.n	1fb0 <_ZN7Sd2Card7readEndEv+0x1c>
    1faa:	f7ff ffbf 	bl	1f2c <_ZL6spiRecv>
    1fae:	e7f6      	b.n	1f9e <_ZN7Sd2Card7readEndEv+0xa>
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
    1fb0:	0020      	movs	r0, r4
    1fb2:	f7ff ffc3 	bl	1f3c <_ZN7Sd2Card14chipSelectHighEv>
    inBlock_ = 0;
    1fb6:	2300      	movs	r3, #0
    1fb8:	71a3      	strb	r3, [r4, #6]
  }
}
    1fba:	bd10      	pop	{r4, pc}
    1fbc:	00000201 	.word	0x00000201

00001fc0 <_ZN7Sd2Card10setSckRateEh>:
 * for \a scsRateID = 6.
 *
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
    1fc0:	b500      	push	{lr}
  if (sckRateID > 6) {
    1fc2:	2906      	cmp	r1, #6
    1fc4:	d903      	bls.n	1fce <_ZN7Sd2Card10setSckRateEh+0xe>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    1fc6:	2316      	movs	r3, #22
    1fc8:	7143      	strb	r3, [r0, #5]
    error(SD_CARD_ERROR_SCK_RATE);
    return false;
    1fca:	2000      	movs	r0, #0
    1fcc:	e01c      	b.n	2008 <_ZN7Sd2Card10setSckRateEh+0x48>
    1fce:	4b0f      	ldr	r3, [pc, #60]	; (200c <_ZN7Sd2Card10setSckRateEh+0x4c>)
  }
  SPCR &= ~((1 <<SPR1) | (1 << SPR0));
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
#else // USE_SPI_LIB
  switch (sckRateID) {
    1fd0:	2905      	cmp	r1, #5
    1fd2:	d813      	bhi.n	1ffc <_ZN7Sd2Card10setSckRateEh+0x3c>
    1fd4:	0008      	movs	r0, r1
    1fd6:	2200      	movs	r2, #0
    1fd8:	f004 fcd4 	bl	6984 <__gnu_thumb1_case_uqi>
    1fdc:	09070503 	.word	0x09070503
    1fe0:	0d0b      	.short	0x0d0b
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    1fe2:	490b      	ldr	r1, [pc, #44]	; (2010 <_ZN7Sd2Card10setSckRateEh+0x50>)
    1fe4:	e008      	b.n	1ff8 <_ZN7Sd2Card10setSckRateEh+0x38>
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    1fe6:	490b      	ldr	r1, [pc, #44]	; (2014 <_ZN7Sd2Card10setSckRateEh+0x54>)
    1fe8:	e006      	b.n	1ff8 <_ZN7Sd2Card10setSckRateEh+0x38>
    case 2:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    1fea:	490b      	ldr	r1, [pc, #44]	; (2018 <_ZN7Sd2Card10setSckRateEh+0x58>)
    1fec:	e004      	b.n	1ff8 <_ZN7Sd2Card10setSckRateEh+0x38>
    case 3:  settings = SPISettings(1000000, MSBFIRST, SPI_MODE0); break;
    1fee:	490b      	ldr	r1, [pc, #44]	; (201c <_ZN7Sd2Card10setSckRateEh+0x5c>)
    1ff0:	e002      	b.n	1ff8 <_ZN7Sd2Card10setSckRateEh+0x38>
    case 4:  settings = SPISettings(500000, MSBFIRST, SPI_MODE0); break;
    1ff2:	490b      	ldr	r1, [pc, #44]	; (2020 <_ZN7Sd2Card10setSckRateEh+0x60>)
    1ff4:	e000      	b.n	1ff8 <_ZN7Sd2Card10setSckRateEh+0x38>
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    1ff6:	490b      	ldr	r1, [pc, #44]	; (2024 <_ZN7Sd2Card10setSckRateEh+0x64>)
    1ff8:	6019      	str	r1, [r3, #0]
    1ffa:	e002      	b.n	2002 <_ZN7Sd2Card10setSckRateEh+0x42>
    default: settings = SPISettings(125000, MSBFIRST, SPI_MODE0);
    1ffc:	4a0a      	ldr	r2, [pc, #40]	; (2028 <_ZN7Sd2Card10setSckRateEh+0x68>)
    1ffe:	601a      	str	r2, [r3, #0]
    2000:	2200      	movs	r2, #0
    2002:	2001      	movs	r0, #1
    2004:	711a      	strb	r2, [r3, #4]
    2006:	715a      	strb	r2, [r3, #5]
  }
#endif // USE_SPI_LIB
  return true;
}
    2008:	bd00      	pop	{pc}
    200a:	46c0      	nop			; (mov r8, r8)
    200c:	200001e4 	.word	0x200001e4
    2010:	00b71b00 	.word	0x00b71b00
    2014:	003d0900 	.word	0x003d0900
    2018:	001e8480 	.word	0x001e8480
    201c:	000f4240 	.word	0x000f4240
    2020:	0007a120 	.word	0x0007a120
    2024:	0003d090 	.word	0x0003d090
    2028:	0001e848 	.word	0x0001e848

0000202c <_ZN7Sd2Card11waitNotBusyEt>:
  return true;
}
#endif
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
    202c:	b570      	push	{r4, r5, r6, lr}
    202e:	000c      	movs	r4, r1
  uint16_t t0 = millis();
    2030:	f002 f99e 	bl	4370 <millis>
    2034:	0005      	movs	r5, r0
  do {
    if (spiRec() == 0XFF) return true;
    2036:	f7ff ff79 	bl	1f2c <_ZL6spiRecv>
    203a:	28ff      	cmp	r0, #255	; 0xff
    203c:	d008      	beq.n	2050 <_ZN7Sd2Card11waitNotBusyEt+0x24>
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
    203e:	f002 f997 	bl	4370 <millis>
#endif
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    2042:	b2ab      	uxth	r3, r5
    2044:	b280      	uxth	r0, r0
    2046:	1ac0      	subs	r0, r0, r3
    2048:	42a0      	cmp	r0, r4
    204a:	dbf4      	blt.n	2036 <_ZN7Sd2Card11waitNotBusyEt+0xa>
    if (spiRec() == 0XFF) return true;
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
    204c:	2000      	movs	r0, #0
    204e:	e000      	b.n	2052 <_ZN7Sd2Card11waitNotBusyEt+0x26>
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    if (spiRec() == 0XFF) return true;
    2050:	2001      	movs	r0, #1
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
    2052:	bd70      	pop	{r4, r5, r6, pc}

00002054 <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    2054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2056:	0005      	movs	r5, r0
    2058:	000e      	movs	r6, r1
    205a:	0017      	movs	r7, r2
  // end read if in partialBlockRead mode
  readEnd();
    205c:	f7ff ff9a 	bl	1f94 <_ZN7Sd2Card7readEndEv>

  // select card
  chipSelectLow();
    2060:	0028      	movs	r0, r5
    2062:	f7ff ff7f 	bl	1f64 <_ZN7Sd2Card13chipSelectLowEv>

  // wait up to 300 ms if busy
  waitNotBusy(300);
    2066:	2196      	movs	r1, #150	; 0x96
    2068:	0028      	movs	r0, r5
    206a:	0049      	lsls	r1, r1, #1
    206c:	f7ff ffde 	bl	202c <_ZN7Sd2Card11waitNotBusyEt>

  // send command
  spiSend(cmd | 0x40);
    2070:	2040      	movs	r0, #64	; 0x40
    2072:	4330      	orrs	r0, r6
    2074:	f7ff ff52 	bl	1f1c <_ZL7spiSendh>
    2078:	2418      	movs	r4, #24

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    207a:	0038      	movs	r0, r7
    207c:	40e0      	lsrs	r0, r4
    207e:	3c08      	subs	r4, #8
    2080:	b2c0      	uxtb	r0, r0
    2082:	f7ff ff4b 	bl	1f1c <_ZL7spiSendh>
    2086:	0023      	movs	r3, r4
    2088:	3308      	adds	r3, #8
    208a:	d1f6      	bne.n	207a <_ZN7Sd2Card11cardCommandEhm+0x26>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    208c:	2095      	movs	r0, #149	; 0x95
    208e:	2e00      	cmp	r6, #0
    2090:	d003      	beq.n	209a <_ZN7Sd2Card11cardCommandEhm+0x46>

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);

  // send CRC
  uint8_t crc = 0XFF;
    2092:	306a      	adds	r0, #106	; 0x6a
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    2094:	2e08      	cmp	r6, #8
    2096:	d100      	bne.n	209a <_ZN7Sd2Card11cardCommandEhm+0x46>
    2098:	3878      	subs	r0, #120	; 0x78
  spiSend(crc);
    209a:	f7ff ff3f 	bl	1f1c <_ZL7spiSendh>

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++)
    209e:	2400      	movs	r4, #0
    20a0:	f7ff ff44 	bl	1f2c <_ZL6spiRecv>
    20a4:	b243      	sxtb	r3, r0
    20a6:	72e8      	strb	r0, [r5, #11]
    20a8:	2b00      	cmp	r3, #0
    20aa:	da04      	bge.n	20b6 <_ZN7Sd2Card11cardCommandEhm+0x62>
    20ac:	2cff      	cmp	r4, #255	; 0xff
    20ae:	d002      	beq.n	20b6 <_ZN7Sd2Card11cardCommandEhm+0x62>
    20b0:	3401      	adds	r4, #1
    20b2:	b2e4      	uxtb	r4, r4
    20b4:	e7f4      	b.n	20a0 <_ZN7Sd2Card11cardCommandEhm+0x4c>
    ;
  return status_;
}
    20b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000020b8 <_ZN7Sd2Card4initEhh>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    20b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    20ba:	2500      	movs	r5, #0
  chipSelectPin_ = chipSelectPin;
    20bc:	7102      	strb	r2, [r0, #4]
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    20be:	7305      	strb	r5, [r0, #12]
    20c0:	7285      	strb	r5, [r0, #10]
    20c2:	7185      	strb	r5, [r0, #6]
    20c4:	7145      	strb	r5, [r0, #5]
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    20c6:	0004      	movs	r4, r0
    20c8:	9101      	str	r1, [sp, #4]
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
  chipSelectPin_ = chipSelectPin;
  // 16-bit init start time allows over a minute
  uint16_t t0 = (uint16_t)millis();
    20ca:	f002 f951 	bl	4370 <millis>
  uint32_t arg;

  // set pin modes
  pinMode(chipSelectPin_, OUTPUT);
    20ce:	2101      	movs	r1, #1
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
  chipSelectPin_ = chipSelectPin;
  // 16-bit init start time allows over a minute
  uint16_t t0 = (uint16_t)millis();
    20d0:	b283      	uxth	r3, r0
  uint32_t arg;

  // set pin modes
  pinMode(chipSelectPin_, OUTPUT);
    20d2:	7920      	ldrb	r0, [r4, #4]
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
  chipSelectPin_ = chipSelectPin;
  // 16-bit init start time allows over a minute
  uint16_t t0 = (uint16_t)millis();
    20d4:	9300      	str	r3, [sp, #0]
  uint32_t arg;

  // set pin modes
  pinMode(chipSelectPin_, OUTPUT);
    20d6:	f004 f805 	bl	60e4 <pinMode>
  digitalWrite(chipSelectPin_, HIGH);
    20da:	2101      	movs	r1, #1
    20dc:	7920      	ldrb	r0, [r4, #4]
    20de:	f004 f855 	bl	618c <digitalWrite>
  // Enable SPI, Master, clock rate f_osc/128
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
  // clear double speed
  SPSR &= ~(1 << SPI2X);
#else // USE_SPI_LIB
  SDCARD_SPI.begin();
    20e2:	4e45      	ldr	r6, [pc, #276]	; (21f8 <_ZN7Sd2Card4initEhh+0x140>)
    20e4:	0030      	movs	r0, r6
    20e6:	f000 ffe9 	bl	30bc <_ZN8SPIClass5beginEv>
  settings = SPISettings(250000, MSBFIRST, SPI_MODE0);
    20ea:	4b44      	ldr	r3, [pc, #272]	; (21fc <_ZN7Sd2Card4initEhh+0x144>)
    20ec:	4944      	ldr	r1, [pc, #272]	; (2200 <_ZN7Sd2Card4initEhh+0x148>)
    20ee:	711d      	strb	r5, [r3, #4]
    20f0:	715d      	strb	r5, [r3, #5]
    20f2:	6019      	str	r1, [r3, #0]
#endif // USE_SPI_LIB
#endif // SOFTWARE_SPI

  // must supply min of 74 clock cycles with CS high.
#ifdef USE_SPI_LIB
  SDCARD_SPI.beginTransaction(settings);
    20f4:	685a      	ldr	r2, [r3, #4]
    20f6:	0030      	movs	r0, r6
    20f8:	f001 f808 	bl	310c <_ZN8SPIClass16beginTransactionE11SPISettings>
    20fc:	350a      	adds	r5, #10
    20fe:	3d01      	subs	r5, #1
#endif
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    2100:	20ff      	movs	r0, #255	; 0xff
    2102:	b2ed      	uxtb	r5, r5
    2104:	f7ff ff0a 	bl	1f1c <_ZL7spiSendh>
    2108:	2d00      	cmp	r5, #0
    210a:	d1f8      	bne.n	20fe <_ZN7Sd2Card4initEhh+0x46>
#ifdef USE_SPI_LIB
  SDCARD_SPI.endTransaction();
    210c:	0030      	movs	r0, r6
    210e:	f001 f819 	bl	3144 <_ZN8SPIClass14endTransactionEv>

  chipSelectLow();

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    if (((uint16_t)(millis() - t0)) > SD_INIT_TIMEOUT) {
    2112:	27fa      	movs	r7, #250	; 0xfa
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
#ifdef USE_SPI_LIB
  SDCARD_SPI.endTransaction();
#endif

  chipSelectLow();
    2114:	0020      	movs	r0, r4
    2116:	f7ff ff25 	bl	1f64 <_ZN7Sd2Card13chipSelectLowEv>

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    if (((uint16_t)(millis() - t0)) > SD_INIT_TIMEOUT) {
    211a:	00ff      	lsls	r7, r7, #3
#endif

  chipSelectLow();

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    211c:	2200      	movs	r2, #0
    211e:	0020      	movs	r0, r4
    2120:	0011      	movs	r1, r2
    2122:	f7ff ff97 	bl	2054 <_ZN7Sd2Card11cardCommandEhm>
    2126:	1e06      	subs	r6, r0, #0
    2128:	72e0      	strb	r0, [r4, #11]
    212a:	2e01      	cmp	r6, #1
    212c:	d008      	beq.n	2140 <_ZN7Sd2Card4initEhh+0x88>
    if (((uint16_t)(millis() - t0)) > SD_INIT_TIMEOUT) {
    212e:	f002 f91f 	bl	4370 <millis>
    2132:	9b00      	ldr	r3, [sp, #0]
    2134:	1ac0      	subs	r0, r0, r3
    2136:	b280      	uxth	r0, r0
    2138:	42b8      	cmp	r0, r7
    213a:	d9ef      	bls.n	211c <_ZN7Sd2Card4initEhh+0x64>
    213c:	2301      	movs	r3, #1
    213e:	e03d      	b.n	21bc <_ZN7Sd2Card4initEhh+0x104>
      error(SD_CARD_ERROR_CMD0);
      goto fail;
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    2140:	22d5      	movs	r2, #213	; 0xd5
    2142:	2108      	movs	r1, #8
    2144:	0052      	lsls	r2, r2, #1
    2146:	0020      	movs	r0, r4
    2148:	f7ff ff84 	bl	2054 <_ZN7Sd2Card11cardCommandEhm>
    214c:	2304      	movs	r3, #4
    214e:	4218      	tst	r0, r3
    2150:	d001      	beq.n	2156 <_ZN7Sd2Card4initEhh+0x9e>
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    2152:	7326      	strb	r6, [r4, #12]
    2154:	e00b      	b.n	216e <_ZN7Sd2Card4initEhh+0xb6>
    2156:	001e      	movs	r6, r3
    type(SD_CARD_TYPE_SD1);
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    2158:	f7ff fee8 	bl	1f2c <_ZL6spiRecv>
    215c:	3e01      	subs	r6, #1
    215e:	b2f6      	uxtb	r6, r6
    2160:	72e0      	strb	r0, [r4, #11]
    2162:	2e00      	cmp	r6, #0
    2164:	d1f8      	bne.n	2158 <_ZN7Sd2Card4initEhh+0xa0>
    2166:	2302      	movs	r3, #2
    if (status_ != 0XAA) {
    2168:	28aa      	cmp	r0, #170	; 0xaa
    216a:	d127      	bne.n	21bc <_ZN7Sd2Card4initEhh+0x104>
    216c:	7323      	strb	r3, [r4, #12]
      goto fail;
    }
    type(SD_CARD_TYPE_SD2);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    216e:	7b26      	ldrb	r6, [r4, #12]

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    // check for timeout
    if (((uint16_t)(millis() - t0)) > SD_INIT_TIMEOUT) {
    2170:	27fa      	movs	r7, #250	; 0xfa
      goto fail;
    }
    type(SD_CARD_TYPE_SD2);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    2172:	3e02      	subs	r6, #2
    2174:	4273      	negs	r3, r6
    2176:	415e      	adcs	r6, r3

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    // check for timeout
    if (((uint16_t)(millis() - t0)) > SD_INIT_TIMEOUT) {
    2178:	00ff      	lsls	r7, r7, #3
      goto fail;
    }
    type(SD_CARD_TYPE_SD2);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    217a:	07b6      	lsls	r6, r6, #30
  uint8_t partialBlockRead_;
  uint8_t status_;
  uint8_t type_;
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    217c:	2200      	movs	r2, #0
    217e:	2137      	movs	r1, #55	; 0x37
    2180:	0020      	movs	r0, r4
    2182:	f7ff ff67 	bl	2054 <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
    2186:	0032      	movs	r2, r6
    2188:	2129      	movs	r1, #41	; 0x29
    218a:	0020      	movs	r0, r4
    218c:	f7ff ff62 	bl	2054 <_ZN7Sd2Card11cardCommandEhm>
    2190:	1e02      	subs	r2, r0, #0

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    2192:	72e0      	strb	r0, [r4, #11]
    2194:	d008      	beq.n	21a8 <_ZN7Sd2Card4initEhh+0xf0>
    // check for timeout
    if (((uint16_t)(millis() - t0)) > SD_INIT_TIMEOUT) {
    2196:	f002 f8eb 	bl	4370 <millis>
    219a:	9b00      	ldr	r3, [sp, #0]
    219c:	1ac0      	subs	r0, r0, r3
    219e:	b280      	uxth	r0, r0
    21a0:	42b8      	cmp	r0, r7
    21a2:	d9eb      	bls.n	217c <_ZN7Sd2Card4initEhh+0xc4>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    21a4:	2308      	movs	r3, #8
    21a6:	e009      	b.n	21bc <_ZN7Sd2Card4initEhh+0x104>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    21a8:	7b23      	ldrb	r3, [r4, #12]
    21aa:	2b02      	cmp	r3, #2
    21ac:	d119      	bne.n	21e2 <_ZN7Sd2Card4initEhh+0x12a>
    if (cardCommand(CMD58, 0)) {
    21ae:	213a      	movs	r1, #58	; 0x3a
    21b0:	0020      	movs	r0, r4
    21b2:	f7ff ff4f 	bl	2054 <_ZN7Sd2Card11cardCommandEhm>
    21b6:	2800      	cmp	r0, #0
    21b8:	d005      	beq.n	21c6 <_ZN7Sd2Card4initEhh+0x10e>
    21ba:	2306      	movs	r3, #6
    21bc:	7163      	strb	r3, [r4, #5]
#else  // SOFTWARE_SPI
  return true;
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
    21be:	0020      	movs	r0, r4
    21c0:	f7ff febc 	bl	1f3c <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    21c4:	e015      	b.n	21f2 <_ZN7Sd2Card4initEhh+0x13a>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiRec() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
    21c6:	f7ff feb1 	bl	1f2c <_ZL6spiRecv>
    21ca:	23c0      	movs	r3, #192	; 0xc0
    21cc:	4018      	ands	r0, r3
    21ce:	4298      	cmp	r0, r3
    21d0:	d101      	bne.n	21d6 <_ZN7Sd2Card4initEhh+0x11e>
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    21d2:	3bbd      	subs	r3, #189	; 0xbd
    21d4:	7323      	strb	r3, [r4, #12]
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    21d6:	f7ff fea9 	bl	1f2c <_ZL6spiRecv>
    21da:	f7ff fea7 	bl	1f2c <_ZL6spiRecv>
    21de:	f7ff fea5 	bl	1f2c <_ZL6spiRecv>
  }
  chipSelectHigh();
    21e2:	0020      	movs	r0, r4
    21e4:	f7ff feaa 	bl	1f3c <_ZN7Sd2Card14chipSelectHighEv>

#ifndef SOFTWARE_SPI
  return setSckRate(sckRateID);
    21e8:	9901      	ldr	r1, [sp, #4]
    21ea:	0020      	movs	r0, r4
    21ec:	f7ff fee8 	bl	1fc0 <_ZN7Sd2Card10setSckRateEh>
    21f0:	0005      	movs	r5, r0
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
  return false;
}
    21f2:	0028      	movs	r0, r5
    21f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    21f6:	46c0      	nop			; (mov r8, r8)
    21f8:	20000408 	.word	0x20000408
    21fc:	200001e4 	.word	0x200001e4
    2200:	0003d090 	.word	0x0003d090

00002204 <_ZN7Sd2Card14waitStartBlockEv>:
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    2204:	b570      	push	{r4, r5, r6, lr}
    2206:	0004      	movs	r4, r0
  uint16_t t0 = millis();
    2208:	f002 f8b2 	bl	4370 <millis>
  while ((status_ = spiRec()) == 0XFF) {
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    220c:	2596      	movs	r5, #150	; 0x96
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  uint16_t t0 = millis();
    220e:	0006      	movs	r6, r0
  while ((status_ = spiRec()) == 0XFF) {
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    2210:	006d      	lsls	r5, r5, #1
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  uint16_t t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    2212:	f7ff fe8b 	bl	1f2c <_ZL6spiRecv>
    2216:	1e03      	subs	r3, r0, #0
    2218:	72e0      	strb	r0, [r4, #11]
    221a:	2bff      	cmp	r3, #255	; 0xff
    221c:	d108      	bne.n	2230 <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    221e:	f002 f8a7 	bl	4370 <millis>
    2222:	b2b3      	uxth	r3, r6
    2224:	b280      	uxth	r0, r0
    2226:	1ac0      	subs	r0, r0, r3
    2228:	42a8      	cmp	r0, r5
    222a:	ddf2      	ble.n	2212 <_ZN7Sd2Card14waitStartBlockEv+0xe>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    222c:	230f      	movs	r3, #15
    222e:	e003      	b.n	2238 <_ZN7Sd2Card14waitStartBlockEv+0x34>
  }
  if (status_ != DATA_START_BLOCK) {
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  return true;
    2230:	2001      	movs	r0, #1
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (status_ != DATA_START_BLOCK) {
    2232:	2bfe      	cmp	r3, #254	; 0xfe
    2234:	d005      	beq.n	2242 <_ZN7Sd2Card14waitStartBlockEv+0x3e>
    2236:	230d      	movs	r3, #13
    goto fail;
  }
  return true;

 fail:
  chipSelectHigh();
    2238:	0020      	movs	r0, r4
    223a:	7163      	strb	r3, [r4, #5]
    223c:	f7ff fe7e 	bl	1f3c <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    2240:	2000      	movs	r0, #0
}
    2242:	bd70      	pop	{r4, r5, r6, pc}

00002244 <_ZN7Sd2Card8readDataEmttPh.part.6>:
 * \param[out] dst Pointer to the location that will receive the data.
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
    2244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2246:	0015      	movs	r5, r2
    2248:	001e      	movs	r6, r3
        uint16_t offset, uint16_t count, uint8_t* dst) {
  if (count == 0) return true;
  if ((count + offset) > 512) {
    224a:	189a      	adds	r2, r3, r2
    224c:	2380      	movs	r3, #128	; 0x80
 * \param[out] dst Pointer to the location that will receive the data.
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
    224e:	0004      	movs	r4, r0
        uint16_t offset, uint16_t count, uint8_t* dst) {
  if (count == 0) return true;
  if ((count + offset) > 512) {
    2250:	009b      	lsls	r3, r3, #2
    2252:	429a      	cmp	r2, r3
    2254:	dc41      	bgt.n	22da <_ZN7Sd2Card8readDataEmttPh.part.6+0x96>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    2256:	7983      	ldrb	r3, [r0, #6]
    2258:	2b00      	cmp	r3, #0
    225a:	d005      	beq.n	2268 <_ZN7Sd2Card8readDataEmttPh.part.6+0x24>
    225c:	6803      	ldr	r3, [r0, #0]
    225e:	428b      	cmp	r3, r1
    2260:	d102      	bne.n	2268 <_ZN7Sd2Card8readDataEmttPh.part.6+0x24>
    2262:	8903      	ldrh	r3, [r0, #8]
    2264:	42ab      	cmp	r3, r5
    2266:	d916      	bls.n	2296 <_ZN7Sd2Card8readDataEmttPh.part.6+0x52>
    block_ = block;
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    2268:	7b23      	ldrb	r3, [r4, #12]
  if (count == 0) return true;
  if ((count + offset) > 512) {
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    block_ = block;
    226a:	6021      	str	r1, [r4, #0]
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    226c:	2b03      	cmp	r3, #3
    226e:	d000      	beq.n	2272 <_ZN7Sd2Card8readDataEmttPh.part.6+0x2e>
    2270:	0249      	lsls	r1, r1, #9
    if (cardCommand(CMD17, block)) {
    2272:	000a      	movs	r2, r1
    2274:	0020      	movs	r0, r4
    2276:	2111      	movs	r1, #17
    2278:	f7ff feec 	bl	2054 <_ZN7Sd2Card11cardCommandEhm>
    227c:	1e07      	subs	r7, r0, #0
    227e:	d002      	beq.n	2286 <_ZN7Sd2Card8readDataEmttPh.part.6+0x42>
    2280:	2303      	movs	r3, #3
    2282:	7163      	strb	r3, [r4, #5]
    2284:	e029      	b.n	22da <_ZN7Sd2Card8readDataEmttPh.part.6+0x96>
      error(SD_CARD_ERROR_CMD17);
      goto fail;
    }
    if (!waitStartBlock()) {
    2286:	0020      	movs	r0, r4
    2288:	f7ff ffbc 	bl	2204 <_ZN7Sd2Card14waitStartBlockEv>
    228c:	2800      	cmp	r0, #0
    228e:	d024      	beq.n	22da <_ZN7Sd2Card8readDataEmttPh.part.6+0x96>
      goto fail;
    }
    offset_ = 0;
    inBlock_ = 1;
    2290:	2301      	movs	r3, #1
      goto fail;
    }
    if (!waitStartBlock()) {
      goto fail;
    }
    offset_ = 0;
    2292:	8127      	strh	r7, [r4, #8]
    inBlock_ = 1;
    2294:	71a3      	strb	r3, [r4, #6]
  dst[n] = SPDR;

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    2296:	8923      	ldrh	r3, [r4, #8]
    2298:	42ab      	cmp	r3, r5
    229a:	d205      	bcs.n	22a8 <_ZN7Sd2Card8readDataEmttPh.part.6+0x64>
    spiRec();
    229c:	f7ff fe46 	bl	1f2c <_ZL6spiRecv>
  dst[n] = SPDR;

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    22a0:	8923      	ldrh	r3, [r4, #8]
    22a2:	3301      	adds	r3, #1
    22a4:	8123      	strh	r3, [r4, #8]
    22a6:	e7f6      	b.n	2296 <_ZN7Sd2Card8readDataEmttPh.part.6+0x52>
    22a8:	9d06      	ldr	r5, [sp, #24]
    22aa:	19af      	adds	r7, r5, r6
    spiRec();
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
    22ac:	42bd      	cmp	r5, r7
    22ae:	d004      	beq.n	22ba <_ZN7Sd2Card8readDataEmttPh.part.6+0x76>
    dst[i] = spiRec();
    22b0:	f7ff fe3c 	bl	1f2c <_ZL6spiRecv>
    22b4:	7028      	strb	r0, [r5, #0]
    22b6:	3501      	adds	r5, #1
    22b8:	e7f8      	b.n	22ac <_ZN7Sd2Card8readDataEmttPh.part.6+0x68>
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    22ba:	8923      	ldrh	r3, [r4, #8]
  if (!partialBlockRead_ || offset_ >= 512) {
    22bc:	7aa2      	ldrb	r2, [r4, #10]
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    22be:	18f3      	adds	r3, r6, r3
    22c0:	b29b      	uxth	r3, r3
    22c2:	8123      	strh	r3, [r4, #8]
  if (!partialBlockRead_ || offset_ >= 512) {
    22c4:	2a00      	cmp	r2, #0
    22c6:	d003      	beq.n	22d0 <_ZN7Sd2Card8readDataEmttPh.part.6+0x8c>
    22c8:	4a06      	ldr	r2, [pc, #24]	; (22e4 <_ZN7Sd2Card8readDataEmttPh.part.6+0xa0>)
    // read rest of data, checksum and set chip select high
    readEnd();
  }
  return true;
    22ca:	2001      	movs	r0, #1
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
  if (!partialBlockRead_ || offset_ >= 512) {
    22cc:	4293      	cmp	r3, r2
    22ce:	d908      	bls.n	22e2 <_ZN7Sd2Card8readDataEmttPh.part.6+0x9e>
    // read rest of data, checksum and set chip select high
    readEnd();
    22d0:	0020      	movs	r0, r4
    22d2:	f7ff fe5f 	bl	1f94 <_ZN7Sd2Card7readEndEv>
  }
  return true;
    22d6:	2001      	movs	r0, #1
    22d8:	e003      	b.n	22e2 <_ZN7Sd2Card8readDataEmttPh.part.6+0x9e>

 fail:
  chipSelectHigh();
    22da:	0020      	movs	r0, r4
    22dc:	f7ff fe2e 	bl	1f3c <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    22e0:	2000      	movs	r0, #0
}
    22e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22e4:	000001ff 	.word	0x000001ff

000022e8 <_ZN7Sd2Card8readDataEmttPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
    22e8:	b513      	push	{r0, r1, r4, lr}
    22ea:	0004      	movs	r4, r0
  if (count == 0) return true;
    22ec:	2001      	movs	r0, #1
    22ee:	2b00      	cmp	r3, #0
    22f0:	d004      	beq.n	22fc <_ZN7Sd2Card8readDataEmttPh+0x14>
    22f2:	9804      	ldr	r0, [sp, #16]
    22f4:	9000      	str	r0, [sp, #0]
    22f6:	0020      	movs	r0, r4
    22f8:	f7ff ffa4 	bl	2244 <_ZN7Sd2Card8readDataEmttPh.part.6>
  return true;

 fail:
  chipSelectHigh();
  return false;
}
    22fc:	bd16      	pop	{r1, r2, r4, pc}

000022fe <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    22fe:	2380      	movs	r3, #128	; 0x80
    2300:	b507      	push	{r0, r1, r2, lr}
    2302:	009b      	lsls	r3, r3, #2
    2304:	9200      	str	r2, [sp, #0]
    2306:	2200      	movs	r2, #0
    2308:	f7ff ff9c 	bl	2244 <_ZN7Sd2Card8readDataEmttPh.part.6>
  return readData(block, 0, 512, dst);
}
    230c:	bd0e      	pop	{r1, r2, r3, pc}

0000230e <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    230e:	b570      	push	{r4, r5, r6, lr}
    2310:	0005      	movs	r5, r0
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
    2312:	0008      	movs	r0, r1
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    2314:	0014      	movs	r4, r2
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
    2316:	f7ff fe01 	bl	1f1c <_ZL7spiSendh>
    231a:	2380      	movs	r3, #128	; 0x80
    231c:	009b      	lsls	r3, r3, #2
    231e:	18e6      	adds	r6, r4, r3
  for (uint16_t i = 0; i < 512; i++) {
    spiSend(src[i]);
    2320:	7820      	ldrb	r0, [r4, #0]
    2322:	3401      	adds	r4, #1
    2324:	f7ff fdfa 	bl	1f1c <_ZL7spiSendh>
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    2328:	42b4      	cmp	r4, r6
    232a:	d1f9      	bne.n	2320 <_ZN7Sd2Card9writeDataEhPKh+0x12>
    spiSend(src[i]);
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
    232c:	20ff      	movs	r0, #255	; 0xff
    232e:	f7ff fdf5 	bl	1f1c <_ZL7spiSendh>
  spiSend(0xff);  // dummy crc
    2332:	20ff      	movs	r0, #255	; 0xff
    2334:	f7ff fdf2 	bl	1f1c <_ZL7spiSendh>

  status_ = spiRec();
    2338:	f7ff fdf8 	bl	1f2c <_ZL6spiRecv>
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    233c:	231f      	movs	r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    233e:	72e8      	strb	r0, [r5, #11]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    2340:	4003      	ands	r3, r0
    error(SD_CARD_ERROR_WRITE);
    chipSelectHigh();
    return false;
  }
  return true;
    2342:	2001      	movs	r0, #1
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    2344:	2b05      	cmp	r3, #5
    2346:	d005      	beq.n	2354 <_ZN7Sd2Card9writeDataEhPKh+0x46>
    2348:	2311      	movs	r3, #17
    error(SD_CARD_ERROR_WRITE);
    chipSelectHigh();
    234a:	0028      	movs	r0, r5
    234c:	716b      	strb	r3, [r5, #5]
    234e:	f7ff fdf5 	bl	1f3c <_ZN7Sd2Card14chipSelectHighEv>
    return false;
    2352:	2000      	movs	r0, #0
  }
  return true;
}
    2354:	bd70      	pop	{r4, r5, r6, pc}

00002356 <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    2356:	b570      	push	{r4, r5, r6, lr}
    2358:	2312      	movs	r3, #18
    235a:	0004      	movs	r4, r0
    235c:	0016      	movs	r6, r2
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    235e:	2900      	cmp	r1, #0
    2360:	d026      	beq.n	23b0 <_ZN7Sd2Card10writeBlockEmPKh+0x5a>
    goto fail;
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    2362:	7b03      	ldrb	r3, [r0, #12]
    2364:	2b03      	cmp	r3, #3
    2366:	d000      	beq.n	236a <_ZN7Sd2Card10writeBlockEmPKh+0x14>
    2368:	0249      	lsls	r1, r1, #9
  if (cardCommand(CMD24, blockNumber)) {
    236a:	000a      	movs	r2, r1
    236c:	0020      	movs	r0, r4
    236e:	2118      	movs	r1, #24
    2370:	f7ff fe70 	bl	2054 <_ZN7Sd2Card11cardCommandEhm>
    2374:	2304      	movs	r3, #4
    2376:	1e05      	subs	r5, r0, #0
    2378:	d11a      	bne.n	23b0 <_ZN7Sd2Card10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    237a:	0032      	movs	r2, r6
    237c:	21fe      	movs	r1, #254	; 0xfe
    237e:	0020      	movs	r0, r4
    2380:	f7ff ffc5 	bl	230e <_ZN7Sd2Card9writeDataEhPKh>
    2384:	2800      	cmp	r0, #0
    2386:	d014      	beq.n	23b2 <_ZN7Sd2Card10writeBlockEmPKh+0x5c>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    2388:	2196      	movs	r1, #150	; 0x96
    238a:	0020      	movs	r0, r4
    238c:	0089      	lsls	r1, r1, #2
    238e:	f7ff fe4d 	bl	202c <_ZN7Sd2Card11waitNotBusyEt>
    2392:	2315      	movs	r3, #21
    2394:	2800      	cmp	r0, #0
    2396:	d00b      	beq.n	23b0 <_ZN7Sd2Card10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    2398:	002a      	movs	r2, r5
    239a:	210d      	movs	r1, #13
    239c:	0020      	movs	r0, r4
    239e:	f7ff fe59 	bl	2054 <_ZN7Sd2Card11cardCommandEhm>
    23a2:	2800      	cmp	r0, #0
    23a4:	d103      	bne.n	23ae <_ZN7Sd2Card10writeBlockEmPKh+0x58>
    23a6:	f7ff fdc1 	bl	1f2c <_ZL6spiRecv>
    23aa:	2800      	cmp	r0, #0
    23ac:	d006      	beq.n	23bc <_ZN7Sd2Card10writeBlockEmPKh+0x66>
    23ae:	2314      	movs	r3, #20
    23b0:	7163      	strb	r3, [r4, #5]
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    23b2:	0020      	movs	r0, r4
    23b4:	f7ff fdc2 	bl	1f3c <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    23b8:	2000      	movs	r0, #0
    23ba:	e003      	b.n	23c4 <_ZN7Sd2Card10writeBlockEmPKh+0x6e>
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
  chipSelectHigh();
    23bc:	0020      	movs	r0, r4
    23be:	f7ff fdbd 	bl	1f3c <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    23c2:	2001      	movs	r0, #1

 fail:
  chipSelectHigh();
  return false;
}
    23c4:	bd70      	pop	{r4, r5, r6, pc}
	...

000023c8 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
  void init_MightInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) {
    init_AlwaysInline(clock, bitOrder, dataMode);
  }

  void init_AlwaysInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) __attribute__((__always_inline__)) {
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    23c8:	4b03      	ldr	r3, [pc, #12]	; (23d8 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x10>)
    23ca:	4a04      	ldr	r2, [pc, #16]	; (23dc <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x14>)
    23cc:	601a      	str	r2, [r3, #0]

    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    23ce:	2200      	movs	r2, #0
    23d0:	715a      	strb	r2, [r3, #5]

    switch (dataMode)
    {
      case SPI_MODE0:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    23d2:	711a      	strb	r2, [r3, #4]

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    23d4:	4770      	bx	lr
    23d6:	46c0      	nop			; (mov r8, r8)
    23d8:	200001e4 	.word	0x200001e4
    23dc:	003d0900 	.word	0x003d0900

000023e0 <_ZN6SdFile10addClusterEv>:
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    23e0:	0002      	movs	r2, r0
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    23e2:	b510      	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    23e4:	320c      	adds	r2, #12
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    23e6:	0004      	movs	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    23e8:	2101      	movs	r1, #1
    23ea:	6a40      	ldr	r0, [r0, #36]	; 0x24
    23ec:	f000 fd12 	bl	2e14 <_ZN8SdVolume15allocContiguousEmPm>
    23f0:	2800      	cmp	r0, #0
    23f2:	d00a      	beq.n	240a <_ZN6SdFile10addClusterEv+0x2a>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    23f4:	6a23      	ldr	r3, [r4, #32]
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
  }
  return true;
    23f6:	2001      	movs	r0, #1
// add a cluster to a file
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    23f8:	2b00      	cmp	r3, #0
    23fa:	d106      	bne.n	240a <_ZN6SdFile10addClusterEv+0x2a>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    23fc:	2280      	movs	r2, #128	; 0x80
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    23fe:	68e3      	ldr	r3, [r4, #12]
    flags_ |= F_FILE_DIR_DIRTY;
    2400:	4252      	negs	r2, r2
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    2402:	6223      	str	r3, [r4, #32]
    flags_ |= F_FILE_DIR_DIRTY;
    2404:	7a23      	ldrb	r3, [r4, #8]
    2406:	4313      	orrs	r3, r2
    2408:	7223      	strb	r3, [r4, #8]
  }
  return true;
}
    240a:	bd10      	pop	{r4, pc}

0000240c <_ZN6SdFile13addDirClusterEv>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
    240c:	b570      	push	{r4, r5, r6, lr}
    240e:	0004      	movs	r4, r0
  if (!addCluster()) return false;
    2410:	f7ff ffe6 	bl	23e0 <_ZN6SdFile10addClusterEv>
    2414:	2800      	cmp	r0, #0
    2416:	d101      	bne.n	241c <_ZN6SdFile13addDirClusterEv+0x10>
    2418:	2000      	movs	r0, #0
    241a:	e01b      	b.n	2454 <_ZN6SdFile13addDirClusterEv+0x48>

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    241c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    241e:	68e3      	ldr	r3, [r4, #12]
    2420:	7c11      	ldrb	r1, [r2, #16]
    2422:	3b02      	subs	r3, #2
    2424:	408b      	lsls	r3, r1
    2426:	6951      	ldr	r1, [r2, #20]
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    2428:	7915      	ldrb	r5, [r2, #4]
    242a:	185e      	adds	r6, r3, r1
    242c:	2d00      	cmp	r5, #0
    242e:	d008      	beq.n	2442 <_ZN6SdFile13addDirClusterEv+0x36>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    2430:	1e70      	subs	r0, r6, #1
    2432:	1940      	adds	r0, r0, r5
    2434:	f000 fc38 	bl	2ca8 <_ZN8SdVolume14cacheZeroBlockEm>
    2438:	2800      	cmp	r0, #0
    243a:	d0ed      	beq.n	2418 <_ZN6SdFile13addDirClusterEv+0xc>
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    243c:	3d01      	subs	r5, #1
    243e:	b2ed      	uxtb	r5, r5
    2440:	e7f4      	b.n	242c <_ZN6SdFile13addDirClusterEv+0x20>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    2442:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2444:	2001      	movs	r0, #1
    2446:	7c1a      	ldrb	r2, [r3, #16]
    2448:	2380      	movs	r3, #128	; 0x80
    244a:	009b      	lsls	r3, r3, #2
    244c:	4093      	lsls	r3, r2
    244e:	69e2      	ldr	r2, [r4, #28]
    2450:	18d3      	adds	r3, r2, r3
    2452:	61e3      	str	r3, [r4, #28]
  return true;
}
    2454:	bd70      	pop	{r4, r5, r6, pc}
	...

00002458 <_ZN6SdFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
    2458:	b510      	push	{r4, lr}
    245a:	0004      	movs	r4, r0
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    245c:	6940      	ldr	r0, [r0, #20]
    245e:	f000 fbff 	bl	2c60 <_ZN8SdVolume13cacheRawBlockEmh>
    2462:	2800      	cmp	r0, #0
    2464:	d003      	beq.n	246e <_ZN6SdFile13cacheDirEntryEh+0x16>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    2466:	7e20      	ldrb	r0, [r4, #24]
    2468:	4b01      	ldr	r3, [pc, #4]	; (2470 <_ZN6SdFile13cacheDirEntryEh+0x18>)
    246a:	0140      	lsls	r0, r0, #5
    246c:	18c0      	adds	r0, r0, r3
}
    246e:	bd10      	pop	{r4, pc}
    2470:	200001fc 	.word	0x200001fc

00002474 <_ZN6SdFile10make83NameEPKcPh>:
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    2474:	000a      	movs	r2, r1
    2476:	b5f0      	push	{r4, r5, r6, r7, lr}
    2478:	000b      	movs	r3, r1
    247a:	000e      	movs	r6, r1
    247c:	0007      	movs	r7, r0
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    247e:	2120      	movs	r1, #32
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    2480:	b087      	sub	sp, #28
    2482:	320b      	adds	r2, #11
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    2484:	7019      	strb	r1, [r3, #0]
    2486:	3301      	adds	r3, #1
    2488:	429a      	cmp	r2, r3
    248a:	d1fb      	bne.n	2484 <_ZN6SdFile10make83NameEPKcPh+0x10>
    248c:	2307      	movs	r3, #7
    248e:	2500      	movs	r5, #0
    2490:	9301      	str	r3, [sp, #4]
  i = 0;
  while ((c = *str++) != '\0') {
    2492:	783c      	ldrb	r4, [r7, #0]
    2494:	2c00      	cmp	r4, #0
    2496:	d02a      	beq.n	24ee <_ZN6SdFile10make83NameEPKcPh+0x7a>
    if (c == '.') {
    2498:	2c2e      	cmp	r4, #46	; 0x2e
    249a:	d107      	bne.n	24ac <_ZN6SdFile10make83NameEPKcPh+0x38>
      if (n == 10) return false;  // only one dot allowed
    249c:	9b01      	ldr	r3, [sp, #4]
    249e:	2b0a      	cmp	r3, #10
    24a0:	d02b      	beq.n	24fa <_ZN6SdFile10make83NameEPKcPh+0x86>
      n = 10;  // max index for full 8.3 name
    24a2:	230a      	movs	r3, #10
      i = 8;   // place for extension
    24a4:	2508      	movs	r5, #8
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
      n = 10;  // max index for full 8.3 name
    24a6:	9301      	str	r3, [sp, #4]
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    24a8:	3701      	adds	r7, #1
    24aa:	e7f2      	b.n	2492 <_ZN6SdFile10make83NameEPKcPh+0x1e>
      uint8_t b;
#if defined(__AVR__)
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
#elif defined(__arm__)
      const uint8_t valid[] = "|<>^+=?/[];,*\"\\";
    24ac:	2210      	movs	r2, #16
    24ae:	4914      	ldr	r1, [pc, #80]	; (2500 <_ZN6SdFile10make83NameEPKcPh+0x8c>)
    24b0:	a802      	add	r0, sp, #8
    24b2:	f007 f8c8 	bl	9646 <memcpy>
    24b6:	2300      	movs	r3, #0
      const uint8_t *p = valid;
      while ((b = *p++)) if (b == c) return false;
    24b8:	aa02      	add	r2, sp, #8
    24ba:	5cd2      	ldrb	r2, [r2, r3]
    24bc:	2a00      	cmp	r2, #0
    24be:	d003      	beq.n	24c8 <_ZN6SdFile10make83NameEPKcPh+0x54>
    24c0:	3301      	adds	r3, #1
    24c2:	4294      	cmp	r4, r2
    24c4:	d1f8      	bne.n	24b8 <_ZN6SdFile10make83NameEPKcPh+0x44>
    24c6:	e018      	b.n	24fa <_ZN6SdFile10make83NameEPKcPh+0x86>
#endif
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    24c8:	9b01      	ldr	r3, [sp, #4]
    24ca:	42ab      	cmp	r3, r5
    24cc:	d315      	bcc.n	24fa <_ZN6SdFile10make83NameEPKcPh+0x86>
    24ce:	0023      	movs	r3, r4
    24d0:	3b21      	subs	r3, #33	; 0x21
    24d2:	2b5d      	cmp	r3, #93	; 0x5d
    24d4:	d811      	bhi.n	24fa <_ZN6SdFile10make83NameEPKcPh+0x86>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    24d6:	0022      	movs	r2, r4
    24d8:	1c6b      	adds	r3, r5, #1
    24da:	3a61      	subs	r2, #97	; 0x61
    24dc:	b2db      	uxtb	r3, r3
    24de:	1975      	adds	r5, r6, r5
    24e0:	2a19      	cmp	r2, #25
    24e2:	d801      	bhi.n	24e8 <_ZN6SdFile10make83NameEPKcPh+0x74>
    24e4:	3c20      	subs	r4, #32
    24e6:	b2e4      	uxtb	r4, r4
    24e8:	702c      	strb	r4, [r5, #0]
    24ea:	001d      	movs	r5, r3
    24ec:	e7dc      	b.n	24a8 <_ZN6SdFile10make83NameEPKcPh+0x34>
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
    24ee:	7830      	ldrb	r0, [r6, #0]
    24f0:	3820      	subs	r0, #32
    24f2:	1e43      	subs	r3, r0, #1
    24f4:	4198      	sbcs	r0, r3
    24f6:	b2c0      	uxtb	r0, r0
    24f8:	e000      	b.n	24fc <_ZN6SdFile10make83NameEPKcPh+0x88>
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    24fa:	2000      	movs	r0, #0
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
}
    24fc:	b007      	add	sp, #28
    24fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2500:	0000e3c2 	.word	0x0000e3c2

00002504 <_ZN6SdFile8openRootEP8SdVolume>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    2504:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) return false;
    2506:	7a42      	ldrb	r2, [r0, #9]
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    2508:	0004      	movs	r4, r0
    250a:	000d      	movs	r5, r1
  // error if file is already open
  if (isOpen()) return false;
    250c:	2a00      	cmp	r2, #0
    250e:	d001      	beq.n	2514 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    2510:	2000      	movs	r0, #0
    2512:	e01f      	b.n	2554 <_ZN6SdFile8openRootEP8SdVolume+0x50>
    2514:	1c4b      	adds	r3, r1, #1
    2516:	7fdb      	ldrb	r3, [r3, #31]

  if (vol->fatType() == 16) {
    2518:	2b10      	cmp	r3, #16
    251a:	d106      	bne.n	252a <_ZN6SdFile8openRootEP8SdVolume+0x26>
    type_ = FAT_FILE_TYPE_ROOT16;
    251c:	3b0e      	subs	r3, #14
    251e:	7243      	strb	r3, [r0, #9]
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
    2520:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
  // error if file is already open
  if (isOpen()) return false;

  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    2522:	6202      	str	r2, [r0, #32]
    fileSize_ = 32 * vol->rootDirEntryCount();
    2524:	015b      	lsls	r3, r3, #5
    2526:	61c3      	str	r3, [r0, #28]
    2528:	e00c      	b.n	2544 <_ZN6SdFile8openRootEP8SdVolume+0x40>
  } else if (vol->fatType() == 32) {
    252a:	2b20      	cmp	r3, #32
    252c:	d1f0      	bne.n	2510 <_ZN6SdFile8openRootEP8SdVolume+0xc>
    type_ = FAT_FILE_TYPE_ROOT32;
    firstCluster_ = vol->rootDirStart();
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    252e:	0002      	movs	r2, r0
  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    type_ = FAT_FILE_TYPE_ROOT32;
    2530:	3b1d      	subs	r3, #29
    2532:	7243      	strb	r3, [r0, #9]
    2534:	6a49      	ldr	r1, [r1, #36]	; 0x24
    firstCluster_ = vol->rootDirStart();
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    2536:	321c      	adds	r2, #28
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    type_ = FAT_FILE_TYPE_ROOT32;
    firstCluster_ = vol->rootDirStart();
    2538:	6201      	str	r1, [r0, #32]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    253a:	0028      	movs	r0, r5
    253c:	f000 fc02 	bl	2d44 <_ZNK8SdVolume9chainSizeEmPm>
    2540:	2800      	cmp	r0, #0
    2542:	d0e5      	beq.n	2510 <_ZN6SdFile8openRootEP8SdVolume+0xc>
  vol_ = vol;
  // read only
  flags_ = O_READ;

  // set to start of file
  curCluster_ = 0;
    2544:	2300      	movs	r3, #0
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
  // read only
  flags_ = O_READ;
    2546:	2001      	movs	r0, #1
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
  } else {
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
    2548:	6265      	str	r5, [r4, #36]	; 0x24
  // read only
  flags_ = O_READ;
    254a:	7220      	strb	r0, [r4, #8]

  // set to start of file
  curCluster_ = 0;
    254c:	60e3      	str	r3, [r4, #12]
  curPosition_ = 0;
    254e:	6123      	str	r3, [r4, #16]

  // root has no directory entry
  dirBlock_ = 0;
    2550:	6163      	str	r3, [r4, #20]
  dirIndex_ = 0;
    2552:	7623      	strb	r3, [r4, #24]
  return true;
}
    2554:	bd70      	pop	{r4, r5, r6, pc}
	...

00002558 <_ZN6SdFile4readEPvt>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    2558:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    255a:	7a43      	ldrb	r3, [r0, #9]
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    255c:	b085      	sub	sp, #20
    255e:	0004      	movs	r4, r0
    2560:	000f      	movs	r7, r1
    2562:	9203      	str	r2, [sp, #12]
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    2564:	2b00      	cmp	r3, #0
    2566:	d102      	bne.n	256e <_ZN6SdFile4readEPvt+0x16>
    2568:	2001      	movs	r0, #1
    256a:	4240      	negs	r0, r0
    256c:	e06f      	b.n	264e <_ZN6SdFile4readEPvt+0xf6>
    256e:	7a03      	ldrb	r3, [r0, #8]
    2570:	07db      	lsls	r3, r3, #31
    2572:	d5f9      	bpl.n	2568 <_ZN6SdFile4readEPvt+0x10>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    2574:	6902      	ldr	r2, [r0, #16]
    2576:	69c3      	ldr	r3, [r0, #28]
    2578:	1a9b      	subs	r3, r3, r2
    257a:	9a03      	ldr	r2, [sp, #12]
    257c:	429a      	cmp	r2, r3
    257e:	d901      	bls.n	2584 <_ZN6SdFile4readEPvt+0x2c>
    2580:	b29b      	uxth	r3, r3
    2582:	9303      	str	r3, [sp, #12]

  // amount left to read
  uint16_t toRead = nbyte;
    2584:	9b03      	ldr	r3, [sp, #12]
    2586:	9302      	str	r3, [sp, #8]
  while (toRead > 0) {
    2588:	9b02      	ldr	r3, [sp, #8]
    258a:	2b00      	cmp	r3, #0
    258c:	d039      	beq.n	2602 <_ZN6SdFile4readEPvt+0xaa>
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    258e:	6922      	ldr	r2, [r4, #16]
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    2590:	7a63      	ldrb	r3, [r4, #9]

  // amount left to read
  uint16_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    2592:	05d6      	lsls	r6, r2, #23
    2594:	0df6      	lsrs	r6, r6, #23
    2596:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2598:	0a55      	lsrs	r5, r2, #9
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    259a:	2b02      	cmp	r3, #2
    259c:	d101      	bne.n	25a2 <_ZN6SdFile4readEPvt+0x4a>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    259e:	6a40      	ldr	r0, [r0, #36]	; 0x24
    25a0:	e01a      	b.n	25d8 <_ZN6SdFile4readEPvt+0x80>
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    25a2:	7903      	ldrb	r3, [r0, #4]
    25a4:	3b01      	subs	r3, #1
    25a6:	401d      	ands	r5, r3
    25a8:	b2ed      	uxtb	r5, r5
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
      if (offset == 0 && blockOfCluster == 0) {
    25aa:	2e00      	cmp	r6, #0
    25ac:	d10d      	bne.n	25ca <_ZN6SdFile4readEPvt+0x72>
    25ae:	2d00      	cmp	r5, #0
    25b0:	d10b      	bne.n	25ca <_ZN6SdFile4readEPvt+0x72>
        // start of new cluster
        if (curPosition_ == 0) {
    25b2:	2a00      	cmp	r2, #0
    25b4:	d102      	bne.n	25bc <_ZN6SdFile4readEPvt+0x64>
          // use first cluster in file
          curCluster_ = firstCluster_;
    25b6:	6a23      	ldr	r3, [r4, #32]
    25b8:	60e3      	str	r3, [r4, #12]
    25ba:	e006      	b.n	25ca <_ZN6SdFile4readEPvt+0x72>
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    25bc:	0022      	movs	r2, r4
    25be:	68e1      	ldr	r1, [r4, #12]
    25c0:	320c      	adds	r2, #12
    25c2:	f000 fb8f 	bl	2ce4 <_ZNK8SdVolume6fatGetEmPm>
    25c6:	2800      	cmp	r0, #0
    25c8:	d0ce      	beq.n	2568 <_ZN6SdFile4readEPvt+0x10>
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    25ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    25cc:	68e2      	ldr	r2, [r4, #12]
    25ce:	1e90      	subs	r0, r2, #2
    25d0:	7c1a      	ldrb	r2, [r3, #16]
    25d2:	695b      	ldr	r3, [r3, #20]
    25d4:	4090      	lsls	r0, r2
    25d6:	18c0      	adds	r0, r0, r3
    }
    uint16_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    25d8:	2380      	movs	r3, #128	; 0x80
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    25da:	1940      	adds	r0, r0, r5
    25dc:	9d02      	ldr	r5, [sp, #8]
    }
    uint16_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    25de:	009b      	lsls	r3, r3, #2
    25e0:	1b9b      	subs	r3, r3, r6
    25e2:	429d      	cmp	r5, r3
    25e4:	dd00      	ble.n	25e8 <_ZN6SdFile4readEPvt+0x90>
    25e6:	b29d      	uxth	r5, r3

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
    25e8:	2240      	movs	r2, #64	; 0x40
    25ea:	7a23      	ldrb	r3, [r4, #8]
    25ec:	4213      	tst	r3, r2
    25ee:	d103      	bne.n	25f8 <_ZN6SdFile4readEPvt+0xa0>
    25f0:	2380      	movs	r3, #128	; 0x80
    25f2:	009b      	lsls	r3, r3, #2
    25f4:	429d      	cmp	r5, r3
    25f6:	d11a      	bne.n	262e <_ZN6SdFile4readEPvt+0xd6>
      block != SdVolume::cacheBlockNumber_) {
    25f8:	4b16      	ldr	r3, [pc, #88]	; (2654 <_ZN6SdFile4readEPvt+0xfc>)

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
    25fa:	681b      	ldr	r3, [r3, #0]
    25fc:	4298      	cmp	r0, r3
    25fe:	d104      	bne.n	260a <_ZN6SdFile4readEPvt+0xb2>
    2600:	e015      	b.n	262e <_ZN6SdFile4readEPvt+0xd6>
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
    2602:	466b      	mov	r3, sp
    2604:	200c      	movs	r0, #12
    2606:	5e18      	ldrsh	r0, [r3, r0]
    2608:	e021      	b.n	264e <_ZN6SdFile4readEPvt+0xf6>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    260a:	0001      	movs	r1, r0
    260c:	4812      	ldr	r0, [pc, #72]	; (2658 <_ZN6SdFile4readEPvt+0x100>)
    260e:	9700      	str	r7, [sp, #0]
    2610:	002b      	movs	r3, r5
    2612:	0032      	movs	r2, r6
    2614:	6800      	ldr	r0, [r0, #0]
    2616:	f7ff fe67 	bl	22e8 <_ZN7Sd2Card8readDataEmttPh>
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
      block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readData(block, offset, n, dst)) return -1;
    261a:	2800      	cmp	r0, #0
    261c:	d0a4      	beq.n	2568 <_ZN6SdFile4readEPvt+0x10>
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    261e:	6923      	ldr	r3, [r4, #16]
    2620:	197f      	adds	r7, r7, r5
    2622:	195b      	adds	r3, r3, r5
    2624:	6123      	str	r3, [r4, #16]
    toRead -= n;
    2626:	9b02      	ldr	r3, [sp, #8]
    2628:	1b5d      	subs	r5, r3, r5
    262a:	b2ab      	uxth	r3, r5
    262c:	e7ab      	b.n	2586 <_ZN6SdFile4readEPvt+0x2e>
      block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readData(block, offset, n, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    262e:	2100      	movs	r1, #0
    2630:	f000 fb16 	bl	2c60 <_ZN8SdVolume13cacheRawBlockEmh>
    2634:	2800      	cmp	r0, #0
    2636:	d097      	beq.n	2568 <_ZN6SdFile4readEPvt+0x10>
    2638:	003a      	movs	r2, r7
    263a:	4b08      	ldr	r3, [pc, #32]	; (265c <_ZN6SdFile4readEPvt+0x104>)
    263c:	199e      	adds	r6, r3, r6
    263e:	1971      	adds	r1, r6, r5
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    2640:	42b1      	cmp	r1, r6
    2642:	d0ec      	beq.n	261e <_ZN6SdFile4readEPvt+0xc6>
    2644:	7833      	ldrb	r3, [r6, #0]
    2646:	3601      	adds	r6, #1
    2648:	7013      	strb	r3, [r2, #0]
    264a:	3201      	adds	r2, #1
    264c:	e7f8      	b.n	2640 <_ZN6SdFile4readEPvt+0xe8>
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    264e:	b005      	add	sp, #20
    2650:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2652:	46c0      	nop			; (mov r8, r8)
    2654:	20000004 	.word	0x20000004
    2658:	200001f8 	.word	0x200001f8
    265c:	200001fc 	.word	0x200001fc

00002660 <_ZN6SdFile12readDirCacheEv>:
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    2660:	b573      	push	{r0, r1, r4, r5, r6, lr}
  // error if not directory
  if (!isDir()) return NULL;
    2662:	7a43      	ldrb	r3, [r0, #9]
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    2664:	0005      	movs	r5, r0
  // error if not directory
  if (!isDir()) return NULL;
    2666:	2b01      	cmp	r3, #1
    2668:	d801      	bhi.n	266e <_ZN6SdFile12readDirCacheEv+0xe>
    266a:	2000      	movs	r0, #0
    266c:	e013      	b.n	2696 <_ZN6SdFile12readDirCacheEv+0x36>

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    266e:	6903      	ldr	r3, [r0, #16]
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    2670:	2201      	movs	r2, #1
    2672:	05dc      	lsls	r4, r3, #23
    2674:	466b      	mov	r3, sp
    2676:	1dde      	adds	r6, r3, #7
    2678:	0031      	movs	r1, r6
    267a:	0f24      	lsrs	r4, r4, #28
    267c:	f7ff ff6c 	bl	2558 <_ZN6SdFile4readEPvt>
    2680:	2801      	cmp	r0, #1
    2682:	d1f2      	bne.n	266a <_ZN6SdFile12readDirCacheEv+0xa>
    2684:	7833      	ldrb	r3, [r6, #0]

  // use read to locate and cache block
  if (read() < 0) return NULL;
    2686:	3301      	adds	r3, #1
    2688:	d0ef      	beq.n	266a <_ZN6SdFile12readDirCacheEv+0xa>

  // advance to next entry
  curPosition_ += 31;
    268a:	692b      	ldr	r3, [r5, #16]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    268c:	0160      	lsls	r0, r4, #5

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    268e:	331f      	adds	r3, #31
    2690:	612b      	str	r3, [r5, #16]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    2692:	4b01      	ldr	r3, [pc, #4]	; (2698 <_ZN6SdFile12readDirCacheEv+0x38>)
    2694:	18c0      	adds	r0, r0, r3
}
    2696:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    2698:	200001fc 	.word	0x200001fc

0000269c <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    269c:	b570      	push	{r4, r5, r6, lr}
    269e:	7a43      	ldrb	r3, [r0, #9]
    26a0:	0004      	movs	r4, r0
    26a2:	000e      	movs	r6, r1
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    26a4:	2b00      	cmp	r3, #0
    26a6:	d101      	bne.n	26ac <_ZN6SdFile7seekSetEm+0x10>
    26a8:	2000      	movs	r0, #0
    26aa:	e028      	b.n	26fe <_ZN6SdFile7seekSetEm+0x62>
    26ac:	69c2      	ldr	r2, [r0, #28]
    26ae:	428a      	cmp	r2, r1
    26b0:	d3fa      	bcc.n	26a8 <_ZN6SdFile7seekSetEm+0xc>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    26b2:	2b02      	cmp	r3, #2
    26b4:	d002      	beq.n	26bc <_ZN6SdFile7seekSetEm+0x20>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    26b6:	2e00      	cmp	r6, #0
    26b8:	d103      	bne.n	26c2 <_ZN6SdFile7seekSetEm+0x26>
    // set position to start of file
    curCluster_ = 0;
    26ba:	60e6      	str	r6, [r4, #12]
    curPosition_ = 0;
    26bc:	6126      	str	r6, [r4, #16]
    return true;
    26be:	2001      	movs	r0, #1
    26c0:	e01d      	b.n	26fe <_ZN6SdFile7seekSetEm+0x62>
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    26c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    26c4:	6920      	ldr	r0, [r4, #16]
    26c6:	7c19      	ldrb	r1, [r3, #16]
    26c8:	1e42      	subs	r2, r0, #1
    26ca:	3109      	adds	r1, #9
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    26cc:	1e73      	subs	r3, r6, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    26ce:	40ca      	lsrs	r2, r1
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    26d0:	40cb      	lsrs	r3, r1

  if (nNew < nCur || curPosition_ == 0) {
    26d2:	429a      	cmp	r2, r3
    26d4:	d801      	bhi.n	26da <_ZN6SdFile7seekSetEm+0x3e>
    26d6:	2800      	cmp	r0, #0
    26d8:	d103      	bne.n	26e2 <_ZN6SdFile7seekSetEm+0x46>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    26da:	6a22      	ldr	r2, [r4, #32]
    26dc:	60e2      	str	r2, [r4, #12]
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    26de:	001d      	movs	r5, r3
    26e0:	e00a      	b.n	26f8 <_ZN6SdFile7seekSetEm+0x5c>
  if (nNew < nCur || curPosition_ == 0) {
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    26e2:	1a9b      	subs	r3, r3, r2
    26e4:	e7fb      	b.n	26de <_ZN6SdFile7seekSetEm+0x42>
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    26e6:	0022      	movs	r2, r4
    26e8:	68e1      	ldr	r1, [r4, #12]
    26ea:	320c      	adds	r2, #12
    26ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
    26ee:	f000 faf9 	bl	2ce4 <_ZNK8SdVolume6fatGetEmPm>
    26f2:	3d01      	subs	r5, #1
    26f4:	2800      	cmp	r0, #0
    26f6:	d0d7      	beq.n	26a8 <_ZN6SdFile7seekSetEm+0xc>
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    26f8:	2d00      	cmp	r5, #0
    26fa:	d1f4      	bne.n	26e6 <_ZN6SdFile7seekSetEm+0x4a>
    26fc:	e7de      	b.n	26bc <_ZN6SdFile7seekSetEm+0x20>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
  return true;
}
    26fe:	bd70      	pop	{r4, r5, r6, pc}

00002700 <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    2700:	b570      	push	{r4, r5, r6, lr}
  // only allow open files and directories
  if (!isOpen()) return false;
    2702:	7a43      	ldrb	r3, [r0, #9]
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    2704:	0005      	movs	r5, r0
  // only allow open files and directories
  if (!isOpen()) return false;
    2706:	2b00      	cmp	r3, #0
    2708:	d101      	bne.n	270e <_ZN6SdFile4syncEv+0xe>
    270a:	2000      	movs	r0, #0
    270c:	e031      	b.n	2772 <_ZN6SdFile4syncEv+0x72>

  if (flags_ & F_FILE_DIR_DIRTY) {
    270e:	7a03      	ldrb	r3, [r0, #8]
    2710:	2b7f      	cmp	r3, #127	; 0x7f
    2712:	d92c      	bls.n	276e <_ZN6SdFile4syncEv+0x6e>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    2714:	2101      	movs	r1, #1
    2716:	f7ff fe9f 	bl	2458 <_ZN6SdFile13cacheDirEntryEh>
    271a:	1e04      	subs	r4, r0, #0
    if (!d) return false;
    271c:	d0f5      	beq.n	270a <_ZN6SdFile4syncEv+0xa>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    271e:	7a6b      	ldrb	r3, [r5, #9]
    2720:	2b01      	cmp	r3, #1
    2722:	d807      	bhi.n	2734 <_ZN6SdFile4syncEv+0x34>
    2724:	7f2b      	ldrb	r3, [r5, #28]
    2726:	7703      	strb	r3, [r0, #28]
    2728:	7f6b      	ldrb	r3, [r5, #29]
    272a:	7743      	strb	r3, [r0, #29]
    272c:	7fab      	ldrb	r3, [r5, #30]
    272e:	7783      	strb	r3, [r0, #30]
    2730:	7feb      	ldrb	r3, [r5, #31]
    2732:	77c3      	strb	r3, [r0, #31]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    2734:	6a2b      	ldr	r3, [r5, #32]
    2736:	b29a      	uxth	r2, r3
    d->firstClusterHigh = firstCluster_ >> 16;
    2738:	0c1b      	lsrs	r3, r3, #16
    273a:	7523      	strb	r3, [r4, #20]
    273c:	0a1b      	lsrs	r3, r3, #8
    273e:	7563      	strb	r3, [r4, #21]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    2740:	4b0c      	ldr	r3, [pc, #48]	; (2774 <_ZN6SdFile4syncEv+0x74>)

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    2742:	76a2      	strb	r2, [r4, #26]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    2744:	681b      	ldr	r3, [r3, #0]

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    2746:	0a12      	lsrs	r2, r2, #8
    2748:	76e2      	strb	r2, [r4, #27]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    274a:	2b00      	cmp	r3, #0
    274c:	d00b      	beq.n	2766 <_ZN6SdFile4syncEv+0x66>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    274e:	0021      	movs	r1, r4
    2750:	0020      	movs	r0, r4
    2752:	3116      	adds	r1, #22
    2754:	3018      	adds	r0, #24
    2756:	4798      	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    2758:	7e63      	ldrb	r3, [r4, #25]
    275a:	7e22      	ldrb	r2, [r4, #24]
    275c:	021b      	lsls	r3, r3, #8
    275e:	4313      	orrs	r3, r2
    2760:	74a3      	strb	r3, [r4, #18]
    2762:	0a1b      	lsrs	r3, r3, #8
    2764:	74e3      	strb	r3, [r4, #19]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    2766:	237f      	movs	r3, #127	; 0x7f
    2768:	7a2a      	ldrb	r2, [r5, #8]
    276a:	4013      	ands	r3, r2
    276c:	722b      	strb	r3, [r5, #8]
  }
  return SdVolume::cacheFlush();
    276e:	f000 fa4b 	bl	2c08 <_ZN8SdVolume10cacheFlushEv>
}
    2772:	bd70      	pop	{r4, r5, r6, pc}
    2774:	200001f0 	.word	0x200001f0

00002778 <_ZN6SdFile5closeEv>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    2778:	b510      	push	{r4, lr}
    277a:	0004      	movs	r4, r0
  if (!sync())return false;
    277c:	f7ff ffc0 	bl	2700 <_ZN6SdFile4syncEv>
    2780:	2800      	cmp	r0, #0
    2782:	d002      	beq.n	278a <_ZN6SdFile5closeEv+0x12>
  type_ = FAT_FILE_TYPE_CLOSED;
    2784:	2300      	movs	r3, #0
  return true;
    2786:	2001      	movs	r0, #1
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
  type_ = FAT_FILE_TYPE_CLOSED;
    2788:	7263      	strb	r3, [r4, #9]
  return true;
}
    278a:	bd10      	pop	{r4, pc}

0000278c <_ZN6SdFile8truncateEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    278c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    278e:	0004      	movs	r4, r0
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    2790:	7a40      	ldrb	r0, [r0, #9]
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    2792:	000d      	movs	r5, r1
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    2794:	2801      	cmp	r0, #1
    2796:	d10e      	bne.n	27b6 <_ZN6SdFile8truncateEm+0x2a>
    2798:	7a23      	ldrb	r3, [r4, #8]
    279a:	079b      	lsls	r3, r3, #30
    279c:	d50b      	bpl.n	27b6 <_ZN6SdFile8truncateEm+0x2a>

  // error if length is greater than current size
  if (length > fileSize_) return false;
    279e:	69e3      	ldr	r3, [r4, #28]
    27a0:	428b      	cmp	r3, r1
    27a2:	d308      	bcc.n	27b6 <_ZN6SdFile8truncateEm+0x2a>

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    27a4:	2b00      	cmp	r3, #0
    27a6:	d041      	beq.n	282c <_ZN6SdFile8truncateEm+0xa0>

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    27a8:	0029      	movs	r1, r5
    27aa:	0020      	movs	r0, r4

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
    27ac:	6926      	ldr	r6, [r4, #16]

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    27ae:	f7ff ff75 	bl	269c <_ZN6SdFile7seekSetEm>
    27b2:	2800      	cmp	r0, #0
    27b4:	d101      	bne.n	27ba <_ZN6SdFile8truncateEm+0x2e>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    firstCluster_ = 0;
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    27b6:	2000      	movs	r0, #0
    27b8:	e038      	b.n	282c <_ZN6SdFile8truncateEm+0xa0>
  uint32_t newPos = curPosition_ > length ? length : curPosition_;

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;

  if (length == 0) {
    27ba:	2d00      	cmp	r5, #0
    27bc:	d107      	bne.n	27ce <_ZN6SdFile8truncateEm+0x42>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    27be:	6a21      	ldr	r1, [r4, #32]
    27c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    27c2:	f000 fb89 	bl	2ed8 <_ZN8SdVolume9freeChainEm>
    27c6:	2800      	cmp	r0, #0
    27c8:	d0f5      	beq.n	27b6 <_ZN6SdFile8truncateEm+0x2a>
    firstCluster_ = 0;
    27ca:	6225      	str	r5, [r4, #32]
    27cc:	e01c      	b.n	2808 <_ZN6SdFile8truncateEm+0x7c>
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    27ce:	aa01      	add	r2, sp, #4
    27d0:	68e1      	ldr	r1, [r4, #12]
    27d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    27d4:	f000 fa86 	bl	2ce4 <_ZNK8SdVolume6fatGetEmPm>
    27d8:	2800      	cmp	r0, #0
    27da:	d0ec      	beq.n	27b6 <_ZN6SdFile8truncateEm+0x2a>

    if (!vol_->isEOC(toFree)) {
    27dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    27de:	9901      	ldr	r1, [sp, #4]
    27e0:	1c43      	adds	r3, r0, #1
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    27e2:	7fdb      	ldrb	r3, [r3, #31]
    27e4:	2b10      	cmp	r3, #16
    27e6:	d001      	beq.n	27ec <_ZN6SdFile8truncateEm+0x60>
    27e8:	4b11      	ldr	r3, [pc, #68]	; (2830 <_ZN6SdFile8truncateEm+0xa4>)
    27ea:	e000      	b.n	27ee <_ZN6SdFile8truncateEm+0x62>
    27ec:	4b11      	ldr	r3, [pc, #68]	; (2834 <_ZN6SdFile8truncateEm+0xa8>)
    27ee:	4299      	cmp	r1, r3
    27f0:	d20a      	bcs.n	2808 <_ZN6SdFile8truncateEm+0x7c>
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
    27f2:	f000 fb71 	bl	2ed8 <_ZN8SdVolume9freeChainEm>
    27f6:	2800      	cmp	r0, #0
    27f8:	d0dd      	beq.n	27b6 <_ZN6SdFile8truncateEm+0x2a>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    27fa:	4a0f      	ldr	r2, [pc, #60]	; (2838 <_ZN6SdFile8truncateEm+0xac>)
    27fc:	68e1      	ldr	r1, [r4, #12]
    27fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2800:	f000 fac4 	bl	2d8c <_ZN8SdVolume6fatPutEmm>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    2804:	2800      	cmp	r0, #0
    2806:	d0d6      	beq.n	27b6 <_ZN6SdFile8truncateEm+0x2a>
    }
  }
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    2808:	2280      	movs	r2, #128	; 0x80
    280a:	7a23      	ldrb	r3, [r4, #8]
    280c:	4252      	negs	r2, r2
    280e:	4313      	orrs	r3, r2

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    }
  }
  fileSize_ = length;
    2810:	61e5      	str	r5, [r4, #28]

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    2812:	7223      	strb	r3, [r4, #8]

  if (!sync()) return false;
    2814:	0020      	movs	r0, r4
    2816:	f7ff ff73 	bl	2700 <_ZN6SdFile4syncEv>
    281a:	2800      	cmp	r0, #0
    281c:	d0cb      	beq.n	27b6 <_ZN6SdFile8truncateEm+0x2a>

  // set file to correct position
  return seekSet(newPos);
    281e:	1e29      	subs	r1, r5, #0
    2820:	42b1      	cmp	r1, r6
    2822:	d900      	bls.n	2826 <_ZN6SdFile8truncateEm+0x9a>
    2824:	0031      	movs	r1, r6
    2826:	0020      	movs	r0, r4
    2828:	f7ff ff38 	bl	269c <_ZN6SdFile7seekSetEm>
}
    282c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    282e:	46c0      	nop			; (mov r8, r8)
    2830:	0ffffff8 	.word	0x0ffffff8
    2834:	0000fff8 	.word	0x0000fff8
    2838:	0fffffff 	.word	0x0fffffff

0000283c <_ZN6SdFile15openCachedEntryEhh>:
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    283c:	4b1b      	ldr	r3, [pc, #108]	; (28ac <_ZN6SdFile15openCachedEntryEhh+0x70>)
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    283e:	b570      	push	{r4, r5, r6, lr}
    2840:	0015      	movs	r5, r2
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    2842:	014a      	lsls	r2, r1, #5
    2844:	18d3      	adds	r3, r2, r3

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    2846:	2211      	movs	r2, #17
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    2848:	0004      	movs	r4, r0
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    284a:	7ad8      	ldrb	r0, [r3, #11]
    284c:	4210      	tst	r0, r2
    284e:	d004      	beq.n	285a <_ZN6SdFile15openCachedEntryEhh+0x1e>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    2850:	3231      	adds	r2, #49	; 0x31
    2852:	4215      	tst	r5, r2
    2854:	d001      	beq.n	285a <_ZN6SdFile15openCachedEntryEhh+0x1e>
    2856:	2000      	movs	r0, #0
    2858:	e027      	b.n	28aa <_ZN6SdFile15openCachedEntryEhh+0x6e>
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
  dirBlock_ = SdVolume::cacheBlockNumber_;
    285a:	4a15      	ldr	r2, [pc, #84]	; (28b0 <_ZN6SdFile15openCachedEntryEhh+0x74>)
  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    if (oflag & (O_WRITE | O_TRUNC)) return false;
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
    285c:	7621      	strb	r1, [r4, #24]
  dirBlock_ = SdVolume::cacheBlockNumber_;
    285e:	6812      	ldr	r2, [r2, #0]
    2860:	6162      	str	r2, [r4, #20]

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
  firstCluster_ |= p->firstClusterLow;
    2862:	8a99      	ldrh	r1, [r3, #20]
    2864:	8b5a      	ldrh	r2, [r3, #26]
    2866:	0409      	lsls	r1, r1, #16
    2868:	4311      	orrs	r1, r2
    286a:	2218      	movs	r2, #24
    286c:	6221      	str	r1, [r4, #32]
    286e:	7ad8      	ldrb	r0, [r3, #11]
    2870:	4002      	ands	r2, r0

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    2872:	d103      	bne.n	287c <_ZN6SdFile15openCachedEntryEhh+0x40>
    fileSize_ = p->fileSize;
    2874:	69db      	ldr	r3, [r3, #28]
    2876:	61e3      	str	r3, [r4, #28]
    type_ = FAT_FILE_TYPE_NORMAL;
    2878:	2301      	movs	r3, #1
    287a:	e009      	b.n	2890 <_ZN6SdFile15openCachedEntryEhh+0x54>
  } else if (DIR_IS_SUBDIR(p)) {
    287c:	2a10      	cmp	r2, #16
    287e:	d1ea      	bne.n	2856 <_ZN6SdFile15openCachedEntryEhh+0x1a>
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    2880:	0022      	movs	r2, r4
    2882:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2884:	321c      	adds	r2, #28
    2886:	f000 fa5d 	bl	2d44 <_ZNK8SdVolume9chainSizeEmPm>
    288a:	2800      	cmp	r0, #0
    288c:	d0e3      	beq.n	2856 <_ZN6SdFile15openCachedEntryEhh+0x1a>
    type_ = FAT_FILE_TYPE_SUBDIR;
    288e:	2304      	movs	r3, #4
    2890:	7263      	strb	r3, [r4, #9]
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    2892:	230f      	movs	r3, #15

  // set to start of file
  curCluster_ = 0;
    2894:	2100      	movs	r1, #0
    type_ = FAT_FILE_TYPE_SUBDIR;
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    2896:	402b      	ands	r3, r5
    2898:	7223      	strb	r3, [r4, #8]

  // set to start of file
  curCluster_ = 0;
    289a:	60e1      	str	r1, [r4, #12]
  curPosition_ = 0;
    289c:	6121      	str	r1, [r4, #16]

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
  return true;
    289e:	2001      	movs	r0, #1
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    28a0:	066b      	lsls	r3, r5, #25
    28a2:	d502      	bpl.n	28aa <_ZN6SdFile15openCachedEntryEhh+0x6e>
    28a4:	0020      	movs	r0, r4
    28a6:	f7ff ff71 	bl	278c <_ZN6SdFile8truncateEm>
  return true;
}
    28aa:	bd70      	pop	{r4, r5, r6, pc}
    28ac:	200001fc 	.word	0x200001fc
    28b0:	20000004 	.word	0x20000004

000028b4 <_ZN6SdFile4openEPS_PKch>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    28b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28b6:	0005      	movs	r5, r0
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    28b8:	7a44      	ldrb	r4, [r0, #9]
    28ba:	2000      	movs	r0, #0
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    28bc:	b087      	sub	sp, #28
    28be:	000e      	movs	r6, r1
    28c0:	001f      	movs	r7, r3
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    28c2:	4284      	cmp	r4, r0
    28c4:	d000      	beq.n	28c8 <_ZN6SdFile4openEPS_PKch+0x14>
    28c6:	e088      	b.n	29da <_ZN6SdFile4openEPS_PKch+0x126>

  if (!make83Name(fileName, dname)) return false;
    28c8:	a903      	add	r1, sp, #12
    28ca:	0010      	movs	r0, r2
    28cc:	f7ff fdd2 	bl	2474 <_ZN6SdFile10make83NameEPKcPh>
    28d0:	2800      	cmp	r0, #0
    28d2:	d101      	bne.n	28d8 <_ZN6SdFile4openEPS_PKch+0x24>
    28d4:	2000      	movs	r0, #0
    28d6:	e080      	b.n	29da <_ZN6SdFile4openEPS_PKch+0x126>
  vol_ = dirFile->vol_;
    28d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
    28da:	626b      	str	r3, [r5, #36]	; 0x24
  int8_t readDir(dir_t* dir);
  static uint8_t remove(SdFile* dirFile, const char* fileName);
  uint8_t remove(void);
  /** Set the file's current position to zero. */
  void rewind(void) {
    curPosition_ = curCluster_ = 0;
    28dc:	60f4      	str	r4, [r6, #12]
    28de:	6134      	str	r4, [r6, #16]

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    28e0:	6933      	ldr	r3, [r6, #16]
    28e2:	69f2      	ldr	r2, [r6, #28]
    28e4:	4293      	cmp	r3, r2
    28e6:	d226      	bcs.n	2936 <_ZN6SdFile4openEPS_PKch+0x82>
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    28e8:	220f      	movs	r2, #15
    28ea:	095b      	lsrs	r3, r3, #5
    28ec:	401a      	ands	r2, r3
    p = dirFile->readDirCache();
    28ee:	0030      	movs	r0, r6
  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    28f0:	9201      	str	r2, [sp, #4]
    p = dirFile->readDirCache();
    28f2:	f7ff feb5 	bl	2660 <_ZN6SdFile12readDirCacheEv>
    28f6:	1e01      	subs	r1, r0, #0
    if (p == NULL) return false;
    28f8:	d0ec      	beq.n	28d4 <_ZN6SdFile4openEPS_PKch+0x20>

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    28fa:	7803      	ldrb	r3, [r0, #0]
    28fc:	2b00      	cmp	r3, #0
    28fe:	d00e      	beq.n	291e <_ZN6SdFile4openEPS_PKch+0x6a>
    2900:	2be5      	cmp	r3, #229	; 0xe5
    2902:	d066      	beq.n	29d2 <_ZN6SdFile4openEPS_PKch+0x11e>
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
    2904:	220b      	movs	r2, #11
    2906:	a803      	add	r0, sp, #12
    2908:	f006 fe8e 	bl	9628 <memcmp>
    290c:	2800      	cmp	r0, #0
    290e:	d1e7      	bne.n	28e0 <_ZN6SdFile4openEPS_PKch+0x2c>
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    2910:	2330      	movs	r3, #48	; 0x30
    2912:	403b      	ands	r3, r7
    2914:	2b30      	cmp	r3, #48	; 0x30
    2916:	d0dd      	beq.n	28d4 <_ZN6SdFile4openEPS_PKch+0x20>

      // open found file
      return openCachedEntry(0XF & index, oflag);
    2918:	003a      	movs	r2, r7
    291a:	9901      	ldr	r1, [sp, #4]
    291c:	e055      	b.n	29ca <_ZN6SdFile4openEPS_PKch+0x116>
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
    291e:	2c00      	cmp	r4, #0
    2920:	d108      	bne.n	2934 <_ZN6SdFile4openEPS_PKch+0x80>
        emptyFound = true;
        dirIndex_ = index;
    2922:	466b      	mov	r3, sp
    2924:	791b      	ldrb	r3, [r3, #4]
    2926:	762b      	strb	r3, [r5, #24]
        dirBlock_ = SdVolume::cacheBlockNumber_;
    2928:	4b2d      	ldr	r3, [pc, #180]	; (29e0 <_ZN6SdFile4openEPS_PKch+0x12c>)
    292a:	681b      	ldr	r3, [r3, #0]
    292c:	616b      	str	r3, [r5, #20]
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    292e:	780b      	ldrb	r3, [r1, #0]
    2930:	2b00      	cmp	r3, #0
    2932:	d150      	bne.n	29d6 <_ZN6SdFile4openEPS_PKch+0x122>
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
    2934:	2401      	movs	r4, #1
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    2936:	2312      	movs	r3, #18
    2938:	403b      	ands	r3, r7
    293a:	2b12      	cmp	r3, #18
    293c:	d1ca      	bne.n	28d4 <_ZN6SdFile4openEPS_PKch+0x20>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    293e:	2c00      	cmp	r4, #0
    2940:	d006      	beq.n	2950 <_ZN6SdFile4openEPS_PKch+0x9c>
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    2942:	2101      	movs	r1, #1
    2944:	0028      	movs	r0, r5
    2946:	f7ff fd87 	bl	2458 <_ZN6SdFile13cacheDirEntryEh>
    294a:	1e04      	subs	r4, r0, #0
    if (!p) return false;
    294c:	d10a      	bne.n	2964 <_ZN6SdFile4openEPS_PKch+0xb0>
    294e:	e7c1      	b.n	28d4 <_ZN6SdFile4openEPS_PKch+0x20>
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    2950:	7a73      	ldrb	r3, [r6, #9]
    2952:	2b02      	cmp	r3, #2
    2954:	d0be      	beq.n	28d4 <_ZN6SdFile4openEPS_PKch+0x20>

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;
    2956:	0030      	movs	r0, r6
    2958:	f7ff fd58 	bl	240c <_ZN6SdFile13addDirClusterEv>
    295c:	2800      	cmp	r0, #0
    295e:	d0b9      	beq.n	28d4 <_ZN6SdFile4openEPS_PKch+0x20>

    // use first entry in cluster
    dirIndex_ = 0;
    2960:	762c      	strb	r4, [r5, #24]
    p = SdVolume::cacheBuffer_.dir;
    2962:	4c20      	ldr	r4, [pc, #128]	; (29e4 <_ZN6SdFile4openEPS_PKch+0x130>)
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
    2964:	2220      	movs	r2, #32
    2966:	2100      	movs	r1, #0
    2968:	0020      	movs	r0, r4
    296a:	f006 fe8a 	bl	9682 <memset>
  memcpy(p->name, dname, 11);
    296e:	220b      	movs	r2, #11
    2970:	a903      	add	r1, sp, #12
    2972:	0020      	movs	r0, r4
    2974:	f006 fe67 	bl	9646 <memcpy>

  // set timestamps
  if (dateTime_) {
    2978:	4b1b      	ldr	r3, [pc, #108]	; (29e8 <_ZN6SdFile4openEPS_PKch+0x134>)
    297a:	681b      	ldr	r3, [r3, #0]
    297c:	2b00      	cmp	r3, #0
    297e:	d005      	beq.n	298c <_ZN6SdFile4openEPS_PKch+0xd8>
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
    2980:	0021      	movs	r1, r4
    2982:	0020      	movs	r0, r4
    2984:	310e      	adds	r1, #14
    2986:	3010      	adds	r0, #16
    2988:	4798      	blx	r3
    298a:	e006      	b.n	299a <_ZN6SdFile4openEPS_PKch+0xe6>
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    298c:	2221      	movs	r2, #33	; 0x21
    p->creationTime = FAT_DEFAULT_TIME;
    298e:	73a3      	strb	r3, [r4, #14]
    2990:	2308      	movs	r3, #8
  if (dateTime_) {
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    2992:	7422      	strb	r2, [r4, #16]
    2994:	3207      	adds	r2, #7
    2996:	7462      	strb	r2, [r4, #17]
    p->creationTime = FAT_DEFAULT_TIME;
    2998:	73e3      	strb	r3, [r4, #15]
  }
  p->lastAccessDate = p->creationDate;
    299a:	7c63      	ldrb	r3, [r4, #17]
    299c:	7c22      	ldrb	r2, [r4, #16]
    299e:	021b      	lsls	r3, r3, #8
    29a0:	4313      	orrs	r3, r2
    29a2:	22ff      	movs	r2, #255	; 0xff
    29a4:	401a      	ands	r2, r3
    29a6:	0a1b      	lsrs	r3, r3, #8
    29a8:	74e3      	strb	r3, [r4, #19]
  p->lastWriteDate = p->creationDate;
    29aa:	7663      	strb	r3, [r4, #25]
  p->lastWriteTime = p->creationTime;
    29ac:	7be3      	ldrb	r3, [r4, #15]
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    p->creationTime = FAT_DEFAULT_TIME;
  }
  p->lastAccessDate = p->creationDate;
    29ae:	74a2      	strb	r2, [r4, #18]
  p->lastWriteDate = p->creationDate;
    29b0:	7622      	strb	r2, [r4, #24]
  p->lastWriteTime = p->creationTime;
    29b2:	7ba2      	ldrb	r2, [r4, #14]
    29b4:	021b      	lsls	r3, r3, #8
    29b6:	4313      	orrs	r3, r2
    29b8:	75a3      	strb	r3, [r4, #22]
    29ba:	0a1b      	lsrs	r3, r3, #8
    29bc:	75e3      	strb	r3, [r4, #23]

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    29be:	f000 f923 	bl	2c08 <_ZN8SdVolume10cacheFlushEv>
    29c2:	2800      	cmp	r0, #0
    29c4:	d086      	beq.n	28d4 <_ZN6SdFile4openEPS_PKch+0x20>

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
    29c6:	003a      	movs	r2, r7
    29c8:	7e29      	ldrb	r1, [r5, #24]
    29ca:	0028      	movs	r0, r5
    29cc:	f7ff ff36 	bl	283c <_ZN6SdFile15openCachedEntryEhh>
    29d0:	e003      	b.n	29da <_ZN6SdFile4openEPS_PKch+0x126>
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
    29d2:	2c00      	cmp	r4, #0
    29d4:	d0a5      	beq.n	2922 <_ZN6SdFile4openEPS_PKch+0x6e>
    29d6:	2401      	movs	r4, #1
    29d8:	e782      	b.n	28e0 <_ZN6SdFile4openEPS_PKch+0x2c>
  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
}
    29da:	b007      	add	sp, #28
    29dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29de:	46c0      	nop			; (mov r8, r8)
    29e0:	20000004 	.word	0x20000004
    29e4:	200001fc 	.word	0x200001fc
    29e8:	200001f0 	.word	0x200001f0

000029ec <_ZN6SdFile6removeEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file read-only, is a directory,
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(void) {
    29ec:	b510      	push	{r4, lr}
  // free any clusters - will fail if read-only or directory
  if (!truncate(0)) return false;
    29ee:	2100      	movs	r1, #0
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file read-only, is a directory,
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(void) {
    29f0:	0004      	movs	r4, r0
  // free any clusters - will fail if read-only or directory
  if (!truncate(0)) return false;
    29f2:	f7ff fecb 	bl	278c <_ZN6SdFile8truncateEm>
    29f6:	2800      	cmp	r0, #0
    29f8:	d101      	bne.n	29fe <_ZN6SdFile6removeEv+0x12>
    29fa:	2000      	movs	r0, #0
    29fc:	e00b      	b.n	2a16 <_ZN6SdFile6removeEv+0x2a>

  // cache directory entry
  dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    29fe:	2101      	movs	r1, #1
    2a00:	0020      	movs	r0, r4
    2a02:	f7ff fd29 	bl	2458 <_ZN6SdFile13cacheDirEntryEh>
  if (!d) return false;
    2a06:	2800      	cmp	r0, #0
    2a08:	d0f7      	beq.n	29fa <_ZN6SdFile6removeEv+0xe>

  // mark entry deleted
  d->name[0] = DIR_NAME_DELETED;
    2a0a:	23e5      	movs	r3, #229	; 0xe5
    2a0c:	7003      	strb	r3, [r0, #0]

  // set this SdFile closed
  type_ = FAT_FILE_TYPE_CLOSED;
    2a0e:	2300      	movs	r3, #0
    2a10:	7263      	strb	r3, [r4, #9]

  // write entry to SD
  return SdVolume::cacheFlush();
    2a12:	f000 f8f9 	bl	2c08 <_ZN8SdVolume10cacheFlushEv>
}
    2a16:	bd10      	pop	{r4, pc}

00002a18 <_ZN6SdFile6removeEPS_PKc>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is a directory, is read only,
 * \a dirFile is not a directory, \a fileName is not found
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(SdFile* dirFile, const char* fileName) {
    2a18:	b510      	push	{r4, lr}
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    2a1a:	4b0a      	ldr	r3, [pc, #40]	; (2a44 <_ZN6SdFile6removeEPS_PKc+0x2c>)
    2a1c:	b08a      	sub	sp, #40	; 0x28
    2a1e:	3308      	adds	r3, #8
    2a20:	2400      	movs	r4, #0
    2a22:	9300      	str	r3, [sp, #0]
    2a24:	466b      	mov	r3, sp
    2a26:	000a      	movs	r2, r1
    2a28:	725c      	strb	r4, [r3, #9]
  SdFile file;
  if (!file.open(dirFile, fileName, O_WRITE)) return false;
    2a2a:	0001      	movs	r1, r0
    2a2c:	2302      	movs	r3, #2
    2a2e:	4668      	mov	r0, sp
    2a30:	9401      	str	r4, [sp, #4]
    2a32:	f7ff ff3f 	bl	28b4 <_ZN6SdFile4openEPS_PKch>
    2a36:	42a0      	cmp	r0, r4
    2a38:	d002      	beq.n	2a40 <_ZN6SdFile6removeEPS_PKc+0x28>
  return file.remove();
    2a3a:	4668      	mov	r0, sp
    2a3c:	f7ff ffd6 	bl	29ec <_ZN6SdFile6removeEv>
}
    2a40:	b00a      	add	sp, #40	; 0x28
    2a42:	bd10      	pop	{r4, pc}
    2a44:	0000e3d4 	.word	0x0000e3d4

00002a48 <_ZN6SdFile5writeEPKvt>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    2a48:	b5f0      	push	{r4, r5, r6, r7, lr}

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    2a4a:	7a43      	ldrb	r3, [r0, #9]
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    2a4c:	b087      	sub	sp, #28
    2a4e:	0004      	movs	r4, r0
    2a50:	000f      	movs	r7, r1
    2a52:	9203      	str	r2, [sp, #12]

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    2a54:	2b01      	cmp	r3, #1
    2a56:	d10d      	bne.n	2a74 <_ZN6SdFile5writeEPKvt+0x2c>
    2a58:	7a03      	ldrb	r3, [r0, #8]
    2a5a:	079a      	lsls	r2, r3, #30
    2a5c:	d50a      	bpl.n	2a74 <_ZN6SdFile5writeEPKvt+0x2c>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    2a5e:	075b      	lsls	r3, r3, #29
    2a60:	d50c      	bpl.n	2a7c <_ZN6SdFile5writeEPKvt+0x34>
    2a62:	69e1      	ldr	r1, [r4, #28]
    2a64:	6923      	ldr	r3, [r4, #16]
    2a66:	428b      	cmp	r3, r1
    2a68:	d008      	beq.n	2a7c <_ZN6SdFile5writeEPKvt+0x34>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    2a6a:	0020      	movs	r0, r4
    2a6c:	f7ff fe16 	bl	269c <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    2a70:	2800      	cmp	r0, #0
    2a72:	d103      	bne.n	2a7c <_ZN6SdFile5writeEPKvt+0x34>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2a74:	2301      	movs	r3, #1

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    2a76:	2000      	movs	r0, #0
    2a78:	6063      	str	r3, [r4, #4]
    2a7a:	e0aa      	b.n	2bd2 <_ZN6SdFile5writeEPKvt+0x18a>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    2a7c:	9b03      	ldr	r3, [sp, #12]
    2a7e:	9301      	str	r3, [sp, #4]
    2a80:	e03b      	b.n	2afa <_ZN6SdFile5writeEPKvt+0xb2>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    2a82:	6a60      	ldr	r0, [r4, #36]	; 0x24
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    2a84:	0a53      	lsrs	r3, r2, #9
    2a86:	7906      	ldrb	r6, [r0, #4]
    uint16_t blockOffset = curPosition_ & 0X1FF;
    2a88:	05d2      	lsls	r2, r2, #23
    2a8a:	3e01      	subs	r6, #1
    2a8c:	401e      	ands	r6, r3
    2a8e:	b2f6      	uxtb	r6, r6
    2a90:	0dd3      	lsrs	r3, r2, #23
    2a92:	9302      	str	r3, [sp, #8]
    if (blockOfCluster == 0 && blockOffset == 0) {
    2a94:	2e00      	cmp	r6, #0
    2a96:	d035      	beq.n	2b04 <_ZN6SdFile5writeEPKvt+0xbc>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    2a98:	2380      	movs	r3, #128	; 0x80
    2a9a:	9a02      	ldr	r2, [sp, #8]
    2a9c:	009b      	lsls	r3, r3, #2
    2a9e:	1a9b      	subs	r3, r3, r2
    2aa0:	466a      	mov	r2, sp
    2aa2:	8895      	ldrh	r5, [r2, #4]
    2aa4:	9a01      	ldr	r2, [sp, #4]
    2aa6:	b29b      	uxth	r3, r3
    2aa8:	429a      	cmp	r2, r3
    2aaa:	d900      	bls.n	2aae <_ZN6SdFile5writeEPKvt+0x66>
    2aac:	1c1d      	adds	r5, r3, #0

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2aae:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2ab0:	68e3      	ldr	r3, [r4, #12]
    2ab2:	7c11      	ldrb	r1, [r2, #16]
    2ab4:	3b02      	subs	r3, #2
    2ab6:	408b      	lsls	r3, r1
    2ab8:	6952      	ldr	r2, [r2, #20]
    2aba:	b2ad      	uxth	r5, r5
    2abc:	189b      	adds	r3, r3, r2
    2abe:	199e      	adds	r6, r3, r6
    if (n == 512) {
    2ac0:	2380      	movs	r3, #128	; 0x80
    2ac2:	009b      	lsls	r3, r3, #2
    2ac4:	429d      	cmp	r5, r3
    2ac6:	d13f      	bne.n	2b48 <_ZN6SdFile5writeEPKvt+0x100>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    2ac8:	4b43      	ldr	r3, [pc, #268]	; (2bd8 <_ZN6SdFile5writeEPKvt+0x190>)
    2aca:	681a      	ldr	r2, [r3, #0]
    2acc:	4296      	cmp	r6, r2
    2ace:	d102      	bne.n	2ad6 <_ZN6SdFile5writeEPKvt+0x8e>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    2ad0:	2201      	movs	r2, #1
    2ad2:	4252      	negs	r2, r2
    2ad4:	601a      	str	r2, [r3, #0]
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    2ad6:	4b41      	ldr	r3, [pc, #260]	; (2bdc <_ZN6SdFile5writeEPKvt+0x194>)
    2ad8:	003a      	movs	r2, r7
    2ada:	0031      	movs	r1, r6
    2adc:	6818      	ldr	r0, [r3, #0]
    2ade:	f7ff fc3a 	bl	2356 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    2ae2:	2800      	cmp	r0, #0
    2ae4:	d0c6      	beq.n	2a74 <_ZN6SdFile5writeEPKvt+0x2c>
      src += 512;
    2ae6:	2380      	movs	r3, #128	; 0x80
    2ae8:	009b      	lsls	r3, r3, #2
    2aea:	18ff      	adds	r7, r7, r3
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    2aec:	9b01      	ldr	r3, [sp, #4]
    2aee:	1b5b      	subs	r3, r3, r5
    2af0:	b29b      	uxth	r3, r3
    2af2:	9301      	str	r3, [sp, #4]
    curPosition_ += n;
    2af4:	6923      	ldr	r3, [r4, #16]
    2af6:	195d      	adds	r5, r3, r5
    2af8:	6125      	str	r5, [r4, #16]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    2afa:	9b01      	ldr	r3, [sp, #4]
    2afc:	6922      	ldr	r2, [r4, #16]
    2afe:	2b00      	cmp	r3, #0
    2b00:	d1bf      	bne.n	2a82 <_ZN6SdFile5writeEPKvt+0x3a>
    2b02:	e049      	b.n	2b98 <_ZN6SdFile5writeEPKvt+0x150>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    2b04:	2b00      	cmp	r3, #0
    2b06:	d1c7      	bne.n	2a98 <_ZN6SdFile5writeEPKvt+0x50>
      // start of new cluster
      if (curCluster_ == 0) {
    2b08:	68e1      	ldr	r1, [r4, #12]
    2b0a:	2900      	cmp	r1, #0
    2b0c:	d104      	bne.n	2b18 <_ZN6SdFile5writeEPKvt+0xd0>
        if (firstCluster_ == 0) {
    2b0e:	6a23      	ldr	r3, [r4, #32]
    2b10:	2b00      	cmp	r3, #0
    2b12:	d011      	beq.n	2b38 <_ZN6SdFile5writeEPKvt+0xf0>
          // allocate first cluster of file
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = firstCluster_;
    2b14:	60e3      	str	r3, [r4, #12]
    2b16:	e7bf      	b.n	2a98 <_ZN6SdFile5writeEPKvt+0x50>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2b18:	aa05      	add	r2, sp, #20
    2b1a:	f000 f8e3 	bl	2ce4 <_ZNK8SdVolume6fatGetEmPm>
    2b1e:	2800      	cmp	r0, #0
    2b20:	d057      	beq.n	2bd2 <_ZN6SdFile5writeEPKvt+0x18a>
    2b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (vol_->isEOC(next)) {
    2b24:	9a05      	ldr	r2, [sp, #20]
    2b26:	3301      	adds	r3, #1
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2b28:	7fdb      	ldrb	r3, [r3, #31]
    2b2a:	2b10      	cmp	r3, #16
    2b2c:	d001      	beq.n	2b32 <_ZN6SdFile5writeEPKvt+0xea>
    2b2e:	4b2c      	ldr	r3, [pc, #176]	; (2be0 <_ZN6SdFile5writeEPKvt+0x198>)
    2b30:	e000      	b.n	2b34 <_ZN6SdFile5writeEPKvt+0xec>
    2b32:	4b2c      	ldr	r3, [pc, #176]	; (2be4 <_ZN6SdFile5writeEPKvt+0x19c>)
    2b34:	429a      	cmp	r2, r3
    2b36:	d305      	bcc.n	2b44 <_ZN6SdFile5writeEPKvt+0xfc>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    2b38:	0020      	movs	r0, r4
    2b3a:	f7ff fc51 	bl	23e0 <_ZN6SdFile10addClusterEv>
    2b3e:	2800      	cmp	r0, #0
    2b40:	d1aa      	bne.n	2a98 <_ZN6SdFile5writeEPKvt+0x50>
    2b42:	e797      	b.n	2a74 <_ZN6SdFile5writeEPKvt+0x2c>
        } else {
          curCluster_ = next;
    2b44:	60e2      	str	r2, [r4, #12]
    2b46:	e7a7      	b.n	2a98 <_ZN6SdFile5writeEPKvt+0x50>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    2b48:	9b02      	ldr	r3, [sp, #8]
    2b4a:	2b00      	cmp	r3, #0
    2b4c:	d10f      	bne.n	2b6e <_ZN6SdFile5writeEPKvt+0x126>
    2b4e:	6923      	ldr	r3, [r4, #16]
    2b50:	69e2      	ldr	r2, [r4, #28]
    2b52:	4293      	cmp	r3, r2
    2b54:	d30b      	bcc.n	2b6e <_ZN6SdFile5writeEPKvt+0x126>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    2b56:	f000 f857 	bl	2c08 <_ZN8SdVolume10cacheFlushEv>
    2b5a:	2800      	cmp	r0, #0
    2b5c:	d08a      	beq.n	2a74 <_ZN6SdFile5writeEPKvt+0x2c>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2b5e:	2101      	movs	r1, #1
        SdVolume::cacheBlockNumber_ = block;
    2b60:	4b1d      	ldr	r3, [pc, #116]	; (2bd8 <_ZN6SdFile5writeEPKvt+0x190>)
    2b62:	4a21      	ldr	r2, [pc, #132]	; (2be8 <_ZN6SdFile5writeEPKvt+0x1a0>)
    2b64:	601e      	str	r6, [r3, #0]
    2b66:	7813      	ldrb	r3, [r2, #0]
    2b68:	430b      	orrs	r3, r1
    2b6a:	7013      	strb	r3, [r2, #0]
    2b6c:	e006      	b.n	2b7c <_ZN6SdFile5writeEPKvt+0x134>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    2b6e:	2101      	movs	r1, #1
    2b70:	0030      	movs	r0, r6
    2b72:	f000 f875 	bl	2c60 <_ZN8SdVolume13cacheRawBlockEmh>
    2b76:	2800      	cmp	r0, #0
    2b78:	d100      	bne.n	2b7c <_ZN6SdFile5writeEPKvt+0x134>
    2b7a:	e77b      	b.n	2a74 <_ZN6SdFile5writeEPKvt+0x2c>
    2b7c:	003a      	movs	r2, r7
    2b7e:	4b1b      	ldr	r3, [pc, #108]	; (2bec <_ZN6SdFile5writeEPKvt+0x1a4>)
    2b80:	9902      	ldr	r1, [sp, #8]
    2b82:	185b      	adds	r3, r3, r1
    2b84:	1958      	adds	r0, r3, r5
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    2b86:	4298      	cmp	r0, r3
    2b88:	d004      	beq.n	2b94 <_ZN6SdFile5writeEPKvt+0x14c>
    2b8a:	7811      	ldrb	r1, [r2, #0]
    2b8c:	3201      	adds	r2, #1
    2b8e:	7019      	strb	r1, [r3, #0]
    2b90:	3301      	adds	r3, #1
    2b92:	e7f8      	b.n	2b86 <_ZN6SdFile5writeEPKvt+0x13e>
    2b94:	197f      	adds	r7, r7, r5
    2b96:	e7a9      	b.n	2aec <_ZN6SdFile5writeEPKvt+0xa4>
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    2b98:	69e1      	ldr	r1, [r4, #28]
    2b9a:	7a23      	ldrb	r3, [r4, #8]
    2b9c:	428a      	cmp	r2, r1
    2b9e:	d901      	bls.n	2ba4 <_ZN6SdFile5writeEPKvt+0x15c>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    2ba0:	61e2      	str	r2, [r4, #28]
    2ba2:	e006      	b.n	2bb2 <_ZN6SdFile5writeEPKvt+0x16a>
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    2ba4:	4a12      	ldr	r2, [pc, #72]	; (2bf0 <_ZN6SdFile5writeEPKvt+0x1a8>)
    2ba6:	6812      	ldr	r2, [r2, #0]
    2ba8:	2a00      	cmp	r2, #0
    2baa:	d006      	beq.n	2bba <_ZN6SdFile5writeEPKvt+0x172>
    2bac:	9a03      	ldr	r2, [sp, #12]
    2bae:	2a00      	cmp	r2, #0
    2bb0:	d003      	beq.n	2bba <_ZN6SdFile5writeEPKvt+0x172>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2bb2:	2280      	movs	r2, #128	; 0x80
    2bb4:	4252      	negs	r2, r2
    2bb6:	4313      	orrs	r3, r2
    2bb8:	7223      	strb	r3, [r4, #8]
  }

  if (flags_ & O_SYNC) {
    2bba:	7a23      	ldrb	r3, [r4, #8]
    2bbc:	071b      	lsls	r3, r3, #28
    2bbe:	d401      	bmi.n	2bc4 <_ZN6SdFile5writeEPKvt+0x17c>
    if (!sync()) goto writeErrorReturn;
  }
  return nbyte;
    2bc0:	9803      	ldr	r0, [sp, #12]
    2bc2:	e006      	b.n	2bd2 <_ZN6SdFile5writeEPKvt+0x18a>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    2bc4:	0020      	movs	r0, r4
    2bc6:	f7ff fd9b 	bl	2700 <_ZN6SdFile4syncEv>
    2bca:	2800      	cmp	r0, #0
    2bcc:	d100      	bne.n	2bd0 <_ZN6SdFile5writeEPKvt+0x188>
    2bce:	e751      	b.n	2a74 <_ZN6SdFile5writeEPKvt+0x2c>
    2bd0:	e7f6      	b.n	2bc0 <_ZN6SdFile5writeEPKvt+0x178>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2bd2:	b007      	add	sp, #28
    2bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bd6:	46c0      	nop			; (mov r8, r8)
    2bd8:	20000004 	.word	0x20000004
    2bdc:	200001f8 	.word	0x200001f8
    2be0:	0ffffff8 	.word	0x0ffffff8
    2be4:	0000fff8 	.word	0x0000fff8
    2be8:	200003fc 	.word	0x200003fc
    2bec:	200001fc 	.word	0x200001fc
    2bf0:	200001f0 	.word	0x200001f0

00002bf4 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    2bf4:	b507      	push	{r0, r1, r2, lr}
    2bf6:	466b      	mov	r3, sp
    2bf8:	71d9      	strb	r1, [r3, #7]
    2bfa:	3307      	adds	r3, #7
  return write(&b, 1);
    2bfc:	2201      	movs	r2, #1
    2bfe:	0019      	movs	r1, r3
    2c00:	f7ff ff22 	bl	2a48 <_ZN6SdFile5writeEPKvt>
}
    2c04:	bd0e      	pop	{r1, r2, r3, pc}
	...

00002c08 <_ZN8SdVolume10cacheFlushEv>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    2c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cacheDirty_) {
    2c0a:	4c10      	ldr	r4, [pc, #64]	; (2c4c <_ZN8SdVolume10cacheFlushEv+0x44>)
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    2c0c:	2001      	movs	r0, #1

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    2c0e:	7823      	ldrb	r3, [r4, #0]
    2c10:	2b00      	cmp	r3, #0
    2c12:	d01a      	beq.n	2c4a <_ZN8SdVolume10cacheFlushEv+0x42>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    2c14:	4f0e      	ldr	r7, [pc, #56]	; (2c50 <_ZN8SdVolume10cacheFlushEv+0x48>)
    2c16:	4e0f      	ldr	r6, [pc, #60]	; (2c54 <_ZN8SdVolume10cacheFlushEv+0x4c>)
    2c18:	4b0f      	ldr	r3, [pc, #60]	; (2c58 <_ZN8SdVolume10cacheFlushEv+0x50>)
    2c1a:	003a      	movs	r2, r7
    2c1c:	6819      	ldr	r1, [r3, #0]
    2c1e:	6830      	ldr	r0, [r6, #0]
    2c20:	f7ff fb99 	bl	2356 <_ZN7Sd2Card10writeBlockEmPKh>
    2c24:	2800      	cmp	r0, #0
    2c26:	d101      	bne.n	2c2c <_ZN8SdVolume10cacheFlushEv+0x24>
      return false;
    2c28:	2000      	movs	r0, #0
    2c2a:	e00e      	b.n	2c4a <_ZN8SdVolume10cacheFlushEv+0x42>
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    2c2c:	4d0b      	ldr	r5, [pc, #44]	; (2c5c <_ZN8SdVolume10cacheFlushEv+0x54>)
    2c2e:	6829      	ldr	r1, [r5, #0]
    2c30:	2900      	cmp	r1, #0
    2c32:	d007      	beq.n	2c44 <_ZN8SdVolume10cacheFlushEv+0x3c>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    2c34:	003a      	movs	r2, r7
    2c36:	6830      	ldr	r0, [r6, #0]
    2c38:	f7ff fb8d 	bl	2356 <_ZN7Sd2Card10writeBlockEmPKh>
    2c3c:	2800      	cmp	r0, #0
    2c3e:	d0f3      	beq.n	2c28 <_ZN8SdVolume10cacheFlushEv+0x20>
        return false;
      }
      cacheMirrorBlock_ = 0;
    2c40:	2300      	movs	r3, #0
    2c42:	602b      	str	r3, [r5, #0]
    }
    cacheDirty_ = 0;
    2c44:	2300      	movs	r3, #0
  }
  return true;
    2c46:	2001      	movs	r0, #1
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    2c48:	7023      	strb	r3, [r4, #0]
  }
  return true;
}
    2c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c4c:	200003fc 	.word	0x200003fc
    2c50:	200001fc 	.word	0x200001fc
    2c54:	200001f8 	.word	0x200001f8
    2c58:	20000004 	.word	0x20000004
    2c5c:	200001f4 	.word	0x200001f4

00002c60 <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2c60:	b570      	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    2c62:	4e0d      	ldr	r6, [pc, #52]	; (2c98 <_ZN8SdVolume13cacheRawBlockEmh+0x38>)
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2c64:	0004      	movs	r4, r0
  if (cacheBlockNumber_ != blockNumber) {
    2c66:	6833      	ldr	r3, [r6, #0]
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2c68:	000d      	movs	r5, r1
  if (cacheBlockNumber_ != blockNumber) {
    2c6a:	4283      	cmp	r3, r0
    2c6c:	d00e      	beq.n	2c8c <_ZN8SdVolume13cacheRawBlockEmh+0x2c>
    if (!cacheFlush()) return false;
    2c6e:	f7ff ffcb 	bl	2c08 <_ZN8SdVolume10cacheFlushEv>
    2c72:	2800      	cmp	r0, #0
    2c74:	d101      	bne.n	2c7a <_ZN8SdVolume13cacheRawBlockEmh+0x1a>
    2c76:	2000      	movs	r0, #0
    2c78:	e00d      	b.n	2c96 <_ZN8SdVolume13cacheRawBlockEmh+0x36>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    2c7a:	4b08      	ldr	r3, [pc, #32]	; (2c9c <_ZN8SdVolume13cacheRawBlockEmh+0x3c>)
    2c7c:	4a08      	ldr	r2, [pc, #32]	; (2ca0 <_ZN8SdVolume13cacheRawBlockEmh+0x40>)
    2c7e:	0021      	movs	r1, r4
    2c80:	6818      	ldr	r0, [r3, #0]
    2c82:	f7ff fb3c 	bl	22fe <_ZN7Sd2Card9readBlockEmPh>
    2c86:	2800      	cmp	r0, #0
    2c88:	d0f5      	beq.n	2c76 <_ZN8SdVolume13cacheRawBlockEmh+0x16>
    cacheBlockNumber_ = blockNumber;
    2c8a:	6034      	str	r4, [r6, #0]
  }
  cacheDirty_ |= action;
  return true;
    2c8c:	2001      	movs	r0, #1
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
    2c8e:	4b05      	ldr	r3, [pc, #20]	; (2ca4 <_ZN8SdVolume13cacheRawBlockEmh+0x44>)
    2c90:	7819      	ldrb	r1, [r3, #0]
    2c92:	4329      	orrs	r1, r5
    2c94:	7019      	strb	r1, [r3, #0]
  return true;
}
    2c96:	bd70      	pop	{r4, r5, r6, pc}
    2c98:	20000004 	.word	0x20000004
    2c9c:	200001f8 	.word	0x200001f8
    2ca0:	200001fc 	.word	0x200001fc
    2ca4:	200003fc 	.word	0x200003fc

00002ca8 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    2ca8:	b510      	push	{r4, lr}
    2caa:	0004      	movs	r4, r0
  if (!cacheFlush()) return false;
    2cac:	f7ff ffac 	bl	2c08 <_ZN8SdVolume10cacheFlushEv>
    2cb0:	2800      	cmp	r0, #0
    2cb2:	d00f      	beq.n	2cd4 <_ZN8SdVolume14cacheZeroBlockEm+0x2c>
    2cb4:	2300      	movs	r3, #0

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    2cb6:	2280      	movs	r2, #128	; 0x80
    cacheBuffer_.data[i] = 0;
    2cb8:	0018      	movs	r0, r3
    2cba:	4907      	ldr	r1, [pc, #28]	; (2cd8 <_ZN8SdVolume14cacheZeroBlockEm+0x30>)
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    2cbc:	0092      	lsls	r2, r2, #2
    cacheBuffer_.data[i] = 0;
    2cbe:	5458      	strb	r0, [r3, r1]
    2cc0:	3301      	adds	r3, #1
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    2cc2:	4293      	cmp	r3, r2
    2cc4:	d1fb      	bne.n	2cbe <_ZN8SdVolume14cacheZeroBlockEm+0x16>
    2cc6:	2001      	movs	r0, #1
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    2cc8:	4b04      	ldr	r3, [pc, #16]	; (2cdc <_ZN8SdVolume14cacheZeroBlockEm+0x34>)
    2cca:	4a05      	ldr	r2, [pc, #20]	; (2ce0 <_ZN8SdVolume14cacheZeroBlockEm+0x38>)
    2ccc:	601c      	str	r4, [r3, #0]
    2cce:	7813      	ldrb	r3, [r2, #0]
    2cd0:	4303      	orrs	r3, r0
    2cd2:	7013      	strb	r3, [r2, #0]
  cacheSetDirty();
  return true;
}
    2cd4:	bd10      	pop	{r4, pc}
    2cd6:	46c0      	nop			; (mov r8, r8)
    2cd8:	200001fc 	.word	0x200001fc
    2cdc:	20000004 	.word	0x20000004
    2ce0:	200003fc 	.word	0x200003fc

00002ce4 <_ZNK8SdVolume6fatGetEmPm>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    2ce4:	68c3      	ldr	r3, [r0, #12]
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    2ce6:	b570      	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
    2ce8:	3301      	adds	r3, #1
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    2cea:	000c      	movs	r4, r1
    2cec:	0016      	movs	r6, r2
  if (cluster > (clusterCount_ + 1)) return false;
    2cee:	428b      	cmp	r3, r1
    2cf0:	d201      	bcs.n	2cf6 <_ZNK8SdVolume6fatGetEmPm+0x12>
    2cf2:	2000      	movs	r0, #0
    2cf4:	e021      	b.n	2d3a <_ZNK8SdVolume6fatGetEmPm+0x56>
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2cf6:	1c45      	adds	r5, r0, #1
    2cf8:	7fea      	ldrb	r2, [r5, #31]
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    2cfa:	69c3      	ldr	r3, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2cfc:	09c8      	lsrs	r0, r1, #7
    2cfe:	2a10      	cmp	r2, #16
    2d00:	d100      	bne.n	2d04 <_ZNK8SdVolume6fatGetEmPm+0x20>
    2d02:	0a08      	lsrs	r0, r1, #8
    2d04:	18c0      	adds	r0, r0, r3
  if (lba != cacheBlockNumber_) {
    2d06:	4b0d      	ldr	r3, [pc, #52]	; (2d3c <_ZNK8SdVolume6fatGetEmPm+0x58>)
    2d08:	681b      	ldr	r3, [r3, #0]
    2d0a:	4298      	cmp	r0, r3
    2d0c:	d107      	bne.n	2d1e <_ZNK8SdVolume6fatGetEmPm+0x3a>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    2d0e:	7feb      	ldrb	r3, [r5, #31]
    2d10:	4a0b      	ldr	r2, [pc, #44]	; (2d40 <_ZNK8SdVolume6fatGetEmPm+0x5c>)
    2d12:	2b10      	cmp	r3, #16
    2d14:	d109      	bne.n	2d2a <_ZNK8SdVolume6fatGetEmPm+0x46>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    2d16:	b2e4      	uxtb	r4, r4
    2d18:	0064      	lsls	r4, r4, #1
    2d1a:	5b13      	ldrh	r3, [r2, r4]
    2d1c:	e00b      	b.n	2d36 <_ZNK8SdVolume6fatGetEmPm+0x52>
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2d1e:	2100      	movs	r1, #0
    2d20:	f7ff ff9e 	bl	2c60 <_ZN8SdVolume13cacheRawBlockEmh>
    2d24:	2800      	cmp	r0, #0
    2d26:	d1f2      	bne.n	2d0e <_ZNK8SdVolume6fatGetEmPm+0x2a>
    2d28:	e7e3      	b.n	2cf2 <_ZNK8SdVolume6fatGetEmPm+0xe>
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    2d2a:	237f      	movs	r3, #127	; 0x7f
    2d2c:	401c      	ands	r4, r3
    2d2e:	00a4      	lsls	r4, r4, #2
    2d30:	5913      	ldr	r3, [r2, r4]
    2d32:	011b      	lsls	r3, r3, #4
    2d34:	091b      	lsrs	r3, r3, #4
    2d36:	2001      	movs	r0, #1
    2d38:	6033      	str	r3, [r6, #0]
  }
  return true;
}
    2d3a:	bd70      	pop	{r4, r5, r6, pc}
    2d3c:	20000004 	.word	0x20000004
    2d40:	200001fc 	.word	0x200001fc

00002d44 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    2d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    2d46:	2780      	movs	r7, #128	; 0x80
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    2d48:	0005      	movs	r5, r0
    2d4a:	0016      	movs	r6, r2
  uint32_t s = 0;
    2d4c:	2400      	movs	r4, #0
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    2d4e:	9101      	str	r1, [sp, #4]
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    2d50:	00bf      	lsls	r7, r7, #2
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    2d52:	aa01      	add	r2, sp, #4
    2d54:	9901      	ldr	r1, [sp, #4]
    2d56:	0028      	movs	r0, r5
    2d58:	f7ff ffc4 	bl	2ce4 <_ZNK8SdVolume6fatGetEmPm>
    2d5c:	2800      	cmp	r0, #0
    2d5e:	d00f      	beq.n	2d80 <_ZNK8SdVolume9chainSizeEmPm+0x3c>
    s += 512UL << clusterSizeShift_;
    2d60:	003a      	movs	r2, r7
    2d62:	7c2b      	ldrb	r3, [r5, #16]
    2d64:	409a      	lsls	r2, r3
    2d66:	1c6b      	adds	r3, r5, #1
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2d68:	7fdb      	ldrb	r3, [r3, #31]
    2d6a:	18a4      	adds	r4, r4, r2
  } while (!isEOC(cluster));
    2d6c:	9a01      	ldr	r2, [sp, #4]
    2d6e:	2b10      	cmp	r3, #16
    2d70:	d001      	beq.n	2d76 <_ZNK8SdVolume9chainSizeEmPm+0x32>
    2d72:	4b04      	ldr	r3, [pc, #16]	; (2d84 <_ZNK8SdVolume9chainSizeEmPm+0x40>)
    2d74:	e000      	b.n	2d78 <_ZNK8SdVolume9chainSizeEmPm+0x34>
    2d76:	4b04      	ldr	r3, [pc, #16]	; (2d88 <_ZNK8SdVolume9chainSizeEmPm+0x44>)
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    2d78:	429a      	cmp	r2, r3
    2d7a:	d3ea      	bcc.n	2d52 <_ZNK8SdVolume9chainSizeEmPm+0xe>
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
    2d7c:	2001      	movs	r0, #1
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    2d7e:	6034      	str	r4, [r6, #0]
  return true;
}
    2d80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2d82:	46c0      	nop			; (mov r8, r8)
    2d84:	0ffffff8 	.word	0x0ffffff8
    2d88:	0000fff8 	.word	0x0000fff8

00002d8c <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2d8e:	0006      	movs	r6, r0
    2d90:	1e0c      	subs	r4, r1, #0
    2d92:	9201      	str	r2, [sp, #4]
  // error if reserved cluster
  if (cluster < 2) return false;
    2d94:	2c01      	cmp	r4, #1
    2d96:	d801      	bhi.n	2d9c <_ZN8SdVolume6fatPutEmm+0x10>
    2d98:	2000      	movs	r0, #0
    2d9a:	e032      	b.n	2e02 <_ZN8SdVolume6fatPutEmm+0x76>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2d9c:	68c3      	ldr	r3, [r0, #12]
    2d9e:	3301      	adds	r3, #1
    2da0:	4299      	cmp	r1, r3
    2da2:	d8f9      	bhi.n	2d98 <_ZN8SdVolume6fatPutEmm+0xc>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2da4:	1c47      	adds	r7, r0, #1
    2da6:	7ffa      	ldrb	r2, [r7, #31]

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2da8:	69c5      	ldr	r5, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2daa:	09cb      	lsrs	r3, r1, #7
    2dac:	2a10      	cmp	r2, #16
    2dae:	d100      	bne.n	2db2 <_ZN8SdVolume6fatPutEmm+0x26>
    2db0:	0a0b      	lsrs	r3, r1, #8
    2db2:	18ed      	adds	r5, r5, r3

  if (lba != cacheBlockNumber_) {
    2db4:	4b13      	ldr	r3, [pc, #76]	; (2e04 <_ZN8SdVolume6fatPutEmm+0x78>)
    2db6:	681b      	ldr	r3, [r3, #0]
    2db8:	429d      	cmp	r5, r3
    2dba:	d109      	bne.n	2dd0 <_ZN8SdVolume6fatPutEmm+0x44>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    2dbc:	7ffb      	ldrb	r3, [r7, #31]
    2dbe:	4a12      	ldr	r2, [pc, #72]	; (2e08 <_ZN8SdVolume6fatPutEmm+0x7c>)
    2dc0:	2b10      	cmp	r3, #16
    2dc2:	d10c      	bne.n	2dde <_ZN8SdVolume6fatPutEmm+0x52>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    2dc4:	466b      	mov	r3, sp
    2dc6:	b2e4      	uxtb	r4, r4
    2dc8:	889b      	ldrh	r3, [r3, #4]
    2dca:	0064      	lsls	r4, r4, #1
    2dcc:	5313      	strh	r3, [r2, r4]
    2dce:	e00b      	b.n	2de8 <_ZN8SdVolume6fatPutEmm+0x5c>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2dd0:	2100      	movs	r1, #0
    2dd2:	0028      	movs	r0, r5
    2dd4:	f7ff ff44 	bl	2c60 <_ZN8SdVolume13cacheRawBlockEmh>
    2dd8:	2800      	cmp	r0, #0
    2dda:	d1ef      	bne.n	2dbc <_ZN8SdVolume6fatPutEmm+0x30>
    2ddc:	e7dc      	b.n	2d98 <_ZN8SdVolume6fatPutEmm+0xc>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    2dde:	237f      	movs	r3, #127	; 0x7f
    2de0:	401c      	ands	r4, r3
    2de2:	9b01      	ldr	r3, [sp, #4]
    2de4:	00a4      	lsls	r4, r4, #2
    2de6:	5113      	str	r3, [r2, r4]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2de8:	2301      	movs	r3, #1
    2dea:	4908      	ldr	r1, [pc, #32]	; (2e0c <_ZN8SdVolume6fatPutEmm+0x80>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    2dec:	0018      	movs	r0, r3
    2dee:	780a      	ldrb	r2, [r1, #0]
    2df0:	431a      	orrs	r2, r3
    2df2:	700a      	strb	r2, [r1, #0]
    cacheBuffer_.fat32[cluster & 0X7F] = value;
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    2df4:	7e32      	ldrb	r2, [r6, #24]
    2df6:	429a      	cmp	r2, r3
    2df8:	d903      	bls.n	2e02 <_ZN8SdVolume6fatPutEmm+0x76>
    2dfa:	68b2      	ldr	r2, [r6, #8]
    2dfc:	1955      	adds	r5, r2, r5
    2dfe:	4a04      	ldr	r2, [pc, #16]	; (2e10 <_ZN8SdVolume6fatPutEmm+0x84>)
    2e00:	6015      	str	r5, [r2, #0]
  return true;
}
    2e02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2e04:	20000004 	.word	0x20000004
    2e08:	200001fc 	.word	0x200001fc
    2e0c:	200003fc 	.word	0x200003fc
    2e10:	200001f4 	.word	0x200001f4

00002e14 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    2e14:	b5f0      	push	{r4, r5, r6, r7, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    2e16:	6814      	ldr	r4, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    2e18:	b087      	sub	sp, #28
    2e1a:	0006      	movs	r6, r0
    2e1c:	9102      	str	r1, [sp, #8]
    2e1e:	0017      	movs	r7, r2

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    2e20:	2c00      	cmp	r4, #0
    2e22:	d002      	beq.n	2e2a <_ZN8SdVolume15allocContiguousEmPm+0x16>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    2e24:	3401      	adds	r4, #1

    // don't save new start location
    setStart = false;
    2e26:	2300      	movs	r3, #0
    2e28:	e005      	b.n	2e36 <_ZN8SdVolume15allocContiguousEmPm+0x22>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    2e2a:	9b02      	ldr	r3, [sp, #8]

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    2e2c:	6804      	ldr	r4, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    2e2e:	3b01      	subs	r3, #1
    2e30:	4259      	negs	r1, r3
    2e32:	4159      	adcs	r1, r3
    2e34:	b2cb      	uxtb	r3, r1
    2e36:	9301      	str	r3, [sp, #4]
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    2e38:	68f3      	ldr	r3, [r6, #12]

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    2e3a:	0025      	movs	r5, r4

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    2e3c:	3301      	adds	r3, #1
    2e3e:	9303      	str	r3, [sp, #12]

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2e40:	2300      	movs	r3, #0
    2e42:	9300      	str	r3, [sp, #0]
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2e44:	9b00      	ldr	r3, [sp, #0]
    2e46:	68f2      	ldr	r2, [r6, #12]
    2e48:	4293      	cmp	r3, r2
    2e4a:	d221      	bcs.n	2e90 <_ZN8SdVolume15allocContiguousEmPm+0x7c>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    2e4c:	9b03      	ldr	r3, [sp, #12]
    2e4e:	429d      	cmp	r5, r3
    2e50:	d901      	bls.n	2e56 <_ZN8SdVolume15allocContiguousEmPm+0x42>
      bgnCluster = endCluster = 2;
    2e52:	2502      	movs	r5, #2
    2e54:	002c      	movs	r4, r5
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2e56:	aa05      	add	r2, sp, #20
    2e58:	0029      	movs	r1, r5
    2e5a:	0030      	movs	r0, r6
    2e5c:	f7ff ff42 	bl	2ce4 <_ZNK8SdVolume6fatGetEmPm>
    2e60:	2800      	cmp	r0, #0
    2e62:	d015      	beq.n	2e90 <_ZN8SdVolume15allocContiguousEmPm+0x7c>

    if (f != 0) {
    2e64:	9a05      	ldr	r2, [sp, #20]
    2e66:	1c6b      	adds	r3, r5, #1
    2e68:	2a00      	cmp	r2, #0
    2e6a:	d001      	beq.n	2e70 <_ZN8SdVolume15allocContiguousEmPm+0x5c>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    2e6c:	001c      	movs	r4, r3
    2e6e:	e003      	b.n	2e78 <_ZN8SdVolume15allocContiguousEmPm+0x64>
    } else if ((endCluster - bgnCluster + 1) == count) {
    2e70:	9902      	ldr	r1, [sp, #8]
    2e72:	1b1a      	subs	r2, r3, r4
    2e74:	4291      	cmp	r1, r2
    2e76:	d004      	beq.n	2e82 <_ZN8SdVolume15allocContiguousEmPm+0x6e>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2e78:	9a00      	ldr	r2, [sp, #0]
    2e7a:	001d      	movs	r5, r3
    2e7c:	3201      	adds	r2, #1
    2e7e:	9200      	str	r2, [sp, #0]
    2e80:	e7e0      	b.n	2e44 <_ZN8SdVolume15allocContiguousEmPm+0x30>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    2e82:	4a14      	ldr	r2, [pc, #80]	; (2ed4 <_ZN8SdVolume15allocContiguousEmPm+0xc0>)
    2e84:	0029      	movs	r1, r5
    2e86:	0030      	movs	r0, r6
    2e88:	f7ff ff80 	bl	2d8c <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    2e8c:	2800      	cmp	r0, #0
    2e8e:	d10b      	bne.n	2ea8 <_ZN8SdVolume15allocContiguousEmPm+0x94>
    2e90:	2000      	movs	r0, #0
    2e92:	e01d      	b.n	2ed0 <_ZN8SdVolume15allocContiguousEmPm+0xbc>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    2e94:	1e6b      	subs	r3, r5, #1
    2e96:	002a      	movs	r2, r5
    2e98:	0019      	movs	r1, r3
    2e9a:	0030      	movs	r0, r6
    2e9c:	9300      	str	r3, [sp, #0]
    2e9e:	f7ff ff75 	bl	2d8c <_ZN8SdVolume6fatPutEmm>
    2ea2:	2800      	cmp	r0, #0
    2ea4:	d0f4      	beq.n	2e90 <_ZN8SdVolume15allocContiguousEmPm+0x7c>
    endCluster--;
    2ea6:	9d00      	ldr	r5, [sp, #0]
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    2ea8:	42ac      	cmp	r4, r5
    2eaa:	d3f3      	bcc.n	2e94 <_ZN8SdVolume15allocContiguousEmPm+0x80>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    2eac:	6839      	ldr	r1, [r7, #0]
    2eae:	2900      	cmp	r1, #0
    2eb0:	d106      	bne.n	2ec0 <_ZN8SdVolume15allocContiguousEmPm+0xac>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    2eb2:	9b01      	ldr	r3, [sp, #4]
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    2eb4:	603c      	str	r4, [r7, #0]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    2eb6:	2b00      	cmp	r3, #0
    2eb8:	d009      	beq.n	2ece <_ZN8SdVolume15allocContiguousEmPm+0xba>
    2eba:	3401      	adds	r4, #1
    2ebc:	6034      	str	r4, [r6, #0]
    2ebe:	e006      	b.n	2ece <_ZN8SdVolume15allocContiguousEmPm+0xba>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    2ec0:	0022      	movs	r2, r4
    2ec2:	0030      	movs	r0, r6
    2ec4:	f7ff ff62 	bl	2d8c <_ZN8SdVolume6fatPutEmm>
    2ec8:	2800      	cmp	r0, #0
    2eca:	d1f2      	bne.n	2eb2 <_ZN8SdVolume15allocContiguousEmPm+0x9e>
    2ecc:	e7e0      	b.n	2e90 <_ZN8SdVolume15allocContiguousEmPm+0x7c>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    2ece:	2001      	movs	r0, #1
}
    2ed0:	b007      	add	sp, #28
    2ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ed4:	0fffffff 	.word	0x0fffffff

00002ed8 <_ZN8SdVolume9freeChainEm>:
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;
    2ed8:	2302      	movs	r3, #2
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    2eda:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2edc:	0005      	movs	r5, r0
    2ede:	000c      	movs	r4, r1
  // clear free cluster location
  allocSearchStart_ = 2;
    2ee0:	6003      	str	r3, [r0, #0]

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    2ee2:	aa01      	add	r2, sp, #4
    2ee4:	0021      	movs	r1, r4
    2ee6:	0028      	movs	r0, r5
    2ee8:	f7ff fefc 	bl	2ce4 <_ZNK8SdVolume6fatGetEmPm>
    2eec:	2800      	cmp	r0, #0
    2eee:	d012      	beq.n	2f16 <_ZN8SdVolume9freeChainEm+0x3e>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    2ef0:	2200      	movs	r2, #0
    2ef2:	0021      	movs	r1, r4
    2ef4:	0028      	movs	r0, r5
    2ef6:	f7ff ff49 	bl	2d8c <_ZN8SdVolume6fatPutEmm>
    2efa:	2800      	cmp	r0, #0
    2efc:	d00b      	beq.n	2f16 <_ZN8SdVolume9freeChainEm+0x3e>
    2efe:	1c6b      	adds	r3, r5, #1
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2f00:	7fdb      	ldrb	r3, [r3, #31]

    cluster = next;
    2f02:	9c01      	ldr	r4, [sp, #4]
    2f04:	2b10      	cmp	r3, #16
    2f06:	d001      	beq.n	2f0c <_ZN8SdVolume9freeChainEm+0x34>
    2f08:	4b04      	ldr	r3, [pc, #16]	; (2f1c <_ZN8SdVolume9freeChainEm+0x44>)
    2f0a:	e000      	b.n	2f0e <_ZN8SdVolume9freeChainEm+0x36>
    2f0c:	4b04      	ldr	r3, [pc, #16]	; (2f20 <_ZN8SdVolume9freeChainEm+0x48>)
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    2f0e:	429c      	cmp	r4, r3
    2f10:	d3e7      	bcc.n	2ee2 <_ZN8SdVolume9freeChainEm+0xa>
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    2f12:	2001      	movs	r0, #1
    2f14:	e000      	b.n	2f18 <_ZN8SdVolume9freeChainEm+0x40>
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    2f16:	2000      	movs	r0, #0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    2f18:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    2f1a:	46c0      	nop			; (mov r8, r8)
    2f1c:	0ffffff8 	.word	0x0ffffff8
    2f20:	0000fff8 	.word	0x0000fff8

00002f24 <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    2f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    2f26:	4b3f      	ldr	r3, [pc, #252]	; (3024 <_ZN8SdVolume4initEP7Sd2Cardh+0x100>)
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    2f28:	0005      	movs	r5, r0
    2f2a:	1e14      	subs	r4, r2, #0
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    2f2c:	6019      	str	r1, [r3, #0]
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    2f2e:	d020      	beq.n	2f72 <_ZN8SdVolume4initEP7Sd2Cardh+0x4e>
    if (part > 4)return false;
    2f30:	2a04      	cmp	r2, #4
    2f32:	d901      	bls.n	2f38 <_ZN8SdVolume4initEP7Sd2Cardh+0x14>
    2f34:	2000      	movs	r0, #0
    2f36:	e074      	b.n	3022 <_ZN8SdVolume4initEP7Sd2Cardh+0xfe>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    2f38:	2100      	movs	r1, #0
    2f3a:	0008      	movs	r0, r1
    2f3c:	f7ff fe90 	bl	2c60 <_ZN8SdVolume13cacheRawBlockEmh>
    2f40:	2800      	cmp	r0, #0
    2f42:	d0f7      	beq.n	2f34 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    2f44:	1e63      	subs	r3, r4, #1
    if ((p->boot & 0X7F) !=0  ||
    2f46:	4a38      	ldr	r2, [pc, #224]	; (3028 <_ZN8SdVolume4initEP7Sd2Cardh+0x104>)
    2f48:	011b      	lsls	r3, r3, #4
    2f4a:	18d3      	adds	r3, r2, r3
    2f4c:	33bf      	adds	r3, #191	; 0xbf
    2f4e:	33ff      	adds	r3, #255	; 0xff
    2f50:	781b      	ldrb	r3, [r3, #0]
    2f52:	065b      	lsls	r3, r3, #25
    2f54:	d1ee      	bne.n	2f34 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
      p->totalSectors < 100 ||
    2f56:	341b      	adds	r4, #27
    2f58:	0124      	lsls	r4, r4, #4
    2f5a:	1913      	adds	r3, r2, r4
    2f5c:	899a      	ldrh	r2, [r3, #12]
    2f5e:	8959      	ldrh	r1, [r3, #10]
    2f60:	0412      	lsls	r2, r2, #16
    2f62:	430a      	orrs	r2, r1
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    2f64:	2a63      	cmp	r2, #99	; 0x63
    2f66:	d9e5      	bls.n	2f34 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    2f68:	891c      	ldrh	r4, [r3, #8]
    2f6a:	88da      	ldrh	r2, [r3, #6]
    2f6c:	0424      	lsls	r4, r4, #16
    2f6e:	4314      	orrs	r4, r2
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    2f70:	d0e0      	beq.n	2f34 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    2f72:	2100      	movs	r1, #0
    2f74:	0020      	movs	r0, r4
    2f76:	f7ff fe73 	bl	2c60 <_ZN8SdVolume13cacheRawBlockEmh>
    2f7a:	2800      	cmp	r0, #0
    2f7c:	d0da      	beq.n	2f34 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    2f7e:	4b2a      	ldr	r3, [pc, #168]	; (3028 <_ZN8SdVolume4initEP7Sd2Cardh+0x104>)
    2f80:	7b1a      	ldrb	r2, [r3, #12]
    2f82:	7ad9      	ldrb	r1, [r3, #11]
    2f84:	0212      	lsls	r2, r2, #8
    2f86:	430a      	orrs	r2, r1
    2f88:	2180      	movs	r1, #128	; 0x80
    2f8a:	0089      	lsls	r1, r1, #2
    2f8c:	428a      	cmp	r2, r1
    2f8e:	d1d1      	bne.n	2f34 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
    bpb->fatCount == 0 ||
    2f90:	7c19      	ldrb	r1, [r3, #16]
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    2f92:	2900      	cmp	r1, #0
    2f94:	d0ce      	beq.n	2f34 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
    bpb->fatCount == 0 ||
    2f96:	89da      	ldrh	r2, [r3, #14]
    2f98:	2a00      	cmp	r2, #0
    2f9a:	d0cb      	beq.n	2f34 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    2f9c:	7b5a      	ldrb	r2, [r3, #13]
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    2f9e:	2a00      	cmp	r2, #0
    2fa0:	d0c8      	beq.n	2f34 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    2fa2:	7629      	strb	r1, [r5, #24]
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    2fa4:	2100      	movs	r1, #0
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    2fa6:	2001      	movs	r0, #1
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;
    2fa8:	712a      	strb	r2, [r5, #4]

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    2faa:	7429      	strb	r1, [r5, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    2fac:	0001      	movs	r1, r0
    2fae:	7c2e      	ldrb	r6, [r5, #16]
    2fb0:	40b1      	lsls	r1, r6
    2fb2:	428a      	cmp	r2, r1
    2fb4:	d004      	beq.n	2fc0 <_ZN8SdVolume4initEP7Sd2Cardh+0x9c>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    2fb6:	1c71      	adds	r1, r6, #1
    2fb8:	7429      	strb	r1, [r5, #16]
    2fba:	2e07      	cmp	r6, #7
    2fbc:	d9f6      	bls.n	2fac <_ZN8SdVolume4initEP7Sd2Cardh+0x88>
    2fbe:	e7b9      	b.n	2f34 <_ZN8SdVolume4initEP7Sd2Cardh+0x10>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    2fc0:	8ad9      	ldrh	r1, [r3, #22]
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    2fc2:	2900      	cmp	r1, #0
    2fc4:	d100      	bne.n	2fc8 <_ZN8SdVolume4initEP7Sd2Cardh+0xa4>
    2fc6:	6a59      	ldr	r1, [r3, #36]	; 0x24
    2fc8:	60a9      	str	r1, [r5, #8]

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    2fca:	89d8      	ldrh	r0, [r3, #14]
    2fcc:	1900      	adds	r0, r0, r4
    2fce:	61e8      	str	r0, [r5, #28]

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    2fd0:	691a      	ldr	r2, [r3, #16]
    2fd2:	0212      	lsls	r2, r2, #8
    2fd4:	0c12      	lsrs	r2, r2, #16
    2fd6:	846a      	strh	r2, [r5, #34]	; 0x22
    2fd8:	b297      	uxth	r7, r2

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    2fda:	7c1a      	ldrb	r2, [r3, #16]

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    2fdc:	017f      	lsls	r7, r7, #5

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    2fde:	4351      	muls	r1, r2

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    2fe0:	4a12      	ldr	r2, [pc, #72]	; (302c <_ZN8SdVolume4initEP7Sd2Cardh+0x108>)

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    2fe2:	1808      	adds	r0, r1, r0

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    2fe4:	18bf      	adds	r7, r7, r2
    2fe6:	127f      	asrs	r7, r7, #9

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    2fe8:	6268      	str	r0, [r5, #36]	; 0x24

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    2fea:	1838      	adds	r0, r7, r0
    2fec:	6168      	str	r0, [r5, #20]

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    2fee:	7d1a      	ldrb	r2, [r3, #20]
    2ff0:	7cd9      	ldrb	r1, [r3, #19]
    2ff2:	0212      	lsls	r2, r2, #8
    2ff4:	430a      	orrs	r2, r1
                           bpb->totalSectors16 : bpb->totalSectors32;
    2ff6:	d100      	bne.n	2ffa <_ZN8SdVolume4initEP7Sd2Cardh+0xd6>
    2ff8:	6a1a      	ldr	r2, [r3, #32]
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    2ffa:	1a24      	subs	r4, r4, r0
    2ffc:	18a4      	adds	r4, r4, r2
    2ffe:	40f4      	lsrs	r4, r6

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    3000:	490b      	ldr	r1, [pc, #44]	; (3030 <_ZN8SdVolume4initEP7Sd2Cardh+0x10c>)
                           bpb->totalSectors16 : bpb->totalSectors32;
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    3002:	60ec      	str	r4, [r5, #12]
    3004:	1c6a      	adds	r2, r5, #1

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    3006:	428c      	cmp	r4, r1
    3008:	d801      	bhi.n	300e <_ZN8SdVolume4initEP7Sd2Cardh+0xea>
    fatType_ = 12;
    300a:	230c      	movs	r3, #12
    300c:	e007      	b.n	301e <_ZN8SdVolume4initEP7Sd2Cardh+0xfa>
  } else if (clusterCount_ < 65525) {
    300e:	4909      	ldr	r1, [pc, #36]	; (3034 <_ZN8SdVolume4initEP7Sd2Cardh+0x110>)
    3010:	428c      	cmp	r4, r1
    3012:	d801      	bhi.n	3018 <_ZN8SdVolume4initEP7Sd2Cardh+0xf4>
    fatType_ = 16;
    3014:	2310      	movs	r3, #16
    3016:	e002      	b.n	301e <_ZN8SdVolume4initEP7Sd2Cardh+0xfa>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    3018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    301a:	626b      	str	r3, [r5, #36]	; 0x24
    fatType_ = 32;
    301c:	2320      	movs	r3, #32
  }
  return true;
    301e:	2001      	movs	r0, #1
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
    3020:	77d3      	strb	r3, [r2, #31]
  }
  return true;
}
    3022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3024:	200001f8 	.word	0x200001f8
    3028:	200001fc 	.word	0x200001fc
    302c:	000001ff 	.word	0x000001ff
    3030:	00000ff4 	.word	0x00000ff4
    3034:	0000fff4 	.word	0x0000fff4

00003038 <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
#define SPI_IMODE_EXTINT 1
#define SPI_IMODE_GLOBAL 2

const SPISettings DEFAULT_SPI_SETTINGS = SPISettings();

SPIClass::SPIClass(SERCOM *p_sercom, uint8_t uc_pinMISO, uint8_t uc_pinSCK, uint8_t uc_pinMOSI, SercomSpiTXPad PadTx, SercomRXPad PadRx)
    3038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
  initialized = false;
    303a:	2700      	movs	r7, #0
#define SPI_IMODE_EXTINT 1
#define SPI_IMODE_GLOBAL 2

const SPISettings DEFAULT_SPI_SETTINGS = SPISettings();

SPIClass::SPIClass(SERCOM *p_sercom, uint8_t uc_pinMISO, uint8_t uc_pinSCK, uint8_t uc_pinMOSI, SercomSpiTXPad PadTx, SercomRXPad PadRx)
    303c:	ac06      	add	r4, sp, #24
    303e:	7826      	ldrb	r6, [r4, #0]
    3040:	ac07      	add	r4, sp, #28
    3042:	7825      	ldrb	r5, [r4, #0]
    3044:	ac08      	add	r4, sp, #32
    3046:	7824      	ldrb	r4, [r4, #0]
{
  initialized = false;
    3048:	7247      	strb	r7, [r0, #9]
  assert(p_sercom != NULL);
    304a:	42b9      	cmp	r1, r7
    304c:	d105      	bne.n	305a <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x22>
    304e:	4b06      	ldr	r3, [pc, #24]	; (3068 <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x30>)
    3050:	4a06      	ldr	r2, [pc, #24]	; (306c <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x34>)
    3052:	2122      	movs	r1, #34	; 0x22
    3054:	4806      	ldr	r0, [pc, #24]	; (3070 <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x38>)
    3056:	f006 fa5d 	bl	9514 <__assert_func>
  _p_sercom = p_sercom;

  // pins
  _uc_pinMiso = uc_pinMISO;
  _uc_pinSCK = uc_pinSCK;
  _uc_pinMosi = uc_pinMOSI;
    305a:	7146      	strb	r6, [r0, #5]

  // SERCOM pads
  _padTx=PadTx;
    305c:	71c5      	strb	r5, [r0, #7]

SPIClass::SPIClass(SERCOM *p_sercom, uint8_t uc_pinMISO, uint8_t uc_pinSCK, uint8_t uc_pinMOSI, SercomSpiTXPad PadTx, SercomRXPad PadRx)
{
  initialized = false;
  assert(p_sercom != NULL);
  _p_sercom = p_sercom;
    305e:	6001      	str	r1, [r0, #0]

  // pins
  _uc_pinMiso = uc_pinMISO;
    3060:	7102      	strb	r2, [r0, #4]
  _uc_pinSCK = uc_pinSCK;
    3062:	7183      	strb	r3, [r0, #6]
  _uc_pinMosi = uc_pinMOSI;

  // SERCOM pads
  _padTx=PadTx;
  _padRx=PadRx;
    3064:	7204      	strb	r4, [r0, #8]
}
    3066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3068:	0000e438 	.word	0x0000e438
    306c:	0000e3e4 	.word	0x0000e3e4
    3070:	0000e449 	.word	0x0000e449

00003074 <_ZN8SPIClass4initEv>:
  config(DEFAULT_SPI_SETTINGS);
}

void SPIClass::init()
{
  if (initialized)
    3074:	7a43      	ldrb	r3, [r0, #9]
    3076:	2b00      	cmp	r3, #0
    3078:	d104      	bne.n	3084 <_ZN8SPIClass4initEv+0x10>
    return;
  interruptMode = SPI_IMODE_NONE;
    307a:	7283      	strb	r3, [r0, #10]
  interruptSave = 0;
    307c:	72c3      	strb	r3, [r0, #11]
  interruptMask = 0;
    307e:	60c3      	str	r3, [r0, #12]
  initialized = true;
    3080:	3301      	adds	r3, #1
    3082:	7243      	strb	r3, [r0, #9]
}
    3084:	4770      	bx	lr

00003086 <_ZN8SPIClass6configE11SPISettings>:

void SPIClass::config(SPISettings settings)
{
    3086:	b530      	push	{r4, r5, lr}
    3088:	0004      	movs	r4, r0
    308a:	b085      	sub	sp, #20
    308c:	ad02      	add	r5, sp, #8
  _p_sercom->disableSPI();
    308e:	6800      	ldr	r0, [r0, #0]
  interruptMask = 0;
  initialized = true;
}

void SPIClass::config(SPISettings settings)
{
    3090:	9102      	str	r1, [sp, #8]
    3092:	9203      	str	r2, [sp, #12]
  _p_sercom->disableSPI();
    3094:	f001 fc79 	bl	498a <_ZN6SERCOM10disableSPIEv>

  _p_sercom->initSPI(_padTx, _padRx, SPI_CHAR_SIZE_8_BITS, settings.bitOrder);
    3098:	796b      	ldrb	r3, [r5, #5]
    309a:	7a22      	ldrb	r2, [r4, #8]
    309c:	79e1      	ldrb	r1, [r4, #7]
    309e:	9300      	str	r3, [sp, #0]
    30a0:	6820      	ldr	r0, [r4, #0]
    30a2:	2300      	movs	r3, #0
    30a4:	f001 fd14 	bl	4ad0 <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>
  _p_sercom->initSPIClock(settings.dataMode, settings.clockFreq);
    30a8:	7929      	ldrb	r1, [r5, #4]
    30aa:	9a02      	ldr	r2, [sp, #8]
    30ac:	6820      	ldr	r0, [r4, #0]
    30ae:	f001 fc3d 	bl	492c <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>

  _p_sercom->enableSPI();
    30b2:	6820      	ldr	r0, [r4, #0]
    30b4:	f001 fc5f 	bl	4976 <_ZN6SERCOM9enableSPIEv>
}
    30b8:	b005      	add	sp, #20
    30ba:	bd30      	pop	{r4, r5, pc}

000030bc <_ZN8SPIClass5beginEv>:
  _padTx=PadTx;
  _padRx=PadRx;
}

void SPIClass::begin()
{
    30bc:	b570      	push	{r4, r5, r6, lr}
  init();

  // PIO init
  pinPeripheral(_uc_pinMiso, g_APinDescription[_uc_pinMiso].ulPinType);
    30be:	2418      	movs	r4, #24
  _padTx=PadTx;
  _padRx=PadRx;
}

void SPIClass::begin()
{
    30c0:	0005      	movs	r5, r0
  init();
    30c2:	f7ff ffd7 	bl	3074 <_ZN8SPIClass4initEv>

  // PIO init
  pinPeripheral(_uc_pinMiso, g_APinDescription[_uc_pinMiso].ulPinType);
    30c6:	0023      	movs	r3, r4
    30c8:	2108      	movs	r1, #8
    30ca:	7928      	ldrb	r0, [r5, #4]
    30cc:	4e0d      	ldr	r6, [pc, #52]	; (3104 <_ZN8SPIClass5beginEv+0x48>)
    30ce:	4343      	muls	r3, r0
    30d0:	18f3      	adds	r3, r6, r3
    30d2:	5659      	ldrsb	r1, [r3, r1]
    30d4:	f003 f8a0 	bl	6218 <pinPeripheral>
  pinPeripheral(_uc_pinSCK, g_APinDescription[_uc_pinSCK].ulPinType);
    30d8:	0023      	movs	r3, r4
    30da:	2108      	movs	r1, #8
    30dc:	79a8      	ldrb	r0, [r5, #6]
    30de:	4343      	muls	r3, r0
    30e0:	18f3      	adds	r3, r6, r3
    30e2:	5659      	ldrsb	r1, [r3, r1]
    30e4:	f003 f898 	bl	6218 <pinPeripheral>
  pinPeripheral(_uc_pinMosi, g_APinDescription[_uc_pinMosi].ulPinType);
    30e8:	2108      	movs	r1, #8
    30ea:	7968      	ldrb	r0, [r5, #5]
    30ec:	4344      	muls	r4, r0
    30ee:	1934      	adds	r4, r6, r4
    30f0:	5661      	ldrsb	r1, [r4, r1]
    30f2:	f003 f891 	bl	6218 <pinPeripheral>

  config(DEFAULT_SPI_SETTINGS);
    30f6:	4b04      	ldr	r3, [pc, #16]	; (3108 <_ZN8SPIClass5beginEv+0x4c>)
    30f8:	0028      	movs	r0, r5
    30fa:	cb06      	ldmia	r3!, {r1, r2}
    30fc:	f7ff ffc3 	bl	3086 <_ZN8SPIClass6configE11SPISettings>
}
    3100:	bd70      	pop	{r4, r5, r6, pc}
    3102:	46c0      	nop			; (mov r8, r8)
    3104:	0000e720 	.word	0x0000e720
    3108:	20000400 	.word	0x20000400

0000310c <_ZN8SPIClass16beginTransactionE11SPISettings>:
  if (irestore)
    interrupts();
}

void SPIClass::beginTransaction(SPISettings settings)
{
    310c:	b507      	push	{r0, r1, r2, lr}
  if (interruptMode != SPI_IMODE_NONE)
    310e:	7a83      	ldrb	r3, [r0, #10]
  if (irestore)
    interrupts();
}

void SPIClass::beginTransaction(SPISettings settings)
{
    3110:	9100      	str	r1, [sp, #0]
    3112:	9201      	str	r2, [sp, #4]
  if (interruptMode != SPI_IMODE_NONE)
    3114:	2b00      	cmp	r3, #0
    3116:	d00d      	beq.n	3134 <_ZN8SPIClass16beginTransactionE11SPISettings+0x28>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    3118:	079a      	lsls	r2, r3, #30
    311a:	d506      	bpl.n	312a <_ZN8SPIClass16beginTransactionE11SPISettings+0x1e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    311c:	f3ef 8210 	mrs	r2, PRIMASK
    {
      interruptSave = interruptsStatus();
    3120:	4253      	negs	r3, r2
    3122:	4153      	adcs	r3, r2
    3124:	72c3      	strb	r3, [r0, #11]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3126:	b672      	cpsid	i
    3128:	e004      	b.n	3134 <_ZN8SPIClass16beginTransactionE11SPISettings+0x28>
      noInterrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
    312a:	07db      	lsls	r3, r3, #31
    312c:	d502      	bpl.n	3134 <_ZN8SPIClass16beginTransactionE11SPISettings+0x28>
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
    312e:	8983      	ldrh	r3, [r0, #12]
    3130:	4a03      	ldr	r2, [pc, #12]	; (3140 <_ZN8SPIClass16beginTransactionE11SPISettings+0x34>)
    3132:	6093      	str	r3, [r2, #8]
  }

  config(settings);
    3134:	9900      	ldr	r1, [sp, #0]
    3136:	9a01      	ldr	r2, [sp, #4]
    3138:	f7ff ffa5 	bl	3086 <_ZN8SPIClass6configE11SPISettings>
}
    313c:	bd07      	pop	{r0, r1, r2, pc}
    313e:	46c0      	nop			; (mov r8, r8)
    3140:	40001800 	.word	0x40001800

00003144 <_ZN8SPIClass14endTransactionEv>:

void SPIClass::endTransaction(void)
{
  if (interruptMode != SPI_IMODE_NONE)
    3144:	7a83      	ldrb	r3, [r0, #10]
    3146:	2b00      	cmp	r3, #0
    3148:	d00c      	beq.n	3164 <_ZN8SPIClass14endTransactionEv+0x20>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    314a:	079a      	lsls	r2, r3, #30
    314c:	d504      	bpl.n	3158 <_ZN8SPIClass14endTransactionEv+0x14>
    {
      if (interruptSave)
    314e:	7ac3      	ldrb	r3, [r0, #11]
    3150:	2b00      	cmp	r3, #0
    3152:	d007      	beq.n	3164 <_ZN8SPIClass14endTransactionEv+0x20>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3154:	b662      	cpsie	i
    3156:	e005      	b.n	3164 <_ZN8SPIClass14endTransactionEv+0x20>
        interrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
    3158:	07db      	lsls	r3, r3, #31
    315a:	d503      	bpl.n	3164 <_ZN8SPIClass14endTransactionEv+0x20>
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
    315c:	68c3      	ldr	r3, [r0, #12]
    315e:	4a02      	ldr	r2, [pc, #8]	; (3168 <_ZN8SPIClass14endTransactionEv+0x24>)
    3160:	b29b      	uxth	r3, r3
    3162:	60d3      	str	r3, [r2, #12]
  }
}
    3164:	4770      	bx	lr
    3166:	46c0      	nop			; (mov r8, r8)
    3168:	40001800 	.word	0x40001800

0000316c <_ZN8SPIClass8transferEh>:
    _p_sercom->setBaudrateSPI(div);
  }
}

byte SPIClass::transfer(uint8_t data)
{
    316c:	b510      	push	{r4, lr}
  return _p_sercom->transferDataSPI(data);
    316e:	6800      	ldr	r0, [r0, #0]
    3170:	f001 fc15 	bl	499e <_ZN6SERCOM15transferDataSPIEh>
}
    3174:	bd10      	pop	{r4, pc}
	...

00003178 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
  void init_MightInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) {
    init_AlwaysInline(clock, bitOrder, dataMode);
  }

  void init_AlwaysInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) __attribute__((__always_inline__)) {
    this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    3178:	4b09      	ldr	r3, [pc, #36]	; (31a0 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x28>)
    317a:	4a0a      	ldr	r2, [pc, #40]	; (31a4 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x2c>)

SPIClass::SPIClass(SERCOM *p_sercom, uint8_t uc_pinMISO, uint8_t uc_pinSCK, uint8_t uc_pinMOSI, SercomSpiTXPad PadTx, SercomRXPad PadRx)
{
  initialized = false;
  assert(p_sercom != NULL);
  _p_sercom = p_sercom;
    317c:	490a      	ldr	r1, [pc, #40]	; (31a8 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x30>)
    317e:	601a      	str	r2, [r3, #0]

    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    3180:	2200      	movs	r2, #0
    3182:	715a      	strb	r2, [r3, #5]

    switch (dataMode)
    {
      case SPI_MODE0:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    3184:	711a      	strb	r2, [r3, #4]

const SPISettings DEFAULT_SPI_SETTINGS = SPISettings();

SPIClass::SPIClass(SERCOM *p_sercom, uint8_t uc_pinMISO, uint8_t uc_pinSCK, uint8_t uc_pinMOSI, SercomSpiTXPad PadTx, SercomRXPad PadRx)
{
  initialized = false;
    3186:	4b09      	ldr	r3, [pc, #36]	; (31ac <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x34>)
  assert(p_sercom != NULL);
  _p_sercom = p_sercom;
    3188:	6019      	str	r1, [r3, #0]

  // pins
  _uc_pinMiso = uc_pinMISO;
    318a:	210c      	movs	r1, #12
    318c:	7119      	strb	r1, [r3, #4]
  _uc_pinSCK = uc_pinSCK;
    318e:	3101      	adds	r1, #1

const SPISettings DEFAULT_SPI_SETTINGS = SPISettings();

SPIClass::SPIClass(SERCOM *p_sercom, uint8_t uc_pinMISO, uint8_t uc_pinSCK, uint8_t uc_pinMOSI, SercomSpiTXPad PadTx, SercomRXPad PadRx)
{
  initialized = false;
    3190:	725a      	strb	r2, [r3, #9]
  assert(p_sercom != NULL);
  _p_sercom = p_sercom;

  // pins
  _uc_pinMiso = uc_pinMISO;
  _uc_pinSCK = uc_pinSCK;
    3192:	7199      	strb	r1, [r3, #6]
  _uc_pinMosi = uc_pinMOSI;

  // SERCOM pads
  _padTx=PadTx;
    3194:	71da      	strb	r2, [r3, #7]
  _p_sercom = p_sercom;

  // pins
  _uc_pinMiso = uc_pinMISO;
  _uc_pinSCK = uc_pinSCK;
  _uc_pinMosi = uc_pinMOSI;
    3196:	3902      	subs	r1, #2

  // SERCOM pads
  _padTx=PadTx;
  _padRx=PadRx;
    3198:	3203      	adds	r2, #3
  _p_sercom = p_sercom;

  // pins
  _uc_pinMiso = uc_pinMISO;
  _uc_pinSCK = uc_pinSCK;
  _uc_pinMosi = uc_pinMOSI;
    319a:	7159      	strb	r1, [r3, #5]

  // SERCOM pads
  _padTx=PadTx;
  _padRx=PadRx;
    319c:	721a      	strb	r2, [r3, #8]
  #ifndef PERIPH_SPI
    #define PERIPH_SPI           sercom4
    #define PAD_SPI_TX           SPI_PAD_2_SCK_3
    #define PAD_SPI_RX           SERCOM_RX_PAD_0
  #endif // PERIPH_SPI
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
    319e:	4770      	bx	lr
    31a0:	20000400 	.word	0x20000400
    31a4:	003d0900 	.word	0x003d0900
    31a8:	20000e48 	.word	0x20000e48
    31ac:	20000408 	.word	0x20000408

000031b0 <_ZN10IridiumSBD10StreamShim5writeEh>:
      bool diags;
      IridiumSBD *isbd;
   public:
//      StreamShim(Stream *s, void(*f)(char c) __attribute__((weak))) : stream(s), callback(f) {}
      StreamShim(IridiumSBD *isbd, bool d) : isbd(isbd), diags(d) {}
      virtual size_t write(uint8_t b)
    31b0:	b570      	push	{r4, r5, r6, lr}
      {
         if (diags)
    31b2:	7a02      	ldrb	r2, [r0, #8]
      bool diags;
      IridiumSBD *isbd;
   public:
//      StreamShim(Stream *s, void(*f)(char c) __attribute__((weak))) : stream(s), callback(f) {}
      StreamShim(IridiumSBD *isbd, bool d) : isbd(isbd), diags(d) {}
      virtual size_t write(uint8_t b)
    31b4:	0005      	movs	r5, r0
    31b6:	000c      	movs	r4, r1
    31b8:	68c3      	ldr	r3, [r0, #12]
      {
         if (diags)
    31ba:	2a00      	cmp	r2, #0
    31bc:	d001      	beq.n	31c2 <_ZN10IridiumSBD10StreamShim5writeEh+0x12>
         {
            if (isbd->pDiagsStream)
    31be:	6898      	ldr	r0, [r3, #8]
    31c0:	e000      	b.n	31c4 <_ZN10IridiumSBD10StreamShim5writeEh+0x14>
               isbd->pDiagsStream->write(b);
         }
         else
         {
            if (isbd->pConsoleStream)
    31c2:	6858      	ldr	r0, [r3, #4]
    31c4:	2800      	cmp	r0, #0
    31c6:	d003      	beq.n	31d0 <_ZN10IridiumSBD10StreamShim5writeEh+0x20>
               isbd->pConsoleStream->write(b);
    31c8:	6803      	ldr	r3, [r0, #0]
    31ca:	0021      	movs	r1, r4
    31cc:	681b      	ldr	r3, [r3, #0]
    31ce:	4798      	blx	r3
         }
         void(*f)(uint8_t b) = diags ? DiagsCallback : ConsoleCallback;
    31d0:	7a2a      	ldrb	r2, [r5, #8]
    31d2:	4b05      	ldr	r3, [pc, #20]	; (31e8 <_ZN10IridiumSBD10StreamShim5writeEh+0x38>)
    31d4:	2a00      	cmp	r2, #0
    31d6:	d100      	bne.n	31da <_ZN10IridiumSBD10StreamShim5writeEh+0x2a>
    31d8:	4b04      	ldr	r3, [pc, #16]	; (31ec <_ZN10IridiumSBD10StreamShim5writeEh+0x3c>)
         if (f) f(b);
    31da:	2b00      	cmp	r3, #0
    31dc:	d001      	beq.n	31e2 <_ZN10IridiumSBD10StreamShim5writeEh+0x32>
    31de:	0020      	movs	r0, r4
    31e0:	4798      	blx	r3
         return 1;
      }
    31e2:	2001      	movs	r0, #1
    31e4:	bd70      	pop	{r4, r5, r6, pc}
    31e6:	46c0      	nop			; (mov r8, r8)
	...

000031f0 <_ZNSt12_Vector_baseI4DataSaIS0_EE13_M_deallocateEPS0_j.isra.16>:
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
      }

      void
      _M_deallocate(pointer __p, size_t __n)
    31f0:	b510      	push	{r4, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
    31f2:	2800      	cmp	r0, #0
    31f4:	d001      	beq.n	31fa <_ZNSt12_Vector_baseI4DataSaIS0_EE13_M_deallocateEPS0_j.isra.16+0xa>
    31f6:	f001 f949 	bl	448c <_ZdlPv>
	  _Tr::deallocate(_M_impl, __p, __n);
      }
    31fa:	bd10      	pop	{r4, pc}

000031fc <_ZNSt6vectorI4DataSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
    31fc:	b510      	push	{r4, lr}
    31fe:	0004      	movs	r4, r0
	  }
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    3200:	6800      	ldr	r0, [r0, #0]
    3202:	f7ff fff5 	bl	31f0 <_ZNSt12_Vector_baseI4DataSaIS0_EE13_M_deallocateEPS0_j.isra.16>
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
    3206:	0020      	movs	r0, r4
    3208:	bd10      	pop	{r4, pc}
	...

0000320c <SERCOM2_Handler>:
SPIClass sdSPI (&sercom1, 12, 13, 11, SPI_PAD_0_SCK_1, SERCOM_RX_PAD_3);
Uart Serial2 (&sercom2, 3, 4, SERCOM_RX_PAD_1, UART_TX_PAD_0);
Uart Serial3 (&sercom0, 9, 8, SERCOM_RX_PAD_3, UART_TX_PAD_2);

void SERCOM2_Handler()
{
    320c:	b510      	push	{r4, lr}
  Serial2.IrqHandler();
    320e:	4802      	ldr	r0, [pc, #8]	; (3218 <SERCOM2_Handler+0xc>)
    3210:	f001 fdc2 	bl	4d98 <_ZN4Uart10IrqHandlerEv>
}
    3214:	bd10      	pop	{r4, pc}
    3216:	46c0      	nop			; (mov r8, r8)
    3218:	20000674 	.word	0x20000674

0000321c <SERCOM3_Handler>:

void SERCOM3_Handler()
{
    321c:	b510      	push	{r4, lr}
  Serial3.IrqHandler();
    321e:	4802      	ldr	r0, [pc, #8]	; (3228 <SERCOM3_Handler+0xc>)
    3220:	f001 fdba 	bl	4d98 <_ZN4Uart10IrqHandlerEv>
}
    3224:	bd10      	pop	{r4, pc}
    3226:	46c0      	nop			; (mov r8, r8)
    3228:	200006d4 	.word	0x200006d4

0000322c <_Z10isbd_setupv>:

//Se inicializa Serial3 para RockBLOCK
IridiumSBD isbd(Serial3, ISBD_EN);

//Configuración RockBLOCK
void isbd_setup() {
    322c:	b510      	push	{r4, lr}
  //Perfil de energía (1 para baja corriente)
  isbd.setPowerProfile(1);
    322e:	2101      	movs	r1, #1
    3230:	4803      	ldr	r0, [pc, #12]	; (3240 <_Z10isbd_setupv+0x14>)
    3232:	f7fd fedf 	bl	ff4 <_ZN10IridiumSBD15setPowerProfileEi>
  Serial.println("ISBD Listo");
    3236:	4903      	ldr	r1, [pc, #12]	; (3244 <_Z10isbd_setupv+0x18>)
    3238:	4803      	ldr	r0, [pc, #12]	; (3248 <_Z10isbd_setupv+0x1c>)
    323a:	f001 f973 	bl	4524 <_ZN5Print7printlnEPKc>
}
    323e:	bd10      	pop	{r4, pc}
    3240:	20000458 	.word	0x20000458
    3244:	0000e474 	.word	0x0000e474
    3248:	20000764 	.word	0x20000764

0000324c <_Z10fona_setupv>:

//Configuración de FONA
void fona_setup() {
    324c:	b510      	push	{r4, lr}
  pinMode(FONA_KEY, OUTPUT);
    324e:	2101      	movs	r1, #1
    3250:	200e      	movs	r0, #14
    3252:	f002 ff47 	bl	60e4 <pinMode>
  pinMode(FONA_PS, INPUT);
    3256:	2100      	movs	r1, #0
    3258:	2006      	movs	r0, #6
    325a:	f002 ff43 	bl	60e4 <pinMode>
  pinMode(FONA_NS, INPUT);
    325e:	2100      	movs	r1, #0
    3260:	2007      	movs	r0, #7
    3262:	f002 ff3f 	bl	60e4 <pinMode>
  digitalWrite(FONA_KEY, HIGH); //Se coloca el pin 15 en bajo para habilitar FONA (Key)
    3266:	2101      	movs	r1, #1
    3268:	200e      	movs	r0, #14
    326a:	f002 ff8f 	bl	618c <digitalWrite>
  while (!digitalRead(FONA_PS)) {
    326e:	2006      	movs	r0, #6
    3270:	f002 ffba 	bl	61e8 <digitalRead>
    3274:	1e04      	subs	r4, r0, #0
    3276:	d111      	bne.n	329c <_Z10fona_setupv+0x50>
    digitalWrite(FONA_KEY, LOW);
    3278:	0001      	movs	r1, r0
    327a:	200e      	movs	r0, #14
    327c:	f002 ff86 	bl	618c <digitalWrite>
    delay(2000);
    3280:	20fa      	movs	r0, #250	; 0xfa
    3282:	00c0      	lsls	r0, r0, #3
    3284:	f001 f87a 	bl	437c <delay>
    digitalWrite(FONA_KEY, HIGH);
    3288:	2101      	movs	r1, #1
    328a:	200e      	movs	r0, #14
    328c:	f002 ff7e 	bl	618c <digitalWrite>
    delay(2000);
    3290:	20fa      	movs	r0, #250	; 0xfa
    3292:	00c0      	lsls	r0, r0, #3
    3294:	f001 f872 	bl	437c <delay>
    digitalWrite(FONA_KEY, LOW);
    3298:	0021      	movs	r1, r4
    329a:	e7e5      	b.n	3268 <_Z10fona_setupv+0x1c>
  }

  //Inicia solo si se logra establecer comunicación con FONA
  if (! fona.begin(*fonaSerial)) {
    329c:	4c0b      	ldr	r4, [pc, #44]	; (32cc <_Z10fona_setupv+0x80>)
    329e:	4b0c      	ldr	r3, [pc, #48]	; (32d0 <_Z10fona_setupv+0x84>)
    32a0:	0020      	movs	r0, r4
    32a2:	6819      	ldr	r1, [r3, #0]
    32a4:	f7fd fb24 	bl	8f0 <_ZN13Adafruit_FONA5beginER6Stream>
    32a8:	2800      	cmp	r0, #0
    32aa:	d100      	bne.n	32ae <_Z10fona_setupv+0x62>
    32ac:	e7fe      	b.n	32ac <_Z10fona_setupv+0x60>
    while (1);
  }

  //Se habilita el GPS
  fona.enableGPS(true);
    32ae:	2101      	movs	r1, #1
    32b0:	0020      	movs	r0, r4
    32b2:	f7fd fe45 	bl	f40 <_ZN13Adafruit_FONA9enableGPSEb>
  fona.setGPRSNetworkSettings(F("kolbi3g"), F(""), F(""));
    32b6:	4a07      	ldr	r2, [pc, #28]	; (32d4 <_Z10fona_setupv+0x88>)
    32b8:	0020      	movs	r0, r4
    32ba:	0013      	movs	r3, r2
    32bc:	4906      	ldr	r1, [pc, #24]	; (32d8 <_Z10fona_setupv+0x8c>)
    32be:	f7fc ff6d 	bl	19c <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>
  Serial.println("FONA listo");
    32c2:	4906      	ldr	r1, [pc, #24]	; (32dc <_Z10fona_setupv+0x90>)
    32c4:	4806      	ldr	r0, [pc, #24]	; (32e0 <_Z10fona_setupv+0x94>)
    32c6:	f001 f92d 	bl	4524 <_ZN5Print7printlnEPKc>
}
    32ca:	bd10      	pop	{r4, pc}
    32cc:	200004b0 	.word	0x200004b0
    32d0:	2000000c 	.word	0x2000000c
    32d4:	0000e202 	.word	0x0000e202
    32d8:	0000e47f 	.word	0x0000e47f
    32dc:	0000e487 	.word	0x0000e487
    32e0:	20000764 	.word	0x20000764

000032e4 <_Z8sd_setupv>:

//Configuración de SD
void sd_setup() {
    32e4:	b510      	push	{r4, lr}
  //Se establece comunicación con la SD
  while (!SD.begin(SD_CS)) {
    32e6:	2110      	movs	r1, #16
    32e8:	4806      	ldr	r0, [pc, #24]	; (3304 <_Z8sd_setupv+0x20>)
    32ea:	f7fe fd15 	bl	1d18 <_ZN5SDLib7SDClass5beginEh>
    32ee:	2800      	cmp	r0, #0
    32f0:	d103      	bne.n	32fa <_Z8sd_setupv+0x16>
    delay(100);
    32f2:	3064      	adds	r0, #100	; 0x64
    32f4:	f001 f842 	bl	437c <delay>
}

//Configuración de SD
void sd_setup() {
  //Se establece comunicación con la SD
  while (!SD.begin(SD_CS)) {
    32f8:	e7f5      	b.n	32e6 <_Z8sd_setupv+0x2>
    delay(100);
  }
  Serial.println("SD lista");
    32fa:	4903      	ldr	r1, [pc, #12]	; (3308 <_Z8sd_setupv+0x24>)
    32fc:	4803      	ldr	r0, [pc, #12]	; (330c <_Z8sd_setupv+0x28>)
    32fe:	f001 f911 	bl	4524 <_ZN5Print7printlnEPKc>
}
    3302:	bd10      	pop	{r4, pc}
    3304:	20000180 	.word	0x20000180
    3308:	0000e492 	.word	0x0000e492
    330c:	20000764 	.word	0x20000764

00003310 <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff>:

//=========================Funciones==============================

//Consulta si el punto de prueba se encuentra en las áreas dadas
bool eval_area(const vector<Data>& test_points, float lat, float lon)
{
    3310:	b5f0      	push	{r4, r5, r6, r7, lr}
    3312:	6843      	ldr	r3, [r0, #4]
    3314:	b089      	sub	sp, #36	; 0x24
    3316:	6805      	ldr	r5, [r0, #0]
    3318:	9104      	str	r1, [sp, #16]
    331a:	9205      	str	r2, [sp, #20]
    331c:	9306      	str	r3, [sp, #24]
  bool inside = false;
  for (auto i : test_points) {
    331e:	9b06      	ldr	r3, [sp, #24]
    3320:	42ab      	cmp	r3, r5
    3322:	d100      	bne.n	3326 <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff+0x16>
    3324:	e084      	b.n	3430 <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff+0x120>
    3326:	892c      	ldrh	r4, [r5, #8]
    3328:	686b      	ldr	r3, [r5, #4]
    bool point_in_area(float lat, float lon) const
    {

        uint8_t ret_val = 0;

        float area_size = (float)((range >> 4)*0.0001f);
    332a:	1120      	asrs	r0, r4, #4
    332c:	9303      	str	r3, [sp, #12]
    332e:	f004 f9ff 	bl	7730 <__aeabi_i2f>
    3332:	4941      	ldr	r1, [pc, #260]	; (3438 <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff+0x128>)
    3334:	f003 ff62 	bl	71fc <__aeabi_fmul>

        //cout << "Tamaño de area: " << area_size << "\n";

        uint8_t a_flags = range & 0xF;
    3338:	230f      	movs	r3, #15
    333a:	682e      	ldr	r6, [r5, #0]
    bool point_in_area(float lat, float lon) const
    {

        uint8_t ret_val = 0;

        float area_size = (float)((range >> 4)*0.0001f);
    333c:	1c07      	adds	r7, r0, #0

        //cout << "Tamaño de area: " << area_size << "\n";

        uint8_t a_flags = range & 0xF;
    333e:	4023      	ands	r3, r4

        //cout << "Banderas: " << (int)(a_flags) << "\n";

        if (lon <= pos.x && lon >= pos.x - area_size){
    3340:	1c31      	adds	r1, r6, #0
    3342:	9805      	ldr	r0, [sp, #20]

        float area_size = (float)((range >> 4)*0.0001f);

        //cout << "Tamaño de area: " << area_size << "\n";

        uint8_t a_flags = range & 0xF;
    3344:	9307      	str	r3, [sp, #28]

        //cout << "Banderas: " << (int)(a_flags) << "\n";

        if (lon <= pos.x && lon >= pos.x - area_size){
    3346:	f003 fcf7 	bl	6d38 <__aeabi_fcmple>
    334a:	2800      	cmp	r0, #0
    334c:	d00a      	beq.n	3364 <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff+0x54>
    334e:	1c39      	adds	r1, r7, #0
    3350:	1c30      	adds	r0, r6, #0
    3352:	f004 f867 	bl	7424 <__aeabi_fsub>
    3356:	1c01      	adds	r1, r0, #0
    3358:	9805      	ldr	r0, [sp, #20]
    335a:	f003 fd01 	bl	6d60 <__aeabi_fcmpge>
            ret_val |= 0x6;
    335e:	2406      	movs	r4, #6

        uint8_t a_flags = range & 0xF;

        //cout << "Banderas: " << (int)(a_flags) << "\n";

        if (lon <= pos.x && lon >= pos.x - area_size){
    3360:	2800      	cmp	r0, #0
    3362:	d113      	bne.n	338c <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff+0x7c>
            ret_val |= 0x6;
            //cout << "1, 2\n";
            //cout << "ret_val: " << (int)(ret_val) << "\n";
        } else if (lon > pos.x && lon <= pos.x + area_size){
    3364:	1c31      	adds	r1, r6, #0
    3366:	9805      	ldr	r0, [sp, #20]
    3368:	f003 fcf0 	bl	6d4c <__aeabi_fcmpgt>
    }

    bool point_in_area(float lat, float lon) const
    {

        uint8_t ret_val = 0;
    336c:	2400      	movs	r4, #0

        if (lon <= pos.x && lon >= pos.x - area_size){
            ret_val |= 0x6;
            //cout << "1, 2\n";
            //cout << "ret_val: " << (int)(ret_val) << "\n";
        } else if (lon > pos.x && lon <= pos.x + area_size){
    336e:	2800      	cmp	r0, #0
    3370:	d00c      	beq.n	338c <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff+0x7c>
    3372:	1c39      	adds	r1, r7, #0
    3374:	1c30      	adds	r0, r6, #0
    3376:	f003 fd1b 	bl	6db0 <__aeabi_fadd>
    337a:	1c01      	adds	r1, r0, #0
    337c:	9805      	ldr	r0, [sp, #20]
    337e:	f003 fcdb 	bl	6d38 <__aeabi_fcmple>
    }

    bool point_in_area(float lat, float lon) const
    {

        uint8_t ret_val = 0;
    3382:	1e43      	subs	r3, r0, #1
    3384:	4198      	sbcs	r0, r3
        if (lon <= pos.x && lon >= pos.x - area_size){
            ret_val |= 0x6;
            //cout << "1, 2\n";
            //cout << "ret_val: " << (int)(ret_val) << "\n";
        } else if (lon > pos.x && lon <= pos.x + area_size){
            ret_val |= 0x9;
    3386:	2409      	movs	r4, #9
    }

    bool point_in_area(float lat, float lon) const
    {

        uint8_t ret_val = 0;
    3388:	4240      	negs	r0, r0
    338a:	4004      	ands	r4, r0
            ret_val |= 0x9;
            //cout << "0, 3\n";
            //cout << "ret_val: " << (int)(ret_val) << "\n";
        }

        if (lat <= pos.y && lat > pos.y - area_size){
    338c:	9903      	ldr	r1, [sp, #12]
    338e:	9804      	ldr	r0, [sp, #16]
    3390:	f003 fcd2 	bl	6d38 <__aeabi_fcmple>
    3394:	2800      	cmp	r0, #0
    3396:	d00a      	beq.n	33ae <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff+0x9e>
    3398:	1c39      	adds	r1, r7, #0
    339a:	9803      	ldr	r0, [sp, #12]
    339c:	f004 f842 	bl	7424 <__aeabi_fsub>
    33a0:	1c01      	adds	r1, r0, #0
    33a2:	9804      	ldr	r0, [sp, #16]
    33a4:	f003 fcd2 	bl	6d4c <__aeabi_fcmpgt>
            ret_val &= 0xC;
    33a8:	230c      	movs	r3, #12
            ret_val |= 0x9;
            //cout << "0, 3\n";
            //cout << "ret_val: " << (int)(ret_val) << "\n";
        }

        if (lat <= pos.y && lat > pos.y - area_size){
    33aa:	2800      	cmp	r0, #0
    33ac:	d110      	bne.n	33d0 <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff+0xc0>
            ret_val &= 0xC;
            //cout << "2, 3\n";
            //cout << "ret_val: " << (int)(ret_val) << "\n";
        } else if (lat > pos.y && lat < pos.y + area_size){
    33ae:	9903      	ldr	r1, [sp, #12]
    33b0:	9804      	ldr	r0, [sp, #16]
    33b2:	f003 fccb 	bl	6d4c <__aeabi_fcmpgt>
    33b6:	2800      	cmp	r0, #0
    33b8:	d00b      	beq.n	33d2 <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff+0xc2>
    33ba:	9903      	ldr	r1, [sp, #12]
    33bc:	1c38      	adds	r0, r7, #0
    33be:	f003 fcf7 	bl	6db0 <__aeabi_fadd>
    33c2:	1c01      	adds	r1, r0, #0
    33c4:	9804      	ldr	r0, [sp, #16]
    33c6:	f003 fcad 	bl	6d24 <__aeabi_fcmplt>
    33ca:	2800      	cmp	r0, #0
    33cc:	d001      	beq.n	33d2 <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff+0xc2>
            ret_val &= 0x3;
    33ce:	2303      	movs	r3, #3
    33d0:	401c      	ands	r4, r3
    inside = i.point_in_area(lat, lon);
    Serial.print("Colision con area ");
    33d2:	4f1a      	ldr	r7, [pc, #104]	; (343c <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff+0x12c>)
            //cout << "ret_val: " << (int)(ret_val) << "\n";
        }

        //cout << "Areas evaluadas: " << (int)(ret_val) << "\n";

        return ((ret_val & a_flags) != 0);
    33d4:	9b07      	ldr	r3, [sp, #28]
    33d6:	491a      	ldr	r1, [pc, #104]	; (3440 <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff+0x130>)
    33d8:	0038      	movs	r0, r7
    33da:	401c      	ands	r4, r3
    33dc:	f001 f887 	bl	44ee <_ZN5Print5printEPKc>
    Serial.print(i.pos.x);
    33e0:	1c30      	adds	r0, r6, #0
    33e2:	f005 ff99 	bl	9318 <__aeabi_f2d>
    33e6:	2602      	movs	r6, #2
    33e8:	0002      	movs	r2, r0
    33ea:	000b      	movs	r3, r1
    33ec:	9600      	str	r6, [sp, #0]
    33ee:	0038      	movs	r0, r7
    33f0:	f001 f9ce 	bl	4790 <_ZN5Print5printEdi>
    Serial.print(", ");
    33f4:	4913      	ldr	r1, [pc, #76]	; (3444 <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff+0x134>)
    33f6:	0038      	movs	r0, r7
    33f8:	f001 f879 	bl	44ee <_ZN5Print5printEPKc>
    Serial.print(i.pos.y);
    33fc:	9803      	ldr	r0, [sp, #12]
    33fe:	f005 ff8b 	bl	9318 <__aeabi_f2d>
    3402:	9600      	str	r6, [sp, #0]
    3404:	000b      	movs	r3, r1
    3406:	0002      	movs	r2, r0
    3408:	0038      	movs	r0, r7
    340a:	f001 f9c1 	bl	4790 <_ZN5Print5printEdi>
    Serial.print(": ");
    340e:	490e      	ldr	r1, [pc, #56]	; (3448 <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff+0x138>)
    3410:	0038      	movs	r0, r7
    3412:	f001 f86c 	bl	44ee <_ZN5Print5printEPKc>
    Serial.println(inside);
    3416:	0021      	movs	r1, r4
    3418:	220a      	movs	r2, #10
    341a:	1e4b      	subs	r3, r1, #1
    341c:	4199      	sbcs	r1, r3
    341e:	0038      	movs	r0, r7
    3420:	f001 f8ef 	bl	4602 <_ZN5Print7printlnEii>
    3424:	350c      	adds	r5, #12
    if (inside) break;
    3426:	2c00      	cmp	r4, #0
    3428:	d100      	bne.n	342c <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff+0x11c>
    342a:	e778      	b.n	331e <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff+0xe>
//Consulta si el punto de prueba se encuentra en las áreas dadas
bool eval_area(const vector<Data>& test_points, float lat, float lon)
{
  bool inside = false;
  for (auto i : test_points) {
    inside = i.point_in_area(lat, lon);
    342c:	2001      	movs	r0, #1
    342e:	e000      	b.n	3432 <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff+0x122>
    3430:	2000      	movs	r0, #0
    Serial.print(": ");
    Serial.println(inside);
    if (inside) break;
  }
  return inside;
}
    3432:	b009      	add	sp, #36	; 0x24
    3434:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3436:	46c0      	nop			; (mov r8, r8)
    3438:	38d1b717 	.word	0x38d1b717
    343c:	20000764 	.word	0x20000764
    3440:	0000e49b 	.word	0x0000e49b
    3444:	0000e28c 	.word	0x0000e28c
    3448:	0000e04c 	.word	0x0000e04c

0000344c <_Z10write_file6StringS_>:

//Escribir algún mensaje en un archivo en la tarjeta SD
boolean write_file(String file, String msg) {
    344c:	b530      	push	{r4, r5, lr}
    344e:	0004      	movs	r4, r0
    3450:	b095      	sub	sp, #84	; 0x54
  File file_out;
    3452:	a802      	add	r0, sp, #8
  }
  return inside;
}

//Escribir algún mensaje en un archivo en la tarjeta SD
boolean write_file(String file, String msg) {
    3454:	000d      	movs	r5, r1
  File file_out;
    3456:	f7fe fb8b 	bl	1b70 <_ZN5SDLib4FileC1Ev>
  
  // Open the specified file/directory with the supplied mode (e.g. read or
  // write, etc). Returns a File object for interacting with the file.
  // Note that currently only one file can be open at a time.
  File open(const char *filename, uint8_t mode = FILE_READ);
  File open(const String &filename, uint8_t mode = FILE_READ) { return open( filename.c_str(), mode ); }
    345a:	2313      	movs	r3, #19
    345c:	6822      	ldr	r2, [r4, #0]
    345e:	4917      	ldr	r1, [pc, #92]	; (34bc <_Z10write_file6StringS_+0x70>)
    3460:	a80b      	add	r0, sp, #44	; 0x2c
    3462:	f7fe fce5 	bl	1e30 <_ZN5SDLib7SDClass4openEPKch>
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    3466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3468:	9303      	str	r3, [sp, #12]
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    346a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    346c:	9304      	str	r3, [sp, #16]
    346e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3470:	9301      	str	r3, [sp, #4]
    3472:	9305      	str	r3, [sp, #20]
    3474:	2300      	movs	r3, #0
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT)

namespace SDLib {

class File : public Stream {
    3476:	a902      	add	r1, sp, #8
    3478:	185a      	adds	r2, r3, r1
    347a:	a90b      	add	r1, sp, #44	; 0x2c
    347c:	18c9      	adds	r1, r1, r3
    347e:	7c09      	ldrb	r1, [r1, #16]
    3480:	3301      	adds	r3, #1
    3482:	7411      	strb	r1, [r2, #16]
    3484:	2b0d      	cmp	r3, #13
    3486:	d1f6      	bne.n	3476 <_Z10write_file6StringS_+0x2a>
    3488:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  file_out = SD.open(file, FILE_WRITE);
  //Escribir solo si el archivo se abrió adecuadamente
  if (file_out) {
    348a:	a802      	add	r0, sp, #8
    348c:	9301      	str	r3, [sp, #4]
    348e:	930a      	str	r3, [sp, #40]	; 0x28
    3490:	f7fe fbab 	bl	1bea <_ZN5SDLib4FilecvbEv>
    3494:	1e04      	subs	r4, r0, #0
    3496:	480a      	ldr	r0, [pc, #40]	; (34c0 <_Z10write_file6StringS_+0x74>)
    3498:	d00a      	beq.n	34b0 <_Z10write_file6StringS_+0x64>
    Serial.println("Escribiendo en SD");
    349a:	490a      	ldr	r1, [pc, #40]	; (34c4 <_Z10write_file6StringS_+0x78>)
    349c:	f001 f842 	bl	4524 <_ZN5Print7printlnEPKc>
    file_out.println(msg);
    34a0:	0029      	movs	r1, r5
    34a2:	a802      	add	r0, sp, #8
    34a4:	f001 f834 	bl	4510 <_ZN5Print7printlnERK6String>
    file_out.close(); //Se cierra el archivo
    34a8:	a802      	add	r0, sp, #8
    34aa:	f7fe fb91 	bl	1bd0 <_ZN5SDLib4File5closeEv>
    return true;
    34ae:	e002      	b.n	34b6 <_Z10write_file6StringS_+0x6a>
  } else {
    Serial.println("Error SD");
    34b0:	4905      	ldr	r1, [pc, #20]	; (34c8 <_Z10write_file6StringS_+0x7c>)
    34b2:	f001 f837 	bl	4524 <_ZN5Print7printlnEPKc>
    return false;
  }
}
    34b6:	0020      	movs	r0, r4
    34b8:	b015      	add	sp, #84	; 0x54
    34ba:	bd30      	pop	{r4, r5, pc}
    34bc:	20000180 	.word	0x20000180
    34c0:	20000764 	.word	0x20000764
    34c4:	0000e4ae 	.word	0x0000e4ae
    34c8:	0000e4c0 	.word	0x0000e4c0

000034cc <_Z18load_config_paramsv>:

//Cargar las variables de configuración a memoria
void load_config_params() {
    34cc:	b530      	push	{r4, r5, lr}
    34ce:	b091      	sub	sp, #68	; 0x44
  String line;
    34d0:	4927      	ldr	r1, [pc, #156]	; (3570 <_Z18load_config_paramsv+0xa4>)
    34d2:	a801      	add	r0, sp, #4
    34d4:	f002 ff57 	bl	6386 <_ZN6StringC1EPKc>
  File cfg_file = SD.open("config.txt");
    34d8:	a807      	add	r0, sp, #28
    34da:	2301      	movs	r3, #1
    34dc:	4a25      	ldr	r2, [pc, #148]	; (3574 <_Z18load_config_paramsv+0xa8>)
    34de:	4926      	ldr	r1, [pc, #152]	; (3578 <_Z18load_config_paramsv+0xac>)
    34e0:	f7fe fca6 	bl	1e30 <_ZN5SDLib7SDClass4openEPKch>
  if (cfg_file) {
    34e4:	a807      	add	r0, sp, #28
    34e6:	f7fe fb80 	bl	1bea <_ZN5SDLib4FilecvbEv>
    34ea:	2800      	cmp	r0, #0
    34ec:	d104      	bne.n	34f8 <_Z18load_config_paramsv+0x2c>
  }
}

//Cargar las variables de configuración a memoria
void load_config_params() {
  String line;
    34ee:	a801      	add	r0, sp, #4
    34f0:	f002 ff02 	bl	62f8 <_ZN6StringD1Ev>
          delay_sec = (uint8_t)(line.toInt());
          break;
      }
    }
  }
}
    34f4:	b011      	add	sp, #68	; 0x44
    34f6:	bd30      	pop	{r4, r5, pc}
//Cargar las variables de configuración a memoria
void load_config_params() {
  String line;
  File cfg_file = SD.open("config.txt");
  if (cfg_file) {
    cfg_file.readStringUntil('\n');
    34f8:	220a      	movs	r2, #10
    34fa:	a907      	add	r1, sp, #28
    34fc:	a804      	add	r0, sp, #16
    34fe:	f001 fbe1 	bl	4cc4 <_ZN6Stream15readStringUntilEc>
    3502:	a804      	add	r0, sp, #16
    3504:	f002 fef8 	bl	62f8 <_ZN6StringD1Ev>
    for (int i = 0; i < 4; i++) {
    3508:	2400      	movs	r4, #0
      line = cfg_file.readStringUntil('\n');
    350a:	220a      	movs	r2, #10
    350c:	a907      	add	r1, sp, #28
    350e:	a804      	add	r0, sp, #16
    3510:	f001 fbd8 	bl	4cc4 <_ZN6Stream15readStringUntilEc>
    3514:	a904      	add	r1, sp, #16
    3516:	a801      	add	r0, sp, #4
    3518:	f002 ff82 	bl	6420 <_ZN6StringaSEOS_>
    351c:	a804      	add	r0, sp, #16
    351e:	f002 feeb 	bl	62f8 <_ZN6StringD1Ev>
      Serial.print("Linea cfg: ");
    3522:	4d16      	ldr	r5, [pc, #88]	; (357c <_Z18load_config_paramsv+0xb0>)
    3524:	4916      	ldr	r1, [pc, #88]	; (3580 <_Z18load_config_paramsv+0xb4>)
    3526:	0028      	movs	r0, r5
    3528:	f000 ffe1 	bl	44ee <_ZN5Print5printEPKc>
      Serial.println(line);
    352c:	0028      	movs	r0, r5
    352e:	a901      	add	r1, sp, #4
    3530:	f000 ffee 	bl	4510 <_ZN5Print7printlnERK6String>
    3534:	1c65      	adds	r5, r4, #1
      switch (i) {
    3536:	2c01      	cmp	r4, #1
    3538:	d009      	beq.n	354e <_Z18load_config_paramsv+0x82>
    353a:	2c02      	cmp	r4, #2
    353c:	d00d      	beq.n	355a <_Z18load_config_paramsv+0x8e>
    353e:	2c00      	cmp	r4, #0
    3540:	d112      	bne.n	3568 <_Z18load_config_paramsv+0x9c>
        case 0:
          los = line.toFloat();
    3542:	a801      	add	r0, sp, #4
    3544:	f003 f88f 	bl	6666 <_ZNK6String7toFloatEv>
    3548:	4b0e      	ldr	r3, [pc, #56]	; (3584 <_Z18load_config_paramsv+0xb8>)
    354a:	6018      	str	r0, [r3, #0]
    354c:	e00a      	b.n	3564 <_Z18load_config_paramsv+0x98>
          break;
        case 1:
          time_trig = (uint16_t)(line.toInt());
    354e:	a801      	add	r0, sp, #4
    3550:	f003 f878 	bl	6644 <_ZNK6String5toIntEv>
    3554:	4b0c      	ldr	r3, [pc, #48]	; (3588 <_Z18load_config_paramsv+0xbc>)
    3556:	8018      	strh	r0, [r3, #0]
    3558:	e004      	b.n	3564 <_Z18load_config_paramsv+0x98>
          break;
        case 2:
          delay_sec = (uint8_t)(line.toInt());
    355a:	a801      	add	r0, sp, #4
    355c:	f003 f872 	bl	6644 <_ZNK6String5toIntEv>
    3560:	4b0a      	ldr	r3, [pc, #40]	; (358c <_Z18load_config_paramsv+0xc0>)
    3562:	7018      	strb	r0, [r3, #0]
    3564:	002c      	movs	r4, r5
          break;
    3566:	e7d0      	b.n	350a <_Z18load_config_paramsv+0x3e>
void load_config_params() {
  String line;
  File cfg_file = SD.open("config.txt");
  if (cfg_file) {
    cfg_file.readStringUntil('\n');
    for (int i = 0; i < 4; i++) {
    3568:	1e2c      	subs	r4, r5, #0
    356a:	2c04      	cmp	r4, #4
    356c:	d1cd      	bne.n	350a <_Z18load_config_paramsv+0x3e>
    356e:	e7be      	b.n	34ee <_Z18load_config_paramsv+0x22>
    3570:	0000e202 	.word	0x0000e202
    3574:	0000e4c9 	.word	0x0000e4c9
    3578:	20000180 	.word	0x20000180
    357c:	20000764 	.word	0x20000764
    3580:	0000e4d4 	.word	0x0000e4d4
    3584:	20000014 	.word	0x20000014
    3588:	20000010 	.word	0x20000010
    358c:	20000008 	.word	0x20000008

00003590 <_Z15load_net_configv>:
    }
  }
}

//Cargar las variables de red a memoria
void load_net_config() {
    3590:	b530      	push	{r4, r5, lr}
    3592:	b091      	sub	sp, #68	; 0x44
  String line;
    3594:	4924      	ldr	r1, [pc, #144]	; (3628 <_Z15load_net_configv+0x98>)
    3596:	a801      	add	r0, sp, #4
    3598:	f002 fef5 	bl	6386 <_ZN6StringC1EPKc>
  File net_file = SD.open("net.txt");
    359c:	a807      	add	r0, sp, #28
    359e:	2301      	movs	r3, #1
    35a0:	4a22      	ldr	r2, [pc, #136]	; (362c <_Z15load_net_configv+0x9c>)
    35a2:	4923      	ldr	r1, [pc, #140]	; (3630 <_Z15load_net_configv+0xa0>)
    35a4:	f7fe fc44 	bl	1e30 <_ZN5SDLib7SDClass4openEPKch>
  if (net_file) {
    35a8:	a807      	add	r0, sp, #28
    35aa:	f7fe fb1e 	bl	1bea <_ZN5SDLib4FilecvbEv>
    35ae:	2800      	cmp	r0, #0
    35b0:	d104      	bne.n	35bc <_Z15load_net_configv+0x2c>
  }
}

//Cargar las variables de red a memoria
void load_net_config() {
  String line;
    35b2:	a801      	add	r0, sp, #4
    35b4:	f002 fea0 	bl	62f8 <_ZN6StringD1Ev>
          break;
      }
    }
    //fona.setGPRSNetworkSettings(net_apn, net_usr, net_pass);
  }
}
    35b8:	b011      	add	sp, #68	; 0x44
    35ba:	bd30      	pop	{r4, r5, pc}
//Cargar las variables de red a memoria
void load_net_config() {
  String line;
  File net_file = SD.open("net.txt");
  if (net_file) {
    net_file.readStringUntil('\n');
    35bc:	220a      	movs	r2, #10
    35be:	a907      	add	r1, sp, #28
    35c0:	a804      	add	r0, sp, #16
    35c2:	f001 fb7f 	bl	4cc4 <_ZN6Stream15readStringUntilEc>
    35c6:	a804      	add	r0, sp, #16
    35c8:	f002 fe96 	bl	62f8 <_ZN6StringD1Ev>
    for (int i = 0; i < 4; i++) {
    35cc:	2400      	movs	r4, #0
      line = net_file.readStringUntil('\n');
    35ce:	220a      	movs	r2, #10
    35d0:	a907      	add	r1, sp, #28
    35d2:	a804      	add	r0, sp, #16
    35d4:	f001 fb76 	bl	4cc4 <_ZN6Stream15readStringUntilEc>
    35d8:	a904      	add	r1, sp, #16
    35da:	a801      	add	r0, sp, #4
    35dc:	f002 ff20 	bl	6420 <_ZN6StringaSEOS_>
    35e0:	a804      	add	r0, sp, #16
    35e2:	f002 fe89 	bl	62f8 <_ZN6StringD1Ev>
      Serial.print("Linea net: ");
    35e6:	4d13      	ldr	r5, [pc, #76]	; (3634 <_Z15load_net_configv+0xa4>)
    35e8:	4913      	ldr	r1, [pc, #76]	; (3638 <_Z15load_net_configv+0xa8>)
    35ea:	0028      	movs	r0, r5
    35ec:	f000 ff7f 	bl	44ee <_ZN5Print5printEPKc>
      Serial.println(line);
    35f0:	0028      	movs	r0, r5
    35f2:	a901      	add	r1, sp, #4
    35f4:	f000 ff8c 	bl	4510 <_ZN5Print7printlnERK6String>
    35f8:	1c65      	adds	r5, r4, #1
      switch (i) {
    35fa:	2c01      	cmp	r4, #1
    35fc:	d006      	beq.n	360c <_Z15load_net_configv+0x7c>
    35fe:	2c02      	cmp	r4, #2
    3600:	d007      	beq.n	3612 <_Z15load_net_configv+0x82>
    3602:	2c00      	cmp	r4, #0
    3604:	d10b      	bne.n	361e <_Z15load_net_configv+0x8e>
        case 0:
          net_apn = line;
    3606:	a901      	add	r1, sp, #4
    3608:	480c      	ldr	r0, [pc, #48]	; (363c <_Z15load_net_configv+0xac>)
    360a:	e004      	b.n	3616 <_Z15load_net_configv+0x86>
          break;
        case 1:
          net_usr = line;
    360c:	a901      	add	r1, sp, #4
    360e:	480c      	ldr	r0, [pc, #48]	; (3640 <_Z15load_net_configv+0xb0>)
    3610:	e001      	b.n	3616 <_Z15load_net_configv+0x86>
          break;
        case 2:
          net_pass = line;
    3612:	480c      	ldr	r0, [pc, #48]	; (3644 <_Z15load_net_configv+0xb4>)
    3614:	a901      	add	r1, sp, #4
    3616:	f002 fee9 	bl	63ec <_ZN6StringaSERKS_>
    361a:	002c      	movs	r4, r5
          break;
    361c:	e7d7      	b.n	35ce <_Z15load_net_configv+0x3e>
void load_net_config() {
  String line;
  File net_file = SD.open("net.txt");
  if (net_file) {
    net_file.readStringUntil('\n');
    for (int i = 0; i < 4; i++) {
    361e:	1e2c      	subs	r4, r5, #0
    3620:	2c04      	cmp	r4, #4
    3622:	d1d4      	bne.n	35ce <_Z15load_net_configv+0x3e>
    3624:	e7c5      	b.n	35b2 <_Z15load_net_configv+0x22>
    3626:	46c0      	nop			; (mov r8, r8)
    3628:	0000e202 	.word	0x0000e202
    362c:	0000e4e0 	.word	0x0000e4e0
    3630:	20000180 	.word	0x20000180
    3634:	20000764 	.word	0x20000764
    3638:	0000e4e8 	.word	0x0000e4e8
    363c:	20000648 	.word	0x20000648
    3640:	20000664 	.word	0x20000664
    3644:	20000658 	.word	0x20000658

00003648 <_Z15load_srv_configv>:
    //fona.setGPRSNetworkSettings(net_apn, net_usr, net_pass);
  }
}

//Cargar las variables de servidor a memoria
void load_srv_config() {
    3648:	b530      	push	{r4, r5, lr}
    364a:	b091      	sub	sp, #68	; 0x44
  String line;
    364c:	4921      	ldr	r1, [pc, #132]	; (36d4 <_Z15load_srv_configv+0x8c>)
    364e:	a801      	add	r0, sp, #4
    3650:	f002 fe99 	bl	6386 <_ZN6StringC1EPKc>
  File srv_file = SD.open("srv.txt");
    3654:	a807      	add	r0, sp, #28
    3656:	2301      	movs	r3, #1
    3658:	4a1f      	ldr	r2, [pc, #124]	; (36d8 <_Z15load_srv_configv+0x90>)
    365a:	4920      	ldr	r1, [pc, #128]	; (36dc <_Z15load_srv_configv+0x94>)
    365c:	f7fe fbe8 	bl	1e30 <_ZN5SDLib7SDClass4openEPKch>
  if (srv_file) {
    3660:	a807      	add	r0, sp, #28
    3662:	f7fe fac2 	bl	1bea <_ZN5SDLib4FilecvbEv>
    3666:	2800      	cmp	r0, #0
    3668:	d104      	bne.n	3674 <_Z15load_srv_configv+0x2c>
  }
}

//Cargar las variables de servidor a memoria
void load_srv_config() {
  String line;
    366a:	a801      	add	r0, sp, #4
    366c:	f002 fe44 	bl	62f8 <_ZN6StringD1Ev>
          post_url = line;
          break;
      }
    }
  }
}
    3670:	b011      	add	sp, #68	; 0x44
    3672:	bd30      	pop	{r4, r5, pc}
//Cargar las variables de servidor a memoria
void load_srv_config() {
  String line;
  File srv_file = SD.open("srv.txt");
  if (srv_file) {
    srv_file.readStringUntil('\n');
    3674:	220a      	movs	r2, #10
    3676:	a907      	add	r1, sp, #28
    3678:	a804      	add	r0, sp, #16
    367a:	f001 fb23 	bl	4cc4 <_ZN6Stream15readStringUntilEc>
    367e:	a804      	add	r0, sp, #16
    3680:	f002 fe3a 	bl	62f8 <_ZN6StringD1Ev>
    for (int i = 0; i < 4; i++) {
    3684:	2400      	movs	r4, #0
      line = srv_file.readStringUntil('\n');
    3686:	220a      	movs	r2, #10
    3688:	a907      	add	r1, sp, #28
    368a:	a804      	add	r0, sp, #16
    368c:	f001 fb1a 	bl	4cc4 <_ZN6Stream15readStringUntilEc>
    3690:	a904      	add	r1, sp, #16
    3692:	a801      	add	r0, sp, #4
    3694:	f002 fec4 	bl	6420 <_ZN6StringaSEOS_>
    3698:	a804      	add	r0, sp, #16
    369a:	f002 fe2d 	bl	62f8 <_ZN6StringD1Ev>
      Serial.print("Linea srv: ");
    369e:	4d10      	ldr	r5, [pc, #64]	; (36e0 <_Z15load_srv_configv+0x98>)
    36a0:	4910      	ldr	r1, [pc, #64]	; (36e4 <_Z15load_srv_configv+0x9c>)
    36a2:	0028      	movs	r0, r5
    36a4:	f000 ff23 	bl	44ee <_ZN5Print5printEPKc>
      Serial.println(line);
    36a8:	0028      	movs	r0, r5
    36aa:	a901      	add	r1, sp, #4
    36ac:	f000 ff30 	bl	4510 <_ZN5Print7printlnERK6String>
    36b0:	1c65      	adds	r5, r4, #1
      switch (i) {
    36b2:	2c00      	cmp	r4, #0
    36b4:	d004      	beq.n	36c0 <_Z15load_srv_configv+0x78>
    36b6:	2c01      	cmp	r4, #1
    36b8:	d108      	bne.n	36cc <_Z15load_srv_configv+0x84>
        case 0:
          get_url = line;
          break;
        case 1:
          post_url = line;
    36ba:	a901      	add	r1, sp, #4
    36bc:	480a      	ldr	r0, [pc, #40]	; (36e8 <_Z15load_srv_configv+0xa0>)
    36be:	e001      	b.n	36c4 <_Z15load_srv_configv+0x7c>
      line = srv_file.readStringUntil('\n');
      Serial.print("Linea srv: ");
      Serial.println(line);
      switch (i) {
        case 0:
          get_url = line;
    36c0:	480a      	ldr	r0, [pc, #40]	; (36ec <_Z15load_srv_configv+0xa4>)
    36c2:	a901      	add	r1, sp, #4
          break;
        case 1:
          post_url = line;
    36c4:	f002 fe92 	bl	63ec <_ZN6StringaSERKS_>
    36c8:	002c      	movs	r4, r5
          break;
    36ca:	e7dc      	b.n	3686 <_Z15load_srv_configv+0x3e>
void load_srv_config() {
  String line;
  File srv_file = SD.open("srv.txt");
  if (srv_file) {
    srv_file.readStringUntil('\n');
    for (int i = 0; i < 4; i++) {
    36cc:	1e2c      	subs	r4, r5, #0
    36ce:	2c04      	cmp	r4, #4
    36d0:	d1d9      	bne.n	3686 <_Z15load_srv_configv+0x3e>
    36d2:	e7ca      	b.n	366a <_Z15load_srv_configv+0x22>
    36d4:	0000e202 	.word	0x0000e202
    36d8:	0000e4f4 	.word	0x0000e4f4
    36dc:	20000180 	.word	0x20000180
    36e0:	20000764 	.word	0x20000764
    36e4:	0000e4fc 	.word	0x0000e4fc
    36e8:	20000744 	.word	0x20000744
    36ec:	20000750 	.word	0x20000750

000036f0 <_Z11process_smsv>:
bool test_gsm_rssi() {
  return (fona.getRSSI() >= 5) ? true : false;
}

//Procesamiento de SMS para configuración de variables de sistema
void process_sms() {
    36f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t n = 1;
    36f2:	2601      	movs	r6, #1
bool test_gsm_rssi() {
  return (fona.getRSSI() >= 5) ? true : false;
}

//Procesamiento de SMS para configuración de variables de sistema
void process_sms() {
    36f4:	b0d3      	sub	sp, #332	; 0x14c
    uint16_t smslen;
    char sender[32];
    char replybuffer[255];

    //Lectura de un SMS
    uint8_t len = fona.readSMS(n, replybuffer, 250, &smslen);
    36f6:	230e      	movs	r3, #14
    36f8:	4c54      	ldr	r4, [pc, #336]	; (384c <_Z11process_smsv+0x15c>)
    36fa:	446b      	add	r3, sp
    36fc:	ad12      	add	r5, sp, #72	; 0x48
    36fe:	9300      	str	r3, [sp, #0]
    3700:	0031      	movs	r1, r6
    3702:	23fa      	movs	r3, #250	; 0xfa
    3704:	002a      	movs	r2, r5
    3706:	0020      	movs	r0, r4
    3708:	f7fd faca 	bl	ca0 <_ZN13Adafruit_FONA7readSMSEhPctPt>
    fona.deleteSMS(n); //Se borra todo mensaje leído
    370c:	0031      	movs	r1, r6
    uint16_t smslen;
    char sender[32];
    char replybuffer[255];

    //Lectura de un SMS
    uint8_t len = fona.readSMS(n, replybuffer, 250, &smslen);
    370e:	0007      	movs	r7, r0
    fona.deleteSMS(n); //Se borra todo mensaje leído
    3710:	0020      	movs	r0, r4
    3712:	f7fd fa6d 	bl	bf0 <_ZN13Adafruit_FONA9deleteSMSEh>
    //Si len = 0, se debe buscar otro SMS de memoria
    if (len == 0) {
    3716:	2f00      	cmp	r7, #0
    3718:	d104      	bne.n	3724 <_Z11process_smsv+0x34>
      //Serial.println("No len");
      //fona.deleteSMS(n);
      n++;
    371a:	3601      	adds	r6, #1
    371c:	b2f6      	uxtb	r6, r6

//Procesamiento de SMS para configuración de variables de sistema
void process_sms() {
  uint8_t n = 1;
  //Se leen todos los SMS con el fin de verificar códigos dentro de ellos
  while (n <= 20) {
    371e:	2e15      	cmp	r6, #21
    3720:	d1e9      	bne.n	36f6 <_Z11process_smsv+0x6>
    3722:	e090      	b.n	3846 <_Z11process_smsv+0x156>
      n++;
      continue;
    }

    //Se intenta obtener el número del remitente del mensaje
    if (! fona.getSMSSender(n, sender, sizeof(sender))) {
    3724:	af0a      	add	r7, sp, #40	; 0x28
    3726:	2320      	movs	r3, #32
    3728:	003a      	movs	r2, r7
    372a:	0031      	movs	r1, r6
    372c:	0020      	movs	r0, r4
    372e:	f7fd fb55 	bl	ddc <_ZN13Adafruit_FONA12getSMSSenderEhPci>
    3732:	2800      	cmp	r0, #0
    3734:	d100      	bne.n	3738 <_Z11process_smsv+0x48>
      //No se logra obtener (número privado)
      sender[0] = 0;
    3736:	7038      	strb	r0, [r7, #0]
    }

    if (replybuffer[0] == 'M') {
    3738:	782b      	ldrb	r3, [r5, #0]
    373a:	2b4d      	cmp	r3, #77	; 0x4d
    373c:	d10b      	bne.n	3756 <_Z11process_smsv+0x66>
      Serial.println("MAP");
    373e:	4944      	ldr	r1, [pc, #272]	; (3850 <_Z11process_smsv+0x160>)
    3740:	4844      	ldr	r0, [pc, #272]	; (3854 <_Z11process_smsv+0x164>)
    3742:	f000 feef 	bl	4524 <_ZN5Print7printlnEPKc>
      fona.sendSMS(sender, "MAP UPD"); //Intentar confirmar al remitente
    3746:	4a44      	ldr	r2, [pc, #272]	; (3858 <_Z11process_smsv+0x168>)
    3748:	0039      	movs	r1, r7
    374a:	0020      	movs	r0, r4
    374c:	f7fd f9dc 	bl	b08 <_ZN13Adafruit_FONA7sendSMSEPcS0_>
      delay(100);
    3750:	2064      	movs	r0, #100	; 0x64
    3752:	f000 fe13 	bl	437c <delay>
      //GET map
      load_map();
    }

    //Si el contenido del SMS es el código de emergencia
    if (replybuffer[0] == 'C') {
    3756:	782b      	ldrb	r3, [r5, #0]
    3758:	2b43      	cmp	r3, #67	; 0x43
    375a:	d124      	bne.n	37a6 <_Z11process_smsv+0xb6>
      Serial.println("SMS Config");
    375c:	493f      	ldr	r1, [pc, #252]	; (385c <_Z11process_smsv+0x16c>)
    375e:	483d      	ldr	r0, [pc, #244]	; (3854 <_Z11process_smsv+0x164>)
    3760:	f000 fee0 	bl	4524 <_ZN5Print7printlnEPKc>
      fona.sendSMS(sender, "CFG ACK"); //Intentar confirmar al remitente
    3764:	4a3e      	ldr	r2, [pc, #248]	; (3860 <_Z11process_smsv+0x170>)
    3766:	0039      	movs	r1, r7
    3768:	0020      	movs	r0, r4
    376a:	f7fd f9cd 	bl	b08 <_ZN13Adafruit_FONA7sendSMSEPcS0_>
      delay(100);
    376e:	2064      	movs	r0, #100	; 0x64
    3770:	f000 fe04 	bl	437c <delay>
      SD.remove("config.txt");
    3774:	4e3b      	ldr	r6, [pc, #236]	; (3864 <_Z11process_smsv+0x174>)
    3776:	483c      	ldr	r0, [pc, #240]	; (3868 <_Z11process_smsv+0x178>)
    3778:	0031      	movs	r1, r6
    377a:	f7fe fbad 	bl	1ed8 <_ZN5SDLib7SDClass6removeEPKc>
      write_file("config.txt", String(replybuffer));
    377e:	0031      	movs	r1, r6
    3780:	a807      	add	r0, sp, #28
    3782:	f002 fe00 	bl	6386 <_ZN6StringC1EPKc>
    3786:	0029      	movs	r1, r5
    3788:	a804      	add	r0, sp, #16
    378a:	f002 fdfc 	bl	6386 <_ZN6StringC1EPKc>
    378e:	a904      	add	r1, sp, #16
    3790:	a807      	add	r0, sp, #28
    3792:	f7ff fe5b 	bl	344c <_Z10write_file6StringS_>
    3796:	a804      	add	r0, sp, #16
    3798:	f002 fdae 	bl	62f8 <_ZN6StringD1Ev>
    379c:	a807      	add	r0, sp, #28
    379e:	f002 fdab 	bl	62f8 <_ZN6StringD1Ev>
      load_config_params();
    37a2:	f7ff fe93 	bl	34cc <_Z18load_config_paramsv>
    }

    //Si el contenido del SMS es el código de emergencia
    if (replybuffer[0] == 'N') {
    37a6:	782b      	ldrb	r3, [r5, #0]
    37a8:	2b4e      	cmp	r3, #78	; 0x4e
    37aa:	d124      	bne.n	37f6 <_Z11process_smsv+0x106>
      Serial.println("SMS Net");
    37ac:	492f      	ldr	r1, [pc, #188]	; (386c <_Z11process_smsv+0x17c>)
    37ae:	4829      	ldr	r0, [pc, #164]	; (3854 <_Z11process_smsv+0x164>)
    37b0:	f000 feb8 	bl	4524 <_ZN5Print7printlnEPKc>
      fona.sendSMS(sender, "NET ACK"); //Intentar confirmar al remitente
    37b4:	4a2e      	ldr	r2, [pc, #184]	; (3870 <_Z11process_smsv+0x180>)
    37b6:	0039      	movs	r1, r7
    37b8:	0020      	movs	r0, r4
    37ba:	f7fd f9a5 	bl	b08 <_ZN13Adafruit_FONA7sendSMSEPcS0_>
      delay(100);
    37be:	2064      	movs	r0, #100	; 0x64
    37c0:	f000 fddc 	bl	437c <delay>
      SD.remove("net.txt");
    37c4:	4e2b      	ldr	r6, [pc, #172]	; (3874 <_Z11process_smsv+0x184>)
    37c6:	4828      	ldr	r0, [pc, #160]	; (3868 <_Z11process_smsv+0x178>)
    37c8:	0031      	movs	r1, r6
    37ca:	f7fe fb85 	bl	1ed8 <_ZN5SDLib7SDClass6removeEPKc>
      write_file("net.txt", String(replybuffer));
    37ce:	0031      	movs	r1, r6
    37d0:	a807      	add	r0, sp, #28
    37d2:	f002 fdd8 	bl	6386 <_ZN6StringC1EPKc>
    37d6:	0029      	movs	r1, r5
    37d8:	a804      	add	r0, sp, #16
    37da:	f002 fdd4 	bl	6386 <_ZN6StringC1EPKc>
    37de:	a904      	add	r1, sp, #16
    37e0:	a807      	add	r0, sp, #28
    37e2:	f7ff fe33 	bl	344c <_Z10write_file6StringS_>
    37e6:	a804      	add	r0, sp, #16
    37e8:	f002 fd86 	bl	62f8 <_ZN6StringD1Ev>
    37ec:	a807      	add	r0, sp, #28
    37ee:	f002 fd83 	bl	62f8 <_ZN6StringD1Ev>
      load_net_config();
    37f2:	f7ff fecd 	bl	3590 <_Z15load_net_configv>
    }

    //Si el contenido del SMS es el código de emergencia
    if (replybuffer[0] == 'S') {
    37f6:	782b      	ldrb	r3, [r5, #0]
    37f8:	2b53      	cmp	r3, #83	; 0x53
    37fa:	d124      	bne.n	3846 <_Z11process_smsv+0x156>
      Serial.println("SMS Server");
    37fc:	491e      	ldr	r1, [pc, #120]	; (3878 <_Z11process_smsv+0x188>)
    37fe:	4815      	ldr	r0, [pc, #84]	; (3854 <_Z11process_smsv+0x164>)
    3800:	f000 fe90 	bl	4524 <_ZN5Print7printlnEPKc>
      fona.sendSMS(sender, "SRV ACK"); //Intentar confirmar al remitente
    3804:	4a1d      	ldr	r2, [pc, #116]	; (387c <_Z11process_smsv+0x18c>)
    3806:	0039      	movs	r1, r7
    3808:	0020      	movs	r0, r4
    380a:	f7fd f97d 	bl	b08 <_ZN13Adafruit_FONA7sendSMSEPcS0_>
      delay(100);
    380e:	2064      	movs	r0, #100	; 0x64
    3810:	f000 fdb4 	bl	437c <delay>
      SD.remove("srv.txt");
    3814:	4c1a      	ldr	r4, [pc, #104]	; (3880 <_Z11process_smsv+0x190>)
    3816:	4814      	ldr	r0, [pc, #80]	; (3868 <_Z11process_smsv+0x178>)
    3818:	0021      	movs	r1, r4
    381a:	f7fe fb5d 	bl	1ed8 <_ZN5SDLib7SDClass6removeEPKc>
      write_file("srv.txt", String(replybuffer));
    381e:	0021      	movs	r1, r4
    3820:	a807      	add	r0, sp, #28
    3822:	f002 fdb0 	bl	6386 <_ZN6StringC1EPKc>
    3826:	0029      	movs	r1, r5
    3828:	a804      	add	r0, sp, #16
    382a:	f002 fdac 	bl	6386 <_ZN6StringC1EPKc>
    382e:	a904      	add	r1, sp, #16
    3830:	a807      	add	r0, sp, #28
    3832:	f7ff fe0b 	bl	344c <_Z10write_file6StringS_>
    3836:	a804      	add	r0, sp, #16
    3838:	f002 fd5e 	bl	62f8 <_ZN6StringD1Ev>
    383c:	a807      	add	r0, sp, #28
    383e:	f002 fd5b 	bl	62f8 <_ZN6StringD1Ev>
      load_srv_config();
    3842:	f7ff ff01 	bl	3648 <_Z15load_srv_configv>
    }

    break;
  }
}
    3846:	b053      	add	sp, #332	; 0x14c
    3848:	bdf0      	pop	{r4, r5, r6, r7, pc}
    384a:	46c0      	nop			; (mov r8, r8)
    384c:	200004b0 	.word	0x200004b0
    3850:	0000e508 	.word	0x0000e508
    3854:	20000764 	.word	0x20000764
    3858:	0000e50c 	.word	0x0000e50c
    385c:	0000e514 	.word	0x0000e514
    3860:	0000e51f 	.word	0x0000e51f
    3864:	0000e4c9 	.word	0x0000e4c9
    3868:	20000180 	.word	0x20000180
    386c:	0000e527 	.word	0x0000e527
    3870:	0000e52f 	.word	0x0000e52f
    3874:	0000e4e0 	.word	0x0000e4e0
    3878:	0000e537 	.word	0x0000e537
    387c:	0000e542 	.word	0x0000e542
    3880:	0000e4f4 	.word	0x0000e4f4

00003884 <_Z7get_gpsv>:

//Se obtiene una cadena con fecha, latitud, longitud, velocidad, orientación y altitud del dispositivo
String get_gps() {
    3884:	b5f0      	push	{r4, r5, r6, r7, lr}
  Serial.println("Calculando Ubicacion...");
    3886:	4d3c      	ldr	r5, [pc, #240]	; (3978 <_Z7get_gpsv+0xf4>)
    break;
  }
}

//Se obtiene una cadena con fecha, latitud, longitud, velocidad, orientación y altitud del dispositivo
String get_gps() {
    3888:	b09d      	sub	sp, #116	; 0x74
  Serial.println("Calculando Ubicacion...");
    388a:	493c      	ldr	r1, [pc, #240]	; (397c <_Z7get_gpsv+0xf8>)
    break;
  }
}

//Se obtiene una cadena con fecha, latitud, longitud, velocidad, orientación y altitud del dispositivo
String get_gps() {
    388c:	0004      	movs	r4, r0
  Serial.println("Calculando Ubicacion...");
    388e:	0028      	movs	r0, r5
    3890:	f000 fe48 	bl	4524 <_ZN5Print7printlnEPKc>
  float speed_kph, heading, altitude;
  double date;
  boolean gps_success = fona.getGPS(&date, &curr_lat, &curr_lon, &speed_kph, &heading, &altitude);
    3894:	ab09      	add	r3, sp, #36	; 0x24
    3896:	4f3a      	ldr	r7, [pc, #232]	; (3980 <_Z7get_gpsv+0xfc>)
    3898:	4e3a      	ldr	r6, [pc, #232]	; (3984 <_Z7get_gpsv+0x100>)
    389a:	9302      	str	r3, [sp, #8]
    389c:	ab08      	add	r3, sp, #32
    389e:	9301      	str	r3, [sp, #4]
    38a0:	ab07      	add	r3, sp, #28
    38a2:	9300      	str	r3, [sp, #0]
    38a4:	0032      	movs	r2, r6
    38a6:	003b      	movs	r3, r7
    38a8:	a90a      	add	r1, sp, #40	; 0x28
    38aa:	4837      	ldr	r0, [pc, #220]	; (3988 <_Z7get_gpsv+0x104>)
    38ac:	f7fc fdc6 	bl	43c <_ZN13Adafruit_FONA6getGPSEPdPfS1_S1_S1_S1_>
  String msg = "[";
    38b0:	4936      	ldr	r1, [pc, #216]	; (398c <_Z7get_gpsv+0x108>)
//Se obtiene una cadena con fecha, latitud, longitud, velocidad, orientación y altitud del dispositivo
String get_gps() {
  Serial.println("Calculando Ubicacion...");
  float speed_kph, heading, altitude;
  double date;
  boolean gps_success = fona.getGPS(&date, &curr_lat, &curr_lon, &speed_kph, &heading, &altitude);
    38b2:	9005      	str	r0, [sp, #20]
  String msg = "[";
    38b4:	a80d      	add	r0, sp, #52	; 0x34
    38b6:	f002 fd66 	bl	6386 <_ZN6StringC1EPKc>
  if (gps_success) {
    38ba:	9b05      	ldr	r3, [sp, #20]
    38bc:	2b00      	cmp	r3, #0
    38be:	d04c      	beq.n	395a <_Z7get_gpsv+0xd6>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    38c0:	4933      	ldr	r1, [pc, #204]	; (3990 <_Z7get_gpsv+0x10c>)
    38c2:	a813      	add	r0, sp, #76	; 0x4c
    38c4:	f002 fd5f 	bl	6386 <_ZN6StringC1EPKc>
    msg = "{\"fecha\":" + String(date, 0) + ",\"lat\":" + String(curr_lat, 6) + ",\"lon\":" + String(curr_lon, 6) + ",\"vel\":" + speed_kph + ",\"alt\":" + altitude + "}";
    38c8:	2300      	movs	r3, #0
    38ca:	a810      	add	r0, sp, #64	; 0x40
    38cc:	9300      	str	r3, [sp, #0]
    38ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    38d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    38d2:	f002 fdbe 	bl	6452 <_ZN6StringC1Edh>
    38d6:	a910      	add	r1, sp, #64	; 0x40
    38d8:	a813      	add	r0, sp, #76	; 0x4c
    38da:	f002 fe38 	bl	654e <_ZplRK15StringSumHelperRK6String>
    38de:	492d      	ldr	r1, [pc, #180]	; (3994 <_Z7get_gpsv+0x110>)
    38e0:	f002 fe42 	bl	6568 <_ZplRK15StringSumHelperPKc>
    38e4:	0005      	movs	r5, r0
    38e6:	2206      	movs	r2, #6
    38e8:	6831      	ldr	r1, [r6, #0]
    38ea:	a816      	add	r0, sp, #88	; 0x58
    38ec:	f002 fdc9 	bl	6482 <_ZN6StringC1Efh>
    38f0:	a916      	add	r1, sp, #88	; 0x58
    38f2:	0028      	movs	r0, r5
    38f4:	f002 fe2b 	bl	654e <_ZplRK15StringSumHelperRK6String>
    38f8:	4927      	ldr	r1, [pc, #156]	; (3998 <_Z7get_gpsv+0x114>)
    38fa:	f002 fe35 	bl	6568 <_ZplRK15StringSumHelperPKc>
    38fe:	0005      	movs	r5, r0
    3900:	2206      	movs	r2, #6
    3902:	6839      	ldr	r1, [r7, #0]
    3904:	a819      	add	r0, sp, #100	; 0x64
    3906:	f002 fdbc 	bl	6482 <_ZN6StringC1Efh>
    390a:	a919      	add	r1, sp, #100	; 0x64
    390c:	0028      	movs	r0, r5
    390e:	f002 fe1e 	bl	654e <_ZplRK15StringSumHelperRK6String>
    3912:	4922      	ldr	r1, [pc, #136]	; (399c <_Z7get_gpsv+0x118>)
    3914:	f002 fe28 	bl	6568 <_ZplRK15StringSumHelperPKc>
    3918:	9907      	ldr	r1, [sp, #28]
    391a:	f002 fe38 	bl	658e <_ZplRK15StringSumHelperf>
    391e:	4920      	ldr	r1, [pc, #128]	; (39a0 <_Z7get_gpsv+0x11c>)
    3920:	f002 fe22 	bl	6568 <_ZplRK15StringSumHelperPKc>
    3924:	9909      	ldr	r1, [sp, #36]	; 0x24
    3926:	f002 fe32 	bl	658e <_ZplRK15StringSumHelperf>
    392a:	491e      	ldr	r1, [pc, #120]	; (39a4 <_Z7get_gpsv+0x120>)
    392c:	f002 fe1c 	bl	6568 <_ZplRK15StringSumHelperPKc>
    3930:	0001      	movs	r1, r0
    3932:	a80d      	add	r0, sp, #52	; 0x34
    3934:	f002 fd5a 	bl	63ec <_ZN6StringaSERKS_>
    3938:	a819      	add	r0, sp, #100	; 0x64
    393a:	f002 fcdd 	bl	62f8 <_ZN6StringD1Ev>
    393e:	a816      	add	r0, sp, #88	; 0x58
    3940:	f002 fcda 	bl	62f8 <_ZN6StringD1Ev>
    3944:	a810      	add	r0, sp, #64	; 0x40
    3946:	f002 fcd7 	bl	62f8 <_ZN6StringD1Ev>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    394a:	a813      	add	r0, sp, #76	; 0x4c
    394c:	f002 fcd4 	bl	62f8 <_ZN6StringD1Ev>
    return msg;
    3950:	a90d      	add	r1, sp, #52	; 0x34
    3952:	0020      	movs	r0, r4
    3954:	f002 fcc2 	bl	62dc <_ZN6StringC1EOS_>
    3958:	e007      	b.n	396a <_Z7get_gpsv+0xe6>
  } else {
    Serial.println("Error GPS");
    395a:	4913      	ldr	r1, [pc, #76]	; (39a8 <_Z7get_gpsv+0x124>)
    395c:	0028      	movs	r0, r5
    395e:	f000 fde1 	bl	4524 <_ZN5Print7printlnEPKc>
    return "ERROR";
    3962:	4912      	ldr	r1, [pc, #72]	; (39ac <_Z7get_gpsv+0x128>)
    3964:	0020      	movs	r0, r4
    3966:	f002 fd0e 	bl	6386 <_ZN6StringC1EPKc>
String get_gps() {
  Serial.println("Calculando Ubicacion...");
  float speed_kph, heading, altitude;
  double date;
  boolean gps_success = fona.getGPS(&date, &curr_lat, &curr_lon, &speed_kph, &heading, &altitude);
  String msg = "[";
    396a:	a80d      	add	r0, sp, #52	; 0x34
    396c:	f002 fcc4 	bl	62f8 <_ZN6StringD1Ev>
    return msg;
  } else {
    Serial.println("Error GPS");
    return "ERROR";
  }
}
    3970:	0020      	movs	r0, r4
    3972:	b01d      	add	sp, #116	; 0x74
    3974:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3976:	46c0      	nop			; (mov r8, r8)
    3978:	20000764 	.word	0x20000764
    397c:	0000e54a 	.word	0x0000e54a
    3980:	200004ac 	.word	0x200004ac
    3984:	20000418 	.word	0x20000418
    3988:	200004b0 	.word	0x200004b0
    398c:	0000e2d6 	.word	0x0000e2d6
    3990:	0000e562 	.word	0x0000e562
    3994:	0000e56c 	.word	0x0000e56c
    3998:	0000e574 	.word	0x0000e574
    399c:	0000e57c 	.word	0x0000e57c
    39a0:	0000e584 	.word	0x0000e584
    39a4:	0000e58c 	.word	0x0000e58c
    39a8:	0000e58e 	.word	0x0000e58e
    39ac:	0000e598 	.word	0x0000e598

000039b0 <_Z12assert_write6String>:

//Dado un mensaje con los datos del GPS (get_gps), se verifica si se debe escribir en la SD o no
void assert_write(String str) {
    39b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    39b2:	b08d      	sub	sp, #52	; 0x34
    39b4:	9004      	str	r0, [sp, #16]
  if (str.indexOf("ERROR") == -1) {
    39b6:	4949      	ldr	r1, [pc, #292]	; (3adc <_Z12assert_write6String+0x12c>)
    39b8:	a809      	add	r0, sp, #36	; 0x24
    39ba:	f002 fce4 	bl	6386 <_ZN6StringC1EPKc>
    39be:	a909      	add	r1, sp, #36	; 0x24
    39c0:	9804      	ldr	r0, [sp, #16]
    39c2:	f002 fe13 	bl	65ec <_ZNK6String7indexOfERKS_>
    39c6:	0004      	movs	r4, r0
    39c8:	a809      	add	r0, sp, #36	; 0x24
    39ca:	f002 fc95 	bl	62f8 <_ZN6StringD1Ev>
    39ce:	1c63      	adds	r3, r4, #1
    39d0:	d000      	beq.n	39d4 <_Z12assert_write6String+0x24>
    39d2:	e080      	b.n	3ad6 <_Z12assert_write6String+0x126>
    //Cálculo del tiempo transcurrido desde la última escritura
    int elapsed = (int)((t1 - t2) / 1000);
    39d4:	21fa      	movs	r1, #250	; 0xfa
    39d6:	4f42      	ldr	r7, [pc, #264]	; (3ae0 <_Z12assert_write6String+0x130>)
    39d8:	4d42      	ldr	r5, [pc, #264]	; (3ae4 <_Z12assert_write6String+0x134>)
    39da:	683b      	ldr	r3, [r7, #0]
    39dc:	682a      	ldr	r2, [r5, #0]
    39de:	0089      	lsls	r1, r1, #2
    39e0:	1a98      	subs	r0, r3, r2
    39e2:	f003 f863 	bl	6aac <__aeabi_idiv>
    Serial.print("Tiempo transcurrido: ");
    39e6:	4c40      	ldr	r4, [pc, #256]	; (3ae8 <_Z12assert_write6String+0x138>)

//Dado un mensaje con los datos del GPS (get_gps), se verifica si se debe escribir en la SD o no
void assert_write(String str) {
  if (str.indexOf("ERROR") == -1) {
    //Cálculo del tiempo transcurrido desde la última escritura
    int elapsed = (int)((t1 - t2) / 1000);
    39e8:	9002      	str	r0, [sp, #8]
    Serial.print("Tiempo transcurrido: ");
    39ea:	4940      	ldr	r1, [pc, #256]	; (3aec <_Z12assert_write6String+0x13c>)
    39ec:	0020      	movs	r0, r4
    39ee:	f000 fd7e 	bl	44ee <_ZN5Print5printEPKc>
    Serial.println(elapsed);
    39f2:	220a      	movs	r2, #10
    39f4:	9902      	ldr	r1, [sp, #8]
    39f6:	0020      	movs	r0, r4
    39f8:	f000 fe03 	bl	4602 <_ZN5Print7printlnEii>
    if (( abs(curr_lat - last_lat) > los || abs(curr_lon - last_lon) > los) || elapsed > time_trig) {
    39fc:	4e3c      	ldr	r6, [pc, #240]	; (3af0 <_Z12assert_write6String+0x140>)
    39fe:	6833      	ldr	r3, [r6, #0]
    3a00:	9303      	str	r3, [sp, #12]
    3a02:	4b3c      	ldr	r3, [pc, #240]	; (3af4 <_Z12assert_write6String+0x144>)
    3a04:	9803      	ldr	r0, [sp, #12]
    3a06:	6819      	ldr	r1, [r3, #0]
    3a08:	f003 fd0c 	bl	7424 <__aeabi_fsub>
    3a0c:	2100      	movs	r1, #0
    3a0e:	1c04      	adds	r4, r0, #0
    3a10:	f003 f99c 	bl	6d4c <__aeabi_fcmpgt>
    3a14:	9605      	str	r6, [sp, #20]
    3a16:	2800      	cmp	r0, #0
    3a18:	d102      	bne.n	3a20 <_Z12assert_write6String+0x70>
    3a1a:	2380      	movs	r3, #128	; 0x80
    3a1c:	061b      	lsls	r3, r3, #24
    3a1e:	18e4      	adds	r4, r4, r3
    3a20:	4b35      	ldr	r3, [pc, #212]	; (3af8 <_Z12assert_write6String+0x148>)
    3a22:	1c21      	adds	r1, r4, #0
    3a24:	681e      	ldr	r6, [r3, #0]
    3a26:	1c30      	adds	r0, r6, #0
    3a28:	f003 f97c 	bl	6d24 <__aeabi_fcmplt>
    3a2c:	2800      	cmp	r0, #0
    3a2e:	d119      	bne.n	3a64 <_Z12assert_write6String+0xb4>
    3a30:	4b32      	ldr	r3, [pc, #200]	; (3afc <_Z12assert_write6String+0x14c>)
    3a32:	6819      	ldr	r1, [r3, #0]
    3a34:	4b32      	ldr	r3, [pc, #200]	; (3b00 <_Z12assert_write6String+0x150>)
    3a36:	6818      	ldr	r0, [r3, #0]
    3a38:	f003 fcf4 	bl	7424 <__aeabi_fsub>
    3a3c:	2100      	movs	r1, #0
    3a3e:	1c04      	adds	r4, r0, #0
    3a40:	f003 f984 	bl	6d4c <__aeabi_fcmpgt>
    3a44:	2800      	cmp	r0, #0
    3a46:	d102      	bne.n	3a4e <_Z12assert_write6String+0x9e>
    3a48:	2380      	movs	r3, #128	; 0x80
    3a4a:	061b      	lsls	r3, r3, #24
    3a4c:	18e4      	adds	r4, r4, r3
    3a4e:	1c21      	adds	r1, r4, #0
    3a50:	1c30      	adds	r0, r6, #0
    3a52:	f003 f967 	bl	6d24 <__aeabi_fcmplt>
    3a56:	2800      	cmp	r0, #0
    3a58:	d104      	bne.n	3a64 <_Z12assert_write6String+0xb4>
    3a5a:	4b2a      	ldr	r3, [pc, #168]	; (3b04 <_Z12assert_write6String+0x154>)
    3a5c:	9a02      	ldr	r2, [sp, #8]
    3a5e:	881b      	ldrh	r3, [r3, #0]
    3a60:	429a      	cmp	r2, r3
    3a62:	dd38      	ble.n	3ad6 <_Z12assert_write6String+0x126>
      last_lat = curr_lat;
    3a64:	4b23      	ldr	r3, [pc, #140]	; (3af4 <_Z12assert_write6String+0x144>)
    3a66:	9a03      	ldr	r2, [sp, #12]
      last_lon = curr_lon;
    3a68:	4c25      	ldr	r4, [pc, #148]	; (3b00 <_Z12assert_write6String+0x150>)
    //Cálculo del tiempo transcurrido desde la última escritura
    int elapsed = (int)((t1 - t2) / 1000);
    Serial.print("Tiempo transcurrido: ");
    Serial.println(elapsed);
    if (( abs(curr_lat - last_lat) > los || abs(curr_lon - last_lon) > los) || elapsed > time_trig) {
      last_lat = curr_lat;
    3a6a:	601a      	str	r2, [r3, #0]
      last_lon = curr_lon;
    3a6c:	6822      	ldr	r2, [r4, #0]
    3a6e:	4b23      	ldr	r3, [pc, #140]	; (3afc <_Z12assert_write6String+0x14c>)
    3a70:	601a      	str	r2, [r3, #0]
      t1 = t2;
    3a72:	682b      	ldr	r3, [r5, #0]
    3a74:	603b      	str	r3, [r7, #0]
      t2 = millis();
    3a76:	f000 fc7b 	bl	4370 <millis>
      write_file("log.txt", str);
    3a7a:	4923      	ldr	r1, [pc, #140]	; (3b08 <_Z12assert_write6String+0x158>)
    Serial.println(elapsed);
    if (( abs(curr_lat - last_lat) > los || abs(curr_lon - last_lon) > los) || elapsed > time_trig) {
      last_lat = curr_lat;
      last_lon = curr_lon;
      t1 = t2;
      t2 = millis();
    3a7c:	6028      	str	r0, [r5, #0]
      write_file("log.txt", str);
    3a7e:	a806      	add	r0, sp, #24
    3a80:	f002 fc81 	bl	6386 <_ZN6StringC1EPKc>
    3a84:	9904      	ldr	r1, [sp, #16]
    3a86:	a809      	add	r0, sp, #36	; 0x24
    3a88:	f002 fcc0 	bl	640c <_ZN6StringC1ERKS_>
    3a8c:	a909      	add	r1, sp, #36	; 0x24
    3a8e:	a806      	add	r0, sp, #24
    3a90:	f7ff fcdc 	bl	344c <_Z10write_file6StringS_>
    3a94:	a809      	add	r0, sp, #36	; 0x24
    3a96:	f002 fc2f 	bl	62f8 <_ZN6StringD1Ev>
    3a9a:	a806      	add	r0, sp, #24
    3a9c:	f002 fc2c 	bl	62f8 <_ZN6StringD1Ev>
      test_points = remora_gis.nearest_points(curr_lat, curr_lon, los);
    3aa0:	4b15      	ldr	r3, [pc, #84]	; (3af8 <_Z12assert_write6String+0x148>)
    3aa2:	9a05      	ldr	r2, [sp, #20]
    3aa4:	681b      	ldr	r3, [r3, #0]
    3aa6:	4919      	ldr	r1, [pc, #100]	; (3b0c <_Z12assert_write6String+0x15c>)
    3aa8:	9300      	str	r3, [sp, #0]
    3aaa:	6823      	ldr	r3, [r4, #0]
    3aac:	6812      	ldr	r2, [r2, #0]
    3aae:	a809      	add	r0, sp, #36	; 0x24
    3ab0:	f7fd ffdc 	bl	1a6c <_ZN8Quadtree14nearest_pointsEfff>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    3ab4:	4b16      	ldr	r3, [pc, #88]	; (3b10 <_Z12assert_write6String+0x160>)
      __a = _GLIBCXX_MOVE(__b);
    3ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    3ab8:	6818      	ldr	r0, [r3, #0]
      __a = _GLIBCXX_MOVE(__b);
    3aba:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    3abc:	2200      	movs	r2, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    3abe:	990a      	ldr	r1, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
    3ac0:	9209      	str	r2, [sp, #36]	; 0x24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    3ac2:	6059      	str	r1, [r3, #4]
    3ac4:	990b      	ldr	r1, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
    3ac6:	920a      	str	r2, [sp, #40]	; 0x28
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
    3ac8:	6099      	str	r1, [r3, #8]
      __b = _GLIBCXX_MOVE(__tmp);
    3aca:	920b      	str	r2, [sp, #44]	; 0x2c
	  }
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    3acc:	f7ff fb90 	bl	31f0 <_ZNSt12_Vector_baseI4DataSaIS0_EE13_M_deallocateEPS0_j.isra.16>
    3ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
    3ad2:	f7ff fb8d 	bl	31f0 <_ZNSt12_Vector_baseI4DataSaIS0_EE13_M_deallocateEPS0_j.isra.16>
    }
  }
}
    3ad6:	b00d      	add	sp, #52	; 0x34
    3ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ada:	46c0      	nop			; (mov r8, r8)
    3adc:	0000e598 	.word	0x0000e598
    3ae0:	20000450 	.word	0x20000450
    3ae4:	20000454 	.word	0x20000454
    3ae8:	20000764 	.word	0x20000764
    3aec:	0000e59e 	.word	0x0000e59e
    3af0:	20000418 	.word	0x20000418
    3af4:	20000654 	.word	0x20000654
    3af8:	20000014 	.word	0x20000014
    3afc:	200005e0 	.word	0x200005e0
    3b00:	200004ac 	.word	0x200004ac
    3b04:	20000010 	.word	0x20000010
    3b08:	0000e5b4 	.word	0x0000e5b4
    3b0c:	2000041c 	.word	0x2000041c
    3b10:	20000444 	.word	0x20000444

00003b14 <_Z9em_beaconv>:
  }

}

//Envía señal de emergencia a través de red Iridium
void em_beacon() {
    3b14:	b530      	push	{r4, r5, lr}
  //Enviar a servidor a través de rockBLOCK
  char coord[12];
  char str[24];
  dtostrf(curr_lat, 11, 6, coord);
    3b16:	4b16      	ldr	r3, [pc, #88]	; (3b70 <_Z9em_beaconv+0x5c>)
  }

}

//Envía señal de emergencia a través de red Iridium
void em_beacon() {
    3b18:	b08d      	sub	sp, #52	; 0x34
  //Enviar a servidor a través de rockBLOCK
  char coord[12];
  char str[24];
  dtostrf(curr_lat, 11, 6, coord);
    3b1a:	ad03      	add	r5, sp, #12
    3b1c:	6818      	ldr	r0, [r3, #0]
    3b1e:	f005 fbfb 	bl	9318 <__aeabi_f2d>
  strcpy(str, coord);
    3b22:	ac06      	add	r4, sp, #24
//Envía señal de emergencia a través de red Iridium
void em_beacon() {
  //Enviar a servidor a través de rockBLOCK
  char coord[12];
  char str[24];
  dtostrf(curr_lat, 11, 6, coord);
    3b24:	220b      	movs	r2, #11
    3b26:	9500      	str	r5, [sp, #0]
    3b28:	2306      	movs	r3, #6
    3b2a:	f000 fbc9 	bl	42c0 <dtostrf>
  strcpy(str, coord);
    3b2e:	0029      	movs	r1, r5
    3b30:	0020      	movs	r0, r4
    3b32:	f006 fc68 	bl	a406 <strcpy>
  str[11] = ',';
    3b36:	232c      	movs	r3, #44	; 0x2c
    3b38:	72e3      	strb	r3, [r4, #11]
  dtostrf(curr_lon, 11, 6, coord);
    3b3a:	4b0e      	ldr	r3, [pc, #56]	; (3b74 <_Z9em_beaconv+0x60>)
    3b3c:	6818      	ldr	r0, [r3, #0]
    3b3e:	f005 fbeb 	bl	9318 <__aeabi_f2d>
    3b42:	2306      	movs	r3, #6
    3b44:	220b      	movs	r2, #11
    3b46:	9500      	str	r5, [sp, #0]
    3b48:	f000 fbba 	bl	42c0 <dtostrf>
  strcat(str, coord);
    3b4c:	0029      	movs	r1, r5
    3b4e:	0020      	movs	r0, r4
    3b50:	f006 fc34 	bl	a3bc <strcat>
  isbd.begin();
    3b54:	4d08      	ldr	r5, [pc, #32]	; (3b78 <_Z9em_beaconv+0x64>)
    3b56:	0028      	movs	r0, r5
    3b58:	f7fd fbd4 	bl	1304 <_ZN10IridiumSBD5beginEv>
  Serial.println(str);
    3b5c:	0021      	movs	r1, r4
    3b5e:	4807      	ldr	r0, [pc, #28]	; (3b7c <_Z9em_beaconv+0x68>)
    3b60:	f000 fce0 	bl	4524 <_ZN5Print7printlnEPKc>
    if (err != 0)
    {
    Serial.print("sendSBDText failed: error ");
    Serial.println(err);
    }*/
  isbd.sleep();
    3b64:	0028      	movs	r0, r5
    3b66:	f7fd fc0f 	bl	1388 <_ZN10IridiumSBD5sleepEv>

}
    3b6a:	b00d      	add	sp, #52	; 0x34
    3b6c:	bd30      	pop	{r4, r5, pc}
    3b6e:	46c0      	nop			; (mov r8, r8)
    3b70:	20000418 	.word	0x20000418
    3b74:	200004ac 	.word	0x200004ac
    3b78:	20000458 	.word	0x20000458
    3b7c:	20000764 	.word	0x20000764

00003b80 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIP4DataS4_EET0_T_S6_S5_>:
  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
    3b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    3b82:	1a09      	subs	r1, r1, r0
    3b84:	4c0c      	ldr	r4, [pc, #48]	; (3bb8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIP4DataS4_EET0_T_S6_S5_+0x38>)
    3b86:	1089      	asrs	r1, r1, #2
    3b88:	434c      	muls	r4, r1
  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
    3b8a:	0005      	movs	r5, r0
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    3b8c:	0026      	movs	r6, r4
    3b8e:	0017      	movs	r7, r2
  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
    3b90:	9201      	str	r2, [sp, #4]
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    3b92:	2e00      	cmp	r6, #0
    3b94:	dd08      	ble.n	3ba8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIP4DataS4_EET0_T_S6_S5_+0x28>
	    {
	      *__result = *__first;
    3b96:	0029      	movs	r1, r5
    3b98:	0038      	movs	r0, r7
    3b9a:	220a      	movs	r2, #10
    3b9c:	f005 fd53 	bl	9646 <memcpy>
	      ++__first;
    3ba0:	350c      	adds	r5, #12
	      ++__result;
    3ba2:	370c      	adds	r7, #12
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    3ba4:	3e01      	subs	r6, #1
    3ba6:	e7f4      	b.n	3b92 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIP4DataS4_EET0_T_S6_S5_+0x12>
	    {
	      *__result = *__first;
	      ++__first;
	      ++__result;
	    }
	  return __result;
    3ba8:	43e0      	mvns	r0, r4
    3baa:	230c      	movs	r3, #12
    3bac:	17c0      	asrs	r0, r0, #31
    3bae:	4020      	ands	r0, r4
    3bb0:	4358      	muls	r0, r3
    3bb2:	9b01      	ldr	r3, [sp, #4]
    3bb4:	1818      	adds	r0, r3, r0
	}
    3bb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3bb8:	aaaaaaab 	.word	0xaaaaaaab

00003bbc <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    3bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3bbe:	0006      	movs	r6, r0
    3bc0:	1e0c      	subs	r4, r1, #0
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
    3bc2:	4284      	cmp	r4, r0
    3bc4:	d05e      	beq.n	3c84 <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_+0xc8>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    3bc6:	684b      	ldr	r3, [r1, #4]
    3bc8:	680d      	ldr	r5, [r1, #0]
    3bca:	4a2f      	ldr	r2, [pc, #188]	; (3c88 <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_+0xcc>)
    3bcc:	1b5f      	subs	r7, r3, r5
    3bce:	9301      	str	r3, [sp, #4]
    3bd0:	10bb      	asrs	r3, r7, #2
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
    3bd2:	6881      	ldr	r1, [r0, #8]
    3bd4:	4353      	muls	r3, r2
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
    3bd6:	6802      	ldr	r2, [r0, #0]
    3bd8:	482b      	ldr	r0, [pc, #172]	; (3c88 <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_+0xcc>)
    3bda:	1a89      	subs	r1, r1, r2
    3bdc:	1089      	asrs	r1, r1, #2
    3bde:	4341      	muls	r1, r0
    3be0:	428b      	cmp	r3, r1
    3be2:	d925      	bls.n	3c30 <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_+0x74>

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    3be4:	2b00      	cmp	r3, #0
    3be6:	d009      	beq.n	3bfc <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_+0x40>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
    3be8:	4a28      	ldr	r2, [pc, #160]	; (3c8c <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_+0xd0>)
    3bea:	4293      	cmp	r3, r2
    3bec:	d901      	bls.n	3bf2 <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_+0x36>
	  std::__throw_bad_alloc();
    3bee:	f7fd fc6e 	bl	14ce <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    3bf2:	0038      	movs	r0, r7
    3bf4:	f000 fc46 	bl	4484 <_Znwj>
    3bf8:	0004      	movs	r4, r0
    3bfa:	e000      	b.n	3bfe <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_+0x42>
    3bfc:	001c      	movs	r4, r3
    3bfe:	46ac      	mov	ip, r5
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
    3c00:	9400      	str	r4, [sp, #0]
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
    3c02:	9a01      	ldr	r2, [sp, #4]
    3c04:	4562      	cmp	r2, ip
    3c06:	d00c      	beq.n	3c22 <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_+0x66>
    3c08:	9b00      	ldr	r3, [sp, #0]
    3c0a:	2b00      	cmp	r3, #0
    3c0c:	d003      	beq.n	3c16 <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_+0x5a>
    3c0e:	001a      	movs	r2, r3
    3c10:	4661      	mov	r1, ip
    3c12:	c929      	ldmia	r1!, {r0, r3, r5}
    3c14:	c229      	stmia	r2!, {r0, r3, r5}
    3c16:	9b00      	ldr	r3, [sp, #0]
    3c18:	330c      	adds	r3, #12
    3c1a:	9300      	str	r3, [sp, #0]
    3c1c:	230c      	movs	r3, #12
    3c1e:	449c      	add	ip, r3
    3c20:	e7ef      	b.n	3c02 <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_+0x46>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
    3c22:	6830      	ldr	r0, [r6, #0]
    3c24:	f7ff fae4 	bl	31f0 <_ZNSt12_Vector_baseI4DataSaIS0_EE13_M_deallocateEPS0_j.isra.16>
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
    3c28:	6034      	str	r4, [r6, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
    3c2a:	19e4      	adds	r4, r4, r7
    3c2c:	60b4      	str	r4, [r6, #8]
    3c2e:	e026      	b.n	3c7e <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_+0xc2>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    3c30:	6871      	ldr	r1, [r6, #4]
    3c32:	1a89      	subs	r1, r1, r2
	    }
	  else if (size() >= __xlen)
    3c34:	1088      	asrs	r0, r1, #2
    3c36:	9100      	str	r1, [sp, #0]
    3c38:	4913      	ldr	r1, [pc, #76]	; (3c88 <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_+0xcc>)
    3c3a:	4348      	muls	r0, r1
    3c3c:	4283      	cmp	r3, r0
    3c3e:	d804      	bhi.n	3c4a <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_+0x8e>
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
	                      _Category>::__copy_m(__first, __last, __result);
    3c40:	9901      	ldr	r1, [sp, #4]
    3c42:	0028      	movs	r0, r5
    3c44:	f7ff ff9c 	bl	3b80 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIP4DataS4_EET0_T_S6_S5_>
    3c48:	e019      	b.n	3c7e <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_+0xc2>
    3c4a:	9b00      	ldr	r3, [sp, #0]
    3c4c:	0028      	movs	r0, r5
    3c4e:	18e9      	adds	r1, r5, r3
    3c50:	f7ff ff96 	bl	3b80 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIP4DataS4_EET0_T_S6_S5_>
    3c54:	6872      	ldr	r2, [r6, #4]
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
    3c56:	6833      	ldr	r3, [r6, #0]
    3c58:	6821      	ldr	r1, [r4, #0]
    3c5a:	1ad3      	subs	r3, r2, r3
    3c5c:	18cb      	adds	r3, r1, r3
    3c5e:	469c      	mov	ip, r3
    3c60:	6863      	ldr	r3, [r4, #4]
    3c62:	9300      	str	r3, [sp, #0]
    3c64:	9b00      	ldr	r3, [sp, #0]
    3c66:	459c      	cmp	ip, r3
    3c68:	d009      	beq.n	3c7e <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_+0xc2>
    3c6a:	2a00      	cmp	r2, #0
    3c6c:	d003      	beq.n	3c76 <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_+0xba>
    3c6e:	0010      	movs	r0, r2
    3c70:	4664      	mov	r4, ip
    3c72:	cc2a      	ldmia	r4!, {r1, r3, r5}
    3c74:	c02a      	stmia	r0!, {r1, r3, r5}
    3c76:	230c      	movs	r3, #12
    3c78:	449c      	add	ip, r3
    3c7a:	18d2      	adds	r2, r2, r3
    3c7c:	e7f2      	b.n	3c64 <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_+0xa8>
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
    3c7e:	6833      	ldr	r3, [r6, #0]
    3c80:	19df      	adds	r7, r3, r7
    3c82:	6077      	str	r7, [r6, #4]
	}
      return *this;
    }
    3c84:	0030      	movs	r0, r6
    3c86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3c88:	aaaaaaab 	.word	0xaaaaaaab
    3c8c:	15555555 	.word	0x15555555

00003c90 <_GLOBAL__sub_I_sdSPI>:
    Serial.println("VIOLACION DE AREA");
    //Encender alarma
  }

  delay(delay_sec * 1000);
}
    3c90:	b5f0      	push	{r4, r5, r6, r7, lr}

//=========================SERCOM==============================

//Se instancian los puertos SPI y UART a partir de los SERCOM del SAMD21
//Ver https://learn.adafruit.com/using-atsamd21-sercom-to-add-more-spi-i2c-serial-ports
SPIClass sdSPI (&sercom1, 12, 13, 11, SPI_PAD_0_SCK_1, SERCOM_RX_PAD_3);
    3c92:	230b      	movs	r3, #11
    3c94:	2503      	movs	r5, #3
    3c96:	2400      	movs	r4, #0
Uart Serial2 (&sercom2, 3, 4, SERCOM_RX_PAD_1, UART_TX_PAD_0);
    3c98:	2601      	movs	r6, #1
    Serial.println("VIOLACION DE AREA");
    //Encender alarma
  }

  delay(delay_sec * 1000);
}
    3c9a:	b087      	sub	sp, #28

//=========================SERCOM==============================

//Se instancian los puertos SPI y UART a partir de los SERCOM del SAMD21
//Ver https://learn.adafruit.com/using-atsamd21-sercom-to-add-more-spi-i2c-serial-ports
SPIClass sdSPI (&sercom1, 12, 13, 11, SPI_PAD_0_SCK_1, SERCOM_RX_PAD_3);
    3c9c:	9401      	str	r4, [sp, #4]
    3c9e:	9300      	str	r3, [sp, #0]
    3ca0:	220c      	movs	r2, #12
    3ca2:	3302      	adds	r3, #2
    3ca4:	494a      	ldr	r1, [pc, #296]	; (3dd0 <_GLOBAL__sub_I_sdSPI+0x140>)
    3ca6:	9502      	str	r5, [sp, #8]
    3ca8:	484a      	ldr	r0, [pc, #296]	; (3dd4 <_GLOBAL__sub_I_sdSPI+0x144>)
    3caa:	f7ff f9c5 	bl	3038 <_ZN8SPIClassC1EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>
Uart Serial2 (&sercom2, 3, 4, SERCOM_RX_PAD_1, UART_TX_PAD_0);
    3cae:	9401      	str	r4, [sp, #4]
    3cb0:	2304      	movs	r3, #4
    3cb2:	002a      	movs	r2, r5
    3cb4:	4948      	ldr	r1, [pc, #288]	; (3dd8 <_GLOBAL__sub_I_sdSPI+0x148>)
    3cb6:	9600      	str	r6, [sp, #0]
    3cb8:	4848      	ldr	r0, [pc, #288]	; (3ddc <_GLOBAL__sub_I_sdSPI+0x14c>)
    3cba:	f001 f847 	bl	4d4c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial3 (&sercom0, 9, 8, SERCOM_RX_PAD_3, UART_TX_PAD_2);
    3cbe:	4c48      	ldr	r4, [pc, #288]	; (3de0 <_GLOBAL__sub_I_sdSPI+0x150>)
    3cc0:	2308      	movs	r3, #8
    3cc2:	2209      	movs	r2, #9
    3cc4:	4947      	ldr	r1, [pc, #284]	; (3de4 <_GLOBAL__sub_I_sdSPI+0x154>)
    3cc6:	9601      	str	r6, [sp, #4]
    3cc8:	9500      	str	r5, [sp, #0]
    3cca:	0020      	movs	r0, r4
    3ccc:	f001 f83e 	bl	4d4c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
struct Point
{
    float x, y;

    Point(float pos_x = 0.0f, float pos_y = 0.0f){
        x = pos_x;
    3cd0:	2100      	movs	r1, #0
    3cd2:	4a45      	ldr	r2, [pc, #276]	; (3de8 <_GLOBAL__sub_I_sdSPI+0x158>)
    3cd4:	9405      	str	r4, [sp, #20]
    3cd6:	1d13      	adds	r3, r2, #4
    3cd8:	3264      	adds	r2, #100	; 0x64
    3cda:	1f18      	subs	r0, r3, #4
    3cdc:	6001      	str	r1, [r0, #0]
        y = pos_y;
    3cde:	6019      	str	r1, [r3, #0]
        return false;
    }

    Boundary(float pos_x = 0.0f, float pos_y = 0.0f, float h_size = 0.0f){
        centre = Point(pos_x, pos_y);
        half_size = h_size;
    3ce0:	6059      	str	r1, [r3, #4]
    3ce2:	330c      	adds	r3, #12
//ID del dispositivo
const unsigned int id = 12345u;
//cantidad de archivos de mapa
uint8_t curr_map_file = 0;
//Area archivo
Boundary map_part[8];  //map_part[n] = Boundary(lon, lat, h_size);
    3ce4:	4293      	cmp	r3, r2
    3ce6:	d1f8      	bne.n	3cda <_GLOBAL__sub_I_sdSPI+0x4a>
//Variables auxiliares para cálculo de tiempo
long t1;
long t2 = 0;

//Estructura de datos para determinación de zona más cercana
Quadtree remora_gis = Quadtree();
    3ce8:	4c40      	ldr	r4, [pc, #256]	; (3dec <_GLOBAL__sub_I_sdSPI+0x15c>)
    3cea:	0020      	movs	r0, r4
    3cec:	f7fd fbf0 	bl	14d0 <_ZN8QuadtreeC1Ev>
    3cf0:	0020      	movs	r0, r4
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
    3cf2:	2400      	movs	r4, #0
    3cf4:	4d3e      	ldr	r5, [pc, #248]	; (3df0 <_GLOBAL__sub_I_sdSPI+0x160>)
    3cf6:	493f      	ldr	r1, [pc, #252]	; (3df4 <_GLOBAL__sub_I_sdSPI+0x164>)
    3cf8:	002a      	movs	r2, r5
    3cfa:	f002 fda3 	bl	6844 <__aeabi_atexit>
    3cfe:	483e      	ldr	r0, [pc, #248]	; (3df8 <_GLOBAL__sub_I_sdSPI+0x168>)
vector<Data> test_points;
    3d00:	002a      	movs	r2, r5
    3d02:	6004      	str	r4, [r0, #0]
    3d04:	6044      	str	r4, [r0, #4]
    3d06:	6084      	str	r4, [r0, #8]
    3d08:	493c      	ldr	r1, [pc, #240]	; (3dfc <_GLOBAL__sub_I_sdSPI+0x16c>)
    3d0a:	f002 fd9b 	bl	6844 <__aeabi_atexit>
uint8_t delay_sec = 10;
bool em_mode = 0;


//========================PENDIENTE======================
String net_apn = "";
    3d0e:	4f3c      	ldr	r7, [pc, #240]	; (3e00 <_GLOBAL__sub_I_sdSPI+0x170>)
    3d10:	483c      	ldr	r0, [pc, #240]	; (3e04 <_GLOBAL__sub_I_sdSPI+0x174>)
    3d12:	0039      	movs	r1, r7
    3d14:	f002 fb37 	bl	6386 <_ZN6StringC1EPKc>
    3d18:	4e3b      	ldr	r6, [pc, #236]	; (3e08 <_GLOBAL__sub_I_sdSPI+0x178>)
    3d1a:	002a      	movs	r2, r5
    3d1c:	0031      	movs	r1, r6
    3d1e:	4839      	ldr	r0, [pc, #228]	; (3e04 <_GLOBAL__sub_I_sdSPI+0x174>)
    3d20:	f002 fd90 	bl	6844 <__aeabi_atexit>
String net_usr = "";
    3d24:	0039      	movs	r1, r7
    3d26:	4839      	ldr	r0, [pc, #228]	; (3e0c <_GLOBAL__sub_I_sdSPI+0x17c>)
    3d28:	f002 fb2d 	bl	6386 <_ZN6StringC1EPKc>
    3d2c:	002a      	movs	r2, r5
    3d2e:	0031      	movs	r1, r6
    3d30:	4836      	ldr	r0, [pc, #216]	; (3e0c <_GLOBAL__sub_I_sdSPI+0x17c>)
    3d32:	f002 fd87 	bl	6844 <__aeabi_atexit>
String net_pass = "";
    3d36:	0039      	movs	r1, r7
    3d38:	4835      	ldr	r0, [pc, #212]	; (3e10 <_GLOBAL__sub_I_sdSPI+0x180>)
    3d3a:	f002 fb24 	bl	6386 <_ZN6StringC1EPKc>
    3d3e:	002a      	movs	r2, r5
    3d40:	0031      	movs	r1, r6
    3d42:	4833      	ldr	r0, [pc, #204]	; (3e10 <_GLOBAL__sub_I_sdSPI+0x180>)
    3d44:	f002 fd7e 	bl	6844 <__aeabi_atexit>

String get_url = "";
    3d48:	0039      	movs	r1, r7
    3d4a:	4832      	ldr	r0, [pc, #200]	; (3e14 <_GLOBAL__sub_I_sdSPI+0x184>)
    3d4c:	f002 fb1b 	bl	6386 <_ZN6StringC1EPKc>
    3d50:	002a      	movs	r2, r5
    3d52:	0031      	movs	r1, r6
    3d54:	482f      	ldr	r0, [pc, #188]	; (3e14 <_GLOBAL__sub_I_sdSPI+0x184>)
    3d56:	f002 fd75 	bl	6844 <__aeabi_atexit>
String post_url = "";
    3d5a:	0039      	movs	r1, r7
    3d5c:	482e      	ldr	r0, [pc, #184]	; (3e18 <_GLOBAL__sub_I_sdSPI+0x188>)
    3d5e:	f002 fb12 	bl	6386 <_ZN6StringC1EPKc>
    3d62:	002a      	movs	r2, r5
    3d64:	0031      	movs	r1, r6
    3d66:	482c      	ldr	r0, [pc, #176]	; (3e18 <_GLOBAL__sub_I_sdSPI+0x188>)
    3d68:	f002 fd6c 	bl	6844 <__aeabi_atexit>

//===========================Setup================================

//Se asigna Serial2 como puerto de comunicación para FONA y se inicializa
HardwareSerial *fonaSerial = &Serial2;
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
    3d6c:	210a      	movs	r1, #10
    3d6e:	482b      	ldr	r0, [pc, #172]	; (3e1c <_GLOBAL__sub_I_sdSPI+0x18c>)
    3d70:	f7fc f9f4 	bl	15c <_ZN13Adafruit_FONAC1Ea>
      sleepPin(sleepPinNo),
      minimumCSQ(ISBD_DEFAULT_CSQ_MINIMUM),
      useWorkaround(true),
      lastPowerOnTime(0UL),
      diag(this, true),
      cons(this, false)
    3d74:	4b2a      	ldr	r3, [pc, #168]	; (3e20 <_GLOBAL__sub_I_sdSPI+0x190>)
    3d76:	9a05      	ldr	r2, [sp, #20]
   private:
      bool diags;
      IridiumSBD *isbd;
   public:
//      StreamShim(Stream *s, void(*f)(char c) __attribute__((weak))) : stream(s), callback(f) {}
      StreamShim(IridiumSBD *isbd, bool d) : isbd(isbd), diags(d) {}
    3d78:	2101      	movs	r1, #1
      sleepPin(sleepPinNo),
      minimumCSQ(ISBD_DEFAULT_CSQ_MINIMUM),
      useWorkaround(true),
      lastPowerOnTime(0UL),
      diag(this, true),
      cons(this, false)
    3d7a:	601a      	str	r2, [r3, #0]
   private:
      bool diags;
      IridiumSBD *isbd;
   public:
//      StreamShim(Stream *s, void(*f)(char c) __attribute__((weak))) : stream(s), callback(f) {}
      StreamShim(IridiumSBD *isbd, bool d) : isbd(isbd), diags(d) {}
    3d7c:	4a29      	ldr	r2, [pc, #164]	; (3e24 <_GLOBAL__sub_I_sdSPI+0x194>)
      sleepPin(sleepPinNo),
      minimumCSQ(ISBD_DEFAULT_CSQ_MINIMUM),
      useWorkaround(true),
      lastPowerOnTime(0UL),
      diag(this, true),
      cons(this, false)
    3d7e:	2011      	movs	r0, #17
   private:
      bool diags;
      IridiumSBD *isbd;
   public:
//      StreamShim(Stream *s, void(*f)(char c) __attribute__((weak))) : stream(s), callback(f) {}
      StreamShim(IridiumSBD *isbd, bool d) : isbd(isbd), diags(d) {}
    3d80:	60da      	str	r2, [r3, #12]
    3d82:	61da      	str	r2, [r3, #28]
    3d84:	1d5a      	adds	r2, r3, #5
    3d86:	77d4      	strb	r4, [r2, #31]
      sleepPin(sleepPinNo),
      minimumCSQ(ISBD_DEFAULT_CSQ_MINIMUM),
      useWorkaround(true),
      lastPowerOnTime(0UL),
      diag(this, true),
      cons(this, false)
    3d88:	220a      	movs	r2, #10
    3d8a:	62da      	str	r2, [r3, #44]	; 0x2c
    3d8c:	3214      	adds	r2, #20
    3d8e:	631a      	str	r2, [r3, #48]	; 0x30
    3d90:	635a      	str	r2, [r3, #52]	; 0x34
    3d92:	320f      	adds	r2, #15
    3d94:	32ff      	adds	r2, #255	; 0xff
    3d96:	639a      	str	r2, [r3, #56]	; 0x38
    3d98:	3a2e      	subs	r2, #46	; 0x2e
    3d9a:	3aff      	subs	r2, #255	; 0xff
    3d9c:	63da      	str	r2, [r3, #60]	; 0x3c
    3d9e:	001a      	movs	r2, r3
    3da0:	3240      	adds	r2, #64	; 0x40
    3da2:	7011      	strb	r1, [r2, #0]
    3da4:	001a      	movs	r2, r3
    3da6:	3241      	adds	r2, #65	; 0x41
    3da8:	7014      	strb	r4, [r2, #0]
    3daa:	2202      	movs	r2, #2
    3dac:	649a      	str	r2, [r3, #72]	; 0x48
    3dae:	001a      	movs	r2, r3
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3db0:	611c      	str	r4, [r3, #16]
    3db2:	324c      	adds	r2, #76	; 0x4c
   private:
      bool diags;
      IridiumSBD *isbd;
   public:
//      StreamShim(Stream *s, void(*f)(char c) __attribute__((weak))) : stream(s), callback(f) {}
      StreamShim(IridiumSBD *isbd, bool d) : isbd(isbd), diags(d) {}
    3db4:	7519      	strb	r1, [r3, #20]
    3db6:	619b      	str	r3, [r3, #24]
    3db8:	621c      	str	r4, [r3, #32]
    3dba:	629b      	str	r3, [r3, #40]	; 0x28
      sleepPin(sleepPinNo),
      minimumCSQ(ISBD_DEFAULT_CSQ_MINIMUM),
      useWorkaround(true),
      lastPowerOnTime(0UL),
      diag(this, true),
      cons(this, false)
    3dbc:	605c      	str	r4, [r3, #4]
    3dbe:	609c      	str	r4, [r3, #8]
    3dc0:	6458      	str	r0, [r3, #68]	; 0x44
    3dc2:	7011      	strb	r1, [r2, #0]
    3dc4:	651c      	str	r4, [r3, #80]	; 0x50
   {
      if (sleepPin != -1)
         pinMode(sleepPin, OUTPUT);
    3dc6:	f002 f98d 	bl	60e4 <pinMode>
    Serial.println("VIOLACION DE AREA");
    //Encender alarma
  }

  delay(delay_sec * 1000);
}
    3dca:	b007      	add	sp, #28
    3dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dce:	46c0      	nop			; (mov r8, r8)
    3dd0:	20000e48 	.word	0x20000e48
    3dd4:	20000734 	.word	0x20000734
    3dd8:	20000e4c 	.word	0x20000e4c
    3ddc:	20000674 	.word	0x20000674
    3de0:	200006d4 	.word	0x200006d4
    3de4:	20000e44 	.word	0x20000e44
    3de8:	200005e8 	.word	0x200005e8
    3dec:	2000041c 	.word	0x2000041c
    3df0:	20000000 	.word	0x20000000
    3df4:	000016ef 	.word	0x000016ef
    3df8:	20000444 	.word	0x20000444
    3dfc:	000031fd 	.word	0x000031fd
    3e00:	0000e202 	.word	0x0000e202
    3e04:	20000648 	.word	0x20000648
    3e08:	000062f9 	.word	0x000062f9
    3e0c:	20000664 	.word	0x20000664
    3e10:	20000658 	.word	0x20000658
    3e14:	20000750 	.word	0x20000750
    3e18:	20000744 	.word	0x20000744
    3e1c:	200004b0 	.word	0x200004b0
    3e20:	20000458 	.word	0x20000458
    3e24:	0000e46c 	.word	0x0000e46c

00003e28 <_Z12sercom_setupv>:
}

//Configuración de puertos SERCOM (UART, SPI)
void sercom_setup() {
  //Se inicia comunicación UART para Serial2 y SPI para SD (DEBEN IR ANTES QUE pinPeripheral)
  fonaSerial->begin(4800);
    3e28:	2196      	movs	r1, #150	; 0x96
    3e2a:	4b18      	ldr	r3, [pc, #96]	; (3e8c <_Z12sercom_setupv+0x64>)
  }
  Serial.println("SD lista");
}

//Configuración de puertos SERCOM (UART, SPI)
void sercom_setup() {
    3e2c:	b510      	push	{r4, lr}
  //Se inicia comunicación UART para Serial2 y SPI para SD (DEBEN IR ANTES QUE pinPeripheral)
  fonaSerial->begin(4800);
    3e2e:	6818      	ldr	r0, [r3, #0]
    3e30:	0149      	lsls	r1, r1, #5
    3e32:	6803      	ldr	r3, [r0, #0]
    3e34:	699b      	ldr	r3, [r3, #24]
    3e36:	4798      	blx	r3
  sdSPI.begin();
    3e38:	4815      	ldr	r0, [pc, #84]	; (3e90 <_Z12sercom_setupv+0x68>)
    3e3a:	f7ff f93f 	bl	30bc <_ZN8SPIClass5beginEv>
  Serial3.begin(19200);
    3e3e:	2196      	movs	r1, #150	; 0x96
    3e40:	4814      	ldr	r0, [pc, #80]	; (3e94 <_Z12sercom_setupv+0x6c>)
    3e42:	01c9      	lsls	r1, r1, #7
    3e44:	f000 ff58 	bl	4cf8 <_ZN4Uart5beginEm>

  //Asigna funcionalidad SERCOM a pines 3(Rx) y 4(Tx)
  pinPeripheral(3, PIO_SERCOM_ALT);
    3e48:	2103      	movs	r1, #3
    3e4a:	0008      	movs	r0, r1
    3e4c:	f002 f9e4 	bl	6218 <pinPeripheral>
  pinPeripheral(4, PIO_SERCOM_ALT);
    3e50:	2103      	movs	r1, #3
    3e52:	2004      	movs	r0, #4
    3e54:	f002 f9e0 	bl	6218 <pinPeripheral>

  //Asigna funcionalidad SERCOM a pines 7(Rx) y 6(Tx)
  pinPeripheral(6, PIO_SERCOM_ALT);
    3e58:	2103      	movs	r1, #3
    3e5a:	2006      	movs	r0, #6
    3e5c:	f002 f9dc 	bl	6218 <pinPeripheral>
  pinPeripheral(7, PIO_SERCOM_ALT);
    3e60:	2103      	movs	r1, #3
    3e62:	2007      	movs	r0, #7
    3e64:	f002 f9d8 	bl	6218 <pinPeripheral>

  //Asigna funcionalidad SERCOM a pines 11(MOSI), 12(MISO) y 13(SCK)
  pinPeripheral(11, PIO_SERCOM);
    3e68:	2102      	movs	r1, #2
    3e6a:	200b      	movs	r0, #11
    3e6c:	f002 f9d4 	bl	6218 <pinPeripheral>
  pinPeripheral(12, PIO_SERCOM);
    3e70:	2102      	movs	r1, #2
    3e72:	200c      	movs	r0, #12
    3e74:	f002 f9d0 	bl	6218 <pinPeripheral>
  pinPeripheral(13, PIO_SERCOM);
    3e78:	2102      	movs	r1, #2
    3e7a:	200d      	movs	r0, #13
    3e7c:	f002 f9cc 	bl	6218 <pinPeripheral>
  Serial.println("SERCOM listo");
    3e80:	4905      	ldr	r1, [pc, #20]	; (3e98 <_Z12sercom_setupv+0x70>)
    3e82:	4806      	ldr	r0, [pc, #24]	; (3e9c <_Z12sercom_setupv+0x74>)
    3e84:	f000 fb4e 	bl	4524 <_ZN5Print7printlnEPKc>
}
    3e88:	bd10      	pop	{r4, pc}
    3e8a:	46c0      	nop			; (mov r8, r8)
    3e8c:	2000000c 	.word	0x2000000c
    3e90:	20000734 	.word	0x20000734
    3e94:	200006d4 	.word	0x200006d4
    3e98:	0000e5ed 	.word	0x0000e5ed
    3e9c:	20000764 	.word	0x20000764

00003ea0 <_Z13load_map_fileh>:
void load_map() {
  //Hacer get para guardar

}

void load_map_file(uint8_t map_file_num) {
    3ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ea2:	0004      	movs	r4, r0
    3ea4:	b09d      	sub	sp, #116	; 0x74
  String line;
    3ea6:	4959      	ldr	r1, [pc, #356]	; (400c <_Z13load_map_fileh+0x16c>)
    3ea8:	a806      	add	r0, sp, #24
    3eaa:	f002 fa6c 	bl	6386 <_ZN6StringC1EPKc>
  float b_lat, b_lon;
  int index_1;
  char buf[3];
  int index_2 = 0;
  uint16_t b_flags = 0;
  itoa(map_file_num, buf, 10);
    3eae:	220a      	movs	r2, #10
    3eb0:	a905      	add	r1, sp, #20
    3eb2:	0020      	movs	r0, r4
    3eb4:	f000 fac0 	bl	4438 <itoa>
  Serial.println("Map File: ");
    3eb8:	4c55      	ldr	r4, [pc, #340]	; (4010 <_Z13load_map_fileh+0x170>)
    3eba:	4956      	ldr	r1, [pc, #344]	; (4014 <_Z13load_map_fileh+0x174>)
    3ebc:	0020      	movs	r0, r4
    3ebe:	f000 fb31 	bl	4524 <_ZN5Print7printlnEPKc>
  Serial.println(buf);
    3ec2:	a905      	add	r1, sp, #20
    3ec4:	0020      	movs	r0, r4
    3ec6:	f000 fb2d 	bl	4524 <_ZN5Print7printlnEPKc>
  File map_file = SD.open(buf);
    3eca:	a809      	add	r0, sp, #36	; 0x24
    3ecc:	2301      	movs	r3, #1
    3ece:	aa05      	add	r2, sp, #20
    3ed0:	4951      	ldr	r1, [pc, #324]	; (4018 <_Z13load_map_fileh+0x178>)
    3ed2:	f7fd ffad 	bl	1e30 <_ZN5SDLib7SDClass4openEPKch>
  if (map_file) {
    3ed6:	a809      	add	r0, sp, #36	; 0x24
    3ed8:	f7fd fe87 	bl	1bea <_ZN5SDLib4FilecvbEv>
    3edc:	2800      	cmp	r0, #0
    3ede:	d100      	bne.n	3ee2 <_Z13load_map_fileh+0x42>
    3ee0:	e08f      	b.n	4002 <_Z13load_map_fileh+0x162>
    remora_gis = Quadtree();
    3ee2:	a812      	add	r0, sp, #72	; 0x48
    3ee4:	f7fd faf4 	bl	14d0 <_ZN8QuadtreeC1Ev>
        return ((ret_val & a_flags) != 0);

    }
};

class Quadtree
    3ee8:	484c      	ldr	r0, [pc, #304]	; (401c <_Z13load_map_fileh+0x17c>)
    3eea:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3eec:	aa16      	add	r2, sp, #88	; 0x58
    3eee:	6003      	str	r3, [r0, #0]
    3ef0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3ef2:	6043      	str	r3, [r0, #4]
    3ef4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3ef6:	6083      	str	r3, [r0, #8]
    3ef8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    3efa:	60c3      	str	r3, [r0, #12]
    3efc:	9303      	str	r3, [sp, #12]
    3efe:	0003      	movs	r3, r0
    3f00:	3310      	adds	r3, #16
    3f02:	ca32      	ldmia	r2!, {r1, r4, r5}
    3f04:	c332      	stmia	r3!, {r1, r4, r5}
    3f06:	301c      	adds	r0, #28
    3f08:	a919      	add	r1, sp, #100	; 0x64
    3f0a:	f7ff fe57 	bl	3bbc <_ZNSt6vectorI4DataSaIS0_EEaSERKS2_>
    3f0e:	a812      	add	r0, sp, #72	; 0x48
    3f10:	f7fd fbed 	bl	16ee <_ZN8QuadtreeD1Ev>
    while (map_file.available()) {
    3f14:	a809      	add	r0, sp, #36	; 0x24
    3f16:	f7fd fe47 	bl	1ba8 <_ZN5SDLib4File9availableEv>
    3f1a:	2800      	cmp	r0, #0
    3f1c:	d071      	beq.n	4002 <_Z13load_map_fileh+0x162>
      line = map_file.readStringUntil('\n');
    3f1e:	220a      	movs	r2, #10
    3f20:	a909      	add	r1, sp, #36	; 0x24
    3f22:	a812      	add	r0, sp, #72	; 0x48
    3f24:	f000 fece 	bl	4cc4 <_ZN6Stream15readStringUntilEc>
    3f28:	a912      	add	r1, sp, #72	; 0x48
    3f2a:	a806      	add	r0, sp, #24
    3f2c:	f002 fa78 	bl	6420 <_ZN6StringaSEOS_>
    3f30:	a812      	add	r0, sp, #72	; 0x48
    3f32:	f002 f9e1 	bl	62f8 <_ZN6StringD1Ev>
      Serial.print("Linea m: ");
    3f36:	4c36      	ldr	r4, [pc, #216]	; (4010 <_Z13load_map_fileh+0x170>)
    3f38:	4939      	ldr	r1, [pc, #228]	; (4020 <_Z13load_map_fileh+0x180>)
    3f3a:	0020      	movs	r0, r4
    3f3c:	f000 fad7 	bl	44ee <_ZN5Print5printEPKc>
      Serial.println(line);
    3f40:	a906      	add	r1, sp, #24
    3f42:	0020      	movs	r0, r4
    3f44:	f000 fae4 	bl	4510 <_ZN5Print7printlnERK6String>
      index_1 = line.indexOf(',');
    3f48:	212c      	movs	r1, #44	; 0x2c
    3f4a:	a806      	add	r0, sp, #24
    3f4c:	f002 fb39 	bl	65c2 <_ZNK6String7indexOfEc>
      b_lat = line.substring(0, index_1).toFloat();
    3f50:	2200      	movs	r2, #0
    3f52:	0003      	movs	r3, r0
    3f54:	a906      	add	r1, sp, #24
    remora_gis = Quadtree();
    while (map_file.available()) {
      line = map_file.readStringUntil('\n');
      Serial.print("Linea m: ");
      Serial.println(line);
      index_1 = line.indexOf(',');
    3f56:	0006      	movs	r6, r0
      b_lat = line.substring(0, index_1).toFloat();
    3f58:	a812      	add	r0, sp, #72	; 0x48
    3f5a:	f002 fb4d 	bl	65f8 <_ZNK6String9substringEjj>
    3f5e:	a812      	add	r0, sp, #72	; 0x48
    3f60:	f002 fb81 	bl	6666 <_ZNK6String7toFloatEv>
    3f64:	1c07      	adds	r7, r0, #0
    3f66:	a812      	add	r0, sp, #72	; 0x48
    3f68:	f002 f9c6 	bl	62f8 <_ZN6StringD1Ev>
      Serial.print("Lat: ");
    3f6c:	492d      	ldr	r1, [pc, #180]	; (4024 <_Z13load_map_fileh+0x184>)
    3f6e:	0020      	movs	r0, r4
    3f70:	f000 fabd 	bl	44ee <_ZN5Print5printEPKc>
      Serial.println(b_lat);
    3f74:	1c38      	adds	r0, r7, #0
    3f76:	f005 f9cf 	bl	9318 <__aeabi_f2d>
    3f7a:	000b      	movs	r3, r1
    3f7c:	2102      	movs	r1, #2
    3f7e:	0002      	movs	r2, r0
    3f80:	9100      	str	r1, [sp, #0]
    3f82:	0020      	movs	r0, r4
    3f84:	f000 fc0d 	bl	47a2 <_ZN5Print7printlnEdi>
      index_2 = index_1 + 1;
      index_1 = line.indexOf(',');
    3f88:	212c      	movs	r1, #44	; 0x2c
    3f8a:	a806      	add	r0, sp, #24
    3f8c:	f002 fb19 	bl	65c2 <_ZNK6String7indexOfEc>
      b_lon = line.substring(index_2, index_1).toFloat();
    3f90:	1c72      	adds	r2, r6, #1
    3f92:	0003      	movs	r3, r0
    3f94:	a906      	add	r1, sp, #24
      index_1 = line.indexOf(',');
      b_lat = line.substring(0, index_1).toFloat();
      Serial.print("Lat: ");
      Serial.println(b_lat);
      index_2 = index_1 + 1;
      index_1 = line.indexOf(',');
    3f96:	0005      	movs	r5, r0
      b_lon = line.substring(index_2, index_1).toFloat();
    3f98:	a812      	add	r0, sp, #72	; 0x48
    3f9a:	f002 fb2d 	bl	65f8 <_ZNK6String9substringEjj>
    3f9e:	a812      	add	r0, sp, #72	; 0x48
    3fa0:	f002 fb61 	bl	6666 <_ZNK6String7toFloatEv>
    3fa4:	1c06      	adds	r6, r0, #0
    3fa6:	a812      	add	r0, sp, #72	; 0x48
    3fa8:	f002 f9a6 	bl	62f8 <_ZN6StringD1Ev>
      Serial.print("Lon: ");
    3fac:	491e      	ldr	r1, [pc, #120]	; (4028 <_Z13load_map_fileh+0x188>)
    3fae:	0020      	movs	r0, r4
    3fb0:	f000 fa9d 	bl	44ee <_ZN5Print5printEPKc>
      Serial.println(b_lon);
    3fb4:	1c30      	adds	r0, r6, #0
    3fb6:	f005 f9af 	bl	9318 <__aeabi_f2d>
    3fba:	000b      	movs	r3, r1
    3fbc:	2102      	movs	r1, #2
    3fbe:	0002      	movs	r2, r0
    3fc0:	9100      	str	r1, [sp, #0]
    3fc2:	0020      	movs	r0, r4
    3fc4:	f000 fbed 	bl	47a2 <_ZN5Print7printlnEdi>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
    3fc8:	9b08      	ldr	r3, [sp, #32]
    3fca:	1c6a      	adds	r2, r5, #1
    3fcc:	a906      	add	r1, sp, #24
    3fce:	a812      	add	r0, sp, #72	; 0x48
    3fd0:	f002 fb12 	bl	65f8 <_ZNK6String9substringEjj>
      b_flags = (uint16_t)(line.substring(index_1 + 1).toInt());
    3fd4:	a812      	add	r0, sp, #72	; 0x48
    3fd6:	f002 fb35 	bl	6644 <_ZNK6String5toIntEv>
    3fda:	0005      	movs	r5, r0
    3fdc:	a812      	add	r0, sp, #72	; 0x48
    3fde:	f002 f98b 	bl	62f8 <_ZN6StringD1Ev>
      Serial.print("Flags: ");
    3fe2:	4912      	ldr	r1, [pc, #72]	; (402c <_Z13load_map_fileh+0x18c>)
    3fe4:	0020      	movs	r0, r4
    3fe6:	f000 fa82 	bl	44ee <_ZN5Print5printEPKc>
      Serial.println(b_flags);
    3fea:	b2a9      	uxth	r1, r5
    3fec:	220a      	movs	r2, #10
    3fee:	0020      	movs	r0, r4
    3ff0:	f000 fb07 	bl	4602 <_ZN5Print7printlnEii>
      remora_gis.insert(b_lon, b_lat, b_flags);
    3ff4:	b2ab      	uxth	r3, r5
    3ff6:	1c3a      	adds	r2, r7, #0
    3ff8:	1c31      	adds	r1, r6, #0
    3ffa:	4808      	ldr	r0, [pc, #32]	; (401c <_Z13load_map_fileh+0x17c>)
    3ffc:	f7fd fb62 	bl	16c4 <_ZN8Quadtree6insertEfft>
  Serial.println("Map File: ");
  Serial.println(buf);
  File map_file = SD.open(buf);
  if (map_file) {
    remora_gis = Quadtree();
    while (map_file.available()) {
    4000:	e788      	b.n	3f14 <_Z13load_map_fileh+0x74>
  //Hacer get para guardar

}

void load_map_file(uint8_t map_file_num) {
  String line;
    4002:	a806      	add	r0, sp, #24
    4004:	f002 f978 	bl	62f8 <_ZN6StringD1Ev>
      Serial.print("Flags: ");
      Serial.println(b_flags);
      remora_gis.insert(b_lon, b_lat, b_flags);
    }
  }
}
    4008:	b01d      	add	sp, #116	; 0x74
    400a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    400c:	0000e202 	.word	0x0000e202
    4010:	20000764 	.word	0x20000764
    4014:	0000e5fa 	.word	0x0000e5fa
    4018:	20000180 	.word	0x20000180
    401c:	2000041c 	.word	0x2000041c
    4020:	0000e605 	.word	0x0000e605
    4024:	0000e60f 	.word	0x0000e60f
    4028:	0000e615 	.word	0x0000e615
    402c:	0000e61b 	.word	0x0000e61b

00004030 <setup>:
  isbd.sleep();

}


void setup() {
    4030:	b510      	push	{r4, lr}
  pinMode(LED_BUILTIN, OUTPUT);
    4032:	2101      	movs	r1, #1
    4034:	200d      	movs	r0, #13
    4036:	f002 f855 	bl	60e4 <pinMode>
  digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
    403a:	2101      	movs	r1, #1
    403c:	200d      	movs	r0, #13
    403e:	f002 f8a5 	bl	618c <digitalWrite>
  delay(1000);                       // wait for a second
    4042:	20fa      	movs	r0, #250	; 0xfa
    4044:	0080      	lsls	r0, r0, #2
    4046:	f000 f999 	bl	437c <delay>
  digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW
    404a:	2100      	movs	r1, #0
    404c:	200d      	movs	r0, #13
    404e:	f002 f89d 	bl	618c <digitalWrite>
  delay(1000);
    4052:	20fa      	movs	r0, #250	; 0xfa
    4054:	0080      	lsls	r0, r0, #2
    4056:	f000 f991 	bl	437c <delay>

  Serial.begin(115200);
    405a:	21e1      	movs	r1, #225	; 0xe1
    405c:	4c0f      	ldr	r4, [pc, #60]	; (409c <setup+0x6c>)
    405e:	0249      	lsls	r1, r1, #9
    4060:	0020      	movs	r0, r4
    4062:	f000 ffb3 	bl	4fcc <_ZN7Serial_5beginEm>
  while (! Serial);
    4066:	0020      	movs	r0, r4
    4068:	f000 ffb2 	bl	4fd0 <_ZN7Serial_cvbEv>
    406c:	2800      	cmp	r0, #0
    406e:	d0fa      	beq.n	4066 <setup+0x36>
  Serial.println("======DEBUG======");
    4070:	490b      	ldr	r1, [pc, #44]	; (40a0 <setup+0x70>)
    4072:	0020      	movs	r0, r4
    4074:	f000 fa56 	bl	4524 <_ZN5Print7printlnEPKc>
  sercom_setup();
    4078:	f7ff fed6 	bl	3e28 <_Z12sercom_setupv>
  fona_setup();
    407c:	f7ff f8e6 	bl	324c <_Z10fona_setupv>
  isbd_setup();
    4080:	f7ff f8d4 	bl	322c <_Z10isbd_setupv>
  sd_setup();
    4084:	f7ff f92e 	bl	32e4 <_Z8sd_setupv>

  //Cargar parámetros configurables
  load_config_params();
    4088:	f7ff fa20 	bl	34cc <_Z18load_config_paramsv>
  load_net_config();
    408c:	f7ff fa80 	bl	3590 <_Z15load_net_configv>
  load_srv_config();
    4090:	f7ff fada 	bl	3648 <_Z15load_srv_configv>
  load_map_file(0);
    4094:	2000      	movs	r0, #0
    4096:	f7ff ff03 	bl	3ea0 <_Z13load_map_fileh>
    remora_gis.insert(-84.099605f, 9.932733f, 0x2D2);

    remora_gis.insert(9.64f, 84.19f, 0x83);
    remora_gis.insert(39.10f, 18.99f, 0x47);*/

}
    409a:	bd10      	pop	{r4, pc}
    409c:	20000764 	.word	0x20000764
    40a0:	0000e623 	.word	0x0000e623

000040a4 <loop>:


//========================CONSIDERAR CONDICIONES DE SEÑAL (RSSI)
void loop() {
    40a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  //Procesar SMS en cada ciclo de ejecución
  Serial.print("RSSI: ");
    40a6:	4c71      	ldr	r4, [pc, #452]	; (426c <loop+0x1c8>)

}


//========================CONSIDERAR CONDICIONES DE SEÑAL (RSSI)
void loop() {
    40a8:	b093      	sub	sp, #76	; 0x4c
  //Procesar SMS en cada ciclo de ejecución
  Serial.print("RSSI: ");
    40aa:	4971      	ldr	r1, [pc, #452]	; (4270 <loop+0x1cc>)
    40ac:	0020      	movs	r0, r4
    40ae:	f000 fa1e 	bl	44ee <_ZN5Print5printEPKc>
  Serial.println(fona.getRSSI());
    40b2:	4d70      	ldr	r5, [pc, #448]	; (4274 <loop+0x1d0>)
    40b4:	0028      	movs	r0, r5
    40b6:	f7fc fef5 	bl	ea4 <_ZN13Adafruit_FONA7getRSSIEv>
    40ba:	220a      	movs	r2, #10
    40bc:	0001      	movs	r1, r0
    40be:	0020      	movs	r0, r4
    40c0:	f000 fa75 	bl	45ae <_ZN5Print7printlnEhi>
  int8_t sms_num = fona.getNumSMS();
    40c4:	0028      	movs	r0, r5
    40c6:	f7fc ff05 	bl	ed4 <_ZN13Adafruit_FONA9getNumSMSEv>
    40ca:	0005      	movs	r5, r0
  Serial.print("SMS num: ");
    40cc:	496a      	ldr	r1, [pc, #424]	; (4278 <loop+0x1d4>)
    40ce:	0020      	movs	r0, r4
    40d0:	f000 fa0d 	bl	44ee <_ZN5Print5printEPKc>
  Serial.println(sms_num);
    40d4:	220a      	movs	r2, #10
    40d6:	0029      	movs	r1, r5
    40d8:	0020      	movs	r0, r4
    40da:	f000 fa92 	bl	4602 <_ZN5Print7printlnEii>
    40de:	9403      	str	r4, [sp, #12]
  //process_sms();
  if (sms_num > 0) {
    40e0:	2d00      	cmp	r5, #0
    40e2:	dd05      	ble.n	40f0 <loop+0x4c>
    Serial.println("INT_SMS");
    40e4:	4965      	ldr	r1, [pc, #404]	; (427c <loop+0x1d8>)
    40e6:	0020      	movs	r0, r4
    40e8:	f000 fa1c 	bl	4524 <_ZN5Print7printlnEPKc>
    process_sms();
    40ec:	f7ff fb00 	bl	36f0 <_Z11process_smsv>
  }

  t1 = millis();
    40f0:	f000 f93e 	bl	4370 <millis>
    40f4:	4b62      	ldr	r3, [pc, #392]	; (4280 <loop+0x1dc>)
    40f6:	6018      	str	r0, [r3, #0]
  //Obtener datos de ubicación
  String status_str = get_gps();
    40f8:	a806      	add	r0, sp, #24
    40fa:	f7ff fbc3 	bl	3884 <_Z7get_gpsv>

  //Modo de emergencia
  while (em_mode) { //Pendiente em_mode
    40fe:	4b61      	ldr	r3, [pc, #388]	; (4284 <loop+0x1e0>)
    4100:	781b      	ldrb	r3, [r3, #0]
    4102:	2b00      	cmp	r3, #0
    4104:	d005      	beq.n	4112 <loop+0x6e>
    em_beacon();
    4106:	f7ff fd05 	bl	3b14 <_Z9em_beaconv>
    delay(3600000); //Actualiza cada hora -- considerar sleep para el mcu
    410a:	485f      	ldr	r0, [pc, #380]	; (4288 <loop+0x1e4>)
    410c:	f000 f936 	bl	437c <delay>
  t1 = millis();
  //Obtener datos de ubicación
  String status_str = get_gps();

  //Modo de emergencia
  while (em_mode) { //Pendiente em_mode
    4110:	e7f5      	b.n	40fe <loop+0x5a>
    delay(3600000); //Actualiza cada hora -- considerar sleep para el mcu
  }

  //Verificar mapa correcto
  uint8_t i = 0;
  if(!map_part[curr_map_file].contains(Point(curr_lon, curr_lat))){
    4112:	260c      	movs	r6, #12
    4114:	4f5d      	ldr	r7, [pc, #372]	; (428c <loop+0x1e8>)
    4116:	4b5e      	ldr	r3, [pc, #376]	; (4290 <loop+0x1ec>)
    4118:	7838      	ldrb	r0, [r7, #0]
struct Point
{
    float x, y;

    Point(float pos_x = 0.0f, float pos_y = 0.0f){
        x = pos_x;
    411a:	ac0f      	add	r4, sp, #60	; 0x3c
    411c:	4370      	muls	r0, r6
    411e:	1818      	adds	r0, r3, r0
    4120:	4b5c      	ldr	r3, [pc, #368]	; (4294 <loop+0x1f0>)
    4122:	0021      	movs	r1, r4
    4124:	681b      	ldr	r3, [r3, #0]
    4126:	9301      	str	r3, [sp, #4]
    4128:	4b5b      	ldr	r3, [pc, #364]	; (4298 <loop+0x1f4>)
    412a:	681b      	ldr	r3, [r3, #0]
    412c:	9302      	str	r3, [sp, #8]
    412e:	9b01      	ldr	r3, [sp, #4]
    4130:	930f      	str	r3, [sp, #60]	; 0x3c
        y = pos_y;
    4132:	9b02      	ldr	r3, [sp, #8]
    4134:	6063      	str	r3, [r4, #4]
    4136:	f7fd f995 	bl	1464 <_ZNK8Boundary8containsERK5Point>
    413a:	2800      	cmp	r0, #0
    413c:	d127      	bne.n	418e <loop+0xea>
    while (!map_part[curr_map_file].contains(Point(curr_lon, curr_lat)) && i < 8) {
    413e:	9704      	str	r7, [sp, #16]
    4140:	0005      	movs	r5, r0
struct Point
{
    float x, y;

    Point(float pos_x = 0.0f, float pos_y = 0.0f){
        x = pos_x;
    4142:	0027      	movs	r7, r4
    4144:	9605      	str	r6, [sp, #20]
    4146:	9b04      	ldr	r3, [sp, #16]
    4148:	4851      	ldr	r0, [pc, #324]	; (4290 <loop+0x1ec>)
    414a:	781e      	ldrb	r6, [r3, #0]
    414c:	9b01      	ldr	r3, [sp, #4]
    414e:	0039      	movs	r1, r7
    4150:	603b      	str	r3, [r7, #0]
        y = pos_y;
    4152:	9b02      	ldr	r3, [sp, #8]
    4154:	607b      	str	r3, [r7, #4]
    4156:	9b05      	ldr	r3, [sp, #20]
    4158:	4373      	muls	r3, r6
    415a:	18c0      	adds	r0, r0, r3
    415c:	f7fd f982 	bl	1464 <_ZNK8Boundary8containsERK5Point>
    4160:	2800      	cmp	r0, #0
    4162:	d10f      	bne.n	4184 <loop+0xe0>
    4164:	0003      	movs	r3, r0
    4166:	2207      	movs	r2, #7
    4168:	42aa      	cmp	r2, r5
    416a:	4143      	adcs	r3, r0
    416c:	b2db      	uxtb	r3, r3
    416e:	2b00      	cmp	r3, #0
    4170:	d008      	beq.n	4184 <loop+0xe0>
      curr_map_file = (curr_map_file == 7) ? 0 : curr_map_file + 1;
    4172:	4296      	cmp	r6, r2
    4174:	d001      	beq.n	417a <loop+0xd6>
    4176:	3601      	adds	r6, #1
    4178:	b2f0      	uxtb	r0, r6
    417a:	9b04      	ldr	r3, [sp, #16]
      i++;
    417c:	3501      	adds	r5, #1

  //Verificar mapa correcto
  uint8_t i = 0;
  if(!map_part[curr_map_file].contains(Point(curr_lon, curr_lat))){
    while (!map_part[curr_map_file].contains(Point(curr_lon, curr_lat)) && i < 8) {
      curr_map_file = (curr_map_file == 7) ? 0 : curr_map_file + 1;
    417e:	7018      	strb	r0, [r3, #0]
      i++;
    4180:	b2ed      	uxtb	r5, r5
  }

  //Verificar mapa correcto
  uint8_t i = 0;
  if(!map_part[curr_map_file].contains(Point(curr_lon, curr_lat))){
    while (!map_part[curr_map_file].contains(Point(curr_lon, curr_lat)) && i < 8) {
    4182:	e7e0      	b.n	4146 <loop+0xa2>
      curr_map_file = (curr_map_file == 7) ? 0 : curr_map_file + 1;
      i++;
    }
    if(i < 8){
    4184:	2d07      	cmp	r5, #7
    4186:	d802      	bhi.n	418e <loop+0xea>
      load_map_file(curr_map_file);
    4188:	0030      	movs	r0, r6
    418a:	f7ff fe89 	bl	3ea0 <_Z13load_map_fileh>
  }
  

  
  //Determinar si se ha roto algún umbral
  assert_write(status_str);
    418e:	a906      	add	r1, sp, #24
    4190:	0020      	movs	r0, r4
    4192:	f002 f93b 	bl	640c <_ZN6StringC1ERKS_>
    4196:	0020      	movs	r0, r4
    4198:	f7ff fc0a 	bl	39b0 <_Z12assert_write6String>
    419c:	0020      	movs	r0, r4
    419e:	f002 f8ab 	bl	62f8 <_ZN6StringD1Ev>

  if (eval_area(test_points, curr_lat, curr_lon)) {
    41a2:	4d3c      	ldr	r5, [pc, #240]	; (4294 <loop+0x1f0>)
    41a4:	4e3c      	ldr	r6, [pc, #240]	; (4298 <loop+0x1f4>)
    41a6:	682a      	ldr	r2, [r5, #0]
    41a8:	6831      	ldr	r1, [r6, #0]
    41aa:	483c      	ldr	r0, [pc, #240]	; (429c <loop+0x1f8>)
    41ac:	f7ff f8b0 	bl	3310 <_Z9eval_areaRKSt6vectorI4DataSaIS0_EEff>
    41b0:	2800      	cmp	r0, #0
    41b2:	d04e      	beq.n	4252 <loop+0x1ae>
    String msg = "{\"lat\":";
    41b4:	493a      	ldr	r1, [pc, #232]	; (42a0 <loop+0x1fc>)
    41b6:	a809      	add	r0, sp, #36	; 0x24
    41b8:	f002 f8e5 	bl	6386 <_ZN6StringC1EPKc>
    msg += String(curr_lat);
    41bc:	2202      	movs	r2, #2
    41be:	6831      	ldr	r1, [r6, #0]
    41c0:	0020      	movs	r0, r4
    41c2:	f002 f95e 	bl	6482 <_ZN6StringC1Efh>
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    41c6:	0021      	movs	r1, r4
    41c8:	a809      	add	r0, sp, #36	; 0x24
    41ca:	f002 f98d 	bl	64e8 <_ZN6String6concatERKS_>
    41ce:	0020      	movs	r0, r4
    41d0:	f002 f892 	bl	62f8 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    41d4:	4933      	ldr	r1, [pc, #204]	; (42a4 <loop+0x200>)
    41d6:	a809      	add	r0, sp, #36	; 0x24
    41d8:	f002 f98c 	bl	64f4 <_ZN6String6concatEPKc>
    msg += ",\"lon\":";
    msg += String(curr_lon);
    41dc:	2202      	movs	r2, #2
    41de:	6829      	ldr	r1, [r5, #0]
    41e0:	0020      	movs	r0, r4
    41e2:	f002 f94e 	bl	6482 <_ZN6StringC1Efh>
	unsigned char concat(double num);
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    41e6:	0021      	movs	r1, r4
    41e8:	a809      	add	r0, sp, #36	; 0x24
    41ea:	f002 f97d 	bl	64e8 <_ZN6String6concatERKS_>
    41ee:	0020      	movs	r0, r4
    41f0:	f002 f882 	bl	62f8 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    41f4:	492c      	ldr	r1, [pc, #176]	; (42a8 <loop+0x204>)
    41f6:	a809      	add	r0, sp, #36	; 0x24
    41f8:	f002 f97c 	bl	64f4 <_ZN6String6concatEPKc>
    msg += "}\n";
    write_file("log.txt", msg);
    41fc:	492b      	ldr	r1, [pc, #172]	; (42ac <loop+0x208>)
    41fe:	a80c      	add	r0, sp, #48	; 0x30
    4200:	f002 f8c1 	bl	6386 <_ZN6StringC1EPKc>
    4204:	a909      	add	r1, sp, #36	; 0x24
    4206:	0020      	movs	r0, r4
    4208:	f002 f900 	bl	640c <_ZN6StringC1ERKS_>
    420c:	0021      	movs	r1, r4
    420e:	a80c      	add	r0, sp, #48	; 0x30
    4210:	f7ff f91c 	bl	344c <_Z10write_file6StringS_>
    4214:	0020      	movs	r0, r4
    4216:	f002 f86f 	bl	62f8 <_ZN6StringD1Ev>
    421a:	a80c      	add	r0, sp, #48	; 0x30
    421c:	f002 f86c 	bl	62f8 <_ZN6StringD1Ev>
    write_file("av.txt", "V1");
    4220:	4923      	ldr	r1, [pc, #140]	; (42b0 <loop+0x20c>)
    4222:	a80c      	add	r0, sp, #48	; 0x30
    4224:	f002 f8af 	bl	6386 <_ZN6StringC1EPKc>
    4228:	4922      	ldr	r1, [pc, #136]	; (42b4 <loop+0x210>)
    422a:	0020      	movs	r0, r4
    422c:	f002 f8ab 	bl	6386 <_ZN6StringC1EPKc>
    4230:	0021      	movs	r1, r4
    4232:	a80c      	add	r0, sp, #48	; 0x30
    4234:	f7ff f90a 	bl	344c <_Z10write_file6StringS_>
    4238:	0020      	movs	r0, r4
    423a:	f002 f85d 	bl	62f8 <_ZN6StringD1Ev>
    423e:	a80c      	add	r0, sp, #48	; 0x30
    4240:	f002 f85a 	bl	62f8 <_ZN6StringD1Ev>
    Serial.println("VIOLACION DE AREA");
    4244:	491c      	ldr	r1, [pc, #112]	; (42b8 <loop+0x214>)
    4246:	9803      	ldr	r0, [sp, #12]
    4248:	f000 f96c 	bl	4524 <_ZN5Print7printlnEPKc>
  
  //Determinar si se ha roto algún umbral
  assert_write(status_str);

  if (eval_area(test_points, curr_lat, curr_lon)) {
    String msg = "{\"lat\":";
    424c:	a809      	add	r0, sp, #36	; 0x24
    424e:	f002 f853 	bl	62f8 <_ZN6StringD1Ev>
    write_file("av.txt", "V1");
    Serial.println("VIOLACION DE AREA");
    //Encender alarma
  }

  delay(delay_sec * 1000);
    4252:	4b1a      	ldr	r3, [pc, #104]	; (42bc <loop+0x218>)
    4254:	7818      	ldrb	r0, [r3, #0]
    4256:	23fa      	movs	r3, #250	; 0xfa
    4258:	009b      	lsls	r3, r3, #2
    425a:	4358      	muls	r0, r3
    425c:	f000 f88e 	bl	437c <delay>
    process_sms();
  }

  t1 = millis();
  //Obtener datos de ubicación
  String status_str = get_gps();
    4260:	a806      	add	r0, sp, #24
    4262:	f002 f849 	bl	62f8 <_ZN6StringD1Ev>
    Serial.println("VIOLACION DE AREA");
    //Encender alarma
  }

  delay(delay_sec * 1000);
}
    4266:	b013      	add	sp, #76	; 0x4c
    4268:	bdf0      	pop	{r4, r5, r6, r7, pc}
    426a:	46c0      	nop			; (mov r8, r8)
    426c:	20000764 	.word	0x20000764
    4270:	0000e635 	.word	0x0000e635
    4274:	200004b0 	.word	0x200004b0
    4278:	0000e63c 	.word	0x0000e63c
    427c:	0000e646 	.word	0x0000e646
    4280:	20000450 	.word	0x20000450
    4284:	20000670 	.word	0x20000670
    4288:	0036ee80 	.word	0x0036ee80
    428c:	200005e4 	.word	0x200005e4
    4290:	200005e8 	.word	0x200005e8
    4294:	200004ac 	.word	0x200004ac
    4298:	20000418 	.word	0x20000418
    429c:	20000444 	.word	0x20000444
    42a0:	0000e64e 	.word	0x0000e64e
    42a4:	0000e574 	.word	0x0000e574
    42a8:	0000e656 	.word	0x0000e656
    42ac:	0000e5b4 	.word	0x0000e5b4
    42b0:	0000e659 	.word	0x0000e659
    42b4:	0000e660 	.word	0x0000e660
    42b8:	0000e663 	.word	0x0000e663
    42bc:	20000008 	.word	0x20000008

000042c0 <dtostrf>:
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <stdio.h>

char *dtostrf (double val, signed char width, unsigned char prec, char *sout) {
    42c0:	b530      	push	{r4, r5, lr}
    42c2:	0004      	movs	r4, r0
    42c4:	b087      	sub	sp, #28
    42c6:	000d      	movs	r5, r1
  asm(".global _printf_float");

  char fmt[20];
  sprintf(fmt, "%%%d.%df", width, prec);
    42c8:	4906      	ldr	r1, [pc, #24]	; (42e4 <dtostrf+0x24>)
    42ca:	a801      	add	r0, sp, #4
    42cc:	f006 f854 	bl	a378 <siprintf>
  sprintf(sout, fmt, val);
    42d0:	0022      	movs	r2, r4
    42d2:	002b      	movs	r3, r5
    42d4:	a901      	add	r1, sp, #4
    42d6:	980a      	ldr	r0, [sp, #40]	; 0x28
    42d8:	f006 f84e 	bl	a378 <siprintf>
  return sout;
}
    42dc:	980a      	ldr	r0, [sp, #40]	; 0x28
    42de:	b007      	add	sp, #28
    42e0:	bd30      	pop	{r4, r5, pc}
    42e2:	46c0      	nop			; (mov r8, r8)
    42e4:	0000e675 	.word	0x0000e675

000042e8 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
    42e8:	be03      	bkpt	0x0003
    42ea:	e7fe      	b.n	42ea <Dummy_Handler+0x2>

000042ec <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
    42ec:	4b03      	ldr	r3, [pc, #12]	; (42fc <USB_Handler+0x10>)
}

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
    42ee:	b510      	push	{r4, lr}
  if (usb_isr)
    42f0:	681b      	ldr	r3, [r3, #0]
    42f2:	2b00      	cmp	r3, #0
    42f4:	d000      	beq.n	42f8 <USB_Handler+0xc>
    usb_isr();
    42f6:	4798      	blx	r3
}
    42f8:	bd10      	pop	{r4, pc}
    42fa:	46c0      	nop			; (mov r8, r8)
    42fc:	2000075c 	.word	0x2000075c

00004300 <Reset_Handler>:

extern int main(void);

/* This is called on processor reset to initialize the device and call main() */
void Reset_Handler(void)
{
    4300:	b570      	push	{r4, r5, r6, lr}
    4302:	490f      	ldr	r1, [pc, #60]	; (4340 <Reset_Handler+0x40>)
    4304:	4c0f      	ldr	r4, [pc, #60]	; (4344 <Reset_Handler+0x44>)

  /* Initialize the initialized data section */
  pSrc = &__etext;
  pDest = &__data_start__;

  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    4306:	42a1      	cmp	r1, r4
    4308:	d104      	bne.n	4314 <Reset_Handler+0x14>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
      *pDest = 0;
  }

  SystemInit();
    430a:	f000 fc07 	bl	4b1c <SystemInit>

  main();
    430e:	f000 f899 	bl	4444 <main>
    4312:	e00b      	b.n	432c <Reset_Handler+0x2c>

  /* Initialize the initialized data section */
  pSrc = &__etext;
  pDest = &__data_start__;

  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    4314:	4d0c      	ldr	r5, [pc, #48]	; (4348 <Reset_Handler+0x48>)
    4316:	2300      	movs	r3, #0
    4318:	428d      	cmp	r5, r1
    431a:	d0f6      	beq.n	430a <Reset_Handler+0xa>
    431c:	18ca      	adds	r2, r1, r3
    431e:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
    4320:	42a2      	cmp	r2, r4
    4322:	d204      	bcs.n	432e <Reset_Handler+0x2e>
      *pDest = *pSrc;
    4324:	6800      	ldr	r0, [r0, #0]
    4326:	3304      	adds	r3, #4
    4328:	6010      	str	r0, [r2, #0]
    432a:	e7f7      	b.n	431c <Reset_Handler+0x1c>
    432c:	e7fe      	b.n	432c <Reset_Handler+0x2c>
  }

  /* Clear the zero section */
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    432e:	4290      	cmp	r0, r2
    4330:	d0eb      	beq.n	430a <Reset_Handler+0xa>
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
      *pDest = 0;
    4332:	2200      	movs	r2, #0
    4334:	4b05      	ldr	r3, [pc, #20]	; (434c <Reset_Handler+0x4c>)
      *pDest = *pSrc;
  }

  /* Clear the zero section */
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    4336:	4906      	ldr	r1, [pc, #24]	; (4350 <Reset_Handler+0x50>)
    4338:	428b      	cmp	r3, r1
    433a:	d2e6      	bcs.n	430a <Reset_Handler+0xa>
      *pDest = 0;
    433c:	c304      	stmia	r3!, {r2}
    433e:	e7fb      	b.n	4338 <Reset_Handler+0x38>
    4340:	20000000 	.word	0x20000000
    4344:	20000164 	.word	0x20000164
    4348:	0000ef40 	.word	0x0000ef40
    434c:	20000164 	.word	0x20000164
    4350:	20000e78 	.word	0x20000e78

00004354 <SysTick_Handler>:

/* Default Arduino systick handler */
extern void SysTick_DefaultHandler(void);

void SysTick_Handler(void)
{
    4354:	b510      	push	{r4, lr}
  if (sysTickHook())
    4356:	f000 f82a 	bl	43ae <sysTickHook>
    435a:	2800      	cmp	r0, #0
    435c:	d101      	bne.n	4362 <SysTick_Handler+0xe>
    return;
  SysTick_DefaultHandler();
    435e:	f000 f81b 	bl	4398 <SysTick_DefaultHandler>
}
    4362:	bd10      	pop	{r4, pc}

00004364 <USB_SetHandler>:
    usb_isr();
}

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
    4364:	4b01      	ldr	r3, [pc, #4]	; (436c <USB_SetHandler+0x8>)
    4366:	6018      	str	r0, [r3, #0]
}
    4368:	4770      	bx	lr
    436a:	46c0      	nop			; (mov r8, r8)
    436c:	2000075c 	.word	0x2000075c

00004370 <millis>:
static volatile uint32_t _ulTickCount=0 ;

uint32_t millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
    4370:	4b01      	ldr	r3, [pc, #4]	; (4378 <millis+0x8>)
    4372:	6818      	ldr	r0, [r3, #0]
}
    4374:	4770      	bx	lr
    4376:	46c0      	nop			; (mov r8, r8)
    4378:	20000760 	.word	0x20000760

0000437c <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( uint32_t ms )
{
    437c:	b570      	push	{r4, r5, r6, lr}
    437e:	1e05      	subs	r5, r0, #0
  if ( ms == 0 )
    4380:	d007      	beq.n	4392 <delay+0x16>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
    4382:	4c04      	ldr	r4, [pc, #16]	; (4394 <delay+0x18>)
    4384:	6826      	ldr	r6, [r4, #0]

  do
  {
    yield() ;
    4386:	f000 f811 	bl	43ac <yield>
  } while ( _ulTickCount - start < ms ) ;
    438a:	6823      	ldr	r3, [r4, #0]
    438c:	1b9b      	subs	r3, r3, r6
    438e:	429d      	cmp	r5, r3
    4390:	d8f9      	bhi.n	4386 <delay+0xa>
}
    4392:	bd70      	pop	{r4, r5, r6, pc}
    4394:	20000760 	.word	0x20000760

00004398 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
    4398:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
    439a:	4a03      	ldr	r2, [pc, #12]	; (43a8 <SysTick_DefaultHandler+0x10>)
    439c:	6813      	ldr	r3, [r2, #0]
    439e:	3301      	adds	r3, #1
    43a0:	6013      	str	r3, [r2, #0]
  tickReset();
    43a2:	f000 fa1d 	bl	47e0 <tickReset>
}
    43a6:	bd10      	pop	{r4, pc}
    43a8:	20000760 	.word	0x20000760

000043ac <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
    43ac:	4770      	bx	lr

000043ae <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
    43ae:	2000      	movs	r0, #0
    43b0:	4770      	bx	lr

000043b2 <ltoa>:
        {
            return ltoa(value, string, radix);
        }

        extern char* ltoa(long value, char*string, int radix)
        {
    43b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    43b4:	b08d      	sub	sp, #52	; 0x34
    43b6:	000e      	movs	r6, r1
    43b8:	9200      	str	r2, [sp, #0]
            int sign;
            char* sp;

            if (string == NULL)
            {
                return 0;
    43ba:	1e0b      	subs	r3, r1, #0
            long i;
            unsigned long v;
            int sign;
            char* sp;

            if (string == NULL)
    43bc:	d039      	beq.n	4432 <ltoa+0x80>
            {
                return 0;
            }

            if (radix > 36 || radix <= 1)
    43be:	3a02      	subs	r2, #2
            int sign;
            char* sp;

            if (string == NULL)
            {
                return 0;
    43c0:	2300      	movs	r3, #0
            }

            if (radix > 36 || radix <= 1)
    43c2:	2a22      	cmp	r2, #34	; 0x22
    43c4:	d835      	bhi.n	4432 <ltoa+0x80>
            {
                return 0;
            }

            sign = (radix == 10 && value < 0);
    43c6:	9b00      	ldr	r3, [sp, #0]
    43c8:	2b0a      	cmp	r3, #10
    43ca:	d104      	bne.n	43d6 <ltoa+0x24>
    43cc:	2800      	cmp	r0, #0
    43ce:	da02      	bge.n	43d6 <ltoa+0x24>
            if (sign)
            {
                v = -value;
    43d0:	4244      	negs	r4, r0
            if (radix > 36 || radix <= 1)
            {
                return 0;
            }

            sign = (radix == 10 && value < 0);
    43d2:	2301      	movs	r3, #1
    43d4:	e001      	b.n	43da <ltoa+0x28>
            {
                v = -value;
            }
            else
            {
                v = (unsigned long)value;
    43d6:	0004      	movs	r4, r0
    43d8:	2300      	movs	r3, #0
    43da:	9301      	str	r3, [sp, #4]
    43dc:	af03      	add	r7, sp, #12
    43de:	003a      	movs	r2, r7
            }

            while (v || tp == tmp)
    43e0:	2c00      	cmp	r4, #0
    43e2:	d011      	beq.n	4408 <ltoa+0x56>
            {
                i = v % radix;
    43e4:	0020      	movs	r0, r4
    43e6:	9900      	ldr	r1, [sp, #0]
    43e8:	f002 fb5c 	bl	6aa4 <__aeabi_uidivmod>
                v = v / radix;
    43ec:	0020      	movs	r0, r4
                v = (unsigned long)value;
            }

            while (v || tp == tmp)
            {
                i = v % radix;
    43ee:	000d      	movs	r5, r1
                v = v / radix;
    43f0:	9900      	ldr	r1, [sp, #0]
    43f2:	f002 fad1 	bl	6998 <__aeabi_uidiv>
    43f6:	0004      	movs	r4, r0
                if (i < 10)
    43f8:	2d09      	cmp	r5, #9
    43fa:	d801      	bhi.n	4400 <ltoa+0x4e>
                    *tp++ = i + '0';
    43fc:	3530      	adds	r5, #48	; 0x30
    43fe:	e000      	b.n	4402 <ltoa+0x50>
                else
                    *tp++ = i + 'a' - 10;
    4400:	3557      	adds	r5, #87	; 0x57
    4402:	703d      	strb	r5, [r7, #0]
    4404:	3701      	adds	r7, #1
    4406:	e7ea      	b.n	43de <ltoa+0x2c>
            else
            {
                v = (unsigned long)value;
            }

            while (v || tp == tmp)
    4408:	ab03      	add	r3, sp, #12
    440a:	42bb      	cmp	r3, r7
    440c:	d0ea      	beq.n	43e4 <ltoa+0x32>
                    *tp++ = i + 'a' - 10;
            }

            sp = string;

            if (sign)
    440e:	9901      	ldr	r1, [sp, #4]
    4410:	0033      	movs	r3, r6
    4412:	2900      	cmp	r1, #0
    4414:	d002      	beq.n	441c <ltoa+0x6a>
                *sp++ = '-';
    4416:	212d      	movs	r1, #45	; 0x2d
    4418:	1c73      	adds	r3, r6, #1
    441a:	7031      	strb	r1, [r6, #0]
            while (tp > tmp)
    441c:	a903      	add	r1, sp, #12
    441e:	428a      	cmp	r2, r1
    4420:	d904      	bls.n	442c <ltoa+0x7a>
                *sp++ = *--tp;
    4422:	3a01      	subs	r2, #1
    4424:	7811      	ldrb	r1, [r2, #0]
    4426:	7019      	strb	r1, [r3, #0]
    4428:	3301      	adds	r3, #1
    442a:	e7f7      	b.n	441c <ltoa+0x6a>
            *sp = 0;
    442c:	2200      	movs	r2, #0
    442e:	701a      	strb	r2, [r3, #0]

            return string;
    4430:	0033      	movs	r3, r6
        }
    4432:	0018      	movs	r0, r3
    4434:	b00d      	add	sp, #52	; 0x34
    4436:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004438 <itoa>:
#ifdef __cplusplus
extern "C" {
#endif

extern char* itoa(int value, char*string, int radix)
        {
    4438:	b510      	push	{r4, lr}
            return ltoa(value, string, radix);
    443a:	f7ff ffba 	bl	43b2 <ltoa>
        }
    443e:	bd10      	pop	{r4, pc}

00004440 <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    4440:	4770      	bx	lr
	...

00004444 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    4444:	b510      	push	{r4, lr}
  init();
    4446:	f001 fda1 	bl	5f8c <init>

  __libc_init_array();
    444a:	f005 f8b3 	bl	95b4 <__libc_init_array>

  initVariant();
    444e:	f7ff fff7 	bl	4440 <_Z11initVariantv>

  delay(1);
    4452:	2001      	movs	r0, #1
    4454:	f7ff ff92 	bl	437c <delay>
#if defined(USBCON)
  USBDevice.init();
    4458:	4c08      	ldr	r4, [pc, #32]	; (447c <main+0x38>)
    445a:	0020      	movs	r0, r4
    445c:	f001 f808 	bl	5470 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    4460:	0020      	movs	r0, r4
    4462:	f001 f87d 	bl	5560 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    4466:	f7ff fde3 	bl	4030 <setup>

  for (;;)
  {
    loop();
    446a:	f7ff fe1b 	bl	40a4 <loop>
    if (serialEventRun) serialEventRun();
    446e:	4b04      	ldr	r3, [pc, #16]	; (4480 <main+0x3c>)
    4470:	2b00      	cmp	r3, #0
    4472:	d0fa      	beq.n	446a <main+0x26>
    4474:	e000      	b.n	4478 <main+0x34>
    4476:	bf00      	nop
    4478:	e7f7      	b.n	446a <main+0x26>
    447a:	46c0      	nop			; (mov r8, r8)
    447c:	20000c2f 	.word	0x20000c2f
    4480:	00000000 	.word	0x00000000

00004484 <_Znwj>:
    4484:	b510      	push	{r4, lr}
    4486:	f005 f8bb 	bl	9600 <malloc>
    448a:	bd10      	pop	{r4, pc}

0000448c <_ZdlPv>:
    448c:	b510      	push	{r4, lr}
    448e:	f005 f8c1 	bl	9614 <free>
    4492:	bd10      	pop	{r4, pc}

00004494 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    4494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4496:	0006      	movs	r6, r0
    4498:	000d      	movs	r5, r1
    449a:	000c      	movs	r4, r1
    449c:	188b      	adds	r3, r1, r2
    449e:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    44a0:	9b01      	ldr	r3, [sp, #4]
    44a2:	1b67      	subs	r7, r4, r5
    44a4:	429c      	cmp	r4, r3
    44a6:	d007      	beq.n	44b8 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    44a8:	6833      	ldr	r3, [r6, #0]
    44aa:	7821      	ldrb	r1, [r4, #0]
    44ac:	681b      	ldr	r3, [r3, #0]
    44ae:	0030      	movs	r0, r6
    44b0:	4798      	blx	r3
    44b2:	3401      	adds	r4, #1
    44b4:	2800      	cmp	r0, #0
    44b6:	d1f3      	bne.n	44a0 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    44b8:	0038      	movs	r0, r7
    44ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000044bc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    44bc:	b570      	push	{r4, r5, r6, lr}
    44be:	0005      	movs	r5, r0
    44c0:	000c      	movs	r4, r1
      if (str == NULL) return 0;
    44c2:	1e08      	subs	r0, r1, #0
    44c4:	d007      	beq.n	44d6 <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
    44c6:	f005 ffa6 	bl	a416 <strlen>
    44ca:	682b      	ldr	r3, [r5, #0]
    44cc:	0002      	movs	r2, r0
    44ce:	685b      	ldr	r3, [r3, #4]
    44d0:	0021      	movs	r1, r4
    44d2:	0028      	movs	r0, r5
    44d4:	4798      	blx	r3
    }
    44d6:	bd70      	pop	{r4, r5, r6, pc}

000044d8 <_ZN5Print5printEPK19__FlashStringHelper>:
    44d8:	b510      	push	{r4, lr}
    44da:	f7ff ffef 	bl	44bc <_ZN5Print5writeEPKc>
    44de:	bd10      	pop	{r4, pc}

000044e0 <_ZN5Print5printERK6String>:
{
  return print(reinterpret_cast<const char *>(ifsh));
}

size_t Print::print(const String &s)
{
    44e0:	b510      	push	{r4, lr}
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    44e2:	6803      	ldr	r3, [r0, #0]
    44e4:	688a      	ldr	r2, [r1, #8]
    44e6:	685b      	ldr	r3, [r3, #4]
    44e8:	6809      	ldr	r1, [r1, #0]
    44ea:	4798      	blx	r3
  return write(s.c_str(), s.length());
}
    44ec:	bd10      	pop	{r4, pc}

000044ee <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
    44ee:	b510      	push	{r4, lr}
  return write(str);
    44f0:	f7ff ffe4 	bl	44bc <_ZN5Print5writeEPKc>
}
    44f4:	bd10      	pop	{r4, pc}

000044f6 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    44f6:	b510      	push	{r4, lr}
  return write(c);
    44f8:	6803      	ldr	r3, [r0, #0]
    44fa:	681b      	ldr	r3, [r3, #0]
    44fc:	4798      	blx	r3
}
    44fe:	bd10      	pop	{r4, pc}

00004500 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    4500:	b510      	push	{r4, lr}
  return write("\r\n");
    4502:	4902      	ldr	r1, [pc, #8]	; (450c <_ZN5Print7printlnEv+0xc>)
    4504:	f7ff ffda 	bl	44bc <_ZN5Print5writeEPKc>
}
    4508:	bd10      	pop	{r4, pc}
    450a:	46c0      	nop			; (mov r8, r8)
    450c:	0000e200 	.word	0x0000e200

00004510 <_ZN5Print7printlnERK6String>:

size_t Print::println(const String &s)
{
    4510:	b570      	push	{r4, r5, r6, lr}
    4512:	0004      	movs	r4, r0
  size_t n = print(s);
    4514:	f7ff ffe4 	bl	44e0 <_ZN5Print5printERK6String>
    4518:	0005      	movs	r5, r0
  n += println();
    451a:	0020      	movs	r0, r4
    451c:	f7ff fff0 	bl	4500 <_ZN5Print7printlnEv>
  return n;
    4520:	1828      	adds	r0, r5, r0
}
    4522:	bd70      	pop	{r4, r5, r6, pc}

00004524 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    4524:	b570      	push	{r4, r5, r6, lr}
    4526:	0005      	movs	r5, r0
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    4528:	f7ff ffc8 	bl	44bc <_ZN5Print5writeEPKc>
    452c:	0004      	movs	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    452e:	0028      	movs	r0, r5
    4530:	f7ff ffe6 	bl	4500 <_ZN5Print7printlnEv>
  return n;
    4534:	1900      	adds	r0, r0, r4
}
    4536:	bd70      	pop	{r4, r5, r6, pc}

00004538 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    4538:	b510      	push	{r4, lr}
    453a:	f7ff fff3 	bl	4524 <_ZN5Print7printlnEPKc>
    453e:	bd10      	pop	{r4, pc}

00004540 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    4540:	b5f0      	push	{r4, r5, r6, r7, lr}
    4542:	0016      	movs	r6, r2
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4544:	2200      	movs	r2, #0
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    4546:	b08d      	sub	sp, #52	; 0x34
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4548:	ab02      	add	r3, sp, #8
    454a:	3305      	adds	r3, #5
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    454c:	9001      	str	r0, [sp, #4]
    454e:	000d      	movs	r5, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4550:	77da      	strb	r2, [r3, #31]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    4552:	2e01      	cmp	r6, #1
    4554:	d800      	bhi.n	4558 <_ZN5Print11printNumberEmh+0x18>
    4556:	260a      	movs	r6, #10
    4558:	ac0b      	add	r4, sp, #44	; 0x2c

  do {
    char c = n % base;
    455a:	0028      	movs	r0, r5
    455c:	0031      	movs	r1, r6
    455e:	f002 faa1 	bl	6aa4 <__aeabi_uidivmod>
    4562:	000f      	movs	r7, r1
    4564:	b2cb      	uxtb	r3, r1
    n /= base;
    4566:	0028      	movs	r0, r5
    4568:	0031      	movs	r1, r6

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    char c = n % base;
    456a:	9300      	str	r3, [sp, #0]
    n /= base;
    456c:	f002 fa14 	bl	6998 <__aeabi_uidiv>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4570:	b2fb      	uxtb	r3, r7
    4572:	3337      	adds	r3, #55	; 0x37
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    char c = n % base;
    n /= base;
    4574:	0005      	movs	r5, r0

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4576:	3c01      	subs	r4, #1
    4578:	b2db      	uxtb	r3, r3
    457a:	2f09      	cmp	r7, #9
    457c:	d802      	bhi.n	4584 <_ZN5Print11printNumberEmh+0x44>
    457e:	9b00      	ldr	r3, [sp, #0]
    4580:	3330      	adds	r3, #48	; 0x30
    4582:	b2db      	uxtb	r3, r3
    4584:	7023      	strb	r3, [r4, #0]
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    4586:	2d00      	cmp	r5, #0
    4588:	d1e7      	bne.n	455a <_ZN5Print11printNumberEmh+0x1a>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    458a:	0021      	movs	r1, r4
    458c:	9801      	ldr	r0, [sp, #4]
    458e:	f7ff ff95 	bl	44bc <_ZN5Print5writeEPKc>
}
    4592:	b00d      	add	sp, #52	; 0x34
    4594:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004596 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
    4596:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
    4598:	2a00      	cmp	r2, #0
    459a:	d104      	bne.n	45a6 <_ZN5Print5printEmi+0x10>
    459c:	6803      	ldr	r3, [r0, #0]
    459e:	b2c9      	uxtb	r1, r1
    45a0:	681b      	ldr	r3, [r3, #0]
    45a2:	4798      	blx	r3
    45a4:	e002      	b.n	45ac <_ZN5Print5printEmi+0x16>
  else return printNumber(n, base);
    45a6:	b2d2      	uxtb	r2, r2
    45a8:	f7ff ffca 	bl	4540 <_ZN5Print11printNumberEmh>
}
    45ac:	bd10      	pop	{r4, pc}

000045ae <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    45ae:	b570      	push	{r4, r5, r6, lr}
    45b0:	0005      	movs	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    45b2:	f7ff fff0 	bl	4596 <_ZN5Print5printEmi>
    45b6:	0004      	movs	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    45b8:	0028      	movs	r0, r5
    45ba:	f7ff ffa1 	bl	4500 <_ZN5Print7printlnEv>
  return n;
    45be:	1900      	adds	r0, r0, r4
}
    45c0:	bd70      	pop	{r4, r5, r6, pc}

000045c2 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    45c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45c4:	0006      	movs	r6, r0
    45c6:	000c      	movs	r4, r1
    45c8:	1e15      	subs	r5, r2, #0
  if (base == 0) {
    45ca:	d104      	bne.n	45d6 <_ZN5Print5printEli+0x14>
    return write(n);
    45cc:	6803      	ldr	r3, [r0, #0]
    45ce:	b2c9      	uxtb	r1, r1
    45d0:	681b      	ldr	r3, [r3, #0]
    45d2:	4798      	blx	r3
    45d4:	e014      	b.n	4600 <_ZN5Print5printEli+0x3e>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    45d6:	b2d2      	uxtb	r2, r2

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    45d8:	2d0a      	cmp	r5, #10
    45da:	d10d      	bne.n	45f8 <_ZN5Print5printEli+0x36>
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    45dc:	002a      	movs	r2, r5
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    45de:	2900      	cmp	r1, #0
    45e0:	da0a      	bge.n	45f8 <_ZN5Print5printEli+0x36>
      int t = print('-');
    45e2:	212d      	movs	r1, #45	; 0x2d
    45e4:	f7ff ff87 	bl	44f6 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
    45e8:	4261      	negs	r1, r4
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
    45ea:	0007      	movs	r7, r0
      n = -n;
      return printNumber(n, 10) + t;
    45ec:	002a      	movs	r2, r5
    45ee:	0030      	movs	r0, r6
    45f0:	f7ff ffa6 	bl	4540 <_ZN5Print11printNumberEmh>
    45f4:	1838      	adds	r0, r7, r0
    45f6:	e003      	b.n	4600 <_ZN5Print5printEli+0x3e>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    45f8:	0021      	movs	r1, r4
    45fa:	0030      	movs	r0, r6
    45fc:	f7ff ffa0 	bl	4540 <_ZN5Print11printNumberEmh>
  }
}
    4600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004602 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    4602:	b570      	push	{r4, r5, r6, lr}
    4604:	0005      	movs	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    4606:	f7ff ffdc 	bl	45c2 <_ZN5Print5printEli>
    460a:	0004      	movs	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    460c:	0028      	movs	r0, r5
    460e:	f7ff ff77 	bl	4500 <_ZN5Print7printlnEv>
  return n;
    4612:	1900      	adds	r0, r0, r4
}
    4614:	bd70      	pop	{r4, r5, r6, pc}

00004616 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    4616:	b570      	push	{r4, r5, r6, lr}
    4618:	0004      	movs	r4, r0
  size_t n = print(num, base);
    461a:	f7ff ffd2 	bl	45c2 <_ZN5Print5printEli>
    461e:	0005      	movs	r5, r0
  n += println();
    4620:	0020      	movs	r0, r4
    4622:	f7ff ff6d 	bl	4500 <_ZN5Print7printlnEv>
  return n;
    4626:	1828      	adds	r0, r5, r0
}
    4628:	bd70      	pop	{r4, r5, r6, pc}
	...

0000462c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
    462c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    462e:	001e      	movs	r6, r3
    4630:	ab08      	add	r3, sp, #32
    4632:	781b      	ldrb	r3, [r3, #0]
    4634:	9000      	str	r0, [sp, #0]
    4636:	9301      	str	r3, [sp, #4]
  size_t n = 0;

  if (isnan(number)) return print("nan");
    4638:	0031      	movs	r1, r6
    463a:	0033      	movs	r3, r6
    463c:	0010      	movs	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
    463e:	0017      	movs	r7, r2
  size_t n = 0;

  if (isnan(number)) return print("nan");
    4640:	f004 fddc 	bl	91fc <__aeabi_dcmpun>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    4644:	4949      	ldr	r1, [pc, #292]	; (476c <_ZN5Print10printFloatEdh+0x140>)

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
    4646:	2800      	cmp	r0, #0
    4648:	d114      	bne.n	4674 <_ZN5Print10printFloatEdh+0x48>
  if (isinf(number)) return print("inf");
    464a:	2201      	movs	r2, #1
    464c:	0074      	lsls	r4, r6, #1
    464e:	0864      	lsrs	r4, r4, #1
    4650:	4252      	negs	r2, r2
    4652:	4b47      	ldr	r3, [pc, #284]	; (4770 <_ZN5Print10printFloatEdh+0x144>)
    4654:	0038      	movs	r0, r7
    4656:	0021      	movs	r1, r4
    4658:	f004 fdd0 	bl	91fc <__aeabi_dcmpun>
    465c:	2800      	cmp	r0, #0
    465e:	d10d      	bne.n	467c <_ZN5Print10printFloatEdh+0x50>
    4660:	2201      	movs	r2, #1
    4662:	4b43      	ldr	r3, [pc, #268]	; (4770 <_ZN5Print10printFloatEdh+0x144>)
    4664:	4252      	negs	r2, r2
    4666:	0038      	movs	r0, r7
    4668:	0021      	movs	r1, r4
    466a:	f002 fb2b 	bl	6cc4 <__aeabi_dcmple>
    466e:	2800      	cmp	r0, #0
    4670:	d104      	bne.n	467c <_ZN5Print10printFloatEdh+0x50>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    4672:	4940      	ldr	r1, [pc, #256]	; (4774 <_ZN5Print10printFloatEdh+0x148>)
    4674:	9800      	ldr	r0, [sp, #0]
    4676:	f7ff ff21 	bl	44bc <_ZN5Print5writeEPKc>
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    467a:	e075      	b.n	4768 <_ZN5Print10printFloatEdh+0x13c>
    467c:	22e0      	movs	r2, #224	; 0xe0
    467e:	4b3e      	ldr	r3, [pc, #248]	; (4778 <_ZN5Print10printFloatEdh+0x14c>)
    4680:	0612      	lsls	r2, r2, #24
    4682:	0038      	movs	r0, r7
    4684:	0031      	movs	r1, r6
    4686:	f002 fb27 	bl	6cd8 <__aeabi_dcmpgt>
    468a:	2800      	cmp	r0, #0
    468c:	d001      	beq.n	4692 <_ZN5Print10printFloatEdh+0x66>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    468e:	493b      	ldr	r1, [pc, #236]	; (477c <_ZN5Print10printFloatEdh+0x150>)
    4690:	e7f0      	b.n	4674 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    4692:	22e0      	movs	r2, #224	; 0xe0
    4694:	4b3a      	ldr	r3, [pc, #232]	; (4780 <_ZN5Print10printFloatEdh+0x154>)
    4696:	0612      	lsls	r2, r2, #24
    4698:	0038      	movs	r0, r7
    469a:	0031      	movs	r1, r6
    469c:	f002 fb08 	bl	6cb0 <__aeabi_dcmplt>
    46a0:	2800      	cmp	r0, #0
    46a2:	d1f4      	bne.n	468e <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
    46a4:	2200      	movs	r2, #0
    46a6:	2300      	movs	r3, #0
    46a8:	0038      	movs	r0, r7
    46aa:	0031      	movs	r1, r6
    46ac:	f002 fb00 	bl	6cb0 <__aeabi_dcmplt>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
    46b0:	1e05      	subs	r5, r0, #0
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
    46b2:	d007      	beq.n	46c4 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
    46b4:	212d      	movs	r1, #45	; 0x2d
    46b6:	9800      	ldr	r0, [sp, #0]
    46b8:	f7ff ff1d 	bl	44f6 <_ZN5Print5printEc>
     number = -number;
    46bc:	2380      	movs	r3, #128	; 0x80
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
    46be:	0005      	movs	r5, r0
     number = -number;
    46c0:	061b      	lsls	r3, r3, #24
    46c2:	18f6      	adds	r6, r6, r3
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    46c4:	2400      	movs	r4, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    46c6:	2000      	movs	r0, #0
    46c8:	492e      	ldr	r1, [pc, #184]	; (4784 <_ZN5Print10printFloatEdh+0x158>)
  for (uint8_t i=0; i<digits; ++i)
    46ca:	9b01      	ldr	r3, [sp, #4]
    46cc:	42a3      	cmp	r3, r4
    46ce:	d006      	beq.n	46de <_ZN5Print10printFloatEdh+0xb2>
    rounding /= 10.0;
    46d0:	2200      	movs	r2, #0
    46d2:	4b2d      	ldr	r3, [pc, #180]	; (4788 <_ZN5Print10printFloatEdh+0x15c>)
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    46d4:	3401      	adds	r4, #1
    rounding /= 10.0;
    46d6:	f003 fb9f 	bl	7e18 <__aeabi_ddiv>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    46da:	b2e4      	uxtb	r4, r4
    46dc:	e7f5      	b.n	46ca <_ZN5Print10printFloatEdh+0x9e>
    rounding /= 10.0;

  number += rounding;
    46de:	0033      	movs	r3, r6
    46e0:	003a      	movs	r2, r7
    46e2:	f003 f86d 	bl	77c0 <__aeabi_dadd>
    46e6:	000f      	movs	r7, r1
    46e8:	0006      	movs	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    46ea:	f002 fb43 	bl	6d74 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    46ee:	220a      	movs	r2, #10
    46f0:	0001      	movs	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    46f2:	0004      	movs	r4, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    46f4:	9800      	ldr	r0, [sp, #0]
    46f6:	f7ff ff23 	bl	4540 <_ZN5Print11printNumberEmh>
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    46fa:	9b01      	ldr	r3, [sp, #4]
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    46fc:	1945      	adds	r5, r0, r5
    46fe:	0028      	movs	r0, r5

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    4700:	2b00      	cmp	r3, #0
    4702:	d031      	beq.n	4768 <_ZN5Print10printFloatEdh+0x13c>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    4704:	0020      	movs	r0, r4
    4706:	f004 fdcf 	bl	92a8 <__aeabi_ui2d>
    470a:	0002      	movs	r2, r0
    470c:	000b      	movs	r3, r1
    470e:	0030      	movs	r0, r6
    4710:	0039      	movs	r1, r7
    4712:	f004 fa1f 	bl	8b54 <__aeabi_dsub>
    4716:	0006      	movs	r6, r0
    4718:	000f      	movs	r7, r1
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    471a:	9800      	ldr	r0, [sp, #0]
    471c:	491b      	ldr	r1, [pc, #108]	; (478c <_ZN5Print10printFloatEdh+0x160>)
    471e:	f7ff fecd 	bl	44bc <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
    4722:	182c      	adds	r4, r5, r0
    4724:	9d01      	ldr	r5, [sp, #4]
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    4726:	4b18      	ldr	r3, [pc, #96]	; (4788 <_ZN5Print10printFloatEdh+0x15c>)
    4728:	2200      	movs	r2, #0
    472a:	0030      	movs	r0, r6
    472c:	0039      	movs	r1, r7
    472e:	f003 ff97 	bl	8660 <__aeabi_dmul>
    4732:	000f      	movs	r7, r1
    4734:	0006      	movs	r6, r0
    unsigned int toPrint = (unsigned int)remainder;
    4736:	f002 fb1d 	bl	6d74 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    473a:	220a      	movs	r2, #10
    473c:	0001      	movs	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)remainder;
    473e:	9001      	str	r0, [sp, #4]
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    4740:	9800      	ldr	r0, [sp, #0]
    4742:	f7ff fefd 	bl	4540 <_ZN5Print11printNumberEmh>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)remainder;
    n += print(toPrint);
    4746:	1824      	adds	r4, r4, r0
    remainder -= toPrint;
    4748:	9801      	ldr	r0, [sp, #4]
    474a:	f004 fdad 	bl	92a8 <__aeabi_ui2d>
    474e:	0002      	movs	r2, r0
    4750:	000b      	movs	r3, r1
    4752:	0030      	movs	r0, r6
    4754:	0039      	movs	r1, r7
    4756:	f004 f9fd 	bl	8b54 <__aeabi_dsub>
    475a:	3d01      	subs	r5, #1
    475c:	b2ed      	uxtb	r5, r5
    475e:	0006      	movs	r6, r0
    4760:	000f      	movs	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    4762:	2d00      	cmp	r5, #0
    4764:	d1df      	bne.n	4726 <_ZN5Print10printFloatEdh+0xfa>
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)remainder;
    n += print(toPrint);
    4766:	0020      	movs	r0, r4
    remainder -= toPrint;
  }

  return n;
}
    4768:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    476a:	46c0      	nop			; (mov r8, r8)
    476c:	0000e67e 	.word	0x0000e67e
    4770:	7fefffff 	.word	0x7fefffff
    4774:	0000e686 	.word	0x0000e686
    4778:	41efffff 	.word	0x41efffff
    477c:	0000e682 	.word	0x0000e682
    4780:	c1efffff 	.word	0xc1efffff
    4784:	3fe00000 	.word	0x3fe00000
    4788:	40240000 	.word	0x40240000
    478c:	0000e560 	.word	0x0000e560

00004790 <_ZN5Print5printEdi>:
  if (base == 0) return write(n);
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
    4790:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4792:	001d      	movs	r5, r3
  return printFloat(n, digits);
    4794:	9b06      	ldr	r3, [sp, #24]
    4796:	b2db      	uxtb	r3, r3
    4798:	9300      	str	r3, [sp, #0]
    479a:	002b      	movs	r3, r5
    479c:	f7ff ff46 	bl	462c <_ZN5Print10printFloatEdh>
}
    47a0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000047a2 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    47a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    47a4:	0019      	movs	r1, r3
    47a6:	0005      	movs	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    47a8:	9b06      	ldr	r3, [sp, #24]
    47aa:	0028      	movs	r0, r5
    47ac:	b2db      	uxtb	r3, r3
    47ae:	9300      	str	r3, [sp, #0]
    47b0:	000b      	movs	r3, r1
    47b2:	f7ff ff3b 	bl	462c <_ZN5Print10printFloatEdh>
    47b6:	0004      	movs	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    47b8:	0028      	movs	r0, r5
    47ba:	f7ff fea1 	bl	4500 <_ZN5Print7printlnEv>
  return n;
    47be:	1900      	adds	r0, r0, r4
}
    47c0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

000047c4 <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
    47c4:	4b01      	ldr	r3, [pc, #4]	; (47cc <initiateReset+0x8>)
    47c6:	6018      	str	r0, [r3, #0]
}
    47c8:	4770      	bx	lr
    47ca:	46c0      	nop			; (mov r8, r8)
    47cc:	20000018 	.word	0x20000018

000047d0 <cancelReset>:

void cancelReset() {
	ticks = -1;
    47d0:	2201      	movs	r2, #1
    47d2:	4b02      	ldr	r3, [pc, #8]	; (47dc <cancelReset+0xc>)
    47d4:	4252      	negs	r2, r2
    47d6:	601a      	str	r2, [r3, #0]
}
    47d8:	4770      	bx	lr
    47da:	46c0      	nop			; (mov r8, r8)
    47dc:	20000018 	.word	0x20000018

000047e0 <tickReset>:

void tickReset() {
	if (ticks == -1)
    47e0:	4a12      	ldr	r2, [pc, #72]	; (482c <tickReset+0x4c>)
    47e2:	6813      	ldr	r3, [r2, #0]
    47e4:	1c59      	adds	r1, r3, #1
    47e6:	d01f      	beq.n	4828 <tickReset+0x48>
		return;
	ticks--;
    47e8:	3b01      	subs	r3, #1
    47ea:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
    47ec:	2b00      	cmp	r3, #0
    47ee:	d11b      	bne.n	4828 <tickReset+0x48>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    47f0:	b672      	cpsid	i
static void banzai() {
	// Disable all interrupts
	__disable_irq();

	// Erase application
	while (!nvmReady())
    47f2:	2201      	movs	r2, #1

#define NVM_MEMORY ((volatile uint16_t *)0x000000)
#define APP_START 0x00002004

static inline bool nvmReady(void) {
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    47f4:	480e      	ldr	r0, [pc, #56]	; (4830 <tickReset+0x50>)
    47f6:	7d01      	ldrb	r1, [r0, #20]
    47f8:	4b0d      	ldr	r3, [pc, #52]	; (4830 <tickReset+0x50>)
static void banzai() {
	// Disable all interrupts
	__disable_irq();

	// Erase application
	while (!nvmReady())
    47fa:	4211      	tst	r1, r2
    47fc:	d0fb      	beq.n	47f6 <tickReset+0x16>
		;
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    47fe:	2120      	movs	r1, #32
    4800:	8b1a      	ldrh	r2, [r3, #24]
    4802:	31ff      	adds	r1, #255	; 0xff
    4804:	430a      	orrs	r2, r1
    4806:	831a      	strh	r2, [r3, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    4808:	4a0a      	ldr	r2, [pc, #40]	; (4834 <tickReset+0x54>)
    480a:	61da      	str	r2, [r3, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
    480c:	4a0a      	ldr	r2, [pc, #40]	; (4838 <tickReset+0x58>)
    480e:	801a      	strh	r2, [r3, #0]
	while (!nvmReady())
    4810:	2201      	movs	r2, #1

#define NVM_MEMORY ((volatile uint16_t *)0x000000)
#define APP_START 0x00002004

static inline bool nvmReady(void) {
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4812:	7d19      	ldrb	r1, [r3, #20]
	while (!nvmReady())
		;
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
	while (!nvmReady())
    4814:	4211      	tst	r1, r2
    4816:	d0fc      	beq.n	4812 <tickReset+0x32>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    4818:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
                 SCB_AIRCR_SYSRESETREQ_Msk);
    481c:	4a07      	ldr	r2, [pc, #28]	; (483c <tickReset+0x5c>)
    481e:	4b08      	ldr	r3, [pc, #32]	; (4840 <tickReset+0x60>)
    4820:	60da      	str	r2, [r3, #12]
    4822:	f3bf 8f4f 	dsb	sy
    4826:	e7fe      	b.n	4826 <tickReset+0x46>
	if (ticks == -1)
		return;
	ticks--;
	if (ticks == 0)
		banzai();
}
    4828:	4770      	bx	lr
    482a:	46c0      	nop			; (mov r8, r8)
    482c:	20000018 	.word	0x20000018
    4830:	41004000 	.word	0x41004000
    4834:	00001002 	.word	0x00001002
    4838:	ffffa502 	.word	0xffffa502
    483c:	05fa0004 	.word	0x05fa0004
    4840:	e000ed00 	.word	0xe000ed00

00004844 <_ZN6SERCOMC1EP6Sercom>:
#include "SERCOM.h"
#include "variant.h"

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    4844:	6001      	str	r1, [r0, #0]
}
    4846:	4770      	bx	lr

00004848 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    4848:	b5f0      	push	{r4, r5, r6, r7, lr}
    484a:	0015      	movs	r5, r2
    484c:	aa05      	add	r2, sp, #20
    484e:	7814      	ldrb	r4, [r2, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    4850:	6802      	ldr	r2, [r0, #0]
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    4852:	1e9f      	subs	r7, r3, #2
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    4854:	4694      	mov	ip, r2
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    4856:	6816      	ldr	r6, [r2, #0]
    4858:	1e7a      	subs	r2, r7, #1
    485a:	4197      	sbcs	r7, r2
    485c:	4662      	mov	r2, ip
    485e:	07ad      	lsls	r5, r5, #30
    4860:	4335      	orrs	r5, r6
    4862:	063f      	lsls	r7, r7, #24
    4864:	433d      	orrs	r5, r7
    4866:	6015      	str	r5, [r2, #0]

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    4868:	2207      	movs	r2, #7
    486a:	4011      	ands	r1, r2
    486c:	000a      	movs	r2, r1
    486e:	6805      	ldr	r5, [r0, #0]
    4870:	01a0      	lsls	r0, r4, #6
    4872:	4302      	orrs	r2, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    4874:	686e      	ldr	r6, [r5, #4]
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    4876:	2000      	movs	r0, #0
    4878:	2b02      	cmp	r3, #2
    487a:	d000      	beq.n	487e <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x36>
    487c:	0358      	lsls	r0, r3, #13
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    487e:	0031      	movs	r1, r6
    4880:	4311      	orrs	r1, r2
    4882:	4301      	orrs	r1, r0
    4884:	6069      	str	r1, [r5, #4]
}
    4886:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004888 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    4888:	b530      	push	{r4, r5, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    488a:	25c0      	movs	r5, #192	; 0xc0
    488c:	0512      	lsls	r2, r2, #20
    488e:	03ad      	lsls	r5, r5, #14
    4890:	402a      	ands	r2, r5
    4892:	25c0      	movs	r5, #192	; 0xc0
}

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    4894:	6804      	ldr	r4, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    4896:	02ad      	lsls	r5, r5, #10
    4898:	6823      	ldr	r3, [r4, #0]
    489a:	0409      	lsls	r1, r1, #16
    489c:	431a      	orrs	r2, r3
    489e:	4029      	ands	r1, r5
    48a0:	4311      	orrs	r1, r2
    48a2:	6021      	str	r1, [r4, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    48a4:	6802      	ldr	r2, [r0, #0]
    48a6:	6853      	ldr	r3, [r2, #4]
    48a8:	432b      	orrs	r3, r5
    48aa:	6053      	str	r3, [r2, #4]
}
    48ac:	bd30      	pop	{r4, r5, pc}

000048ae <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    48ae:	2101      	movs	r1, #1
    48b0:	6802      	ldr	r2, [r0, #0]
    48b2:	6813      	ldr	r3, [r2, #0]
    48b4:	430b      	orrs	r3, r1
    48b6:	6013      	str	r3, [r2, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    48b8:	6803      	ldr	r3, [r0, #0]
    48ba:	681a      	ldr	r2, [r3, #0]
    48bc:	07d2      	lsls	r2, r2, #31
    48be:	d4fc      	bmi.n	48ba <_ZN6SERCOM9resetUARTEv+0xc>
    48c0:	69da      	ldr	r2, [r3, #28]
    48c2:	07d2      	lsls	r2, r2, #31
    48c4:	d4f9      	bmi.n	48ba <_ZN6SERCOM9resetUARTEv+0xc>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    48c6:	4770      	bx	lr

000048c8 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    48c8:	2102      	movs	r1, #2
    48ca:	6802      	ldr	r2, [r0, #0]
    48cc:	6813      	ldr	r3, [r2, #0]
    48ce:	430b      	orrs	r3, r1
    48d0:	6013      	str	r3, [r2, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    48d2:	6802      	ldr	r2, [r0, #0]
    48d4:	69d3      	ldr	r3, [r2, #28]
    48d6:	079b      	lsls	r3, r3, #30
    48d8:	d4fc      	bmi.n	48d4 <_ZN6SERCOM10enableUARTEv+0xc>
}
    48da:	4770      	bx	lr

000048dc <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    48dc:	6803      	ldr	r3, [r0, #0]
    48de:	7e1a      	ldrb	r2, [r3, #24]
}

void SERCOM::flushUART()
{
  // Skip checking transmission completion if data register is empty
  if(isDataRegisterEmptyUART())
    48e0:	07d2      	lsls	r2, r2, #31
    48e2:	d402      	bmi.n	48ea <_ZN6SERCOM9flushUARTEv+0xe>
    return;

  // Wait for transmission to complete
  while(!sercom->USART.INTFLAG.bit.TXC);
    48e4:	7e1a      	ldrb	r2, [r3, #24]
    48e6:	0792      	lsls	r2, r2, #30
    48e8:	d5fc      	bpl.n	48e4 <_ZN6SERCOM9flushUARTEv+0x8>
}
    48ea:	4770      	bx	lr

000048ec <_ZN6SERCOM15clearStatusUARTEv>:

void SERCOM::clearStatusUART()
{
  //Reset (with 0) the STATUS register
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    48ec:	2200      	movs	r2, #0
    48ee:	6803      	ldr	r3, [r0, #0]
    48f0:	835a      	strh	r2, [r3, #26]
}
    48f2:	4770      	bx	lr

000048f4 <_ZN6SERCOM17availableDataUARTEv>:

bool SERCOM::availableDataUART()
{
  //RXC : Receive Complete
  return sercom->USART.INTFLAG.bit.RXC;
    48f4:	6803      	ldr	r3, [r0, #0]
    48f6:	7e18      	ldrb	r0, [r3, #24]
    48f8:	0740      	lsls	r0, r0, #29
    48fa:	0fc0      	lsrs	r0, r0, #31
}
    48fc:	4770      	bx	lr

000048fe <_ZN6SERCOM11isUARTErrorEv>:

bool SERCOM::isUARTError()
{
  return sercom->USART.INTFLAG.bit.ERROR;
    48fe:	6803      	ldr	r3, [r0, #0]
    4900:	7e18      	ldrb	r0, [r3, #24]
    4902:	09c0      	lsrs	r0, r0, #7
}
    4904:	4770      	bx	lr

00004906 <_ZN6SERCOM20acknowledgeUARTErrorEv>:

void SERCOM::acknowledgeUARTError()
{
  sercom->USART.INTFLAG.bit.ERROR = 1;
    4906:	2180      	movs	r1, #128	; 0x80
    4908:	6802      	ldr	r2, [r0, #0]
    490a:	4249      	negs	r1, r1
    490c:	7e13      	ldrb	r3, [r2, #24]
    490e:	430b      	orrs	r3, r1
    4910:	7613      	strb	r3, [r2, #24]
}
    4912:	4770      	bx	lr

00004914 <_ZN6SERCOM12readDataUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
}

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    4914:	6803      	ldr	r3, [r0, #0]
    4916:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    4918:	b2c0      	uxtb	r0, r0
}
    491a:	4770      	bx	lr

0000491c <_ZN6SERCOM13writeDataUARTEh>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    491c:	6803      	ldr	r3, [r0, #0]
    491e:	7e1a      	ldrb	r2, [r3, #24]
}

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    4920:	07d2      	lsls	r2, r2, #31
    4922:	d5fc      	bpl.n	491e <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    4924:	b289      	uxth	r1, r1
  return 1;
}
    4926:	2001      	movs	r0, #1
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    4928:	8519      	strh	r1, [r3, #40]	; 0x28
  return 1;
}
    492a:	4770      	bx	lr

0000492c <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>:


}

void SERCOM::initSPIClock(SercomSpiClockMode clockMode, uint32_t baudrate)
{
    492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  else
    cpol = 1;

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    492e:	2301      	movs	r3, #1
    4930:	084d      	lsrs	r5, r1, #1
    4932:	401d      	ands	r5, r3
    4934:	076d      	lsls	r5, r5, #29
    4936:	400b      	ands	r3, r1
    4938:	071c      	lsls	r4, r3, #28
    493a:	002b      	movs	r3, r5
    cpol = 0;
  else
    cpol = 1;

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    493c:	6807      	ldr	r7, [r0, #0]
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    493e:	4323      	orrs	r3, r4
    4940:	683e      	ldr	r6, [r7, #0]
//	return sercom->SPI.INTFLAG.bit.RXC;
//}

uint8_t SERCOM::calculateBaudrateSynchronous(uint32_t baudrate)
{
  return SERCOM_FREQ_REF / (2 * baudrate) - 1;
    4942:	0051      	lsls	r1, r2, #1
  else
    cpol = 1;

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    4944:	4333      	orrs	r3, r6
    4946:	603b      	str	r3, [r7, #0]

  //Synchronous arithmetic
  sercom->SPI.BAUD.reg = calculateBaudrateSynchronous(baudrate);
    4948:	6804      	ldr	r4, [r0, #0]
//	return sercom->SPI.INTFLAG.bit.RXC;
//}

uint8_t SERCOM::calculateBaudrateSynchronous(uint32_t baudrate)
{
  return SERCOM_FREQ_REF / (2 * baudrate) - 1;
    494a:	4803      	ldr	r0, [pc, #12]	; (4958 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x2c>)
    494c:	f002 f824 	bl	6998 <__aeabi_uidiv>
    4950:	3801      	subs	r0, #1
    4952:	b2c0      	uxtb	r0, r0
  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );

  //Synchronous arithmetic
  sercom->SPI.BAUD.reg = calculateBaudrateSynchronous(baudrate);
    4954:	7320      	strb	r0, [r4, #12]
}
    4956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4958:	02dc6c00 	.word	0x02dc6c00

0000495c <_ZN6SERCOM8resetSPIEv>:

void SERCOM::resetSPI()
{
  //Setting the Software Reset bit to 1
  sercom->SPI.CTRLA.bit.SWRST = 1;
    495c:	2101      	movs	r1, #1
    495e:	6802      	ldr	r2, [r0, #0]
    4960:	6813      	ldr	r3, [r2, #0]
    4962:	430b      	orrs	r3, r1
    4964:	6013      	str	r3, [r2, #0]

  //Wait both bits Software Reset from CTRLA and SYNCBUSY are equal to 0
  while(sercom->SPI.CTRLA.bit.SWRST || sercom->SPI.SYNCBUSY.bit.SWRST);
    4966:	6803      	ldr	r3, [r0, #0]
    4968:	681a      	ldr	r2, [r3, #0]
    496a:	07d2      	lsls	r2, r2, #31
    496c:	d4fc      	bmi.n	4968 <_ZN6SERCOM8resetSPIEv+0xc>
    496e:	69da      	ldr	r2, [r3, #28]
    4970:	07d2      	lsls	r2, r2, #31
    4972:	d4f9      	bmi.n	4968 <_ZN6SERCOM8resetSPIEv+0xc>
}
    4974:	4770      	bx	lr

00004976 <_ZN6SERCOM9enableSPIEv>:

void SERCOM::enableSPI()
{
  //Setting the enable bit to 1
  sercom->SPI.CTRLA.bit.ENABLE = 1;
    4976:	2102      	movs	r1, #2
    4978:	6802      	ldr	r2, [r0, #0]
    497a:	6813      	ldr	r3, [r2, #0]
    497c:	430b      	orrs	r3, r1
    497e:	6013      	str	r3, [r2, #0]

  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    4980:	6802      	ldr	r2, [r0, #0]
    4982:	69d3      	ldr	r3, [r2, #28]
    4984:	079b      	lsls	r3, r3, #30
    4986:	d4fc      	bmi.n	4982 <_ZN6SERCOM9enableSPIEv+0xc>
  {
    //Waiting then enable bit from SYNCBUSY is equal to 0;
  }
}
    4988:	4770      	bx	lr

0000498a <_ZN6SERCOM10disableSPIEv>:

void SERCOM::disableSPI()
{
  //Setting the enable bit to 0
  sercom->SPI.CTRLA.bit.ENABLE = 0;
    498a:	2102      	movs	r1, #2
    498c:	6802      	ldr	r2, [r0, #0]
    498e:	6813      	ldr	r3, [r2, #0]
    4990:	438b      	bics	r3, r1
    4992:	6013      	str	r3, [r2, #0]

  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    4994:	6802      	ldr	r2, [r0, #0]
    4996:	69d3      	ldr	r3, [r2, #28]
    4998:	079b      	lsls	r3, r3, #30
    499a:	d4fc      	bmi.n	4996 <_ZN6SERCOM10disableSPIEv+0xc>
  {
    //Waiting then enable bit from SYNCBUSY is equal to 0;
  }
}
    499c:	4770      	bx	lr

0000499e <_ZN6SERCOM15transferDataSPIEh>:
  enableSPI();
}

uint8_t SERCOM::transferDataSPI(uint8_t data)
{
  sercom->SPI.DATA.bit.DATA = data; // Writing data into Data register
    499e:	6802      	ldr	r2, [r0, #0]
    49a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    49a2:	0a5b      	lsrs	r3, r3, #9
    49a4:	025b      	lsls	r3, r3, #9
    49a6:	430b      	orrs	r3, r1
    49a8:	6293      	str	r3, [r2, #40]	; 0x28

  while( sercom->SPI.INTFLAG.bit.RXC == 0 )
    49aa:	6803      	ldr	r3, [r0, #0]
    49ac:	7e1a      	ldrb	r2, [r3, #24]
    49ae:	0752      	lsls	r2, r2, #29
    49b0:	d5fc      	bpl.n	49ac <_ZN6SERCOM15transferDataSPIEh+0xe>
  {
    // Waiting Complete Reception
  }

  return sercom->SPI.DATA.bit.DATA;  // Reading data
    49b2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    49b4:	b2c0      	uxtb	r0, r0
}
    49b6:	4770      	bx	lr

000049b8 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    49b8:	6803      	ldr	r3, [r0, #0]
    49ba:	4a22      	ldr	r2, [pc, #136]	; (4a44 <_ZN6SERCOM13initClockNVICEv+0x8c>)
  }
}


void SERCOM::initClockNVIC( void )
{
    49bc:	b530      	push	{r4, r5, lr}
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    49be:	4293      	cmp	r3, r2
    49c0:	d011      	beq.n	49e6 <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    49c2:	4a21      	ldr	r2, [pc, #132]	; (4a48 <_ZN6SERCOM13initClockNVICEv+0x90>)
    49c4:	4293      	cmp	r3, r2
    49c6:	d011      	beq.n	49ec <_ZN6SERCOM13initClockNVICEv+0x34>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    49c8:	4a20      	ldr	r2, [pc, #128]	; (4a4c <_ZN6SERCOM13initClockNVICEv+0x94>)
    49ca:	4293      	cmp	r3, r2
    49cc:	d011      	beq.n	49f2 <_ZN6SERCOM13initClockNVICEv+0x3a>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    49ce:	4a20      	ldr	r2, [pc, #128]	; (4a50 <_ZN6SERCOM13initClockNVICEv+0x98>)
    49d0:	4293      	cmp	r3, r2
    49d2:	d011      	beq.n	49f8 <_ZN6SERCOM13initClockNVICEv+0x40>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  else if(sercom == SERCOM4)
    49d4:	4a1f      	ldr	r2, [pc, #124]	; (4a54 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    49d6:	4293      	cmp	r3, r2
    49d8:	d011      	beq.n	49fe <_ZN6SERCOM13initClockNVICEv+0x46>
  {
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  else if(sercom == SERCOM5)
    49da:	4a1f      	ldr	r2, [pc, #124]	; (4a58 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    49dc:	4293      	cmp	r3, r2
    49de:	d12f      	bne.n	4a40 <_ZN6SERCOM13initClockNVICEv+0x88>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    49e0:	230e      	movs	r3, #14
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  else if(sercom == SERCOM5)
  {
    clockId = GCM_SERCOM5_CORE;
    49e2:	2219      	movs	r2, #25
    49e4:	e00d      	b.n	4a02 <_ZN6SERCOM13initClockNVICEv+0x4a>
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
    49e6:	2309      	movs	r3, #9
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
  {
    clockId = GCM_SERCOM0_CORE;
    49e8:	2214      	movs	r2, #20
    49ea:	e00a      	b.n	4a02 <_ZN6SERCOM13initClockNVICEv+0x4a>
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
    49ec:	230a      	movs	r3, #10
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
  {
    clockId = GCM_SERCOM1_CORE;
    49ee:	2215      	movs	r2, #21
    49f0:	e007      	b.n	4a02 <_ZN6SERCOM13initClockNVICEv+0x4a>
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
    49f2:	230b      	movs	r3, #11
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
  {
    clockId = GCM_SERCOM2_CORE;
    49f4:	2216      	movs	r2, #22
    49f6:	e004      	b.n	4a02 <_ZN6SERCOM13initClockNVICEv+0x4a>
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
    49f8:	230c      	movs	r3, #12
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
  {
    clockId = GCM_SERCOM3_CORE;
    49fa:	2217      	movs	r2, #23
    49fc:	e001      	b.n	4a02 <_ZN6SERCOM13initClockNVICEv+0x4a>
    IdNvic = SERCOM3_IRQn;
  }
  else if(sercom == SERCOM4)
  {
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
    49fe:	230d      	movs	r3, #13
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  else if(sercom == SERCOM4)
  {
    clockId = GCM_SERCOM4_CORE;
    4a00:	2218      	movs	r2, #24

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    4a02:	2101      	movs	r1, #1
    4a04:	b2d8      	uxtb	r0, r3
    4a06:	4081      	lsls	r1, r0
    4a08:	4c14      	ldr	r4, [pc, #80]	; (4a5c <_ZN6SERCOM13initClockNVICEv+0xa4>)
    4a0a:	089b      	lsrs	r3, r3, #2
    4a0c:	6021      	str	r1, [r4, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    4a0e:	2103      	movs	r1, #3
    4a10:	4001      	ands	r1, r0
    4a12:	20ff      	movs	r0, #255	; 0xff
    4a14:	009b      	lsls	r3, r3, #2
    4a16:	191b      	adds	r3, r3, r4
    4a18:	24c0      	movs	r4, #192	; 0xc0
    4a1a:	00c9      	lsls	r1, r1, #3
    4a1c:	4088      	lsls	r0, r1
    4a1e:	00a4      	lsls	r4, r4, #2
    4a20:	591d      	ldr	r5, [r3, r4]
    4a22:	4385      	bics	r5, r0
    4a24:	20c0      	movs	r0, #192	; 0xc0
    4a26:	4088      	lsls	r0, r1
    4a28:	0001      	movs	r1, r0
    4a2a:	4329      	orrs	r1, r5
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    4a2c:	5119      	str	r1, [r3, r4]
  NVIC_SetPriority (IdNvic, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;
    4a2e:	2380      	movs	r3, #128	; 0x80
    4a30:	01db      	lsls	r3, r3, #7
    4a32:	431a      	orrs	r2, r3
    4a34:	4b0a      	ldr	r3, [pc, #40]	; (4a60 <_ZN6SERCOM13initClockNVICEv+0xa8>)
    4a36:	805a      	strh	r2, [r3, #2]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    4a38:	785a      	ldrb	r2, [r3, #1]
    4a3a:	b252      	sxtb	r2, r2
    4a3c:	2a00      	cmp	r2, #0
    4a3e:	dbfb      	blt.n	4a38 <_ZN6SERCOM13initClockNVICEv+0x80>
  {
    /* Wait for synchronization */
  }
}
    4a40:	bd30      	pop	{r4, r5, pc}
    4a42:	46c0      	nop			; (mov r8, r8)
    4a44:	42000800 	.word	0x42000800
    4a48:	42000c00 	.word	0x42000c00
    4a4c:	42001000 	.word	0x42001000
    4a50:	42001400 	.word	0x42001400
    4a54:	42001800 	.word	0x42001800
    4a58:	42001c00 	.word	0x42001c00
    4a5c:	e000e100 	.word	0xe000e100
    4a60:	40000c00 	.word	0x40000c00

00004a64 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
/* 	=========================
 *	===== Sercom UART
 *	=========================
*/
void SERCOM::initUART(SercomUartMode mode, SercomUartSampleRate sampleRate, uint32_t baudrate)
{
    4a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a66:	0004      	movs	r4, r0
    4a68:	000f      	movs	r7, r1
    4a6a:	0016      	movs	r6, r2
    4a6c:	001d      	movs	r5, r3
  initClockNVIC();
    4a6e:	f7ff ffa3 	bl	49b8 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    4a72:	0020      	movs	r0, r4
    4a74:	f7ff ff1b 	bl	48ae <_ZN6SERCOM9resetUARTEv>

  //Setting the CTRLA register
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    4a78:	231c      	movs	r3, #28
    4a7a:	00ba      	lsls	r2, r7, #2
    4a7c:	4013      	ands	r3, r2
    4a7e:	0772      	lsls	r2, r6, #29
    4a80:	6821      	ldr	r1, [r4, #0]
    4a82:	0c12      	lsrs	r2, r2, #16
    4a84:	4313      	orrs	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    4a86:	600b      	str	r3, [r1, #0]

  //Setting the Interrupt register
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
                                SERCOM_USART_INTENSET_ERROR; //All others errors
    4a88:	2384      	movs	r3, #132	; 0x84
    4a8a:	6822      	ldr	r2, [r4, #0]
    4a8c:	7593      	strb	r3, [r2, #22]

  if ( mode == UART_INT_CLOCK )
    4a8e:	2f01      	cmp	r7, #1
    4a90:	d11a      	bne.n	4ac8 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x64>
  {
    uint16_t sampleRateValue;

    if (sampleRate == SAMPLE_RATE_x16) {
      sampleRateValue = 16;
    4a92:	2110      	movs	r1, #16

  if ( mode == UART_INT_CLOCK )
  {
    uint16_t sampleRateValue;

    if (sampleRate == SAMPLE_RATE_x16) {
    4a94:	2e01      	cmp	r6, #1
    4a96:	d000      	beq.n	4a9a <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x36>
      sampleRateValue = 16;
    } else {
      sampleRateValue = 8;
    4a98:	3908      	subs	r1, #8
    }

    // Asynchronous fractional mode (Table 24-2 in datasheet)
    //   BAUD = fref / (sampleRateValue * fbaud)
    // (multiply by 8, to calculate fractional piece)
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    4a9a:	4b0c      	ldr	r3, [pc, #48]	; (4acc <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x68>)
    4a9c:	4369      	muls	r1, r5
    4a9e:	6818      	ldr	r0, [r3, #0]
    4aa0:	00c0      	lsls	r0, r0, #3
    4aa2:	f001 ff79 	bl	6998 <__aeabi_uidiv>

    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    4aa6:	2307      	movs	r3, #7
    4aa8:	6821      	ldr	r1, [r4, #0]
    4aaa:	4003      	ands	r3, r0
    4aac:	898d      	ldrh	r5, [r1, #12]
    4aae:	035a      	lsls	r2, r3, #13
    4ab0:	04eb      	lsls	r3, r5, #19
    4ab2:	0cdb      	lsrs	r3, r3, #19
    4ab4:	4313      	orrs	r3, r2
    4ab6:	818b      	strh	r3, [r1, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    4ab8:	6821      	ldr	r1, [r4, #0]
    4aba:	0400      	lsls	r0, r0, #16
    4abc:	898a      	ldrh	r2, [r1, #12]
    4abe:	0cc3      	lsrs	r3, r0, #19
    4ac0:	0b50      	lsrs	r0, r2, #13
    4ac2:	0340      	lsls	r0, r0, #13
    4ac4:	4318      	orrs	r0, r3
    4ac6:	8188      	strh	r0, [r1, #12]
  }
}
    4ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4aca:	46c0      	nop			; (mov r8, r8)
    4acc:	20000098 	.word	0x20000098

00004ad0 <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>:
/*	=========================
 *	===== Sercom SPI
 *	=========================
*/
void SERCOM::initSPI(SercomSpiTXPad mosi, SercomRXPad miso, SercomSpiCharSize charSize, SercomDataOrder dataOrder)
{
    4ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4ad2:	0005      	movs	r5, r0
    4ad4:	9301      	str	r3, [sp, #4]
    4ad6:	ab08      	add	r3, sp, #32
    4ad8:	781c      	ldrb	r4, [r3, #0]
    4ada:	000e      	movs	r6, r1
    4adc:	0017      	movs	r7, r2
  resetSPI();
    4ade:	f7ff ff3d 	bl	495c <_ZN6SERCOM8resetSPIEv>
  initClockNVIC();
    4ae2:	0028      	movs	r0, r5
    4ae4:	f7ff ff68 	bl	49b8 <_ZN6SERCOM13initClockNVICEv>

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    4ae8:	23c0      	movs	r3, #192	; 0xc0
    4aea:	053f      	lsls	r7, r7, #20
    4aec:	039b      	lsls	r3, r3, #14
    4aee:	401f      	ands	r7, r3
    4af0:	07a3      	lsls	r3, r4, #30
    4af2:	240c      	movs	r4, #12
    4af4:	431c      	orrs	r4, r3
    4af6:	23c0      	movs	r3, #192	; 0xc0
    4af8:	0436      	lsls	r6, r6, #16
    4afa:	029b      	lsls	r3, r3, #10
    4afc:	401e      	ands	r6, r3
                          dataOrder << SERCOM_SPI_CTRLA_DORD_Pos;

  //Setting the CTRLB register
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    4afe:	2307      	movs	r3, #7
    4b00:	9901      	ldr	r1, [sp, #4]
{
  resetSPI();
  initClockNVIC();

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
    4b02:	682a      	ldr	r2, [r5, #0]
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
                          SERCOM_SPI_CTRLA_DIPO(miso) |
                          dataOrder << SERCOM_SPI_CTRLA_DORD_Pos;

  //Setting the CTRLB register
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    4b04:	4019      	ands	r1, r3
    4b06:	000b      	movs	r3, r1
    4b08:	2180      	movs	r1, #128	; 0x80
  initClockNVIC();

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE_SPI_MASTER |
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    4b0a:	433c      	orrs	r4, r7
    4b0c:	4334      	orrs	r4, r6
                          dataOrder << SERCOM_SPI_CTRLA_DORD_Pos;
    4b0e:	6014      	str	r4, [r2, #0]

  //Setting the CTRLB register
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    4b10:	682a      	ldr	r2, [r5, #0]
    4b12:	0289      	lsls	r1, r1, #10
    4b14:	430b      	orrs	r3, r1
                          SERCOM_SPI_CTRLB_RXEN;	//Active the SPI receiver.
    4b16:	6053      	str	r3, [r2, #4]


}
    4b18:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

00004b1c <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    4b1c:	221e      	movs	r2, #30
#define GENERIC_CLOCK_GENERATOR_OSC8M     (3u)
// Constants for Clock multiplexers
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
    4b1e:	b570      	push	{r4, r5, r6, lr}
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    4b20:	2408      	movs	r4, #8
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    4b22:	484d      	ldr	r0, [pc, #308]	; (4c58 <SystemInit+0x13c>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    4b24:	494d      	ldr	r1, [pc, #308]	; (4c5c <SystemInit+0x140>)
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
    4b26:	6843      	ldr	r3, [r0, #4]
    4b28:	4393      	bics	r3, r2
    4b2a:	3a1c      	subs	r2, #28
    4b2c:	4313      	orrs	r3, r2
    4b2e:	6043      	str	r3, [r0, #4]

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
    4b30:	698b      	ldr	r3, [r1, #24]
    4b32:	4323      	orrs	r3, r4
    4b34:	618b      	str	r3, [r1, #24]

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
    4b36:	4c4a      	ldr	r4, [pc, #296]	; (4c60 <SystemInit+0x144>)
    4b38:	4b4a      	ldr	r3, [pc, #296]	; (4c64 <SystemInit+0x148>)
    4b3a:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
    4b3c:	8a9c      	ldrh	r4, [r3, #20]
    4b3e:	4314      	orrs	r4, r2
    4b40:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
    4b42:	68dc      	ldr	r4, [r3, #12]
    4b44:	4214      	tst	r4, r2
    4b46:	d0fc      	beq.n	4b42 <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
    4b48:	4a47      	ldr	r2, [pc, #284]	; (4c68 <SystemInit+0x14c>)
    4b4a:	2401      	movs	r4, #1

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
    4b4c:	0016      	movs	r6, r2

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
    4b4e:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
    4b50:	7815      	ldrb	r5, [r2, #0]
    4b52:	4225      	tst	r5, r4
    4b54:	d003      	beq.n	4b5e <SystemInit+0x42>
    4b56:	7875      	ldrb	r5, [r6, #1]
    4b58:	b26d      	sxtb	r5, r5
    4b5a:	2d00      	cmp	r5, #0
    4b5c:	dbf8      	blt.n	4b50 <SystemInit+0x34>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
    4b5e:	2401      	movs	r4, #1
    4b60:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    4b62:	7854      	ldrb	r4, [r2, #1]
    4b64:	b264      	sxtb	r4, r4
    4b66:	2c00      	cmp	r4, #0
    4b68:	dbfb      	blt.n	4b62 <SystemInit+0x46>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) | // Generic Clock Generator 1
    4b6a:	4d40      	ldr	r5, [pc, #256]	; (4c6c <SystemInit+0x150>)
    4b6c:	4c3e      	ldr	r4, [pc, #248]	; (4c68 <SystemInit+0x14c>)
    4b6e:	6065      	str	r5, [r4, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    4b70:	7854      	ldrb	r4, [r2, #1]
    4b72:	b264      	sxtb	r4, r4
    4b74:	2c00      	cmp	r4, #0
    4b76:	dbfb      	blt.n	4b70 <SystemInit+0x54>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
    4b78:	2582      	movs	r5, #130	; 0x82
    4b7a:	4c3b      	ldr	r4, [pc, #236]	; (4c68 <SystemInit+0x14c>)
    4b7c:	01ed      	lsls	r5, r5, #7
    4b7e:	8065      	strh	r5, [r4, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    4b80:	7854      	ldrb	r4, [r2, #1]
    4b82:	b264      	sxtb	r4, r4
    4b84:	2c00      	cmp	r4, #0
    4b86:	dbfb      	blt.n	4b80 <SystemInit+0x64>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0 ;
    4b88:	2580      	movs	r5, #128	; 0x80
    4b8a:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
    4b8c:	43ac      	bics	r4, r5
    4b8e:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    4b90:	2410      	movs	r4, #16
    4b92:	68dd      	ldr	r5, [r3, #12]
    4b94:	4225      	tst	r5, r4
    4b96:	d0fc      	beq.n	4b92 <SystemInit+0x76>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
    4b98:	4c32      	ldr	r4, [pc, #200]	; (4c64 <SystemInit+0x148>)
    4b9a:	4d35      	ldr	r5, [pc, #212]	; (4c70 <SystemInit+0x154>)
    4b9c:	62e5      	str	r5, [r4, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK/VARIANT_MAINOSC) ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    4b9e:	2410      	movs	r4, #16
    4ba0:	68de      	ldr	r6, [r3, #12]
    4ba2:	4d30      	ldr	r5, [pc, #192]	; (4c64 <SystemInit+0x148>)
    4ba4:	4226      	tst	r6, r4
    4ba6:	d0fb      	beq.n	4ba0 <SystemInit+0x84>
  {
    /* Wait for synchronization */
  }

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
    4ba8:	8cac      	ldrh	r4, [r5, #36]	; 0x24
    4baa:	4e32      	ldr	r6, [pc, #200]	; (4c74 <SystemInit+0x158>)
    4bac:	4334      	orrs	r4, r6
    4bae:	84ac      	strh	r4, [r5, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    4bb0:	2410      	movs	r4, #16
    4bb2:	68de      	ldr	r6, [r3, #12]
    4bb4:	4d2b      	ldr	r5, [pc, #172]	; (4c64 <SystemInit+0x148>)
    4bb6:	4226      	tst	r6, r4
    4bb8:	d0fb      	beq.n	4bb2 <SystemInit+0x96>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
    4bba:	2602      	movs	r6, #2
    4bbc:	8cac      	ldrh	r4, [r5, #36]	; 0x24
    4bbe:	4334      	orrs	r4, r6
    4bc0:	84ac      	strh	r4, [r5, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    4bc2:	2440      	movs	r4, #64	; 0x40
    4bc4:	367e      	adds	r6, #126	; 0x7e
    4bc6:	68dd      	ldr	r5, [r3, #12]
    4bc8:	4235      	tst	r5, r6
    4bca:	d0fc      	beq.n	4bc6 <SystemInit+0xaa>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
    4bcc:	4d25      	ldr	r5, [pc, #148]	; (4c64 <SystemInit+0x148>)
    4bce:	68ed      	ldr	r5, [r5, #12]
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
    4bd0:	4225      	tst	r5, r4
    4bd2:	d0f8      	beq.n	4bc6 <SystemInit+0xaa>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
  {
    /* Wait for locks flags */
  }

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
    4bd4:	2410      	movs	r4, #16
    4bd6:	68dd      	ldr	r5, [r3, #12]
    4bd8:	4225      	tst	r5, r4
    4bda:	d0fc      	beq.n	4bd6 <SystemInit+0xba>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
    4bdc:	2400      	movs	r4, #0
    4bde:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    4be0:	7854      	ldrb	r4, [r2, #1]
    4be2:	b264      	sxtb	r4, r4
    4be4:	2c00      	cmp	r4, #0
    4be6:	dbfb      	blt.n	4be0 <SystemInit+0xc4>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
    4be8:	4d23      	ldr	r5, [pc, #140]	; (4c78 <SystemInit+0x15c>)
    4bea:	4c1f      	ldr	r4, [pc, #124]	; (4c68 <SystemInit+0x14c>)
    4bec:	6065      	str	r5, [r4, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    4bee:	7854      	ldrb	r4, [r2, #1]
    4bf0:	4d1d      	ldr	r5, [pc, #116]	; (4c68 <SystemInit+0x14c>)
    4bf2:	b264      	sxtb	r4, r4
    4bf4:	2c00      	cmp	r4, #0
    4bf6:	dbfa      	blt.n	4bee <SystemInit+0xd2>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_1_Val ;
    4bf8:	6a1e      	ldr	r6, [r3, #32]
    4bfa:	4c20      	ldr	r4, [pc, #128]	; (4c7c <SystemInit+0x160>)
    4bfc:	4034      	ands	r4, r6
    4bfe:	2680      	movs	r6, #128	; 0x80
    4c00:	0076      	lsls	r6, r6, #1
    4c02:	4334      	orrs	r4, r6
    4c04:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
    4c06:	6a1c      	ldr	r4, [r3, #32]
    4c08:	3e80      	subs	r6, #128	; 0x80
    4c0a:	43b4      	bics	r4, r6
    4c0c:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
    4c0e:	2303      	movs	r3, #3
    4c10:	60ab      	str	r3, [r5, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
    4c12:	4b1b      	ldr	r3, [pc, #108]	; (4c80 <SystemInit+0x164>)
    4c14:	606b      	str	r3, [r5, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    4c16:	7853      	ldrb	r3, [r2, #1]
    4c18:	b25b      	sxtb	r3, r3
    4c1a:	2b00      	cmp	r3, #0
    4c1c:	dbfb      	blt.n	4c16 <SystemInit+0xfa>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    4c1e:	2300      	movs	r3, #0
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;

  SystemCoreClock=VARIANT_MCK ;
    4c20:	4a18      	ldr	r2, [pc, #96]	; (4c84 <SystemInit+0x168>)

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
    4c22:	720b      	strb	r3, [r1, #8]
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
    4c24:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
    4c26:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
    4c28:	72cb      	strb	r3, [r1, #11]

  SystemCoreClock=VARIANT_MCK ;
    4c2a:	4b17      	ldr	r3, [pc, #92]	; (4c88 <SystemInit+0x16c>)
    4c2c:	601a      	str	r2, [r3, #0]
  /* ----------------------------------------------------------------------------------------------
   * 8) Load ADC factory calibration values
   */

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
    4c2e:	4b17      	ldr	r3, [pc, #92]	; (4c8c <SystemInit+0x170>)
    4c30:	681c      	ldr	r4, [r3, #0]

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    4c32:	4b17      	ldr	r3, [pc, #92]	; (4c90 <SystemInit+0x174>)

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    4c34:	06a1      	lsls	r1, r4, #26

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    4c36:	681b      	ldr	r3, [r3, #0]

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    4c38:	0164      	lsls	r4, r4, #5

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
    4c3a:	0eda      	lsrs	r2, r3, #27

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
    4c3c:	23ff      	movs	r3, #255	; 0xff
    4c3e:	0f49      	lsrs	r1, r1, #29
    4c40:	4023      	ands	r3, r4
    4c42:	0209      	lsls	r1, r1, #8
    4c44:	4313      	orrs	r3, r2
    4c46:	4a13      	ldr	r2, [pc, #76]	; (4c94 <SystemInit+0x178>)
    4c48:	430b      	orrs	r3, r1
    4c4a:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
    4c4c:	2280      	movs	r2, #128	; 0x80
    4c4e:	6843      	ldr	r3, [r0, #4]
    4c50:	4313      	orrs	r3, r2
    4c52:	6043      	str	r3, [r0, #4]
}
    4c54:	bd70      	pop	{r4, r5, r6, pc}
    4c56:	46c0      	nop			; (mov r8, r8)
    4c58:	41004000 	.word	0x41004000
    4c5c:	40000400 	.word	0x40000400
    4c60:	0000060c 	.word	0x0000060c
    4c64:	40000800 	.word	0x40000800
    4c68:	40000c00 	.word	0x40000c00
    4c6c:	00010501 	.word	0x00010501
    4c70:	7dff05b8 	.word	0x7dff05b8
    4c74:	00000a04 	.word	0x00000a04
    4c78:	00030700 	.word	0x00030700
    4c7c:	fffffcff 	.word	0xfffffcff
    4c80:	00010603 	.word	0x00010603
    4c84:	02dc6c00 	.word	0x02dc6c00
    4c88:	20000098 	.word	0x20000098
    4c8c:	00806024 	.word	0x00806024
    4c90:	00806020 	.word	0x00806020
    4c94:	42004000 	.word	0x42004000

00004c98 <_ZN6Stream9timedReadEv>:

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait

// private method to read stream with timeout
int Stream::timedRead()
{
    4c98:	b510      	push	{r4, lr}
    4c9a:	0004      	movs	r4, r0
  int c;
  _startMillis = millis();
    4c9c:	f7ff fb68 	bl	4370 <millis>
    4ca0:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
    4ca2:	6823      	ldr	r3, [r4, #0]
    4ca4:	0020      	movs	r0, r4
    4ca6:	68db      	ldr	r3, [r3, #12]
    4ca8:	4798      	blx	r3
    if (c >= 0) return c;
    4caa:	2800      	cmp	r0, #0
    4cac:	da08      	bge.n	4cc0 <_ZN6Stream9timedReadEv+0x28>
  } while(millis() - _startMillis < _timeout);
    4cae:	f7ff fb5f 	bl	4370 <millis>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
    4cb2:	68e3      	ldr	r3, [r4, #12]
    4cb4:	1ac0      	subs	r0, r0, r3
    4cb6:	68a3      	ldr	r3, [r4, #8]
    4cb8:	4298      	cmp	r0, r3
    4cba:	d3f2      	bcc.n	4ca2 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
    4cbc:	2001      	movs	r0, #1
    4cbe:	4240      	negs	r0, r0
}
    4cc0:	bd10      	pop	{r4, pc}
	...

00004cc4 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
    4cc4:	b570      	push	{r4, r5, r6, lr}
    4cc6:	000d      	movs	r5, r1
  String ret;
    4cc8:	4909      	ldr	r1, [pc, #36]	; (4cf0 <_ZN6Stream15readStringUntilEc+0x2c>)
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
    4cca:	0004      	movs	r4, r0
    4ccc:	0016      	movs	r6, r2
  String ret;
    4cce:	f001 fb5a 	bl	6386 <_ZN6StringC1EPKc>
  int c = timedRead();
    4cd2:	0028      	movs	r0, r5
    4cd4:	f7ff ffe0 	bl	4c98 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
    4cd8:	2800      	cmp	r0, #0
    4cda:	db06      	blt.n	4cea <_ZN6Stream15readStringUntilEc+0x26>
    4cdc:	42b0      	cmp	r0, r6
    4cde:	d004      	beq.n	4cea <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    4ce0:	b2c1      	uxtb	r1, r0
    4ce2:	0020      	movs	r0, r4
    4ce4:	f001 fc13 	bl	650e <_ZN6String6concatEc>
    4ce8:	e7f3      	b.n	4cd2 <_ZN6Stream15readStringUntilEc+0xe>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
    4cea:	0020      	movs	r0, r4
    4cec:	bd70      	pop	{r4, r5, r6, pc}
    4cee:	46c0      	nop			; (mov r8, r8)
    4cf0:	0000e202 	.word	0x0000e202

00004cf4 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    4cf4:	2001      	movs	r0, #1
    4cf6:	4770      	bx	lr

00004cf8 <_ZN4Uart5beginEm>:
  uc_padRX=_padRX ;
  uc_padTX=_padTX;
}

void Uart::begin(unsigned long baudrate)
{
    4cf8:	b510      	push	{r4, lr}
  begin(baudrate, (uint8_t)SERIAL_8N1);
    4cfa:	6803      	ldr	r3, [r0, #0]
    4cfc:	2213      	movs	r2, #19
    4cfe:	69db      	ldr	r3, [r3, #28]
    4d00:	4798      	blx	r3
}
    4d02:	bd10      	pop	{r4, pc}

00004d04 <_ZN4Uart3endEv>:

  sercom->enableUART();
}

void Uart::end()
{
    4d04:	b510      	push	{r4, lr}
    4d06:	0004      	movs	r4, r0
  sercom->resetUART();
    4d08:	6900      	ldr	r0, [r0, #16]
    4d0a:	f7ff fdd0 	bl	48ae <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    4d0e:	0020      	movs	r0, r4
    4d10:	3014      	adds	r0, #20
    4d12:	f001 fd1f 	bl	6754 <_ZN10RingBuffer5clearEv>
}
    4d16:	bd10      	pop	{r4, pc}

00004d18 <_ZN4Uart5flushEv>:

void Uart::flush()
{
    4d18:	b510      	push	{r4, lr}
  sercom->flushUART();
    4d1a:	6900      	ldr	r0, [r0, #16]
    4d1c:	f7ff fdde 	bl	48dc <_ZN6SERCOM9flushUARTEv>
}
    4d20:	bd10      	pop	{r4, pc}

00004d22 <_ZN4Uart9availableEv>:
    sercom->clearStatusUART();
  }
}

int Uart::available()
{
    4d22:	b510      	push	{r4, lr}
  return rxBuffer.available();
    4d24:	3014      	adds	r0, #20
    4d26:	f001 fd27 	bl	6778 <_ZN10RingBuffer9availableEv>
}
    4d2a:	bd10      	pop	{r4, pc}

00004d2c <_ZN4Uart4peekEv>:
{
  return (sercom->isDataRegisterEmptyUART() ? 1 : 0);
}

int Uart::peek()
{
    4d2c:	b510      	push	{r4, lr}
  return rxBuffer.peek();
    4d2e:	3014      	adds	r0, #20
    4d30:	f001 fd28 	bl	6784 <_ZN10RingBuffer4peekEv>
}
    4d34:	bd10      	pop	{r4, pc}

00004d36 <_ZN4Uart4readEv>:

int Uart::read()
{
    4d36:	b510      	push	{r4, lr}
  return rxBuffer.read_char();
    4d38:	3014      	adds	r0, #20
    4d3a:	f001 fd0f 	bl	675c <_ZN10RingBuffer9read_charEv>
}
    4d3e:	bd10      	pop	{r4, pc}

00004d40 <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    4d40:	b510      	push	{r4, lr}
  sercom->writeDataUART(data);
    4d42:	6900      	ldr	r0, [r0, #16]
    4d44:	f7ff fdea 	bl	491c <_ZN6SERCOM13writeDataUARTEh>
  return 1;
}
    4d48:	2001      	movs	r0, #1
    4d4a:	bd10      	pop	{r4, pc}

00004d4c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:

#include "Uart.h"
#include "Arduino.h"
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
    4d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4d4e:	001d      	movs	r5, r3
    4d50:	ab08      	add	r3, sp, #32
    4d52:	781b      	ldrb	r3, [r3, #0]
    4d54:	0004      	movs	r4, r0
    4d56:	9300      	str	r3, [sp, #0]
    4d58:	ab09      	add	r3, sp, #36	; 0x24
    4d5a:	781b      	ldrb	r3, [r3, #0]
    4d5c:	0016      	movs	r6, r2
    4d5e:	9301      	str	r3, [sp, #4]
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4d60:	2300      	movs	r3, #0
    4d62:	6043      	str	r3, [r0, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4d64:	23fa      	movs	r3, #250	; 0xfa
    4d66:	009b      	lsls	r3, r3, #2
    4d68:	6083      	str	r3, [r0, #8]
    4d6a:	4b0a      	ldr	r3, [pc, #40]	; (4d94 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x48>)
    4d6c:	000f      	movs	r7, r1
    4d6e:	3308      	adds	r3, #8
    4d70:	6003      	str	r3, [r0, #0]
    4d72:	3014      	adds	r0, #20
    4d74:	f001 fcd8 	bl	6728 <_ZN10RingBufferC1Ev>
{
  sercom = _s;
  uc_pinRX = _pinRX;
  uc_pinTX = _pinTX;
  uc_padRX=_padRX ;
    4d78:	466a      	mov	r2, sp
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
{
  sercom = _s;
  uc_pinRX = _pinRX;
    4d7a:	0023      	movs	r3, r4
  uc_pinTX = _pinTX;
  uc_padRX=_padRX ;
    4d7c:	7812      	ldrb	r2, [r2, #0]
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
{
  sercom = _s;
  uc_pinRX = _pinRX;
    4d7e:	335c      	adds	r3, #92	; 0x5c
#include "Arduino.h"
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
{
  sercom = _s;
    4d80:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
  uc_pinTX = _pinTX;
  uc_padRX=_padRX ;
    4d82:	709a      	strb	r2, [r3, #2]
  uc_padTX=_padTX;
    4d84:	466a      	mov	r2, sp
    4d86:	7912      	ldrb	r2, [r2, #4]
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
{
  sercom = _s;
  uc_pinRX = _pinRX;
    4d88:	701e      	strb	r6, [r3, #0]
  uc_pinTX = _pinTX;
    4d8a:	705d      	strb	r5, [r3, #1]
  uc_padRX=_padRX ;
  uc_padTX=_padTX;
}
    4d8c:	0020      	movs	r0, r4
{
  sercom = _s;
  uc_pinRX = _pinRX;
  uc_pinTX = _pinTX;
  uc_padRX=_padRX ;
  uc_padTX=_padTX;
    4d8e:	70da      	strb	r2, [r3, #3]
}
    4d90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4d92:	46c0      	nop			; (mov r8, r8)
    4d94:	0000e68c 	.word	0x0000e68c

00004d98 <_ZN4Uart10IrqHandlerEv>:
{
  sercom->flushUART();
}

void Uart::IrqHandler()
{
    4d98:	b510      	push	{r4, lr}
    4d9a:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
    4d9c:	6900      	ldr	r0, [r0, #16]
    4d9e:	f7ff fda9 	bl	48f4 <_ZN6SERCOM17availableDataUARTEv>
    4da2:	2800      	cmp	r0, #0
    4da4:	d007      	beq.n	4db6 <_ZN4Uart10IrqHandlerEv+0x1e>
    rxBuffer.store_char(sercom->readDataUART());
    4da6:	6920      	ldr	r0, [r4, #16]
    4da8:	f7ff fdb4 	bl	4914 <_ZN6SERCOM12readDataUARTEv>
    4dac:	0001      	movs	r1, r0
    4dae:	0020      	movs	r0, r4
    4db0:	3014      	adds	r0, #20
    4db2:	f001 fcc4 	bl	673e <_ZN10RingBuffer10store_charEh>
  }

  if (sercom->isUARTError()) {
    4db6:	6920      	ldr	r0, [r4, #16]
    4db8:	f7ff fda1 	bl	48fe <_ZN6SERCOM11isUARTErrorEv>
    4dbc:	2800      	cmp	r0, #0
    4dbe:	d005      	beq.n	4dcc <_ZN4Uart10IrqHandlerEv+0x34>
    sercom->acknowledgeUARTError();
    4dc0:	6920      	ldr	r0, [r4, #16]
    4dc2:	f7ff fda0 	bl	4906 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    // TODO: if (sercom->isBufferOverflowErrorUART()) ....
    // TODO: if (sercom->isFrameErrorUART()) ....
    // TODO: if (sercom->isParityErrorUART()) ....
    sercom->clearStatusUART();
    4dc6:	6920      	ldr	r0, [r4, #16]
    4dc8:	f7ff fd90 	bl	48ec <_ZN6SERCOM15clearStatusUARTEv>
  }
}
    4dcc:	bd10      	pop	{r4, pc}

00004dce <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    4dce:	23f0      	movs	r3, #240	; 0xf0
    4dd0:	4019      	ands	r1, r3
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    4dd2:	3930      	subs	r1, #48	; 0x30
    4dd4:	0008      	movs	r0, r1
    4dd6:	4241      	negs	r1, r0
    4dd8:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    4dda:	4770      	bx	lr

00004ddc <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    4ddc:	23f0      	movs	r3, #240	; 0xf0
    4dde:	011b      	lsls	r3, r3, #4
    4de0:	4019      	ands	r1, r3
    4de2:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    4de4:	2006      	movs	r0, #6
  }
}

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    4de6:	009b      	lsls	r3, r3, #2
    4de8:	4299      	cmp	r1, r3
    4dea:	d00a      	beq.n	4e02 <_ZN4Uart15extractCharSizeEt+0x26>
    4dec:	3301      	adds	r3, #1
    4dee:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    4df0:	3001      	adds	r0, #1
  }
}

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    4df2:	4299      	cmp	r1, r3
    4df4:	d005      	beq.n	4e02 <_ZN4Uart15extractCharSizeEt+0x26>
    4df6:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;
    4df8:	3802      	subs	r0, #2
  }
}

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    4dfa:	005b      	lsls	r3, r3, #1
    4dfc:	4299      	cmp	r1, r3
    4dfe:	d000      	beq.n	4e02 <_ZN4Uart15extractCharSizeEt+0x26>
    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    4e00:	2000      	movs	r0, #0

  }
}
    4e02:	4770      	bx	lr

00004e04 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    4e04:	230f      	movs	r3, #15
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    4e06:	2000      	movs	r0, #0
  }
}

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    4e08:	4019      	ands	r1, r3
    4e0a:	2901      	cmp	r1, #1
    4e0c:	d004      	beq.n	4e18 <_ZN4Uart13extractParityEt+0x14>
  {
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;
    4e0e:	3902      	subs	r1, #2
    4e10:	424b      	negs	r3, r1
    4e12:	414b      	adcs	r3, r1
    4e14:	3002      	adds	r0, #2
    4e16:	1ac0      	subs	r0, r0, r3
      return SERCOM_EVEN_PARITY;

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    4e18:	4770      	bx	lr
	...

00004e1c <_ZN4Uart5beginEmt>:
  begin(baudrate, (uint8_t)SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    4e1c:	0003      	movs	r3, r0
{
  begin(baudrate, (uint8_t)SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    4e1e:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    4e20:	2518      	movs	r5, #24
{
  begin(baudrate, (uint8_t)SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    4e22:	b085      	sub	sp, #20
    4e24:	9103      	str	r1, [sp, #12]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    4e26:	335c      	adds	r3, #92	; 0x5c
{
  begin(baudrate, (uint8_t)SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    4e28:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    4e2a:	7818      	ldrb	r0, [r3, #0]
    4e2c:	002b      	movs	r3, r5
    4e2e:	2108      	movs	r1, #8
    4e30:	4343      	muls	r3, r0
    4e32:	4f1b      	ldr	r7, [pc, #108]	; (4ea0 <_ZN4Uart5beginEmt+0x84>)
{
  begin(baudrate, (uint8_t)SERIAL_8N1);
}

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    4e34:	0016      	movs	r6, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    4e36:	18fb      	adds	r3, r7, r3
    4e38:	5659      	ldrsb	r1, [r3, r1]
    4e3a:	f001 f9ed 	bl	6218 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    4e3e:	0023      	movs	r3, r4
    4e40:	2108      	movs	r1, #8
    4e42:	335d      	adds	r3, #93	; 0x5d
    4e44:	7818      	ldrb	r0, [r3, #0]
    4e46:	4345      	muls	r5, r0
    4e48:	197f      	adds	r7, r7, r5
    4e4a:	5679      	ldrsb	r1, [r7, r1]
    4e4c:	f001 f9e4 	bl	6218 <pinPeripheral>

  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    4e50:	2201      	movs	r2, #1
    4e52:	9b03      	ldr	r3, [sp, #12]
    4e54:	0011      	movs	r1, r2
    4e56:	6920      	ldr	r0, [r4, #16]
    4e58:	f7ff fe04 	bl	4a64 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    4e5c:	0031      	movs	r1, r6
    4e5e:	0020      	movs	r0, r4
    4e60:	f7ff ffbc 	bl	4ddc <_ZN4Uart15extractCharSizeEt>
    4e64:	0031      	movs	r1, r6
    4e66:	0005      	movs	r5, r0
    4e68:	0020      	movs	r0, r4
    4e6a:	f7ff ffcb 	bl	4e04 <_ZN4Uart13extractParityEt>
    4e6e:	0031      	movs	r1, r6
    4e70:	0007      	movs	r7, r0
    4e72:	0020      	movs	r0, r4
    4e74:	f7ff ffab 	bl	4dce <_ZN4Uart16extractNbStopBitEt>
    4e78:	003b      	movs	r3, r7
    4e7a:	9000      	str	r0, [sp, #0]
    4e7c:	0029      	movs	r1, r5
    4e7e:	6920      	ldr	r0, [r4, #16]
    4e80:	2201      	movs	r2, #1
    4e82:	f7ff fce1 	bl	4848 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    4e86:	0023      	movs	r3, r4
    4e88:	335e      	adds	r3, #94	; 0x5e
    4e8a:	781a      	ldrb	r2, [r3, #0]
    4e8c:	7859      	ldrb	r1, [r3, #1]
    4e8e:	6920      	ldr	r0, [r4, #16]
    4e90:	f7ff fcfa 	bl	4888 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>

  sercom->enableUART();
    4e94:	6920      	ldr	r0, [r4, #16]
    4e96:	f7ff fd17 	bl	48c8 <_ZN6SERCOM10enableUARTEv>
}
    4e9a:	b005      	add	sp, #20
    4e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e9e:	46c0      	nop			; (mov r8, r8)
    4ea0:	0000e720 	.word	0x0000e720

00004ea4 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    4ea4:	203f      	movs	r0, #63	; 0x3f
    4ea6:	4770      	bx	lr

00004ea8 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    4ea8:	b513      	push	{r0, r1, r4, lr}
    4eaa:	466b      	mov	r3, sp
	return write(&c, 1);
    4eac:	6802      	ldr	r2, [r0, #0]
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    4eae:	71d9      	strb	r1, [r3, #7]
    4eb0:	3307      	adds	r3, #7
	return write(&c, 1);
    4eb2:	6854      	ldr	r4, [r2, #4]
    4eb4:	0019      	movs	r1, r3
    4eb6:	2201      	movs	r2, #1
    4eb8:	47a0      	blx	r4
}
    4eba:	bd16      	pop	{r1, r2, r4, pc}

00004ebc <_ZN7Serial_9availableEv>:
void Serial_::end(void)
{
}

int Serial_::available(void)
{
    4ebc:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
    4ebe:	2102      	movs	r1, #2
    4ec0:	6900      	ldr	r0, [r0, #16]
    4ec2:	f000 fc4d 	bl	5760 <_ZN14USBDeviceClass9availableEm>
}
    4ec6:	bd10      	pop	{r4, pc}

00004ec8 <_ZN7Serial_5flushEv>:
	}
	return count;
}

void Serial_::flush(void)
{
    4ec8:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    4eca:	2103      	movs	r1, #3
    4ecc:	6900      	ldr	r0, [r0, #16]
    4ece:	f000 fc5d 	bl	578c <_ZN14USBDeviceClass5flushEm>
}
    4ed2:	bd10      	pop	{r4, pc}

00004ed4 <_ZN7Serial_5writeEPKhj>:

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
    4ed4:	b510      	push	{r4, lr}
    4ed6:	0013      	movs	r3, r2
    4ed8:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    4eda:	000a      	movs	r2, r1
    4edc:	6900      	ldr	r0, [r0, #16]
    4ede:	2103      	movs	r1, #3
    4ee0:	f000 fd50 	bl	5984 <_ZN14USBDeviceClass4sendEmPKvm>

	if (r > 0) {
    4ee4:	2800      	cmp	r0, #0
    4ee6:	d101      	bne.n	4eec <_ZN7Serial_5writeEPKhj+0x18>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    4ee8:	2301      	movs	r3, #1
    4eea:	6063      	str	r3, [r4, #4]
		return r;
	} else {
		setWriteError();
		return 0;
	}
}
    4eec:	bd10      	pop	{r4, pc}
	...

00004ef0 <_ZN7Serial_4readEv>:
	return _serialPeek;
}

int Serial_::read(void)
{
	if (_serialPeek != -1) {
    4ef0:	4b07      	ldr	r3, [pc, #28]	; (4f10 <_ZN7Serial_4readEv+0x20>)
	_serialPeek = read();
	return _serialPeek;
}

int Serial_::read(void)
{
    4ef2:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
    4ef4:	6818      	ldr	r0, [r3, #0]
	_serialPeek = read();
	return _serialPeek;
}

int Serial_::read(void)
{
    4ef6:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    4ef8:	1c41      	adds	r1, r0, #1
    4efa:	d003      	beq.n	4f04 <_ZN7Serial_4readEv+0x14>
		int res = _serialPeek;
		_serialPeek = -1;
    4efc:	2201      	movs	r2, #1
    4efe:	4252      	negs	r2, r2
    4f00:	601a      	str	r2, [r3, #0]
		return res;
    4f02:	e003      	b.n	4f0c <_ZN7Serial_4readEv+0x1c>
	}
	return usb.recv(CDC_ENDPOINT_OUT);
    4f04:	2102      	movs	r1, #2
    4f06:	6910      	ldr	r0, [r2, #16]
    4f08:	f000 fd2e 	bl	5968 <_ZN14USBDeviceClass4recvEm>
}
    4f0c:	bd10      	pop	{r4, pc}
    4f0e:	46c0      	nop			; (mov r8, r8)
    4f10:	2000006c 	.word	0x2000006c

00004f14 <_ZN7Serial_4peekEv>:
}

int _serialPeek = -1;

int Serial_::peek(void)
{
    4f14:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    4f16:	4c05      	ldr	r4, [pc, #20]	; (4f2c <_ZN7Serial_4peekEv+0x18>)
    4f18:	6823      	ldr	r3, [r4, #0]
    4f1a:	1c5a      	adds	r2, r3, #1
    4f1c:	d104      	bne.n	4f28 <_ZN7Serial_4peekEv+0x14>
		return _serialPeek;
	_serialPeek = read();
    4f1e:	6803      	ldr	r3, [r0, #0]
    4f20:	68db      	ldr	r3, [r3, #12]
    4f22:	4798      	blx	r3
    4f24:	0003      	movs	r3, r0
    4f26:	6020      	str	r0, [r4, #0]
	return _serialPeek;
}
    4f28:	0018      	movs	r0, r3
    4f2a:	bd10      	pop	{r4, pc}
    4f2c:	2000006c 	.word	0x2000006c

00004f30 <_Z16CDC_GetInterfacePh>:
{
	return sizeof(_cdcInterface);
}

int CDC_GetInterface(uint8_t* interfaceNum)
{
    4f30:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
    4f32:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    4f34:	2242      	movs	r2, #66	; 0x42
	return sizeof(_cdcInterface);
}

int CDC_GetInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 2;	// uses 2
    4f36:	3302      	adds	r3, #2
    4f38:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    4f3a:	4902      	ldr	r1, [pc, #8]	; (4f44 <_Z16CDC_GetInterfacePh+0x14>)
    4f3c:	4802      	ldr	r0, [pc, #8]	; (4f48 <_Z16CDC_GetInterfacePh+0x18>)
    4f3e:	f000 fdd3 	bl	5ae8 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    4f42:	bd10      	pop	{r4, pc}
    4f44:	20000028 	.word	0x20000028
    4f48:	20000c2f 	.word	0x20000c2f

00004f4c <_Z9CDC_SetupR8USBSetup>:

bool CDC_Setup(USBSetup& setup)
{
    4f4c:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
    4f4e:	7801      	ldrb	r1, [r0, #0]
	interfaceNum[0] += 2;	// uses 2
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
}

bool CDC_Setup(USBSetup& setup)
{
    4f50:	0003      	movs	r3, r0
	uint8_t requestType = setup.bmRequestType;
	uint8_t r = setup.bRequest;
    4f52:	7842      	ldrb	r2, [r0, #1]
		{
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
			return false;
		}
	}
	return false;
    4f54:	2000      	movs	r0, #0
bool CDC_Setup(USBSetup& setup)
{
	uint8_t requestType = setup.bmRequestType;
	uint8_t r = setup.bRequest;

	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    4f56:	29a1      	cmp	r1, #161	; 0xa1
    4f58:	d108      	bne.n	4f6c <_Z9CDC_SetupR8USBSetup+0x20>
	{
		if (r == CDC_GET_LINE_CODING)
    4f5a:	2a21      	cmp	r2, #33	; 0x21
    4f5c:	d12e      	bne.n	4fbc <_Z9CDC_SetupR8USBSetup+0x70>
		{
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    4f5e:	3a1a      	subs	r2, #26
    4f60:	4917      	ldr	r1, [pc, #92]	; (4fc0 <_Z9CDC_SetupR8USBSetup+0x74>)
    4f62:	4818      	ldr	r0, [pc, #96]	; (4fc4 <_Z9CDC_SetupR8USBSetup+0x78>)
    4f64:	f000 fdc0 	bl	5ae8 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    4f68:	2001      	movs	r0, #1
    4f6a:	e027      	b.n	4fbc <_Z9CDC_SetupR8USBSetup+0x70>
		}
	}

	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    4f6c:	2921      	cmp	r1, #33	; 0x21
    4f6e:	d125      	bne.n	4fbc <_Z9CDC_SetupR8USBSetup+0x70>
	{
		if (r == CDC_SET_LINE_CODING)
    4f70:	2a20      	cmp	r2, #32
    4f72:	d105      	bne.n	4f80 <_Z9CDC_SetupR8USBSetup+0x34>
		{
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    4f74:	3a19      	subs	r2, #25
    4f76:	4912      	ldr	r1, [pc, #72]	; (4fc0 <_Z9CDC_SetupR8USBSetup+0x74>)
    4f78:	4812      	ldr	r0, [pc, #72]	; (4fc4 <_Z9CDC_SetupR8USBSetup+0x78>)
    4f7a:	f000 fc4d 	bl	5818 <_ZN14USBDeviceClass11recvControlEPvm>
    4f7e:	e004      	b.n	4f8a <_Z9CDC_SetupR8USBSetup+0x3e>
		}

		if (r == CDC_SET_CONTROL_LINE_STATE)
    4f80:	2a22      	cmp	r2, #34	; 0x22
    4f82:	d112      	bne.n	4faa <_Z9CDC_SetupR8USBSetup+0x5e>
		{
			_usbLineInfo.lineState = setup.wValueL;
    4f84:	789a      	ldrb	r2, [r3, #2]
    4f86:	4b0e      	ldr	r3, [pc, #56]	; (4fc0 <_Z9CDC_SetupR8USBSetup+0x74>)
    4f88:	71da      	strb	r2, [r3, #7]
		if (r == CDC_SET_LINE_CODING || r == CDC_SET_CONTROL_LINE_STATE)
		{
			// auto-reset into the bootloader is triggered when the port, already
			// open at 1200 bps, is closed. We check DTR state to determine if host 
			// port is open (bit 0 of lineState).
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    4f8a:	2296      	movs	r2, #150	; 0x96
    4f8c:	4b0c      	ldr	r3, [pc, #48]	; (4fc0 <_Z9CDC_SetupR8USBSetup+0x74>)
    4f8e:	00d2      	lsls	r2, r2, #3
    4f90:	6819      	ldr	r1, [r3, #0]
    4f92:	4291      	cmp	r1, r2
    4f94:	d10f      	bne.n	4fb6 <_Z9CDC_SetupR8USBSetup+0x6a>
    4f96:	79d8      	ldrb	r0, [r3, #7]
    4f98:	2301      	movs	r3, #1
    4f9a:	4018      	ands	r0, r3
    4f9c:	1e04      	subs	r4, r0, #0
    4f9e:	d10a      	bne.n	4fb6 <_Z9CDC_SetupR8USBSetup+0x6a>
			{
				initiateReset(250);
    4fa0:	20fa      	movs	r0, #250	; 0xfa
    4fa2:	f7ff fc0f 	bl	47c4 <initiateReset>
			}
			else
			{
				cancelReset();
			}
			return false;
    4fa6:	0020      	movs	r0, r4
    4fa8:	e008      	b.n	4fbc <_Z9CDC_SetupR8USBSetup+0x70>
		}

		if (CDC_SEND_BREAK == r)
    4faa:	2a23      	cmp	r2, #35	; 0x23
    4fac:	d106      	bne.n	4fbc <_Z9CDC_SetupR8USBSetup+0x70>
		{
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    4fae:	885a      	ldrh	r2, [r3, #2]
    4fb0:	4b05      	ldr	r3, [pc, #20]	; (4fc8 <_Z9CDC_SetupR8USBSetup+0x7c>)
    4fb2:	601a      	str	r2, [r3, #0]
			return false;
    4fb4:	e002      	b.n	4fbc <_Z9CDC_SetupR8USBSetup+0x70>
			{
				initiateReset(250);
			}
			else
			{
				cancelReset();
    4fb6:	f7ff fc0b 	bl	47d0 <cancelReset>
			}
			return false;
    4fba:	2000      	movs	r0, #0
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
			return false;
		}
	}
	return false;
}
    4fbc:	bd10      	pop	{r4, pc}
    4fbe:	46c0      	nop			; (mov r8, r8)
    4fc0:	2000001c 	.word	0x2000001c
    4fc4:	20000c2f 	.word	0x20000c2f
    4fc8:	20000024 	.word	0x20000024

00004fcc <_ZN7Serial_5beginEm>:

void Serial_::begin(uint32_t /* baud_count */)
{
	// uart config is ignored in USB-CDC
}
    4fcc:	4770      	bx	lr
	...

00004fd0 <_ZN7Serial_cvbEv>:
// setup() before printing to ensure that an application on the host is
// actually ready to receive and display the data.
// We add a short delay before returning to fix a bug observed by Federico
// where the port is configured (lineState != 0) but not quite opened.
Serial_::operator bool()
{
    4fd0:	b510      	push	{r4, lr}
	// this is here to avoid spurious opening after upload
	if (millis() < 500)
    4fd2:	f7ff f9cd 	bl	4370 <millis>
    4fd6:	23f4      	movs	r3, #244	; 0xf4
    4fd8:	33ff      	adds	r3, #255	; 0xff
		return false;
    4fda:	2400      	movs	r4, #0
// We add a short delay before returning to fix a bug observed by Federico
// where the port is configured (lineState != 0) but not quite opened.
Serial_::operator bool()
{
	// this is here to avoid spurious opening after upload
	if (millis() < 500)
    4fdc:	4298      	cmp	r0, r3
    4fde:	d907      	bls.n	4ff0 <_ZN7Serial_cvbEv+0x20>
		return false;

	bool result = false;

	if (_usbLineInfo.lineState > 0)
    4fe0:	4b04      	ldr	r3, [pc, #16]	; (4ff4 <_ZN7Serial_cvbEv+0x24>)
	{
		result = true;
	}

	delay(10);
    4fe2:	200a      	movs	r0, #10
	if (millis() < 500)
		return false;

	bool result = false;

	if (_usbLineInfo.lineState > 0)
    4fe4:	79dc      	ldrb	r4, [r3, #7]
    4fe6:	1e63      	subs	r3, r4, #1
    4fe8:	419c      	sbcs	r4, r3
    4fea:	b2e4      	uxtb	r4, r4
	{
		result = true;
	}

	delay(10);
    4fec:	f7ff f9c6 	bl	437c <delay>
	return result;
}
    4ff0:	0020      	movs	r0, r4
    4ff2:	bd10      	pop	{r4, pc}
    4ff4:	2000001c 	.word	0x2000001c

00004ff8 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    4ff8:	22fa      	movs	r2, #250	; 0xfa
  public:
    Print() : write_error(0) {}
    4ffa:	2100      	movs	r1, #0
    4ffc:	4b05      	ldr	r3, [pc, #20]	; (5014 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
    4ffe:	0092      	lsls	r2, r2, #2
    5000:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    5002:	4a05      	ldr	r2, [pc, #20]	; (5018 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
    5004:	6059      	str	r1, [r3, #4]
    5006:	3208      	adds	r2, #8
    5008:	601a      	str	r2, [r3, #0]
    500a:	4a04      	ldr	r2, [pc, #16]	; (501c <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
    500c:	7619      	strb	r1, [r3, #24]
    500e:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    5010:	4770      	bx	lr
    5012:	46c0      	nop			; (mov r8, r8)
    5014:	20000764 	.word	0x20000764
    5018:	0000e6bc 	.word	0x0000e6bc
    501c:	20000c2f 	.word	0x20000c2f

00005020 <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
    5020:	b570      	push	{r4, r5, r6, lr}
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    5022:	24c0      	movs	r4, #192	; 0xc0
    5024:	4e19      	ldr	r6, [pc, #100]	; (508c <_ZN14USBDeviceClass6initEPEmm.part.5+0x6c>)
    5026:	b2c3      	uxtb	r3, r0
    5028:	015a      	lsls	r2, r3, #5
    502a:	18b2      	adds	r2, r6, r2
    502c:	6895      	ldr	r5, [r2, #8]
    502e:	4918      	ldr	r1, [pc, #96]	; (5090 <_ZN14USBDeviceClass6initEPEmm.part.5+0x70>)
    5030:	05a4      	lsls	r4, r4, #22
    5032:	400d      	ands	r5, r1
    5034:	4325      	orrs	r5, r4
    5036:	6095      	str	r5, [r2, #8]
	}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
	{
		// Setup Control OUT
		usbd.epBank0SetSize(ep, 64);
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    5038:	4d16      	ldr	r5, [pc, #88]	; (5094 <_ZN14USBDeviceClass6initEPEmm.part.5+0x74>)
    503a:	0180      	lsls	r0, r0, #6
    503c:	1828      	adds	r0, r5, r0
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    503e:	6050      	str	r0, [r2, #4]

	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    5040:	6830      	ldr	r0, [r6, #0]
    5042:	2607      	movs	r6, #7
    5044:	3308      	adds	r3, #8
    5046:	015b      	lsls	r3, r3, #5
    5048:	5c1d      	ldrb	r5, [r3, r0]
    504a:	43b5      	bics	r5, r6
    504c:	3e06      	subs	r6, #6
    504e:	4335      	orrs	r5, r6
    5050:	541d      	strb	r5, [r3, r0]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    5052:	6996      	ldr	r6, [r2, #24]
    5054:	4031      	ands	r1, r6
    5056:	4321      	orrs	r1, r4
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    5058:	2470      	movs	r4, #112	; 0x70
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    505a:	6191      	str	r1, [r2, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    505c:	490e      	ldr	r1, [pc, #56]	; (5098 <_ZN14USBDeviceClass6initEPEmm.part.5+0x78>)
    505e:	6151      	str	r1, [r2, #20]
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    5060:	5c19      	ldrb	r1, [r3, r0]
    5062:	43a1      	bics	r1, r4
    5064:	3c60      	subs	r4, #96	; 0x60
    5066:	4321      	orrs	r1, r4
    5068:	5419      	strb	r1, [r3, r0]
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    506a:	6894      	ldr	r4, [r2, #8]
    506c:	490b      	ldr	r1, [pc, #44]	; (509c <_ZN14USBDeviceClass6initEPEmm.part.5+0x7c>)
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    506e:	18c3      	adds	r3, r0, r3
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    5070:	4021      	ands	r1, r4
    5072:	2480      	movs	r4, #128	; 0x80
    5074:	0364      	lsls	r4, r4, #13
    5076:	4321      	orrs	r1, r4
    5078:	6091      	str	r1, [r2, #8]
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    507a:	6891      	ldr	r1, [r2, #8]
    507c:	0b89      	lsrs	r1, r1, #14
    507e:	0389      	lsls	r1, r1, #14
    5080:	6091      	str	r1, [r2, #8]
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    5082:	2140      	movs	r1, #64	; 0x40
    5084:	795a      	ldrb	r2, [r3, #5]
    5086:	430a      	orrs	r2, r1
    5088:	715a      	strb	r2, [r3, #5]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    508a:	bd70      	pop	{r4, r5, r6, pc}
    508c:	20000c38 	.word	0x20000c38
    5090:	8fffffff 	.word	0x8fffffff
    5094:	20000a50 	.word	0x20000a50
    5098:	2000088c 	.word	0x2000088c
    509c:	f0003fff 	.word	0xf0003fff

000050a0 <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
    50a0:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
    50a2:	0004      	movs	r4, r0
    50a4:	2101      	movs	r1, #1
    50a6:	cc04      	ldmia	r4!, {r2}

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
    50a8:	0005      	movs	r5, r0
	usb.CTRLA.bit.SWRST = 1;
    50aa:	7813      	ldrb	r3, [r2, #0]
	memset(EP, 0, sizeof(EP));
    50ac:	0020      	movs	r0, r4
	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
	usb.CTRLA.bit.SWRST = 1;
    50ae:	430b      	orrs	r3, r1
    50b0:	7013      	strb	r3, [r2, #0]
	memset(EP, 0, sizeof(EP));
    50b2:	2280      	movs	r2, #128	; 0x80
    50b4:	2100      	movs	r1, #0
    50b6:	0052      	lsls	r2, r2, #1
    50b8:	f004 fae3 	bl	9682 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    50bc:	682b      	ldr	r3, [r5, #0]
    50be:	789a      	ldrb	r2, [r3, #2]
    50c0:	07d2      	lsls	r2, r2, #31
    50c2:	d4fc      	bmi.n	50be <_ZN20USBDevice_SAMD21G18x5resetEv+0x1e>
	usb.DESCADD.reg = (uint32_t)(&EP);
    50c4:	625c      	str	r4, [r3, #36]	; 0x24
}
    50c6:	bd70      	pop	{r4, r5, r6, pc}

000050c8 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    50c8:	221f      	movs	r2, #31
    50ca:	4b14      	ldr	r3, [pc, #80]	; (511c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
	memset(EP, 0, sizeof(EP));
	while (usb.SYNCBUSY.bit.SWRST) {}
	usb.DESCADD.reg = (uint32_t)(&EP);
}

void USBDevice_SAMD21G18x::calibrate() {
    50cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    50ce:	681b      	ldr	r3, [r3, #0]
    50d0:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    50d2:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    50d4:	019b      	lsls	r3, r3, #6
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    50d6:	4011      	ands	r1, r2
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    50d8:	0f5b      	lsrs	r3, r3, #29
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    50da:	4022      	ands	r2, r4
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;

	if (pad_transn == 0x1F)  // maximum value (31)
    50dc:	291f      	cmp	r1, #31
    50de:	d100      	bne.n	50e2 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
    50e0:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
    50e2:	2a1f      	cmp	r2, #31
    50e4:	d100      	bne.n	50e8 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
    50e6:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
    50e8:	2b07      	cmp	r3, #7
    50ea:	d100      	bne.n	50ee <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
    50ec:	3b04      	subs	r3, #4

	usb.PADCAL.bit.TRANSN = pad_transn;
    50ee:	251f      	movs	r5, #31
    50f0:	6806      	ldr	r6, [r0, #0]
    50f2:	018c      	lsls	r4, r1, #6
    50f4:	8d37      	ldrh	r7, [r6, #40]	; 0x28
    50f6:	490a      	ldr	r1, [pc, #40]	; (5120 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
    50f8:	402a      	ands	r2, r5
	if (pad_transp == 0x1F)  // maximum value (31)
		pad_transp = 29;
	if (pad_trim == 0x7)     // maximum value (7)
		pad_trim = 3;

	usb.PADCAL.bit.TRANSN = pad_transn;
    50fa:	4039      	ands	r1, r7
    50fc:	4321      	orrs	r1, r4
    50fe:	8531      	strh	r1, [r6, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    5100:	6804      	ldr	r4, [r0, #0]
    5102:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    5104:	43a9      	bics	r1, r5
    5106:	430a      	orrs	r2, r1
    5108:	8522      	strh	r2, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    510a:	6801      	ldr	r1, [r0, #0]
    510c:	031a      	lsls	r2, r3, #12
    510e:	8d08      	ldrh	r0, [r1, #40]	; 0x28
    5110:	4b04      	ldr	r3, [pc, #16]	; (5124 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
    5112:	4003      	ands	r3, r0
    5114:	4313      	orrs	r3, r2
    5116:	850b      	strh	r3, [r1, #40]	; 0x28
}
    5118:	bdf0      	pop	{r4, r5, r6, r7, pc}
    511a:	46c0      	nop			; (mov r8, r8)
    511c:	00806024 	.word	0x00806024
    5120:	fffff83f 	.word	0xfffff83f
    5124:	ffff8fff 	.word	0xffff8fff

00005128 <_ZN7__GuardC1Ev>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5128:	f3ef 8310 	mrs	r3, PRIMASK
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    512c:	6003      	str	r3, [r0, #0]
    512e:	2301      	movs	r3, #1
    5130:	6043      	str	r3, [r0, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    5132:	b672      	cpsid	i
		__disable_irq();
	}
    5134:	4770      	bx	lr

00005136 <_ZN7__GuardD1Ev>:
	~__Guard() {
		if (primask == 0) {
    5136:	6803      	ldr	r3, [r0, #0]
    5138:	2b00      	cmp	r3, #0
    513a:	d102      	bne.n	5142 <_ZN7__GuardD1Ev+0xc>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    513c:	b662      	cpsie	i
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
    513e:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
    5142:	4770      	bx	lr

00005144 <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    5144:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
    5146:	6905      	ldr	r5, [r0, #16]
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    5148:	0004      	movs	r4, r0
		if (current == 0) {
			bool ready = false;
			synchronized {
    514a:	4668      	mov	r0, sp
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
		if (current == 0) {
    514c:	2d00      	cmp	r5, #0
    514e:	d113      	bne.n	5178 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x34>
			bool ready = false;
			synchronized {
    5150:	f7ff ffea 	bl	5128 <_ZN7__GuardC1Ev>
    5154:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
    5156:	1d62      	adds	r2, r4, #5

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
		if (current == 0) {
			bool ready = false;
			synchronized {
    5158:	3b01      	subs	r3, #1
    515a:	d302      	bcc.n	5162 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
    515c:	7fd5      	ldrb	r5, [r2, #31]
    515e:	b2ed      	uxtb	r5, r5
    5160:	e7fa      	b.n	5158 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
		if (current == 0) {
			bool ready = false;
			synchronized {
    5162:	4668      	mov	r0, sp
    5164:	9301      	str	r3, [sp, #4]
    5166:	f7ff ffe6 	bl	5136 <_ZN7__GuardD1Ev>
				ready = ready0;
			}
			return ready ? (last0 - first0) : 0;
    516a:	2d00      	cmp	r5, #0
    516c:	d101      	bne.n	5172 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
    516e:	2000      	movs	r0, #0
    5170:	e016      	b.n	51a0 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x5c>
    5172:	6a23      	ldr	r3, [r4, #32]
    5174:	69e0      	ldr	r0, [r4, #28]
    5176:	e012      	b.n	519e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x5a>
		} else {
			bool ready = false;
    5178:	2500      	movs	r5, #0
			synchronized {
    517a:	f7ff ffd5 	bl	5128 <_ZN7__GuardC1Ev>
    517e:	9b01      	ldr	r3, [sp, #4]
    5180:	3b01      	subs	r3, #1
    5182:	d304      	bcc.n	518e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4a>
				ready = ready1;
    5184:	0022      	movs	r2, r4
    5186:	3234      	adds	r2, #52	; 0x34
    5188:	7815      	ldrb	r5, [r2, #0]
    518a:	b2ed      	uxtb	r5, r5
				ready = ready0;
			}
			return ready ? (last0 - first0) : 0;
		} else {
			bool ready = false;
			synchronized {
    518c:	e7f8      	b.n	5180 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x3c>
    518e:	4668      	mov	r0, sp
    5190:	9301      	str	r3, [sp, #4]
    5192:	f7ff ffd0 	bl	5136 <_ZN7__GuardD1Ev>
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
    5196:	2d00      	cmp	r5, #0
    5198:	d0e9      	beq.n	516e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
    519a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    519c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    519e:	1a18      	subs	r0, r3, r0
		}
	}
    51a0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

000051a4 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    51a4:	6843      	ldr	r3, [r0, #4]
			}
			return ready ? (last1 - first1) : 0;
		}
	}

	void release() {
    51a6:	b530      	push	{r4, r5, lr}
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    51a8:	6819      	ldr	r1, [r3, #0]
    51aa:	23ff      	movs	r3, #255	; 0xff
    51ac:	2401      	movs	r4, #1
    51ae:	6882      	ldr	r2, [r0, #8]
    51b0:	401a      	ands	r2, r3
    51b2:	0152      	lsls	r2, r2, #5
    51b4:	188a      	adds	r2, r1, r2
    51b6:	18d2      	adds	r2, r2, r3
    51b8:	7a91      	ldrb	r1, [r2, #10]
    51ba:	4321      	orrs	r1, r4
    51bc:	7291      	strb	r1, [r2, #10]
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    51be:	6882      	ldr	r2, [r0, #8]
    51c0:	6841      	ldr	r1, [r0, #4]
    51c2:	401a      	ands	r2, r3
    51c4:	0152      	lsls	r2, r2, #5
    51c6:	188a      	adds	r2, r1, r2
    51c8:	68c1      	ldr	r1, [r0, #12]
    51ca:	6895      	ldr	r5, [r2, #8]
    51cc:	048c      	lsls	r4, r1, #18
    51ce:	490d      	ldr	r1, [pc, #52]	; (5204 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x60>)
    51d0:	0924      	lsrs	r4, r4, #4
    51d2:	4029      	ands	r1, r5
    51d4:	4321      	orrs	r1, r4
    51d6:	6091      	str	r1, [r2, #8]
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    51d8:	6882      	ldr	r2, [r0, #8]
    51da:	6841      	ldr	r1, [r0, #4]
    51dc:	401a      	ands	r2, r3
    51de:	0152      	lsls	r2, r2, #5
    51e0:	188a      	adds	r2, r1, r2
    51e2:	6891      	ldr	r1, [r2, #8]
    51e4:	0b89      	lsrs	r1, r1, #14
    51e6:	0389      	lsls	r1, r1, #14
    51e8:	6091      	str	r1, [r2, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    51ea:	6881      	ldr	r1, [r0, #8]
    51ec:	6842      	ldr	r2, [r0, #4]
    51ee:	400b      	ands	r3, r1
    51f0:	2140      	movs	r1, #64	; 0x40
    51f2:	6812      	ldr	r2, [r2, #0]
    51f4:	3308      	adds	r3, #8
    51f6:	015b      	lsls	r3, r3, #5
    51f8:	18d3      	adds	r3, r2, r3
    51fa:	791a      	ldrb	r2, [r3, #4]
    51fc:	430a      	orrs	r2, r1
    51fe:	711a      	strb	r2, [r3, #4]
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
		usbd.epBank0SetMultiPacketSize(ep, size);
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
    5200:	bd30      	pop	{r4, r5, pc}
    5202:	46c0      	nop			; (mov r8, r8)
    5204:	f0003fff 	.word	0xf0003fff

00005208 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
			}
			return i;
		}
	}

	virtual void handleEndpoint()
    5208:	b573      	push	{r0, r1, r4, r5, r6, lr}
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    520a:	6843      	ldr	r3, [r0, #4]
			}
			return i;
		}
	}

	virtual void handleEndpoint()
    520c:	0004      	movs	r4, r0
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    520e:	6818      	ldr	r0, [r3, #0]
    5210:	23ff      	movs	r3, #255	; 0xff
    5212:	68a1      	ldr	r1, [r4, #8]
    5214:	4019      	ands	r1, r3
    5216:	000a      	movs	r2, r1
    5218:	3208      	adds	r2, #8
    521a:	0152      	lsls	r2, r2, #5
    521c:	1882      	adds	r2, r0, r2
    521e:	79d1      	ldrb	r1, [r2, #7]

	virtual void handleEndpoint()
	{
		// R/W : incoming, ready0/1
		//   W : last0/1, notify
		if (usbd.epBank0IsTransferComplete(ep))
    5220:	07c9      	lsls	r1, r1, #31
    5222:	d552      	bpl.n	52ca <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xc2>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    5224:	2501      	movs	r5, #1
    5226:	71d5      	strb	r5, [r2, #7]
    5228:	68a2      	ldr	r2, [r4, #8]
			// Ack Transfer complete
			usbd.epBank0AckTransferComplete(ep);
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
    522a:	6960      	ldr	r0, [r4, #20]
    522c:	6861      	ldr	r1, [r4, #4]
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    522e:	4013      	ands	r3, r2
			// Ack Transfer complete
			usbd.epBank0AckTransferComplete(ep);
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
    5230:	2800      	cmp	r0, #0
    5232:	d11d      	bne.n	5270 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5234:	015a      	lsls	r2, r3, #5
    5236:	188b      	adds	r3, r1, r2
    5238:	689a      	ldr	r2, [r3, #8]
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
				incoming = 1;
    523a:	6165      	str	r5, [r4, #20]
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    523c:	0492      	lsls	r2, r2, #18
    523e:	0c92      	lsrs	r2, r2, #18
			usbd.epBank0AckTransferComplete(ep);
			//usbd.epBank0AckTransferFailed(ep); // XXX

			// Update counters and swap banks
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
    5240:	6222      	str	r2, [r4, #32]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5242:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
				incoming = 1;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
				ready0 = true;
				synchronized {
    5244:	4668      	mov	r0, sp
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5246:	605a      	str	r2, [r3, #4]
			// Update counters and swap banks
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
				incoming = 1;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
				ready0 = true;
    5248:	1d63      	adds	r3, r4, #5
    524a:	77dd      	strb	r5, [r3, #31]
				synchronized {
    524c:	f7ff ff6c 	bl	5128 <_ZN7__GuardC1Ev>
    5250:	0021      	movs	r1, r4
    5252:	9b01      	ldr	r3, [sp, #4]
    5254:	3135      	adds	r1, #53	; 0x35
    5256:	3b01      	subs	r3, #1
    5258:	1c5a      	adds	r2, r3, #1
    525a:	d02f      	beq.n	52bc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb4>
					if (ready1) {
    525c:	0022      	movs	r2, r4
    525e:	3234      	adds	r2, #52	; 0x34
    5260:	7812      	ldrb	r2, [r2, #0]
    5262:	1e58      	subs	r0, r3, #1
    5264:	b2d2      	uxtb	r2, r2
    5266:	2a00      	cmp	r2, #0
    5268:	d11e      	bne.n	52a8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xa0>
						notify = true;
						return;
					}
					notify = false;
    526a:	700a      	strb	r2, [r1, #0]
			if (incoming == 0) {
				last0 = usbd.epBank0ByteCount(ep);
				incoming = 1;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
				ready0 = true;
				synchronized {
    526c:	0003      	movs	r3, r0
    526e:	e7f3      	b.n	5258 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x50>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5270:	015b      	lsls	r3, r3, #5
    5272:	18cb      	adds	r3, r1, r3
    5274:	689a      	ldr	r2, [r3, #8]
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
    5276:	4668      	mov	r0, sp
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5278:	0492      	lsls	r2, r2, #18
    527a:	0c92      	lsrs	r2, r2, #18
						return;
					}
					notify = false;
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
    527c:	6322      	str	r2, [r4, #48]	; 0x30
				incoming = 0;
    527e:	2200      	movs	r2, #0
    5280:	6162      	str	r2, [r4, #20]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5282:	69a2      	ldr	r2, [r4, #24]
				last1 = usbd.epBank0ByteCount(ep);
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
					ready1 = true;
					if (ready0) {
    5284:	1d66      	adds	r6, r4, #5
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    5286:	605a      	str	r2, [r3, #4]
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
    5288:	f7ff ff4e 	bl	5128 <_ZN7__GuardC1Ev>
    528c:	0021      	movs	r1, r4
    528e:	9b01      	ldr	r3, [sp, #4]
    5290:	3135      	adds	r1, #53	; 0x35
    5292:	3b01      	subs	r3, #1
    5294:	1c5a      	adds	r2, r3, #1
    5296:	d011      	beq.n	52bc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb4>
					ready1 = true;
    5298:	0022      	movs	r2, r4
    529a:	3234      	adds	r2, #52	; 0x34
    529c:	7015      	strb	r5, [r2, #0]
					if (ready0) {
    529e:	7ff2      	ldrb	r2, [r6, #31]
    52a0:	1e58      	subs	r0, r3, #1
    52a2:	b2d2      	uxtb	r2, r2
    52a4:	2a00      	cmp	r2, #0
    52a6:	d006      	beq.n	52b6 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xae>
    52a8:	9301      	str	r3, [sp, #4]
						notify = true;
    52aa:	2301      	movs	r3, #1
						return;
    52ac:	4668      	mov	r0, sp
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
					ready1 = true;
					if (ready0) {
						notify = true;
    52ae:	700b      	strb	r3, [r1, #0]
						return;
    52b0:	f7ff ff41 	bl	5136 <_ZN7__GuardD1Ev>
    52b4:	e009      	b.n	52ca <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xc2>
					}
					notify = false;
    52b6:	700a      	strb	r2, [r1, #0]
				}
			} else {
				last1 = usbd.epBank0ByteCount(ep);
				incoming = 0;
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
				synchronized {
    52b8:	0003      	movs	r3, r0
    52ba:	e7eb      	b.n	5294 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x8c>
    52bc:	4668      	mov	r0, sp
    52be:	9301      	str	r3, [sp, #4]
    52c0:	f7ff ff39 	bl	5136 <_ZN7__GuardD1Ev>
						return;
					}
					notify = false;
				}
			}
			release();
    52c4:	0020      	movs	r0, r4
    52c6:	f7ff ff6d 	bl	51a4 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
		}
	}
    52ca:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

000052cc <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
	}

	virtual uint32_t recv(void *_data, uint32_t len)
    52cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	{
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
    52ce:	6905      	ldr	r5, [r0, #16]
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
	}

	virtual uint32_t recv(void *_data, uint32_t len)
    52d0:	0004      	movs	r4, r0
    52d2:	000f      	movs	r7, r1
    52d4:	0016      	movs	r6, r2
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
			synchronized {
    52d6:	4668      	mov	r0, sp
	{
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
    52d8:	2d00      	cmp	r5, #0
    52da:	d119      	bne.n	5310 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x44>
			synchronized {
    52dc:	f7ff ff24 	bl	5128 <_ZN7__GuardC1Ev>
    52e0:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
    52e2:	1d60      	adds	r0, r4, #5
    52e4:	3b01      	subs	r3, #1
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
			synchronized {
    52e6:	1c5a      	adds	r2, r3, #1
    52e8:	d005      	beq.n	52f6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x2a>
				if (!ready0) {
    52ea:	7fc2      	ldrb	r2, [r0, #31]
    52ec:	1e59      	subs	r1, r3, #1
    52ee:	2a00      	cmp	r2, #0
    52f0:	d040      	beq.n	5374 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xa8>
    52f2:	000b      	movs	r3, r1
    52f4:	e7f7      	b.n	52e6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
		uint8_t *data = reinterpret_cast<uint8_t *>(_data);

		// R/W: current, first0/1, ready0/1, notify
		// R  : last0/1, data0/1
		if (current == 0) {
			synchronized {
    52f6:	4668      	mov	r0, sp
    52f8:	9301      	str	r3, [sp, #4]
    52fa:	f7ff ff1c 	bl	5136 <_ZN7__GuardD1Ev>
					return 0;
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
    52fe:	2200      	movs	r2, #0
    5300:	69e3      	ldr	r3, [r4, #28]
    5302:	4296      	cmp	r6, r2
    5304:	d043      	beq.n	538e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc2>
    5306:	6a21      	ldr	r1, [r4, #32]
    5308:	428b      	cmp	r3, r1
    530a:	d338      	bcc.n	537e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb2>
    530c:	0016      	movs	r6, r2
    530e:	e03e      	b.n	538e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc2>
					}
				}
			}
			return i;
		} else {
			synchronized {
    5310:	f7ff ff0a 	bl	5128 <_ZN7__GuardC1Ev>
    5314:	9b01      	ldr	r3, [sp, #4]
    5316:	3b01      	subs	r3, #1
    5318:	1c5a      	adds	r2, r3, #1
    531a:	d008      	beq.n	532e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
				if (!ready1) {
    531c:	0022      	movs	r2, r4
    531e:	3234      	adds	r2, #52	; 0x34
    5320:	7815      	ldrb	r5, [r2, #0]
    5322:	1e5a      	subs	r2, r3, #1
    5324:	b2ed      	uxtb	r5, r5
    5326:	2d00      	cmp	r5, #0
    5328:	d024      	beq.n	5374 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xa8>
    532a:	0013      	movs	r3, r2
    532c:	e7f4      	b.n	5318 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4c>
					}
				}
			}
			return i;
		} else {
			synchronized {
    532e:	4668      	mov	r0, sp
    5330:	9301      	str	r3, [sp, #4]
					return 0;
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
    5332:	2500      	movs	r5, #0
					}
				}
			}
			return i;
		} else {
			synchronized {
    5334:	f7ff feff 	bl	5136 <_ZN7__GuardD1Ev>
    5338:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
					return 0;
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
    533a:	42b5      	cmp	r5, r6
    533c:	d00a      	beq.n	5354 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
    533e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5340:	4293      	cmp	r3, r2
    5342:	d207      	bcs.n	5354 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
				data[i] = data1[first1++];
    5344:	1c5a      	adds	r2, r3, #1
    5346:	62e2      	str	r2, [r4, #44]	; 0x2c
    5348:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    534a:	18d3      	adds	r3, r2, r3
    534c:	781b      	ldrb	r3, [r3, #0]
    534e:	557b      	strb	r3, [r7, r5]
					return 0;
				}
			}
			// when ready1==true the buffer is not being filled and last1 is constant
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
    5350:	3501      	adds	r5, #1
    5352:	e7f1      	b.n	5338 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6c>
				data[i] = data1[first1++];
			}
			if (first1 == last1) {
    5354:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5356:	4293      	cmp	r3, r2
    5358:	d14f      	bne.n	53fa <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x12e>
				first1 = 0;
    535a:	2300      	movs	r3, #0
				current = 0;
				synchronized {
    535c:	4668      	mov	r0, sp
			uint32_t i;
			for (i=0; i<len && first1 < last1; i++) {
				data[i] = data1[first1++];
			}
			if (first1 == last1) {
				first1 = 0;
    535e:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
    5360:	6123      	str	r3, [r4, #16]
				synchronized {
    5362:	f7ff fee1 	bl	5128 <_ZN7__GuardC1Ev>
					ready1 = false;
					if (notify) {
    5366:	0022      	movs	r2, r4
			}
			if (first1 == last1) {
				first1 = 0;
				current = 0;
				synchronized {
					ready1 = false;
    5368:	2600      	movs	r6, #0
    536a:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
    536c:	3235      	adds	r2, #53	; 0x35
    536e:	3b01      	subs	r3, #1
				data[i] = data1[first1++];
			}
			if (first1 == last1) {
				first1 = 0;
				current = 0;
				synchronized {
    5370:	1c59      	adds	r1, r3, #1
    5372:	d132      	bne.n	53da <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
    5374:	4668      	mov	r0, sp
    5376:	9301      	str	r3, [sp, #4]
    5378:	f7ff fedd 	bl	5136 <_ZN7__GuardD1Ev>
    537c:	e03d      	b.n	53fa <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x12e>
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
				data[i] = data0[first0++];
    537e:	1c59      	adds	r1, r3, #1
    5380:	61e1      	str	r1, [r4, #28]
    5382:	69a1      	ldr	r1, [r4, #24]
    5384:	18cb      	adds	r3, r1, r3
    5386:	781b      	ldrb	r3, [r3, #0]
    5388:	54bb      	strb	r3, [r7, r2]
					return 0;
				}
			}
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
    538a:	3201      	adds	r2, #1
    538c:	e7b8      	b.n	5300 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
    538e:	6a22      	ldr	r2, [r4, #32]
    5390:	4293      	cmp	r3, r2
    5392:	d120      	bne.n	53d6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10a>
				first0 = 0;
    5394:	2300      	movs	r3, #0
    5396:	61e3      	str	r3, [r4, #28]
				current = 1;
    5398:	3301      	adds	r3, #1
    539a:	6123      	str	r3, [r4, #16]
				synchronized {
    539c:	4668      	mov	r0, sp
    539e:	f7ff fec3 	bl	5128 <_ZN7__GuardC1Ev>
					ready0 = false;
					if (notify) {
    53a2:	0022      	movs	r2, r4
			}
			if (first0 == last0) {
				first0 = 0;
				current = 1;
				synchronized {
					ready0 = false;
    53a4:	2700      	movs	r7, #0
    53a6:	9b01      	ldr	r3, [sp, #4]
    53a8:	1d65      	adds	r5, r4, #5
    53aa:	3b01      	subs	r3, #1
					if (notify) {
    53ac:	3235      	adds	r2, #53	; 0x35
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
				first0 = 0;
				current = 1;
				synchronized {
    53ae:	1c59      	adds	r1, r3, #1
    53b0:	d00d      	beq.n	53ce <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x102>
					ready0 = false;
    53b2:	77ef      	strb	r7, [r5, #31]
					if (notify) {
    53b4:	7811      	ldrb	r1, [r2, #0]
    53b6:	1e58      	subs	r0, r3, #1
    53b8:	2900      	cmp	r1, #0
    53ba:	d101      	bne.n	53c0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xf4>
    53bc:	0003      	movs	r3, r0
    53be:	e7f6      	b.n	53ae <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe2>
    53c0:	9301      	str	r3, [sp, #4]
						notify = false;
    53c2:	2300      	movs	r3, #0
						release();
    53c4:	0020      	movs	r0, r4
				first0 = 0;
				current = 1;
				synchronized {
					ready0 = false;
					if (notify) {
						notify = false;
    53c6:	7013      	strb	r3, [r2, #0]
						release();
    53c8:	f7ff feec 	bl	51a4 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    53cc:	e7e9      	b.n	53a2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd6>
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
				first0 = 0;
				current = 1;
				synchronized {
    53ce:	4668      	mov	r0, sp
    53d0:	9301      	str	r3, [sp, #4]
    53d2:	f7ff feb0 	bl	5136 <_ZN7__GuardD1Ev>
			// when ready0==true the buffer is not being filled and last0 is constant
			uint32_t i;
			for (i=0; i<len && first0 < last0; i++) {
				data[i] = data0[first0++];
			}
			if (first0 == last0) {
    53d6:	0035      	movs	r5, r6
    53d8:	e00f      	b.n	53fa <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x12e>
			}
			if (first1 == last1) {
				first1 = 0;
				current = 0;
				synchronized {
					ready1 = false;
    53da:	0021      	movs	r1, r4
    53dc:	3134      	adds	r1, #52	; 0x34
    53de:	700e      	strb	r6, [r1, #0]
					if (notify) {
    53e0:	7811      	ldrb	r1, [r2, #0]
    53e2:	1e58      	subs	r0, r3, #1
    53e4:	2900      	cmp	r1, #0
    53e6:	d101      	bne.n	53ec <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x120>
    53e8:	0003      	movs	r3, r0
    53ea:	e7c1      	b.n	5370 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xa4>
    53ec:	9301      	str	r3, [sp, #4]
						notify = false;
    53ee:	2300      	movs	r3, #0
						release();
    53f0:	0020      	movs	r0, r4
				first1 = 0;
				current = 0;
				synchronized {
					ready1 = false;
					if (notify) {
						notify = false;
    53f2:	7013      	strb	r3, [r2, #0]
						release();
    53f4:	f7ff fed6 	bl	51a4 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    53f8:	e7b5      	b.n	5366 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x9a>
					}
				}
			}
			return i;
		}
	}
    53fa:	0028      	movs	r0, r5
    53fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000053fe <_ZN14USBDeviceClass14SendInterfacesEPm>:
		sendControl(_pack_buffer, _pack_size);
	}
}

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
    53fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    5400:	466b      	mov	r3, sp
    5402:	1ddc      	adds	r4, r3, #7
    5404:	2300      	movs	r3, #0
		sendControl(_pack_buffer, _pack_size);
	}
}

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
    5406:	000d      	movs	r5, r1
	uint8_t interfaces = 0;

#if defined(CDC_ENABLED)
	total[0] += CDC_GetInterface(&interfaces);
    5408:	0020      	movs	r0, r4
	}
}

uint8_t USBDeviceClass::SendInterfaces(uint32_t* total)
{
	uint8_t interfaces = 0;
    540a:	7023      	strb	r3, [r4, #0]

#if defined(CDC_ENABLED)
	total[0] += CDC_GetInterface(&interfaces);
    540c:	f7ff fd90 	bl	4f30 <_Z16CDC_GetInterfacePh>
    5410:	682b      	ldr	r3, [r5, #0]
    5412:	1818      	adds	r0, r3, r0
    5414:	6028      	str	r0, [r5, #0]
#endif

#ifdef PLUGGABLE_USB_ENABLED
	total[0] += PluggableUSB().getInterface(&interfaces);
    5416:	f001 fa03 	bl	6820 <_Z12PluggableUSBv>
    541a:	0021      	movs	r1, r4
    541c:	f001 f9bb 	bl	6796 <_ZN13PluggableUSB_12getInterfaceEPh>
    5420:	682b      	ldr	r3, [r5, #0]
    5422:	1818      	adds	r0, r3, r0
    5424:	6028      	str	r0, [r5, #0]
#endif

	return interfaces;
    5426:	7820      	ldrb	r0, [r4, #0]
}
    5428:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0000542c <_ZN14USBDeviceClass14handleEndpointEh>:
}

void USBDeviceClass::handleEndpoint(uint8_t ep)
{
#if defined(CDC_ENABLED)
	if (ep == CDC_ENDPOINT_IN)
    542c:	2903      	cmp	r1, #3
    542e:	d10c      	bne.n	544a <_ZN14USBDeviceClass14handleEndpointEh+0x1e>
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    5430:	2080      	movs	r0, #128	; 0x80
    5432:	4b0e      	ldr	r3, [pc, #56]	; (546c <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    5434:	3162      	adds	r1, #98	; 0x62
    5436:	681b      	ldr	r3, [r3, #0]
    5438:	31ff      	adds	r1, #255	; 0xff
    543a:	5c5a      	ldrb	r2, [r3, r1]
    543c:	4240      	negs	r0, r0
    543e:	4302      	orrs	r2, r0
    5440:	545a      	strb	r2, [r3, r1]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    5442:	3963      	subs	r1, #99	; 0x63
    5444:	39ff      	subs	r1, #255	; 0xff
    5446:	2268      	movs	r2, #104	; 0x68
    5448:	e00d      	b.n	5466 <_ZN14USBDeviceClass14handleEndpointEh+0x3a>
	{
		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(CDC_ENDPOINT_IN);
		usbd.epBank1AckTransferComplete(CDC_ENDPOINT_IN);
	}
	if (ep == CDC_ENDPOINT_ACM)
    544a:	2901      	cmp	r1, #1
    544c:	d10d      	bne.n	546a <_ZN14USBDeviceClass14handleEndpointEh+0x3e>
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    544e:	2080      	movs	r0, #128	; 0x80
    5450:	4b06      	ldr	r3, [pc, #24]	; (546c <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    5452:	3124      	adds	r1, #36	; 0x24
    5454:	681b      	ldr	r3, [r3, #0]
    5456:	31ff      	adds	r1, #255	; 0xff
    5458:	5c5a      	ldrb	r2, [r3, r1]
    545a:	4240      	negs	r0, r0
    545c:	4302      	orrs	r2, r0
    545e:	545a      	strb	r2, [r3, r1]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    5460:	2228      	movs	r2, #40	; 0x28
    5462:	3923      	subs	r1, #35	; 0x23
    5464:	39ff      	subs	r1, #255	; 0xff
    5466:	32ff      	adds	r2, #255	; 0xff
    5468:	5499      	strb	r1, [r3, r2]
#endif

#if defined(PLUGGABLE_USB_ENABLED)
	// Empty
#endif
}
    546a:	4770      	bx	lr
    546c:	20000c38 	.word	0x20000c38

00005470 <_ZN14USBDeviceClass4initEv>:

void USBDeviceClass::init()
{
    5470:	b570      	push	{r4, r5, r6, lr}
#ifdef PIN_LED_TXL
	txLEDPulse = 0;
    5472:	2500      	movs	r5, #0
    5474:	4b2f      	ldr	r3, [pc, #188]	; (5534 <_ZN14USBDeviceClass4initEv+0xc4>)
	pinMode(PIN_LED_TXL, OUTPUT);
    5476:	2101      	movs	r1, #1
	// Empty
#endif
}

void USBDeviceClass::init()
{
    5478:	0004      	movs	r4, r0
#ifdef PIN_LED_TXL
	txLEDPulse = 0;
	pinMode(PIN_LED_TXL, OUTPUT);
    547a:	201a      	movs	r0, #26
}

void USBDeviceClass::init()
{
#ifdef PIN_LED_TXL
	txLEDPulse = 0;
    547c:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    547e:	f000 fe31 	bl	60e4 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    5482:	2101      	movs	r1, #1
    5484:	201a      	movs	r0, #26
    5486:	f000 fe81 	bl	618c <digitalWrite>
#endif

#ifdef PIN_LED_RXL
	rxLEDPulse = 0;
    548a:	4b2b      	ldr	r3, [pc, #172]	; (5538 <_ZN14USBDeviceClass4initEv+0xc8>)
	pinMode(PIN_LED_RXL, OUTPUT);
    548c:	2101      	movs	r1, #1
    548e:	2019      	movs	r0, #25
	pinMode(PIN_LED_TXL, OUTPUT);
	digitalWrite(PIN_LED_TXL, HIGH);
#endif

#ifdef PIN_LED_RXL
	rxLEDPulse = 0;
    5490:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    5492:	f000 fe27 	bl	60e4 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    5496:	2101      	movs	r1, #1
    5498:	2019      	movs	r0, #25
    549a:	f000 fe77 	bl	618c <digitalWrite>
#endif

	// Enable USB clock
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    549e:	2120      	movs	r1, #32
    54a0:	4a26      	ldr	r2, [pc, #152]	; (553c <_ZN14USBDeviceClass4initEv+0xcc>)

	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    54a2:	3501      	adds	r5, #1
	pinMode(PIN_LED_RXL, OUTPUT);
	digitalWrite(PIN_LED_RXL, HIGH);
#endif

	// Enable USB clock
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    54a4:	69d3      	ldr	r3, [r2, #28]
    54a6:	430b      	orrs	r3, r1
    54a8:	61d3      	str	r3, [r2, #28]

	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    54aa:	4a25      	ldr	r2, [pc, #148]	; (5540 <_ZN14USBDeviceClass4initEv+0xd0>)
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    54ac:	391a      	subs	r1, #26

	// Enable USB clock
	PM->APBBMASK.reg |= PM_APBBMASK_USB;

	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    54ae:	7813      	ldrb	r3, [r2, #0]
    54b0:	432b      	orrs	r3, r5
    54b2:	7013      	strb	r3, [r2, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    54b4:	220f      	movs	r2, #15
    54b6:	4b23      	ldr	r3, [pc, #140]	; (5544 <_ZN14USBDeviceClass4initEv+0xd4>)
    54b8:	7818      	ldrb	r0, [r3, #0]
    54ba:	4390      	bics	r0, r2
    54bc:	7018      	strb	r0, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    54be:	7818      	ldrb	r0, [r3, #0]
    54c0:	4308      	orrs	r0, r1
    54c2:	7018      	strb	r0, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    54c4:	4820      	ldr	r0, [pc, #128]	; (5548 <_ZN14USBDeviceClass4initEv+0xd8>)
    54c6:	7801      	ldrb	r1, [r0, #0]
    54c8:	4329      	orrs	r1, r5
    54ca:	7001      	strb	r1, [r0, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    54cc:	7819      	ldrb	r1, [r3, #0]
    54ce:	400a      	ands	r2, r1
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    54d0:	2160      	movs	r1, #96	; 0x60
	// Set up the USB DP/DN pins
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    54d2:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    54d4:	781a      	ldrb	r2, [r3, #0]
    54d6:	430a      	orrs	r2, r1
    54d8:	701a      	strb	r2, [r3, #0]

	// Put Generic Clock Generator 0 as source for Generic Clock Multiplexer 6 (USB reference)
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
	                    GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
	                    GCLK_CLKCTRL_CLKEN;
    54da:	4b1c      	ldr	r3, [pc, #112]	; (554c <_ZN14USBDeviceClass4initEv+0xdc>)
    54dc:	4a1c      	ldr	r2, [pc, #112]	; (5550 <_ZN14USBDeviceClass4initEv+0xe0>)
    54de:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    54e0:	785a      	ldrb	r2, [r3, #1]
    54e2:	09d2      	lsrs	r2, r2, #7
    54e4:	d1fc      	bne.n	54e0 <_ZN14USBDeviceClass4initEv+0x70>
		;

	USB_SetHandler(&UDD_Handler);
    54e6:	481b      	ldr	r0, [pc, #108]	; (5554 <_ZN14USBDeviceClass4initEv+0xe4>)
    54e8:	f7fe ff3c 	bl	4364 <USB_SetHandler>

	// Reset USB Device
	usbd.reset();
    54ec:	4d1a      	ldr	r5, [pc, #104]	; (5558 <_ZN14USBDeviceClass4initEv+0xe8>)
    54ee:	0028      	movs	r0, r5
    54f0:	f7ff fdd6 	bl	50a0 <_ZN20USBDevice_SAMD21G18x5resetEv>

	usbd.calibrate();
    54f4:	0028      	movs	r0, r5
    54f6:	f7ff fde7 	bl	50c8 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	// Enable
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
	inline void disable() { usb.CTRLA.bit.ENABLE = 0; }

	// USB mode (device/host)
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    54fa:	227f      	movs	r2, #127	; 0x7f
    54fc:	682b      	ldr	r3, [r5, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    54fe:	20c1      	movs	r0, #193	; 0xc1
    5500:	7819      	ldrb	r1, [r3, #0]
    5502:	0080      	lsls	r0, r0, #2
    5504:	400a      	ands	r2, r1
	inline void setUSBHostMode()   { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_HOST_Val;   }

	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    5506:	2104      	movs	r1, #4
	// Enable
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
	inline void disable() { usb.CTRLA.bit.ENABLE = 0; }

	// USB mode (device/host)
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    5508:	701a      	strb	r2, [r3, #0]
	inline void setUSBHostMode()   { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_HOST_Val;   }

	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    550a:	781a      	ldrb	r2, [r3, #0]
    550c:	430a      	orrs	r2, r1
    550e:	701a      	strb	r2, [r3, #0]
	inline void noRunInStandby() { usb.CTRLA.bit.RUNSTDBY = 0; }

	// USB speed
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    5510:	891a      	ldrh	r2, [r3, #8]
    5512:	3108      	adds	r1, #8
    5514:	438a      	bics	r2, r1
    5516:	4911      	ldr	r1, [pc, #68]	; (555c <_ZN14USBDeviceClass4initEv+0xec>)
    5518:	811a      	strh	r2, [r3, #8]
    551a:	580a      	ldr	r2, [r1, r0]
    551c:	0212      	lsls	r2, r2, #8
    551e:	0a12      	lsrs	r2, r2, #8
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    5520:	500a      	str	r2, [r1, r0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    5522:	2280      	movs	r2, #128	; 0x80
    5524:	600a      	str	r2, [r1, #0]

	// Reset USB Device
	void reset();

	// Enable
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    5526:	2102      	movs	r1, #2
    5528:	781a      	ldrb	r2, [r3, #0]
    552a:	430a      	orrs	r2, r1
    552c:	701a      	strb	r2, [r3, #0]
	NVIC_SetPriority((IRQn_Type) USB_IRQn, 0UL);
	NVIC_EnableIRQ((IRQn_Type) USB_IRQn);

	usbd.enable();

	initialized = true;
    552e:	2301      	movs	r3, #1
    5530:	7023      	strb	r3, [r4, #0]
}
    5532:	bd70      	pop	{r4, r5, r6, pc}
    5534:	20000a4c 	.word	0x20000a4c
    5538:	20000c34 	.word	0x20000c34
    553c:	40000400 	.word	0x40000400
    5540:	41004458 	.word	0x41004458
    5544:	4100443c 	.word	0x4100443c
    5548:	41004459 	.word	0x41004459
    554c:	40000c00 	.word	0x40000c00
    5550:	00004006 	.word	0x00004006
    5554:	00005f3d 	.word	0x00005f3d
    5558:	20000c38 	.word	0x20000c38
    555c:	e000e100 	.word	0xe000e100

00005560 <_ZN14USBDeviceClass6attachEv>:

bool USBDeviceClass::attach()
{
	if (!initialized)
    5560:	7800      	ldrb	r0, [r0, #0]
    5562:	2800      	cmp	r0, #0
    5564:	d010      	beq.n	5588 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void setLowSpeed()        { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;   }
	inline void setHiSpeed()         { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_HS_Val;   }
	inline void setHiSpeedTestMode() { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_HSTM_Val; }

	// Authorize attach if Vbus is present
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    5566:	2101      	movs	r1, #1
    5568:	4b08      	ldr	r3, [pc, #32]	; (558c <_ZN14USBDeviceClass6attachEv+0x2c>)
    556a:	681b      	ldr	r3, [r3, #0]
    556c:	891a      	ldrh	r2, [r3, #8]
    556e:	438a      	bics	r2, r1
    5570:	811a      	strh	r2, [r3, #8]
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }

	// USB Interrupts
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    5572:	8b1a      	ldrh	r2, [r3, #24]
    5574:	3107      	adds	r1, #7
    5576:	430a      	orrs	r2, r1
    5578:	831a      	strh	r2, [r3, #24]
	inline void disableEndOfResetInterrupt()   { usb.INTENCLR.bit.EORST = 1; }

	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    557a:	8b1a      	ldrh	r2, [r3, #24]
    557c:	3904      	subs	r1, #4
    557e:	430a      	orrs	r2, r1
    5580:	831a      	strh	r2, [r3, #24]

	usbd.attach();
	usbd.enableEndOfResetInterrupt();
	usbd.enableStartOfFrameInterrupt();

	_usbConfiguration = 0;
    5582:	2200      	movs	r2, #0
    5584:	4b02      	ldr	r3, [pc, #8]	; (5590 <_ZN14USBDeviceClass6attachEv+0x30>)
    5586:	601a      	str	r2, [r3, #0]
	return true;
}
    5588:	4770      	bx	lr
    558a:	46c0      	nop			; (mov r8, r8)
    558c:	20000c38 	.word	0x20000c38
    5590:	20000d3c 	.word	0x20000d3c

00005594 <_ZN14USBDeviceClass10setAddressEm>:

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    5594:	4a0e      	ldr	r2, [pc, #56]	; (55d0 <_ZN14USBDeviceClass10setAddressEm+0x3c>)

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    5596:	2080      	movs	r0, #128	; 0x80

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    5598:	6993      	ldr	r3, [r2, #24]

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    559a:	4240      	negs	r0, r0

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    559c:	0b9b      	lsrs	r3, r3, #14
    559e:	039b      	lsls	r3, r3, #14
    55a0:	6193      	str	r3, [r2, #24]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    55a2:	6813      	ldr	r3, [r2, #0]
    55a4:	2202      	movs	r2, #2
    55a6:	33ff      	adds	r3, #255	; 0xff
    55a8:	721a      	strb	r2, [r3, #8]

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    55aa:	799a      	ldrb	r2, [r3, #6]
    55ac:	4302      	orrs	r2, r0
    55ae:	719a      	strb	r2, [r3, #6]

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    55b0:	7a1a      	ldrb	r2, [r3, #8]

	// RAM buffer is full, we can send data (IN)
	usbd.epBank1SetReady(0);

	// Wait for transfer to complete
	while (!usbd.epBank1IsTransferComplete(0)) {}
    55b2:	0792      	lsls	r2, r2, #30
    55b4:	d5fc      	bpl.n	55b0 <_ZN14USBDeviceClass10setAddressEm+0x1c>

	// Set USB address to addr
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    55b6:	207f      	movs	r0, #127	; 0x7f
    55b8:	4b06      	ldr	r3, [pc, #24]	; (55d4 <_ZN14USBDeviceClass10setAddressEm+0x40>)
    55ba:	4001      	ands	r1, r0
    55bc:	7a9a      	ldrb	r2, [r3, #10]
    55be:	4382      	bics	r2, r0
    55c0:	4311      	orrs	r1, r2
    55c2:	7299      	strb	r1, [r3, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    55c4:	2180      	movs	r1, #128	; 0x80
    55c6:	7a9a      	ldrb	r2, [r3, #10]
    55c8:	4249      	negs	r1, r1
    55ca:	430a      	orrs	r2, r1
    55cc:	729a      	strb	r2, [r3, #10]
}
    55ce:	4770      	bx	lr
    55d0:	20000c38 	.word	0x20000c38
    55d4:	41005000 	.word	0x41005000

000055d8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
	return _usbConfiguration != 0;
}

bool USBDeviceClass::handleClassInterfaceSetup(USBSetup& setup)
{
    55d8:	b510      	push	{r4, lr}
	uint8_t i = setup.wIndex;

	#if defined(CDC_ENABLED)
	if (CDC_ACM_INTERFACE == i)
    55da:	790b      	ldrb	r3, [r1, #4]
{
	return _usbConfiguration != 0;
}

bool USBDeviceClass::handleClassInterfaceSetup(USBSetup& setup)
{
    55dc:	000c      	movs	r4, r1
	uint8_t i = setup.wIndex;

	#if defined(CDC_ENABLED)
	if (CDC_ACM_INTERFACE == i)
    55de:	2b00      	cmp	r3, #0
    55e0:	d10b      	bne.n	55fa <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x22>
	{
		if (CDC_Setup(setup) == false) {
    55e2:	0008      	movs	r0, r1
    55e4:	f7ff fcb2 	bl	4f4c <_Z9CDC_SetupR8USBSetup>
    55e8:	2800      	cmp	r0, #0
    55ea:	d104      	bne.n	55f6 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x1e>

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    55ec:	4a09      	ldr	r2, [pc, #36]	; (5614 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x3c>)
    55ee:	6993      	ldr	r3, [r2, #24]
    55f0:	0b9b      	lsrs	r3, r3, #14
    55f2:	039b      	lsls	r3, r3, #14
    55f4:	6193      	str	r3, [r2, #24]
			sendZlp(0);
		}
		return true;
    55f6:	2001      	movs	r0, #1
    55f8:	e00b      	b.n	5612 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x3a>
	}
	#endif

	#if defined(PLUGGABLE_USB_ENABLED)
	bool ret = PluggableUSB().setup(setup);
    55fa:	f001 f911 	bl	6820 <_Z12PluggableUSBv>
    55fe:	0021      	movs	r1, r4
    5600:	f001 f8fd 	bl	67fe <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    5604:	2800      	cmp	r0, #0
    5606:	d1f6      	bne.n	55f6 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x1e>
    5608:	4a02      	ldr	r2, [pc, #8]	; (5614 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x3c>)
    560a:	6993      	ldr	r3, [r2, #24]
    560c:	0b9b      	lsrs	r3, r3, #14
    560e:	039b      	lsls	r3, r3, #14
    5610:	6193      	str	r3, [r2, #24]
	}
	return ret;
	#endif

	return false;
}
    5612:	bd10      	pop	{r4, pc}
    5614:	20000c38 	.word	0x20000c38

00005618 <_ZN14USBDeviceClass6initEPEmm>:
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
{
    5618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    561a:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    561c:	2a83      	cmp	r2, #131	; 0x83
    561e:	d116      	bne.n	564e <_ZN14USBDeviceClass6initEPEmm+0x36>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    5620:	4841      	ldr	r0, [pc, #260]	; (5728 <_ZN14USBDeviceClass6initEPEmm+0x110>)
    5622:	b2cb      	uxtb	r3, r1
    5624:	0159      	lsls	r1, r3, #5
    5626:	1841      	adds	r1, r0, r1
    5628:	698e      	ldr	r6, [r1, #24]
    562a:	4a40      	ldr	r2, [pc, #256]	; (572c <_ZN14USBDeviceClass6initEPEmm+0x114>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    562c:	01ad      	lsls	r5, r5, #6
    562e:	4032      	ands	r2, r6
    5630:	26c0      	movs	r6, #192	; 0xc0
    5632:	05b6      	lsls	r6, r6, #22
    5634:	4332      	orrs	r2, r6
    5636:	618a      	str	r2, [r1, #24]
    5638:	4a3d      	ldr	r2, [pc, #244]	; (5730 <_ZN14USBDeviceClass6initEPEmm+0x118>)
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    563a:	3308      	adds	r3, #8
    563c:	1955      	adds	r5, r2, r5
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    563e:	614d      	str	r5, [r1, #20]
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    5640:	6801      	ldr	r1, [r0, #0]
    5642:	2070      	movs	r0, #112	; 0x70
    5644:	015b      	lsls	r3, r3, #5
    5646:	5c5a      	ldrb	r2, [r3, r1]
    5648:	4382      	bics	r2, r0
    564a:	3830      	subs	r0, #48	; 0x30
    564c:	e062      	b.n	5714 <_ZN14USBDeviceClass6initEPEmm+0xfc>
		usbd.epBank1SetType(ep, 4); // INTERRUPT IN
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    564e:	2a02      	cmp	r2, #2
    5650:	d142      	bne.n	56d8 <_ZN14USBDeviceClass6initEPEmm+0xc0>
	{
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    5652:	2038      	movs	r0, #56	; 0x38
    5654:	f7fe ff16 	bl	4484 <_Znwj>
		usbd(usbDev),
		ep(endPoint), size(bufferSize),
		current(0), incoming(0),
		first0(0), last0(0), ready0(false),
		first1(0), last1(0), ready1(false),
		notify(false)
    5658:	4b36      	ldr	r3, [pc, #216]	; (5734 <_ZN14USBDeviceClass6initEPEmm+0x11c>)
    565a:	2780      	movs	r7, #128	; 0x80
    565c:	6003      	str	r3, [r0, #0]
    565e:	2300      	movs	r3, #0
    5660:	4e31      	ldr	r6, [pc, #196]	; (5728 <_ZN14USBDeviceClass6initEPEmm+0x110>)
    5662:	007f      	lsls	r7, r7, #1
    5664:	1d42      	adds	r2, r0, #5
    5666:	6203      	str	r3, [r0, #32]
    5668:	6103      	str	r3, [r0, #16]
    566a:	6143      	str	r3, [r0, #20]
    566c:	61c3      	str	r3, [r0, #28]
    566e:	6046      	str	r6, [r0, #4]
    5670:	6085      	str	r5, [r0, #8]
    5672:	60c7      	str	r7, [r0, #12]
    5674:	77d3      	strb	r3, [r2, #31]
    5676:	322f      	adds	r2, #47	; 0x2f
    5678:	0004      	movs	r4, r0
    567a:	62c3      	str	r3, [r0, #44]	; 0x2c
    567c:	6303      	str	r3, [r0, #48]	; 0x30
    567e:	7013      	strb	r3, [r2, #0]
	{
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    5680:	0038      	movs	r0, r7
		usbd(usbDev),
		ep(endPoint), size(bufferSize),
		current(0), incoming(0),
		first0(0), last0(0), ready0(false),
		first1(0), last1(0), ready1(false),
		notify(false)
    5682:	7053      	strb	r3, [r2, #1]
	{
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    5684:	f003 ffbc 	bl	9600 <malloc>
    5688:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    568a:	0038      	movs	r0, r7
    568c:	f003 ffb8 	bl	9600 <malloc>
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    5690:	23ff      	movs	r3, #255	; 0xff
    5692:	002a      	movs	r2, r5
    5694:	401a      	ands	r2, r3
		first0(0), last0(0), ready0(false),
		first1(0), last1(0), ready1(false),
		notify(false)
	{
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    5696:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    5698:	0150      	lsls	r0, r2, #5
    569a:	1830      	adds	r0, r6, r0
    569c:	6887      	ldr	r7, [r0, #8]
    569e:	4923      	ldr	r1, [pc, #140]	; (572c <_ZN14USBDeviceClass6initEPEmm+0x114>)

	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    56a0:	3208      	adds	r2, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    56a2:	4039      	ands	r1, r7
    56a4:	27c0      	movs	r7, #192	; 0xc0
    56a6:	05bf      	lsls	r7, r7, #22
    56a8:	4339      	orrs	r1, r7
    56aa:	6081      	str	r1, [r0, #8]

	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    56ac:	6830      	ldr	r0, [r6, #0]
    56ae:	2607      	movs	r6, #7
    56b0:	0152      	lsls	r2, r2, #5
    56b2:	5c11      	ldrb	r1, [r2, r0]
    56b4:	00ad      	lsls	r5, r5, #2
    56b6:	43b1      	bics	r1, r6
    56b8:	3e04      	subs	r6, #4
    56ba:	4331      	orrs	r1, r6
    56bc:	5411      	strb	r1, [r2, r0]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    56be:	68a2      	ldr	r2, [r4, #8]
		usbd.epBank0SetSize(ep, 64);
		usbd.epBank0SetType(ep, 3); // BULK OUT

		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
    56c0:	0020      	movs	r0, r4
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    56c2:	4013      	ands	r3, r2
    56c4:	6862      	ldr	r2, [r4, #4]
    56c6:	015b      	lsls	r3, r3, #5
    56c8:	18d3      	adds	r3, r2, r3
    56ca:	69a2      	ldr	r2, [r4, #24]
    56cc:	605a      	str	r2, [r3, #4]
		usbd.epBank0SetSize(ep, 64);
		usbd.epBank0SetType(ep, 3); // BULK OUT

		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

		release();
    56ce:	f7ff fd69 	bl	51a4 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    56d2:	4b19      	ldr	r3, [pc, #100]	; (5738 <_ZN14USBDeviceClass6initEPEmm+0x120>)
    56d4:	50ec      	str	r4, [r5, r3]
    56d6:	e025      	b.n	5724 <_ZN14USBDeviceClass6initEPEmm+0x10c>
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    56d8:	2a82      	cmp	r2, #130	; 0x82
    56da:	d11e      	bne.n	571a <_ZN14USBDeviceClass6initEPEmm+0x102>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    56dc:	4812      	ldr	r0, [pc, #72]	; (5728 <_ZN14USBDeviceClass6initEPEmm+0x110>)
    56de:	b2cb      	uxtb	r3, r1
    56e0:	0159      	lsls	r1, r3, #5
    56e2:	1841      	adds	r1, r0, r1
    56e4:	698e      	ldr	r6, [r1, #24]
    56e6:	4a11      	ldr	r2, [pc, #68]	; (572c <_ZN14USBDeviceClass6initEPEmm+0x114>)
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    56e8:	2480      	movs	r4, #128	; 0x80
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    56ea:	4032      	ands	r2, r6
    56ec:	26c0      	movs	r6, #192	; 0xc0
    56ee:	05b6      	lsls	r6, r6, #22
    56f0:	4332      	orrs	r2, r6
    56f2:	618a      	str	r2, [r1, #24]
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    56f4:	4a0e      	ldr	r2, [pc, #56]	; (5730 <_ZN14USBDeviceClass6initEPEmm+0x118>)
    56f6:	01ad      	lsls	r5, r5, #6
    56f8:	1955      	adds	r5, r2, r5
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    56fa:	614d      	str	r5, [r1, #20]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    56fc:	3308      	adds	r3, #8
    56fe:	6801      	ldr	r1, [r0, #0]
    5700:	015b      	lsls	r3, r3, #5
    5702:	18c8      	adds	r0, r1, r3
    5704:	7902      	ldrb	r2, [r0, #4]
    5706:	4264      	negs	r4, r4
    5708:	4322      	orrs	r2, r4
    570a:	7102      	strb	r2, [r0, #4]
	// USB Device Endpoints function mapping
	// -------------------------------------

	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    570c:	2070      	movs	r0, #112	; 0x70
    570e:	5c5a      	ldrb	r2, [r3, r1]
    5710:	4382      	bics	r2, r0
    5712:	3840      	subs	r0, #64	; 0x40
    5714:	4302      	orrs	r2, r0
    5716:	545a      	strb	r2, [r3, r1]
    5718:	e004      	b.n	5724 <_ZN14USBDeviceClass6initEPEmm+0x10c>
		// NAK on endpoint IN, the bank is not yet filled in.
		usbd.epBank1ResetReady(ep);

		usbd.epBank1SetType(ep, 3); // BULK IN
	}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    571a:	2a00      	cmp	r2, #0
    571c:	d102      	bne.n	5724 <_ZN14USBDeviceClass6initEPEmm+0x10c>
    571e:	0008      	movs	r0, r1
    5720:	f7ff fc7e 	bl	5020 <_ZN14USBDeviceClass6initEPEmm.part.5>
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    5724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5726:	46c0      	nop			; (mov r8, r8)
    5728:	20000c38 	.word	0x20000c38
    572c:	8fffffff 	.word	0x8fffffff
    5730:	2000088c 	.word	0x2000088c
    5734:	0000e6e8 	.word	0x0000e6e8
    5738:	20000c10 	.word	0x20000c10

0000573c <_ZN14USBDeviceClass13initEndpointsEv>:
	0,
	0,
#endif
};

void USBDeviceClass::initEndpoints() {
    573c:	b570      	push	{r4, r5, r6, lr}
    573e:	0005      	movs	r5, r0
    5740:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    5742:	4b06      	ldr	r3, [pc, #24]	; (575c <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    5744:	00a2      	lsls	r2, r4, #2
    5746:	58d2      	ldr	r2, [r2, r3]
    5748:	2a00      	cmp	r2, #0
    574a:	d005      	beq.n	5758 <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
    574c:	0021      	movs	r1, r4
    574e:	0028      	movs	r0, r5
    5750:	f7ff ff62 	bl	5618 <_ZN14USBDeviceClass6initEPEmm>
    5754:	3401      	adds	r4, #1
	0,
#endif
};

void USBDeviceClass::initEndpoints() {
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    5756:	e7f4      	b.n	5742 <_ZN14USBDeviceClass13initEndpointsEv+0x6>
		initEP(i, EndPoints[i]);
	}
}
    5758:	bd70      	pop	{r4, r5, r6, pc}
    575a:	46c0      	nop			; (mov r8, r8)
    575c:	20000070 	.word	0x20000070

00005760 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    5760:	4b08      	ldr	r3, [pc, #32]	; (5784 <_ZN14USBDeviceClass9availableEm+0x24>)
    5762:	008a      	lsls	r2, r1, #2
    5764:	58d0      	ldr	r0, [r2, r3]
	return read;
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
    5766:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    5768:	2800      	cmp	r0, #0
    576a:	d003      	beq.n	5774 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    576c:	6803      	ldr	r3, [r0, #0]
    576e:	689b      	ldr	r3, [r3, #8]
    5770:	4798      	blx	r3
    5772:	e006      	b.n	5782 <_ZN14USBDeviceClass9availableEm+0x22>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5774:	b2c9      	uxtb	r1, r1
    5776:	4b04      	ldr	r3, [pc, #16]	; (5788 <_ZN14USBDeviceClass9availableEm+0x28>)
    5778:	0149      	lsls	r1, r1, #5
    577a:	1859      	adds	r1, r3, r1
    577c:	6888      	ldr	r0, [r1, #8]
    577e:	0480      	lsls	r0, r0, #18
    5780:	0c80      	lsrs	r0, r0, #18
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    5782:	bd10      	pop	{r4, pc}
    5784:	20000c10 	.word	0x20000c10
    5788:	20000c38 	.word	0x20000c38

0000578c <_ZN14USBDeviceClass5flushEm>:
		usbd.epBank0SetReady(ep);
	}
}

void USBDeviceClass::flush(uint32_t ep)
{
    578c:	b510      	push	{r4, lr}
    578e:	000c      	movs	r4, r1
	if (available(ep)) {
    5790:	f7ff ffe6 	bl	5760 <_ZN14USBDeviceClass9availableEm>
    5794:	2800      	cmp	r0, #0
    5796:	d00c      	beq.n	57b2 <_ZN14USBDeviceClass5flushEm+0x26>

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    5798:	2280      	movs	r2, #128	; 0x80
    579a:	4b06      	ldr	r3, [pc, #24]	; (57b4 <_ZN14USBDeviceClass5flushEm+0x28>)
    579c:	b2e4      	uxtb	r4, r4
    579e:	6819      	ldr	r1, [r3, #0]
    57a0:	3408      	adds	r4, #8
    57a2:	0164      	lsls	r4, r4, #5
    57a4:	1909      	adds	r1, r1, r4
    57a6:	794b      	ldrb	r3, [r1, #5]
    57a8:	4252      	negs	r2, r2
    57aa:	4313      	orrs	r3, r2
    57ac:	714b      	strb	r3, [r1, #5]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    57ae:	2302      	movs	r3, #2
    57b0:	71cb      	strb	r3, [r1, #7]
		usbd.epBank1SetReady(ep);

	 	// Clear the transfer complete flag
		usbd.epBank1AckTransferComplete(ep);
	}
}
    57b2:	bd10      	pop	{r4, pc}
    57b4:	20000c38 	.word	0x20000c38

000057b8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    57b8:	4a14      	ldr	r2, [pc, #80]	; (580c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    57ba:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    57bc:	b2cb      	uxtb	r3, r1
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    57be:	0189      	lsls	r1, r1, #6
    57c0:	1851      	adds	r1, r2, r1
    57c2:	4a13      	ldr	r2, [pc, #76]	; (5810 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
    57c4:	015c      	lsls	r4, r3, #5
    57c6:	1910      	adds	r0, r2, r4
    57c8:	6041      	str	r1, [r0, #4]
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    57ca:	6885      	ldr	r5, [r0, #8]
    57cc:	4911      	ldr	r1, [pc, #68]	; (5814 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x5c>)
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    57ce:	2740      	movs	r7, #64	; 0x40
	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    57d0:	4029      	ands	r1, r5
    57d2:	2580      	movs	r5, #128	; 0x80
    57d4:	02ad      	lsls	r5, r5, #10
    57d6:	4329      	orrs	r1, r5
    57d8:	6081      	str	r1, [r0, #8]
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    57da:	6881      	ldr	r1, [r0, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    57dc:	3308      	adds	r3, #8
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    57de:	0b89      	lsrs	r1, r1, #14
    57e0:	0389      	lsls	r1, r1, #14
    57e2:	6081      	str	r1, [r0, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    57e4:	6810      	ldr	r0, [r2, #0]
    57e6:	0159      	lsls	r1, r3, #5
    57e8:	1846      	adds	r6, r0, r1
    57ea:	7935      	ldrb	r5, [r6, #4]
    57ec:	433d      	orrs	r5, r7
    57ee:	7135      	strb	r5, [r6, #4]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    57f0:	1845      	adds	r5, r0, r1
    57f2:	79ad      	ldrb	r5, [r5, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    57f4:	066d      	lsls	r5, r5, #25
    57f6:	d5fb      	bpl.n	57f0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    57f8:	015b      	lsls	r3, r3, #5
    57fa:	18c1      	adds	r1, r0, r3
    57fc:	79c9      	ldrb	r1, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    57fe:	07c9      	lsls	r1, r1, #31
    5800:	d5fb      	bpl.n	57fa <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5802:	1914      	adds	r4, r2, r4
    5804:	68a0      	ldr	r0, [r4, #8]
	return usbd.epBank0ByteCount(ep);
    5806:	b2c0      	uxtb	r0, r0
}
    5808:	bdf0      	pop	{r4, r5, r6, r7, pc}
    580a:	46c0      	nop			; (mov r8, r8)
    580c:	20000a50 	.word	0x20000a50
    5810:	20000c38 	.word	0x20000c38
    5814:	f0003fff 	.word	0xf0003fff

00005818 <_ZN14USBDeviceClass11recvControlEPvm>:
	return f != USB->DEVICE.FNUM.bit.FNUM;
}


uint32_t USBDeviceClass::recvControl(void *_data, uint32_t len)
{
    5818:	b570      	push	{r4, r5, r6, lr}
    581a:	000d      	movs	r5, r1
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    581c:	2140      	movs	r1, #64	; 0x40
    581e:	4b0b      	ldr	r3, [pc, #44]	; (584c <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
    5820:	0014      	movs	r4, r2
    5822:	681b      	ldr	r3, [r3, #0]
    5824:	33ff      	adds	r3, #255	; 0xff
    5826:	795a      	ldrb	r2, [r3, #5]
    5828:	430a      	orrs	r2, r1
    582a:	715a      	strb	r2, [r3, #5]

	// The RAM Buffer is empty: we can receive data
	usbd.epBank0ResetReady(0);

	//usbd.epBank0AckSetupReceived(0);
	uint32_t read = armRecvCtrlOUT(0);
    582c:	2100      	movs	r1, #0
    582e:	f7ff ffc3 	bl	57b8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    5832:	42a0      	cmp	r0, r4
    5834:	d900      	bls.n	5838 <_ZN14USBDeviceClass11recvControlEPvm+0x20>
    5836:	0020      	movs	r0, r4
	if (read > len)
		read = len;
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
	for (uint32_t i=0; i<len; i++) {
    5838:	2300      	movs	r3, #0
		data[i] = buffer[i];
    583a:	4905      	ldr	r1, [pc, #20]	; (5850 <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	uint32_t read = armRecvCtrlOUT(0);
	if (read > len)
		read = len;
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
	for (uint32_t i=0; i<len; i++) {
    583c:	42a3      	cmp	r3, r4
    583e:	d003      	beq.n	5848 <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
    5840:	5c5a      	ldrb	r2, [r3, r1]
    5842:	54ea      	strb	r2, [r5, r3]
	uint32_t read = armRecvCtrlOUT(0);
	if (read > len)
		read = len;
	//while (!usbd.epBank0AckTransferComplete(0)) {}
	uint8_t *buffer = udd_ep_out_cache_buffer[0];
	for (uint32_t i=0; i<len; i++) {
    5844:	3301      	adds	r3, #1
    5846:	e7f9      	b.n	583c <_ZN14USBDeviceClass11recvControlEPvm+0x24>
		data[i] = buffer[i];
	}

	return read;
}
    5848:	bd70      	pop	{r4, r5, r6, pc}
    584a:	46c0      	nop			; (mov r8, r8)
    584c:	20000c38 	.word	0x20000c38
    5850:	20000a50 	.word	0x20000a50

00005854 <_ZN14USBDeviceClass7armRecvEm>:
	while (!usbd.epBank0IsTransferComplete(ep)) {}
	return usbd.epBank0ByteCount(ep);
}

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    5854:	b530      	push	{r4, r5, lr}
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5856:	b2c9      	uxtb	r1, r1
    5858:	4c0b      	ldr	r4, [pc, #44]	; (5888 <_ZN14USBDeviceClass7armRecvEm+0x34>)
    585a:	0149      	lsls	r1, r1, #5
    585c:	1860      	adds	r0, r4, r1
    585e:	6883      	ldr	r3, [r0, #8]
    5860:	049b      	lsls	r3, r3, #18
    5862:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
    5864:	2b3f      	cmp	r3, #63	; 0x3f
    5866:	d907      	bls.n	5878 <_ZN14USBDeviceClass7armRecvEm+0x24>
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    5868:	3b40      	subs	r3, #64	; 0x40
    586a:	6885      	ldr	r5, [r0, #8]
    586c:	049b      	lsls	r3, r3, #18
    586e:	0c9a      	lsrs	r2, r3, #18
    5870:	0bab      	lsrs	r3, r5, #14
    5872:	039b      	lsls	r3, r3, #14
    5874:	4313      	orrs	r3, r2
    5876:	e002      	b.n	587e <_ZN14USBDeviceClass7armRecvEm+0x2a>
    5878:	6883      	ldr	r3, [r0, #8]
    587a:	0b9b      	lsrs	r3, r3, #14
    587c:	039b      	lsls	r3, r3, #14
    587e:	6083      	str	r3, [r0, #8]
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    5880:	1861      	adds	r1, r4, r1
    5882:	6888      	ldr	r0, [r1, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
    5884:	b2c0      	uxtb	r0, r0
}
    5886:	bd30      	pop	{r4, r5, pc}
    5888:	20000c38 	.word	0x20000c38

0000588c <_ZN14USBDeviceClass4recvEmPvm>:
}

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
    588c:	b5f0      	push	{r4, r5, r6, r7, lr}
    588e:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    5890:	4b30      	ldr	r3, [pc, #192]	; (5954 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
}

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
    5892:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    5894:	681b      	ldr	r3, [r3, #0]
}

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
    5896:	0006      	movs	r6, r0
    5898:	000d      	movs	r5, r1
    589a:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    589c:	2b00      	cmp	r3, #0
    589e:	d052      	beq.n	5946 <_ZN14USBDeviceClass4recvEmPvm+0xba>
		return -1;

#ifdef PIN_LED_RXL
	if (rxLEDPulse == 0)
    58a0:	4f2d      	ldr	r7, [pc, #180]	; (5958 <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
    58a2:	7839      	ldrb	r1, [r7, #0]
    58a4:	b2c9      	uxtb	r1, r1
    58a6:	2900      	cmp	r1, #0
    58a8:	d102      	bne.n	58b0 <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
    58aa:	2019      	movs	r0, #25
    58ac:	f000 fc6e 	bl	618c <digitalWrite>

	rxLEDPulse = TX_RX_LED_PULSE_MS;
    58b0:	2364      	movs	r3, #100	; 0x64
    58b2:	703b      	strb	r3, [r7, #0]
#endif

	if (epHandlers[ep]) {
    58b4:	4b29      	ldr	r3, [pc, #164]	; (595c <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
    58b6:	00aa      	lsls	r2, r5, #2
    58b8:	58d0      	ldr	r0, [r2, r3]
    58ba:	2800      	cmp	r0, #0
    58bc:	d005      	beq.n	58ca <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return epHandlers[ep]->recv(_data, len);
    58be:	6803      	ldr	r3, [r0, #0]
    58c0:	0022      	movs	r2, r4
    58c2:	685b      	ldr	r3, [r3, #4]
    58c4:	9901      	ldr	r1, [sp, #4]
    58c6:	4798      	blx	r3
    58c8:	e041      	b.n	594e <_ZN14USBDeviceClass4recvEmPvm+0xc2>
	}

	if (available(ep) < len)
    58ca:	0029      	movs	r1, r5
    58cc:	0030      	movs	r0, r6
    58ce:	f7ff ff47 	bl	5760 <_ZN14USBDeviceClass9availableEm>
    58d2:	4284      	cmp	r4, r0
    58d4:	d904      	bls.n	58e0 <_ZN14USBDeviceClass4recvEmPvm+0x54>
		len = available(ep);
    58d6:	0029      	movs	r1, r5
    58d8:	0030      	movs	r0, r6
    58da:	f7ff ff41 	bl	5760 <_ZN14USBDeviceClass9availableEm>
    58de:	0004      	movs	r4, r0

	armRecv(ep);
    58e0:	0029      	movs	r1, r5
    58e2:	0030      	movs	r0, r6
    58e4:	f7ff ffb6 	bl	5854 <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }

	inline void epBank0DisableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENCLR.bit.RXSTP = 1; }
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    58e8:	2101      	movs	r1, #1
    58ea:	b2eb      	uxtb	r3, r5
    58ec:	4f1c      	ldr	r7, [pc, #112]	; (5960 <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
    58ee:	9303      	str	r3, [sp, #12]
    58f0:	015b      	lsls	r3, r3, #5
    58f2:	9302      	str	r3, [sp, #8]
    58f4:	9a02      	ldr	r2, [sp, #8]
    58f6:	683b      	ldr	r3, [r7, #0]

	usbd.epBank0DisableTransferComplete(ep);

	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    58f8:	9801      	ldr	r0, [sp, #4]
    58fa:	189b      	adds	r3, r3, r2
    58fc:	33ff      	adds	r3, #255	; 0xff
    58fe:	7a5a      	ldrb	r2, [r3, #9]
    5900:	430a      	orrs	r2, r1
    5902:	4918      	ldr	r1, [pc, #96]	; (5964 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
    5904:	725a      	strb	r2, [r3, #9]
    5906:	01ab      	lsls	r3, r5, #6
    5908:	18c9      	adds	r1, r1, r3
    590a:	0022      	movs	r2, r4
    590c:	f003 fe9b 	bl	9646 <memcpy>

	// release empty buffer
	if (len && !available(ep)) {
    5910:	2c00      	cmp	r4, #0
    5912:	d01b      	beq.n	594c <_ZN14USBDeviceClass4recvEmPvm+0xc0>
    5914:	0029      	movs	r1, r5
    5916:	0030      	movs	r0, r6
    5918:	f7ff ff22 	bl	5760 <_ZN14USBDeviceClass9availableEm>
    591c:	2800      	cmp	r0, #0
    591e:	d115      	bne.n	594c <_ZN14USBDeviceClass4recvEmPvm+0xc0>
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    5920:	2040      	movs	r0, #64	; 0x40
    5922:	9b03      	ldr	r3, [sp, #12]
    5924:	6839      	ldr	r1, [r7, #0]
    5926:	3308      	adds	r3, #8
    5928:	015b      	lsls	r3, r3, #5
    592a:	18cb      	adds	r3, r1, r3
    592c:	791a      	ldrb	r2, [r3, #4]
    592e:	4302      	orrs	r2, r0
    5930:	711a      	strb	r2, [r3, #4]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    5932:	2201      	movs	r2, #1
    5934:	71da      	strb	r2, [r3, #7]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    5936:	9b02      	ldr	r3, [sp, #8]
    5938:	18cb      	adds	r3, r1, r3
    593a:	2101      	movs	r1, #1
    593c:	33ff      	adds	r3, #255	; 0xff
    593e:	7a9a      	ldrb	r2, [r3, #10]
    5940:	430a      	orrs	r2, r1
    5942:	729a      	strb	r2, [r3, #10]
    5944:	e002      	b.n	594c <_ZN14USBDeviceClass4recvEmPvm+0xc0>
// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
	if (!_usbConfiguration)
		return -1;
    5946:	2001      	movs	r0, #1
    5948:	4240      	negs	r0, r0
    594a:	e000      	b.n	594e <_ZN14USBDeviceClass4recvEmPvm+0xc2>
    594c:	0020      	movs	r0, r4
		// Enable Transfer complete 0 interrupt
		usbd.epBank0EnableTransferComplete(ep);
	}

	return len;
}
    594e:	b005      	add	sp, #20
    5950:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5952:	46c0      	nop			; (mov r8, r8)
    5954:	20000d3c 	.word	0x20000d3c
    5958:	20000c34 	.word	0x20000c34
    595c:	20000c10 	.word	0x20000c10
    5960:	20000c38 	.word	0x20000c38
    5964:	20000a50 	.word	0x20000a50

00005968 <_ZN14USBDeviceClass4recvEm>:

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
    5968:	b513      	push	{r0, r1, r4, lr}
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
    596a:	466b      	mov	r3, sp
    596c:	1ddc      	adds	r4, r3, #7
    596e:	0022      	movs	r2, r4
    5970:	2301      	movs	r3, #1
    5972:	f7ff ff8b 	bl	588c <_ZN14USBDeviceClass4recvEmPvm>
    5976:	2801      	cmp	r0, #1
    5978:	d101      	bne.n	597e <_ZN14USBDeviceClass4recvEm+0x16>
		return -1;
	} else {
		return c;
    597a:	7820      	ldrb	r0, [r4, #0]
    597c:	e001      	b.n	5982 <_ZN14USBDeviceClass4recvEm+0x1a>
// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
		return -1;
    597e:	2001      	movs	r0, #1
    5980:	4240      	negs	r0, r0
	} else {
		return c;
	}
}
    5982:	bd16      	pop	{r1, r2, r4, pc}

00005984 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    5984:	b5f0      	push	{r4, r5, r6, r7, lr}
    5986:	001d      	movs	r5, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    5988:	4b3d      	ldr	r3, [pc, #244]	; (5a80 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    598a:	b085      	sub	sp, #20
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    598c:	681b      	ldr	r3, [r3, #0]
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    598e:	000e      	movs	r6, r1
    5990:	9203      	str	r2, [sp, #12]
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    5992:	2b00      	cmp	r3, #0
    5994:	d06f      	beq.n	5a76 <_ZN14USBDeviceClass4sendEmPKvm+0xf2>
		return -1;
	if (len > 16384)
    5996:	2380      	movs	r3, #128	; 0x80
    5998:	01db      	lsls	r3, r3, #7
    599a:	429d      	cmp	r5, r3
    599c:	d86b      	bhi.n	5a76 <_ZN14USBDeviceClass4sendEmPKvm+0xf2>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    599e:	4c39      	ldr	r4, [pc, #228]	; (5a84 <_ZN14USBDeviceClass4sendEmPKvm+0x100>)
    59a0:	7821      	ldrb	r1, [r4, #0]
    59a2:	b2c9      	uxtb	r1, r1
    59a4:	2900      	cmp	r1, #0
    59a6:	d102      	bne.n	59ae <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
    59a8:	201a      	movs	r0, #26
    59aa:	f000 fbef 	bl	618c <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    59ae:	2364      	movs	r3, #100	; 0x64
    59b0:	7023      	strb	r3, [r4, #0]
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
	uint32_t written = 0;
    59b2:	2300      	movs	r3, #0
    59b4:	9301      	str	r3, [sp, #4]

	txLEDPulse = TX_RX_LED_PULSE_MS;
#endif

	// Flash area
	while (len != 0)
    59b6:	2d00      	cmp	r5, #0
    59b8:	d052      	beq.n	5a60 <_ZN14USBDeviceClass4sendEmPKvm+0xdc>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    59ba:	4f33      	ldr	r7, [pc, #204]	; (5a88 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
    59bc:	683b      	ldr	r3, [r7, #0]
    59be:	9302      	str	r3, [sp, #8]
    59c0:	23ff      	movs	r3, #255	; 0xff
    59c2:	4033      	ands	r3, r6
    59c4:	001c      	movs	r4, r3
    59c6:	9300      	str	r3, [sp, #0]
    59c8:	3408      	adds	r4, #8
    59ca:	9b02      	ldr	r3, [sp, #8]
    59cc:	0164      	lsls	r4, r4, #5
    59ce:	191b      	adds	r3, r3, r4
    59d0:	799b      	ldrb	r3, [r3, #6]
    59d2:	09db      	lsrs	r3, r3, #7
	{
		if (usbd.epBank1IsReady(ep)) {
    59d4:	d015      	beq.n	5a02 <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
			// previous transfer is still not complete

			// convert the timeout from microseconds to a number of times through
			// the wait loop; it takes (roughly) 23 clock cycles per iteration.
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    59d6:	4b2d      	ldr	r3, [pc, #180]	; (5a8c <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    59d8:	492d      	ldr	r1, [pc, #180]	; (5a90 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
    59da:	6818      	ldr	r0, [r3, #0]
    59dc:	f000 ffdc 	bl	6998 <__aeabi_uidiv>
    59e0:	4b2c      	ldr	r3, [pc, #176]	; (5a94 <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
    59e2:	2117      	movs	r1, #23
    59e4:	4358      	muls	r0, r3
    59e6:	f000 ffd7 	bl	6998 <__aeabi_uidiv>

			// Wait for (previous) transfer to complete
			// inspired by Paul Stoffregen's work on Teensy
			while (!usbd.epBank1IsTransferComplete(ep)) {
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    59ea:	4b2b      	ldr	r3, [pc, #172]	; (5a98 <_ZN14USBDeviceClass4sendEmPKvm+0x114>)

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    59ec:	9a02      	ldr	r2, [sp, #8]
    59ee:	1912      	adds	r2, r2, r4
    59f0:	79d2      	ldrb	r2, [r2, #7]
			// the wait loop; it takes (roughly) 23 clock cycles per iteration.
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;

			// Wait for (previous) transfer to complete
			// inspired by Paul Stoffregen's work on Teensy
			while (!usbd.epBank1IsTransferComplete(ep)) {
    59f2:	0792      	lsls	r2, r2, #30
    59f4:	d405      	bmi.n	5a02 <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    59f6:	5d9a      	ldrb	r2, [r3, r6]
    59f8:	2a00      	cmp	r2, #0
    59fa:	d133      	bne.n	5a64 <_ZN14USBDeviceClass4sendEmPKvm+0xe0>
    59fc:	3801      	subs	r0, #1
    59fe:	d331      	bcc.n	5a64 <_ZN14USBDeviceClass4sendEmPKvm+0xe0>
    5a00:	e7f4      	b.n	59ec <_ZN14USBDeviceClass4sendEmPKvm+0x68>
					return -1;
				}
			}
		}

		LastTransmitTimedOut[ep] = 0;
    5a02:	2200      	movs	r2, #0
    5a04:	4b24      	ldr	r3, [pc, #144]	; (5a98 <_ZN14USBDeviceClass4sendEmPKvm+0x114>)
    5a06:	1e2c      	subs	r4, r5, #0
    5a08:	559a      	strb	r2, [r3, r6]
    5a0a:	2c3f      	cmp	r4, #63	; 0x3f
    5a0c:	d900      	bls.n	5a10 <_ZN14USBDeviceClass4sendEmPKvm+0x8c>
    5a0e:	243f      	movs	r4, #63	; 0x3f
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    5a10:	4f22      	ldr	r7, [pc, #136]	; (5a9c <_ZN14USBDeviceClass4sendEmPKvm+0x118>)
    5a12:	01b3      	lsls	r3, r6, #6
    5a14:	18ff      	adds	r7, r7, r3
    5a16:	0022      	movs	r2, r4
    5a18:	9903      	ldr	r1, [sp, #12]
    5a1a:	0038      	movs	r0, r7
    5a1c:	f003 fe13 	bl	9646 <memcpy>
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    5a20:	9b00      	ldr	r3, [sp, #0]
    5a22:	4a19      	ldr	r2, [pc, #100]	; (5a88 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
    5a24:	015b      	lsls	r3, r3, #5
    5a26:	18d3      	adds	r3, r2, r3
    5a28:	615f      	str	r7, [r3, #20]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    5a2a:	6998      	ldr	r0, [r3, #24]
    5a2c:	04a2      	lsls	r2, r4, #18
    5a2e:	0c91      	lsrs	r1, r2, #18
    5a30:	0b82      	lsrs	r2, r0, #14
    5a32:	0392      	lsls	r2, r2, #14
    5a34:	430a      	orrs	r2, r1
    5a36:	619a      	str	r2, [r3, #24]

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    5a38:	9b00      	ldr	r3, [sp, #0]
    5a3a:	9a02      	ldr	r2, [sp, #8]
    5a3c:	3308      	adds	r3, #8
    5a3e:	015b      	lsls	r3, r3, #5
    5a40:	18d3      	adds	r3, r2, r3
    5a42:	2202      	movs	r2, #2

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    5a44:	2180      	movs	r1, #128	; 0x80

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    5a46:	71da      	strb	r2, [r3, #7]

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    5a48:	795a      	ldrb	r2, [r3, #5]
    5a4a:	4249      	negs	r1, r1
    5a4c:	430a      	orrs	r2, r1
    5a4e:	715a      	strb	r2, [r3, #5]
		usbd.epBank1AckTransferComplete(ep);

		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);

		written += length;
    5a50:	9b01      	ldr	r3, [sp, #4]
		len -= length;
    5a52:	1b2d      	subs	r5, r5, r4
		usbd.epBank1AckTransferComplete(ep);

		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);

		written += length;
    5a54:	191b      	adds	r3, r3, r4
    5a56:	9301      	str	r3, [sp, #4]
		len -= length;
		data = (char *)data + length;
    5a58:	9b03      	ldr	r3, [sp, #12]
    5a5a:	191b      	adds	r3, r3, r4
    5a5c:	9303      	str	r3, [sp, #12]

	txLEDPulse = TX_RX_LED_PULSE_MS;
#endif

	// Flash area
	while (len != 0)
    5a5e:	e7aa      	b.n	59b6 <_ZN14USBDeviceClass4sendEmPKvm+0x32>
    5a60:	9801      	ldr	r0, [sp, #4]
    5a62:	e00a      	b.n	5a7a <_ZN14USBDeviceClass4sendEmPKvm+0xf6>

			// Wait for (previous) transfer to complete
			// inspired by Paul Stoffregen's work on Teensy
			while (!usbd.epBank1IsTransferComplete(ep)) {
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
					LastTransmitTimedOut[ep] = 1;
    5a64:	2201      	movs	r2, #1
    5a66:	559a      	strb	r2, [r3, r6]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    5a68:	9b00      	ldr	r3, [sp, #0]
    5a6a:	015b      	lsls	r3, r3, #5
    5a6c:	18ff      	adds	r7, r7, r3
    5a6e:	69bb      	ldr	r3, [r7, #24]
    5a70:	0b9b      	lsrs	r3, r3, #14
    5a72:	039b      	lsls	r3, r3, #14
    5a74:	61bb      	str	r3, [r7, #24]

					// set byte count to zero, so that ZLP is sent
					// instead of stale data
					usbd.epBank1SetByteCount(ep, 0);
					return -1;
    5a76:	2001      	movs	r0, #1
    5a78:	4240      	negs	r0, r0
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    5a7a:	b005      	add	sp, #20
    5a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a7e:	46c0      	nop			; (mov r8, r8)
    5a80:	20000d3c 	.word	0x20000d3c
    5a84:	20000a4c 	.word	0x20000a4c
    5a88:	20000c38 	.word	0x20000c38
    5a8c:	20000098 	.word	0x20000098
    5a90:	000f4240 	.word	0x000f4240
    5a94:	00011170 	.word	0x00011170
    5a98:	20000884 	.word	0x20000884
    5a9c:	2000088c 	.word	0x2000088c

00005aa0 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    5aa0:	b570      	push	{r4, r5, r6, lr}
    5aa2:	000c      	movs	r4, r1
    5aa4:	001d      	movs	r5, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    5aa6:	4e0d      	ldr	r6, [pc, #52]	; (5adc <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    5aa8:	01a3      	lsls	r3, r4, #6
    5aaa:	18f6      	adds	r6, r6, r3
	}
	return written;
}

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    5aac:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    5aae:	0030      	movs	r0, r6
    5ab0:	002a      	movs	r2, r5
    5ab2:	f003 fdc8 	bl	9646 <memcpy>
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    5ab6:	b2e1      	uxtb	r1, r4
    5ab8:	014c      	lsls	r4, r1, #5
    5aba:	4909      	ldr	r1, [pc, #36]	; (5ae0 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    5abc:	4b09      	ldr	r3, [pc, #36]	; (5ae4 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    5abe:	1909      	adds	r1, r1, r4
    5ac0:	614e      	str	r6, [r1, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    5ac2:	698a      	ldr	r2, [r1, #24]
    5ac4:	4013      	ands	r3, r2
    5ac6:	618b      	str	r3, [r1, #24]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    5ac8:	6988      	ldr	r0, [r1, #24]
    5aca:	04ab      	lsls	r3, r5, #18
    5acc:	0c9a      	lsrs	r2, r3, #18
    5ace:	0b83      	lsrs	r3, r0, #14
    5ad0:	039b      	lsls	r3, r3, #14
    5ad2:	4313      	orrs	r3, r2
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    5ad4:	0028      	movs	r0, r5
    5ad6:	618b      	str	r3, [r1, #24]
    5ad8:	bd70      	pop	{r4, r5, r6, pc}
    5ada:	46c0      	nop			; (mov r8, r8)
    5adc:	2000088c 	.word	0x2000088c
    5ae0:	20000c38 	.word	0x20000c38
    5ae4:	f0003fff 	.word	0xf0003fff

00005ae8 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    5ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    5aea:	4b11      	ldr	r3, [pc, #68]	; (5b30 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)

	return len;
}

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    5aec:	9001      	str	r0, [sp, #4]
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    5aee:	781b      	ldrb	r3, [r3, #0]

	return len;
}

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    5af0:	000f      	movs	r7, r1
    5af2:	0015      	movs	r5, r2
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    5af4:	2b00      	cmp	r3, #0
    5af6:	d118      	bne.n	5b2a <_ZN14USBDeviceClass11sendControlEPKvm+0x42>
		return length;

	if (_pack_message == true) {
    5af8:	4b0e      	ldr	r3, [pc, #56]	; (5b34 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    5afa:	0016      	movs	r6, r2
    5afc:	781c      	ldrb	r4, [r3, #0]
    5afe:	2c00      	cmp	r4, #0
    5b00:	d008      	beq.n	5b14 <_ZN14USBDeviceClass11sendControlEPKvm+0x2c>
		memcpy(&_pack_buffer[_pack_size], data, len);
    5b02:	4e0d      	ldr	r6, [pc, #52]	; (5b38 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    5b04:	480d      	ldr	r0, [pc, #52]	; (5b3c <_ZN14USBDeviceClass11sendControlEPKvm+0x54>)
    5b06:	8834      	ldrh	r4, [r6, #0]
    5b08:	1900      	adds	r0, r0, r4
		_pack_size += len;
    5b0a:	1964      	adds	r4, r4, r5

	if (_dry_run == true)
		return length;

	if (_pack_message == true) {
		memcpy(&_pack_buffer[_pack_size], data, len);
    5b0c:	f003 fd9b 	bl	9646 <memcpy>
		_pack_size += len;
    5b10:	8034      	strh	r4, [r6, #0]
    5b12:	e00a      	b.n	5b2a <_ZN14USBDeviceClass11sendControlEPKvm+0x42>
		return length;
	}

 	while (len > 0)
    5b14:	2e00      	cmp	r6, #0
    5b16:	d008      	beq.n	5b2a <_ZN14USBDeviceClass11sendControlEPKvm+0x42>
 	{
		sent = armSend(EP0, data + pos, len);
    5b18:	193a      	adds	r2, r7, r4
    5b1a:	0033      	movs	r3, r6
    5b1c:	2100      	movs	r1, #0
    5b1e:	9801      	ldr	r0, [sp, #4]
    5b20:	f7ff ffbe 	bl	5aa0 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    5b24:	1824      	adds	r4, r4, r0
		len -= sent;
    5b26:	1a36      	subs	r6, r6, r0
		memcpy(&_pack_buffer[_pack_size], data, len);
		_pack_size += len;
		return length;
	}

 	while (len > 0)
    5b28:	e7f4      	b.n	5b14 <_ZN14USBDeviceClass11sendControlEPKvm+0x2c>
		pos += sent;
		len -= sent;
 	}

	return length;
}
    5b2a:	0028      	movs	r0, r5
    5b2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5b2e:	46c0      	nop			; (mov r8, r8)
    5b30:	20000c2e 	.word	0x20000c2e
    5b34:	20000c2c 	.word	0x20000c2c
    5b38:	20000882 	.word	0x20000882
    5b3c:	20000781 	.word	0x20000781

00005b40 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
    5b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (maxlen < 2)
		return false;
    5b42:	2000      	movs	r0, #0

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
    5b44:	af00      	add	r7, sp, #0
    5b46:	000e      	movs	r6, r1
    5b48:	1e15      	subs	r5, r2, #0
	if (maxlen < 2)
    5b4a:	2d01      	cmp	r5, #1
    5b4c:	d927      	bls.n	5b9e <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5e>
		return false;

	uint8_t buffer[maxlen];
    5b4e:	1dd3      	adds	r3, r2, #7
    5b50:	466a      	mov	r2, sp
    5b52:	08db      	lsrs	r3, r3, #3
    5b54:	00db      	lsls	r3, r3, #3
    5b56:	1ad3      	subs	r3, r2, r3
    5b58:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    5b5a:	0008      	movs	r0, r1
    5b5c:	f004 fc5b 	bl	a416 <strlen>
bool USBDeviceClass::sendStringDescriptor(const uint8_t *string, uint8_t maxlen)
{
	if (maxlen < 2)
		return false;

	uint8_t buffer[maxlen];
    5b60:	466c      	mov	r4, sp
	buffer[0] = strlen((const char*)string) * 2 + 2;
	buffer[1] = 0x03;
    5b62:	2303      	movs	r3, #3

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    5b64:	2202      	movs	r2, #2
		buffer[i++] = *string++;
		if (i == maxlen) break;
		buffer[i] = 0;
    5b66:	2100      	movs	r1, #0
{
	if (maxlen < 2)
		return false;

	uint8_t buffer[maxlen];
	buffer[0] = strlen((const char*)string) * 2 + 2;
    5b68:	3001      	adds	r0, #1
    5b6a:	0040      	lsls	r0, r0, #1
    5b6c:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    5b6e:	7063      	strb	r3, [r4, #1]

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    5b70:	42aa      	cmp	r2, r5
    5b72:	d20d      	bcs.n	5b90 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x50>
    5b74:	7830      	ldrb	r0, [r6, #0]
    5b76:	2800      	cmp	r0, #0
    5b78:	d00a      	beq.n	5b90 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x50>
		buffer[i++] = *string++;
    5b7a:	1c53      	adds	r3, r2, #1
    5b7c:	b2db      	uxtb	r3, r3
    5b7e:	3601      	adds	r6, #1
    5b80:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    5b82:	429d      	cmp	r5, r3
    5b84:	d003      	beq.n	5b8e <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
	uint8_t buffer[maxlen];
	buffer[0] = strlen((const char*)string) * 2 + 2;
	buffer[1] = 0x03;

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    5b86:	3202      	adds	r2, #2
		buffer[i++] = *string++;
		if (i == maxlen) break;
		buffer[i] = 0;
    5b88:	54e1      	strb	r1, [r4, r3]
	uint8_t buffer[maxlen];
	buffer[0] = strlen((const char*)string) * 2 + 2;
	buffer[1] = 0x03;

	uint8_t i;
	for (i = 2; i < maxlen && *string; i++) {
    5b8a:	b2d2      	uxtb	r2, r2
    5b8c:	e7f0      	b.n	5b70 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x30>
		buffer[i++] = *string++;
    5b8e:	002a      	movs	r2, r5
		if (i == maxlen) break;
		buffer[i] = 0;
	}

	return USBDevice.sendControl(buffer, i);
    5b90:	0021      	movs	r1, r4
    5b92:	4804      	ldr	r0, [pc, #16]	; (5ba4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x64>)
    5b94:	f7ff ffa8 	bl	5ae8 <_ZN14USBDeviceClass11sendControlEPKvm>
    5b98:	1e43      	subs	r3, r0, #1
    5b9a:	4198      	sbcs	r0, r3
    5b9c:	b2c0      	uxtb	r0, r0
}
    5b9e:	46bd      	mov	sp, r7
    5ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ba2:	46c0      	nop			; (mov r8, r8)
    5ba4:	20000c2f 	.word	0x20000c2f

00005ba8 <_ZN14USBDeviceClass17sendConfigurationEm>:
}

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    5ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    5baa:	2700      	movs	r7, #0
	// Count and measure interfaces
	_dry_run = true;
    5bac:	2601      	movs	r6, #1
}

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    5bae:	b087      	sub	sp, #28
	uint32_t total = 0;
	// Count and measure interfaces
	_dry_run = true;
    5bb0:	4b1e      	ldr	r3, [pc, #120]	; (5c2c <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
}

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    5bb2:	9100      	str	r1, [sp, #0]
	uint32_t total = 0;
	// Count and measure interfaces
	_dry_run = true;
	uint8_t interfaces = SendInterfaces(&total);
    5bb4:	a902      	add	r1, sp, #8
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
	uint32_t total = 0;
	// Count and measure interfaces
	_dry_run = true;
    5bb6:	701e      	strb	r6, [r3, #0]
}

// Construct a dynamic configuration descriptor
// This really needs dynamic endpoint allocation etc
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
    5bb8:	0005      	movs	r5, r0
	uint32_t total = 0;
    5bba:	9702      	str	r7, [sp, #8]
	// Count and measure interfaces
	_dry_run = true;
	uint8_t interfaces = SendInterfaces(&total);
    5bbc:	f7ff fc1f 	bl	53fe <_ZN14USBDeviceClass14SendInterfacesEPm>

	_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    5bc0:	ac03      	add	r4, sp, #12
uint32_t USBDeviceClass::sendConfiguration(uint32_t maxlen)
{
	uint32_t total = 0;
	// Count and measure interfaces
	_dry_run = true;
	uint8_t interfaces = SendInterfaces(&total);
    5bc2:	9001      	str	r0, [sp, #4]

	_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    5bc4:	2209      	movs	r2, #9
    5bc6:	0039      	movs	r1, r7
    5bc8:	0020      	movs	r0, r4
    5bca:	f003 fd5a 	bl	9682 <memset>
    5bce:	2309      	movs	r3, #9
    5bd0:	7023      	strb	r3, [r4, #0]
    5bd2:	2302      	movs	r3, #2
    5bd4:	7063      	strb	r3, [r4, #1]
    5bd6:	337e      	adds	r3, #126	; 0x7e
    5bd8:	71e3      	strb	r3, [r4, #7]
    5bda:	337a      	adds	r3, #122	; 0x7a
    5bdc:	7223      	strb	r3, [r4, #8]
    5bde:	9b02      	ldr	r3, [sp, #8]
    5be0:	7166      	strb	r6, [r4, #5]
    5be2:	3309      	adds	r3, #9
    5be4:	8063      	strh	r3, [r4, #2]
    5be6:	466b      	mov	r3, sp
    5be8:	791b      	ldrb	r3, [r3, #4]
    5bea:	7123      	strb	r3, [r4, #4]
	_Pragma("pack()")

	//	Now send them
	_dry_run = false;
    5bec:	4b0f      	ldr	r3, [pc, #60]	; (5c2c <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    5bee:	701f      	strb	r7, [r3, #0]

	if (maxlen == sizeof(ConfigDescriptor)) {
    5bf0:	9b00      	ldr	r3, [sp, #0]
    5bf2:	2b09      	cmp	r3, #9
    5bf4:	d102      	bne.n	5bfc <_ZN14USBDeviceClass17sendConfigurationEm+0x54>
		sendControl(&config, sizeof(ConfigDescriptor));
    5bf6:	001a      	movs	r2, r3
    5bf8:	0021      	movs	r1, r4
    5bfa:	e011      	b.n	5c20 <_ZN14USBDeviceClass17sendConfigurationEm+0x78>
uint8_t _pack_buffer[256];

void USBDeviceClass::packMessages(bool val)
{
	if (val) {
		_pack_message = true;
    5bfc:	4b0c      	ldr	r3, [pc, #48]	; (5c30 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	}

	total = 0;

	packMessages(true);
	sendControl(&config, sizeof(ConfigDescriptor));
    5bfe:	2209      	movs	r2, #9
uint8_t _pack_buffer[256];

void USBDeviceClass::packMessages(bool val)
{
	if (val) {
		_pack_message = true;
    5c00:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    5c02:	4e0c      	ldr	r6, [pc, #48]	; (5c34 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	}

	total = 0;

	packMessages(true);
	sendControl(&config, sizeof(ConfigDescriptor));
    5c04:	0021      	movs	r1, r4
    5c06:	0028      	movs	r0, r5
	if (maxlen == sizeof(ConfigDescriptor)) {
		sendControl(&config, sizeof(ConfigDescriptor));
		return true;
	}

	total = 0;
    5c08:	9702      	str	r7, [sp, #8]

void USBDeviceClass::packMessages(bool val)
{
	if (val) {
		_pack_message = true;
		_pack_size = 0;
    5c0a:	8037      	strh	r7, [r6, #0]
	}

	total = 0;

	packMessages(true);
	sendControl(&config, sizeof(ConfigDescriptor));
    5c0c:	f7ff ff6c 	bl	5ae8 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    5c10:	a902      	add	r1, sp, #8
    5c12:	0028      	movs	r0, r5
    5c14:	f7ff fbf3 	bl	53fe <_ZN14USBDeviceClass14SendInterfacesEPm>
{
	if (val) {
		_pack_message = true;
		_pack_size = 0;
	} else {
		_pack_message = false;
    5c18:	4b05      	ldr	r3, [pc, #20]	; (5c30 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    5c1a:	8832      	ldrh	r2, [r6, #0]
    5c1c:	4906      	ldr	r1, [pc, #24]	; (5c38 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
{
	if (val) {
		_pack_message = true;
		_pack_size = 0;
	} else {
		_pack_message = false;
    5c1e:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    5c20:	0028      	movs	r0, r5
    5c22:	f7ff ff61 	bl	5ae8 <_ZN14USBDeviceClass11sendControlEPKvm>
	sendControl(&config, sizeof(ConfigDescriptor));
	SendInterfaces(&total);
	packMessages(false);

	return true;
}
    5c26:	2001      	movs	r0, #1
    5c28:	b007      	add	sp, #28
    5c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c2c:	20000c2e 	.word	0x20000c2e
    5c30:	20000c2c 	.word	0x20000c2c
    5c34:	20000882 	.word	0x20000882
    5c38:	20000781 	.word	0x20000781

00005c3c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:

bool USBDeviceClass::sendDescriptor(USBSetup &setup)
{
    5c3c:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    5c3e:	78ce      	ldrb	r6, [r1, #3]

	return true;
}

bool USBDeviceClass::sendDescriptor(USBSetup &setup)
{
    5c40:	b086      	sub	sp, #24
    5c42:	0005      	movs	r5, r0
    5c44:	000c      	movs	r4, r1
	uint8_t desc_length = 0;
	bool _cdcComposite;
	int ret;
	const uint8_t *desc_addr = 0;

	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    5c46:	2e02      	cmp	r6, #2
    5c48:	d107      	bne.n	5c5a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1e>
	{
		return USBDevice.sendConfiguration(setup.wLength);
    5c4a:	88c9      	ldrh	r1, [r1, #6]
    5c4c:	4821      	ldr	r0, [pc, #132]	; (5cd4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x98>)
    5c4e:	f7ff ffab 	bl	5ba8 <_ZN14USBDeviceClass17sendConfigurationEm>
    5c52:	1e43      	subs	r3, r0, #1
    5c54:	4198      	sbcs	r0, r3
    5c56:	b2c0      	uxtb	r0, r0
    5c58:	e03a      	b.n	5cd0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
	}

#ifdef PLUGGABLE_USB_ENABLED
	ret = PluggableUSB().getDescriptor(setup);
    5c5a:	f000 fde1 	bl	6820 <_Z12PluggableUSBv>
    5c5e:	0021      	movs	r1, r4
    5c60:	f000 fdae 	bl	67c0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    5c64:	2800      	cmp	r0, #0
    5c66:	d003      	beq.n	5c70 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x34>
		return (ret > 0 ? true : false);
    5c68:	17c3      	asrs	r3, r0, #31
    5c6a:	1a18      	subs	r0, r3, r0
    5c6c:	0fc0      	lsrs	r0, r0, #31
    5c6e:	e02f      	b.n	5cd0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
	}
#endif

	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    5c70:	2e01      	cmp	r6, #1
    5c72:	d104      	bne.n	5c7e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		if (setup.wLength == 8)
			_cdcComposite = 1;

		desc_addr = _cdcComposite ?  (const uint8_t*)&USB_DeviceDescriptorB : (const uint8_t*)&USB_DeviceDescriptor;

		if (*desc_addr > setup.wLength) {
    5c74:	88e2      	ldrh	r2, [r4, #6]
    5c76:	4918      	ldr	r1, [pc, #96]	; (5cd8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x9c>)
    5c78:	2a11      	cmp	r2, #17
    5c7a:	d824      	bhi.n	5cc6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x8a>
    5c7c:	e020      	b.n	5cc0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x84>
			desc_length = setup.wLength;
		}
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    5c7e:	2e03      	cmp	r6, #3
    5c80:	d126      	bne.n	5cd0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
	{
		if (setup.wValueL == 0) {
    5c82:	78a3      	ldrb	r3, [r4, #2]
    5c84:	2b00      	cmp	r3, #0
    5c86:	d104      	bne.n	5c92 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x56>
#endif
		}
		else {
			return false;
		}
		if (*desc_addr > setup.wLength) {
    5c88:	88e2      	ldrh	r2, [r4, #6]
    5c8a:	4914      	ldr	r1, [pc, #80]	; (5cdc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa0>)
    5c8c:	2a03      	cmp	r2, #3
    5c8e:	d917      	bls.n	5cc0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x84>
    5c90:	e019      	b.n	5cc6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x8a>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
	{
		if (setup.wValueL == 0) {
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
		}
		else if (setup.wValueL == IPRODUCT) {
    5c92:	2b02      	cmp	r3, #2
    5c94:	d102      	bne.n	5c9c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x60>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    5c96:	79a2      	ldrb	r2, [r4, #6]
    5c98:	4911      	ldr	r1, [pc, #68]	; (5ce0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa4>)
    5c9a:	e003      	b.n	5ca4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		}
		else if (setup.wValueL == IMANUFACTURER) {
    5c9c:	2b01      	cmp	r3, #1
    5c9e:	d105      	bne.n	5cac <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    5ca0:	79a2      	ldrb	r2, [r4, #6]
    5ca2:	4910      	ldr	r1, [pc, #64]	; (5ce4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa8>)
    5ca4:	0028      	movs	r0, r5
    5ca6:	f7ff ff4b 	bl	5b40 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    5caa:	e011      	b.n	5cd0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
		}
		else if (setup.wValueL == ISERIAL) {
    5cac:	2b03      	cmp	r3, #3
    5cae:	d10f      	bne.n	5cd0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x94>
#ifdef PLUGGABLE_USB_ENABLED
			char name[ISERIAL_MAX_LEN];
			PluggableUSB().getShortName(name);
    5cb0:	f000 fdb6 	bl	6820 <_Z12PluggableUSBv>
    5cb4:	a901      	add	r1, sp, #4
    5cb6:	f000 fd93 	bl	67e0 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    5cba:	79a2      	ldrb	r2, [r4, #6]
    5cbc:	a901      	add	r1, sp, #4
    5cbe:	e7f1      	b.n	5ca4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		}
		else {
			return false;
		}
		if (*desc_addr > setup.wLength) {
			desc_length = setup.wLength;
    5cc0:	b2d2      	uxtb	r2, r2

	if (desc_addr == 0) {
		return false;
	}

	if (desc_length == 0) {
    5cc2:	2a00      	cmp	r2, #0
    5cc4:	d100      	bne.n	5cc8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x8c>
		desc_length = *desc_addr;
    5cc6:	780a      	ldrb	r2, [r1, #0]
	}

	sendControl(desc_addr, desc_length);
    5cc8:	0028      	movs	r0, r5
    5cca:	f7ff ff0d 	bl	5ae8 <_ZN14USBDeviceClass11sendControlEPKvm>

	return true;
    5cce:	2001      	movs	r0, #1
}
    5cd0:	b006      	add	sp, #24
    5cd2:	bd70      	pop	{r4, r5, r6, pc}
    5cd4:	20000c2f 	.word	0x20000c2f
    5cd8:	0000e702 	.word	0x0000e702
    5cdc:	0000e6fe 	.word	0x0000e6fe
    5ce0:	0000e714 	.word	0x0000e714
    5ce4:	0000e6f4 	.word	0x0000e6f4

00005ce8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    5ce8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5cea:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    5cec:	7848      	ldrb	r0, [r1, #1]
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    5cee:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    5cf0:	280b      	cmp	r0, #11
    5cf2:	d83d      	bhi.n	5d70 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x88>
    5cf4:	f000 fe46 	bl	6984 <__gnu_thumb1_case_uqi>
    5cf8:	273c1606 	.word	0x273c1606
    5cfc:	6e3e383c 	.word	0x6e3e383c
    5d00:	65624642 	.word	0x65624642
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    5d04:	7809      	ldrb	r1, [r1, #0]
    5d06:	aa01      	add	r2, sp, #4
    5d08:	2900      	cmp	r1, #0
    5d0a:	d106      	bne.n	5d1a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    5d0c:	2302      	movs	r3, #2
		if (setup.bmRequestType == 0)  // device
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
    5d0e:	7011      	strb	r1, [r2, #0]
    5d10:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    5d12:	0030      	movs	r0, r6
    5d14:	f7ff fec4 	bl	5aa0 <_ZN14USBDeviceClass7armSendEmPKvm>
    5d18:	e02a      	b.n	5d70 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x88>
		// if( setup.bmRequestType == 2 ) // Endpoint:
		else
		{
			// Send the endpoint status
			// Check if the endpoint if currently halted
			uint8_t buff[] = { 0, 0 };
    5d1a:	2300      	movs	r3, #0
    5d1c:	7013      	strb	r3, [r2, #0]
    5d1e:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    5d20:	4b2d      	ldr	r3, [pc, #180]	; (5dd8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    5d22:	e007      	b.n	5d34 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x4c>
			return true;
		}

	case CLEAR_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    5d24:	788a      	ldrb	r2, [r1, #2]
    5d26:	2300      	movs	r3, #0
    5d28:	2a01      	cmp	r2, #1
    5d2a:	d109      	bne.n	5d40 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x58>
		{
			// Enable remote wake-up and send a ZLP
			uint8_t buff[] = { 0, 0 };
    5d2c:	aa01      	add	r2, sp, #4
    5d2e:	7013      	strb	r3, [r2, #0]
    5d30:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    5d32:	4b2a      	ldr	r3, [pc, #168]	; (5ddc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    5d34:	781b      	ldrb	r3, [r3, #0]
    5d36:	2b01      	cmp	r3, #1
    5d38:	d100      	bne.n	5d3c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x54>
				buff[0] = 1;
    5d3a:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    5d3c:	2302      	movs	r3, #2
    5d3e:	e01f      	b.n	5d80 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x98>
			return true;
		}
		else // if( setup.wValueL == 0) // ENDPOINTHALT
		{
			isEndpointHalt = 0;
    5d40:	4a25      	ldr	r2, [pc, #148]	; (5dd8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    5d42:	7013      	strb	r3, [r2, #0]
    5d44:	e040      	b.n	5dc8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe0>
			return true;
		}

	case SET_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    5d46:	788c      	ldrb	r4, [r1, #2]
    5d48:	2c01      	cmp	r4, #1
    5d4a:	d106      	bne.n	5d5a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x72>
		{
			// Enable remote wake-up and send a ZLP
			isRemoteWakeUpEnabled = 1;
			uint8_t buff[] = { 0 };
    5d4c:	2100      	movs	r1, #0
	case SET_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
		{
			// Enable remote wake-up and send a ZLP
			isRemoteWakeUpEnabled = 1;
    5d4e:	4b23      	ldr	r3, [pc, #140]	; (5ddc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			uint8_t buff[] = { 0 };
    5d50:	aa01      	add	r2, sp, #4
	case SET_FEATURE:
		// Check which is the selected feature
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
		{
			// Enable remote wake-up and send a ZLP
			isRemoteWakeUpEnabled = 1;
    5d52:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    5d54:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    5d56:	0023      	movs	r3, r4
    5d58:	e7db      	b.n	5d12 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
			return true;
		}
		if (setup.wValueL == 0) // ENDPOINTHALT
    5d5a:	2c00      	cmp	r4, #0
    5d5c:	d104      	bne.n	5d68 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
		{
			// Halt endpoint
			isEndpointHalt = 1;
    5d5e:	2001      	movs	r0, #1
    5d60:	4b1d      	ldr	r3, [pc, #116]	; (5dd8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    5d62:	4a1f      	ldr	r2, [pc, #124]	; (5de0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    5d64:	7018      	strb	r0, [r3, #0]
    5d66:	e024      	b.n	5db2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xca>
			sendZlp(0);
			return true;
		}

	case SET_ADDRESS:
		setAddress(setup.wValueL);
    5d68:	78a9      	ldrb	r1, [r5, #2]
    5d6a:	0030      	movs	r0, r6
    5d6c:	f7ff fc12 	bl	5594 <_ZN14USBDeviceClass10setAddressEm>
		return true;
    5d70:	2001      	movs	r0, #1
    5d72:	e030      	b.n	5dd6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xee>

	case GET_DESCRIPTOR:
		return sendDescriptor(setup);
    5d74:	0030      	movs	r0, r6
    5d76:	f7ff ff61 	bl	5c3c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    5d7a:	e02c      	b.n	5dd6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xee>

	case SET_DESCRIPTOR:
		return false;

	case GET_CONFIGURATION:
		armSend(0, (void*)&_usbConfiguration, 1);
    5d7c:	2301      	movs	r3, #1
    5d7e:	4a19      	ldr	r2, [pc, #100]	; (5de4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    5d80:	2100      	movs	r1, #0
    5d82:	e7c6      	b.n	5d12 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		return true;

	case SET_CONFIGURATION:
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    5d84:	780b      	ldrb	r3, [r1, #0]
			#endif

			sendZlp(0);
			return true;
		} else {
			return false;
    5d86:	2000      	movs	r0, #0
	case GET_CONFIGURATION:
		armSend(0, (void*)&_usbConfiguration, 1);
		return true;

	case SET_CONFIGURATION:
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    5d88:	06db      	lsls	r3, r3, #27
    5d8a:	d124      	bne.n	5dd6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xee>

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    5d8c:	242a      	movs	r4, #42	; 0x2a

			initEndpoints();
    5d8e:	0030      	movs	r0, r6
    5d90:	f7ff fcd4 	bl	573c <_ZN14USBDeviceClass13initEndpointsEv>
    5d94:	2001      	movs	r0, #1
			_usbConfiguration = setup.wValueL;
    5d96:	78aa      	ldrb	r2, [r5, #2]
    5d98:	4b12      	ldr	r3, [pc, #72]	; (5de4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    5d9a:	34ff      	adds	r4, #255	; 0xff
    5d9c:	601a      	str	r2, [r3, #0]
    5d9e:	4a10      	ldr	r2, [pc, #64]	; (5de0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    5da0:	6813      	ldr	r3, [r2, #0]
    5da2:	5d19      	ldrb	r1, [r3, r4]
    5da4:	4301      	orrs	r1, r0
    5da6:	5519      	strb	r1, [r3, r4]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    5da8:	244a      	movs	r4, #74	; 0x4a
    5daa:	34ff      	adds	r4, #255	; 0xff
    5dac:	5d19      	ldrb	r1, [r3, r4]
    5dae:	4301      	orrs	r1, r0
    5db0:	5519      	strb	r1, [r3, r4]

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    5db2:	6993      	ldr	r3, [r2, #24]
    5db4:	0b9b      	lsrs	r3, r3, #14
    5db6:	039b      	lsls	r3, r3, #14
    5db8:	6193      	str	r3, [r2, #24]
			usbd.epBank1EnableTransferComplete(CDC_ENDPOINT_ACM);
			usbd.epBank0EnableTransferComplete(CDC_ENDPOINT_OUT);
			#endif

			sendZlp(0);
			return true;
    5dba:	e00c      	b.n	5dd6 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xee>
		} else {
			return false;
		}

	case GET_INTERFACE:
		armSend(0, (void*)&_usbSetInterface, 1);
    5dbc:	2301      	movs	r3, #1
    5dbe:	4a0a      	ldr	r2, [pc, #40]	; (5de8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    5dc0:	e7de      	b.n	5d80 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x98>
		return true;

	case SET_INTERFACE:
		_usbSetInterface = setup.wValueL;
    5dc2:	788a      	ldrb	r2, [r1, #2]
    5dc4:	4b08      	ldr	r3, [pc, #32]	; (5de8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    5dc6:	601a      	str	r2, [r3, #0]
    5dc8:	4a05      	ldr	r2, [pc, #20]	; (5de0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    5dca:	6993      	ldr	r3, [r2, #24]
    5dcc:	0b9b      	lsrs	r3, r3, #14
    5dce:	039b      	lsls	r3, r3, #14
    5dd0:	6193      	str	r3, [r2, #24]
    5dd2:	e7cd      	b.n	5d70 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x88>

	case GET_DESCRIPTOR:
		return sendDescriptor(setup);

	case SET_DESCRIPTOR:
		return false;
    5dd4:	2000      	movs	r0, #0
		return true;

	default:
		return true;
	}
}
    5dd6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    5dd8:	20000780 	.word	0x20000780
    5ddc:	20000c2d 	.word	0x20000c2d
    5de0:	20000c38 	.word	0x20000c38
    5de4:	20000d3c 	.word	0x20000d3c
    5de8:	20000c30 	.word	0x20000c30

00005dec <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{

	if (_pack_message == true) {
    5dec:	4b4b      	ldr	r3, [pc, #300]	; (5f1c <_ZN14USBDeviceClass10ISRHandlerEv+0x130>)
		return true;
	}
}

void USBDeviceClass::ISRHandler()
{
    5dee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	if (_pack_message == true) {
    5df0:	781d      	ldrb	r5, [r3, #0]
		return true;
	}
}

void USBDeviceClass::ISRHandler()
{
    5df2:	0007      	movs	r7, r0

	if (_pack_message == true) {
    5df4:	2d00      	cmp	r5, #0
    5df6:	d000      	beq.n	5dfa <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    5df8:	e08f      	b.n	5f1a <_ZN14USBDeviceClass10ISRHandlerEv+0x12e>
	// Authorize attach if Vbus is present
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }

	// USB Interrupts
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    5dfa:	4c49      	ldr	r4, [pc, #292]	; (5f20 <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
    5dfc:	6823      	ldr	r3, [r4, #0]
    5dfe:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    5e00:	071b      	lsls	r3, r3, #28
    5e02:	d50d      	bpl.n	5e20 <_ZN14USBDeviceClass10ISRHandlerEv+0x34>
    5e04:	0028      	movs	r0, r5
    5e06:	f7ff f90b 	bl	5020 <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    5e0a:	6822      	ldr	r2, [r4, #0]
    5e0c:	2010      	movs	r0, #16
    5e0e:	0011      	movs	r1, r2
    5e10:	31ff      	adds	r1, #255	; 0xff
    5e12:	7a8b      	ldrb	r3, [r1, #10]
    5e14:	4303      	orrs	r3, r0
    5e16:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    5e18:	4b42      	ldr	r3, [pc, #264]	; (5f24 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    5e1a:	601d      	str	r5, [r3, #0]
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
	inline void detach() { usb.CTRLB.bit.DETACH = 1; }

	// USB Interrupts
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    5e1c:	2308      	movs	r3, #8
    5e1e:	8393      	strh	r3, [r2, #28]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
	inline void disableEndOfResetInterrupt()   { usb.INTENCLR.bit.EORST = 1; }

	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    5e20:	6823      	ldr	r3, [r4, #0]
    5e22:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    5e24:	0752      	lsls	r2, r2, #29
    5e26:	d51f      	bpl.n	5e68 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    5e28:	2204      	movs	r2, #4
    5e2a:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    5e2c:	4a3e      	ldr	r2, [pc, #248]	; (5f28 <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    5e2e:	7813      	ldrb	r3, [r2, #0]
    5e30:	2b00      	cmp	r3, #0
    5e32:	d00a      	beq.n	5e4a <_ZN14USBDeviceClass10ISRHandlerEv+0x5e>
			txLEDPulse--;
    5e34:	7813      	ldrb	r3, [r2, #0]
    5e36:	3b01      	subs	r3, #1
    5e38:	b2db      	uxtb	r3, r3
    5e3a:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    5e3c:	7813      	ldrb	r3, [r2, #0]
    5e3e:	2b00      	cmp	r3, #0
    5e40:	d103      	bne.n	5e4a <_ZN14USBDeviceClass10ISRHandlerEv+0x5e>
				digitalWrite(PIN_LED_TXL, HIGH);
    5e42:	2101      	movs	r1, #1
    5e44:	201a      	movs	r0, #26
    5e46:	f000 f9a1 	bl	618c <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    5e4a:	4a38      	ldr	r2, [pc, #224]	; (5f2c <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    5e4c:	7813      	ldrb	r3, [r2, #0]
    5e4e:	2b00      	cmp	r3, #0
    5e50:	d00a      	beq.n	5e68 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
			rxLEDPulse--;
    5e52:	7813      	ldrb	r3, [r2, #0]
    5e54:	3b01      	subs	r3, #1
    5e56:	b2db      	uxtb	r3, r3
    5e58:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    5e5a:	7813      	ldrb	r3, [r2, #0]
    5e5c:	2b00      	cmp	r3, #0
    5e5e:	d103      	bne.n	5e68 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
				digitalWrite(PIN_LED_RXL, HIGH);
    5e60:	2101      	movs	r1, #1
    5e62:	2019      	movs	r0, #25
    5e64:	f000 f992 	bl	618c <digitalWrite>
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }

	// Interrupts
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    5e68:	6823      	ldr	r3, [r4, #0]
    5e6a:	33ff      	adds	r3, #255	; 0xff
    5e6c:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    5e6e:	06d2      	lsls	r2, r2, #27
    5e70:	d526      	bpl.n	5ec0 <_ZN14USBDeviceClass10ISRHandlerEv+0xd4>
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    5e72:	2210      	movs	r2, #16
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    5e74:	2140      	movs	r1, #64	; 0x40
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    5e76:	721a      	strb	r2, [r3, #8]
	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    5e78:	795a      	ldrb	r2, [r3, #5]
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
			// Standard Requests
			ok = handleStandardSetup(*setup);
    5e7a:	0038      	movs	r0, r7
    5e7c:	430a      	orrs	r2, r1
    5e7e:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    5e80:	2360      	movs	r3, #96	; 0x60
    5e82:	492b      	ldr	r1, [pc, #172]	; (5f30 <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    5e84:	780a      	ldrb	r2, [r1, #0]
    5e86:	421a      	tst	r2, r3
    5e88:	d102      	bne.n	5e90 <_ZN14USBDeviceClass10ISRHandlerEv+0xa4>
			// Standard Requests
			ok = handleStandardSetup(*setup);
    5e8a:	f7ff ff2d 	bl	5ce8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
    5e8e:	e001      	b.n	5e94 <_ZN14USBDeviceClass10ISRHandlerEv+0xa8>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
    5e90:	f7ff fba2 	bl	55d8 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
		}

		if (ok) {
    5e94:	2800      	cmp	r0, #0
    5e96:	d006      	beq.n	5ea6 <_ZN14USBDeviceClass10ISRHandlerEv+0xba>

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    5e98:	2180      	movs	r1, #128	; 0x80
    5e9a:	6823      	ldr	r3, [r4, #0]
    5e9c:	4249      	negs	r1, r1
    5e9e:	33ff      	adds	r3, #255	; 0xff
    5ea0:	799a      	ldrb	r2, [r3, #6]
    5ea2:	430a      	orrs	r2, r1
    5ea4:	e001      	b.n	5eaa <_ZN14USBDeviceClass10ISRHandlerEv+0xbe>
{
	// TODO: test
	// TODO: use .bit. notation

	// Stall endpoint
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    5ea6:	2220      	movs	r2, #32
    5ea8:	4b22      	ldr	r3, [pc, #136]	; (5f34 <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
    5eaa:	719a      	strb	r2, [r3, #6]
	// Interrupts
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    5eac:	6823      	ldr	r3, [r4, #0]
    5eae:	33ff      	adds	r3, #255	; 0xff
    5eb0:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    5eb2:	0652      	lsls	r2, r2, #25
    5eb4:	d504      	bpl.n	5ec0 <_ZN14USBDeviceClass10ISRHandlerEv+0xd4>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    5eb6:	2140      	movs	r1, #64	; 0x40
    5eb8:	7219      	strb	r1, [r3, #8]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }

	inline void epBank0DisableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENCLR.bit.RXSTP = 1; }
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    5eba:	7a5a      	ldrb	r2, [r3, #9]
    5ebc:	430a      	orrs	r2, r1
    5ebe:	725a      	strb	r2, [r3, #9]
	// Config
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }

	// Interrupts
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    5ec0:	6823      	ldr	r3, [r4, #0]
		}

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    5ec2:	2600      	movs	r6, #0
    5ec4:	8c1d      	ldrh	r5, [r3, #32]
    5ec6:	2301      	movs	r3, #1
    5ec8:	439d      	bics	r5, r3
    5eca:	b2ed      	uxtb	r5, r5
	while (ept_int != 0)
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    5ecc:	9301      	str	r3, [sp, #4]
    5ece:	b2f1      	uxtb	r1, r6

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
	while (ept_int != 0)
    5ed0:	2d00      	cmp	r5, #0
    5ed2:	d022      	beq.n	5f1a <_ZN14USBDeviceClass10ISRHandlerEv+0x12e>
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    5ed4:	002b      	movs	r3, r5
    5ed6:	4133      	asrs	r3, r6
    5ed8:	9a01      	ldr	r2, [sp, #4]
    5eda:	4213      	tst	r3, r2
    5edc:	d015      	beq.n	5f0a <_ZN14USBDeviceClass10ISRHandlerEv+0x11e>

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    5ede:	0033      	movs	r3, r6
    5ee0:	6822      	ldr	r2, [r4, #0]
    5ee2:	3308      	adds	r3, #8
    5ee4:	015b      	lsls	r3, r3, #5
    5ee6:	18d3      	adds	r3, r2, r3
    5ee8:	79da      	ldrb	r2, [r3, #7]
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    5eea:	07d2      	lsls	r2, r2, #31
    5eec:	d402      	bmi.n	5ef4 <_ZN14USBDeviceClass10ISRHandlerEv+0x108>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    5eee:	79db      	ldrb	r3, [r3, #7]
    5ef0:	079b      	lsls	r3, r3, #30
    5ef2:	d507      	bpl.n	5f04 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
			    usbd.epBank1IsTransferComplete(i))
			{
				if (epHandlers[i]) {
    5ef4:	4b10      	ldr	r3, [pc, #64]	; (5f38 <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    5ef6:	00b2      	lsls	r2, r6, #2
    5ef8:	58d0      	ldr	r0, [r2, r3]
    5efa:	2800      	cmp	r0, #0
    5efc:	d009      	beq.n	5f12 <_ZN14USBDeviceClass10ISRHandlerEv+0x126>
					epHandlers[i]->handleEndpoint();
    5efe:	6803      	ldr	r3, [r0, #0]
    5f00:	681b      	ldr	r3, [r3, #0]
    5f02:	4798      	blx	r3
				} else {
					handleEndpoint(i);
				}
			}
			ept_int &= ~(1 << i);
    5f04:	9b01      	ldr	r3, [sp, #4]
    5f06:	40b3      	lsls	r3, r6
    5f08:	439d      	bics	r5, r3
    5f0a:	3601      	adds	r6, #1
		}
		i++;
		if (i > USB_EPT_NUM)
    5f0c:	2e09      	cmp	r6, #9
    5f0e:	d1de      	bne.n	5ece <_ZN14USBDeviceClass10ISRHandlerEv+0xe2>
    5f10:	e003      	b.n	5f1a <_ZN14USBDeviceClass10ISRHandlerEv+0x12e>
			    usbd.epBank1IsTransferComplete(i))
			{
				if (epHandlers[i]) {
					epHandlers[i]->handleEndpoint();
				} else {
					handleEndpoint(i);
    5f12:	0038      	movs	r0, r7
    5f14:	f7ff fa8a 	bl	542c <_ZN14USBDeviceClass14handleEndpointEh>
    5f18:	e7f4      	b.n	5f04 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
		}
		i++;
		if (i > USB_EPT_NUM)
			break;  // fire exit
	}
}
    5f1a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5f1c:	20000c2c 	.word	0x20000c2c
    5f20:	20000c38 	.word	0x20000c38
    5f24:	20000d3c 	.word	0x20000d3c
    5f28:	20000a4c 	.word	0x20000a4c
    5f2c:	20000c34 	.word	0x20000c34
    5f30:	20000a50 	.word	0x20000a50
    5f34:	410050ff 	.word	0x410050ff
    5f38:	20000c10 	.word	0x20000c10

00005f3c <UDD_Handler>:
static char isEndpointHalt = 0;

extern void (*gpf_isr)(void);

// USB_Handler ISR
extern "C" void UDD_Handler(void) {
    5f3c:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    5f3e:	4802      	ldr	r0, [pc, #8]	; (5f48 <UDD_Handler+0xc>)
    5f40:	f7ff ff54 	bl	5dec <_ZN14USBDeviceClass10ISRHandlerEv>
}
    5f44:	bd10      	pop	{r4, pc}
    5f46:	46c0      	nop			; (mov r8, r8)
    5f48:	20000c2f 	.word	0x20000c2f

00005f4c <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:

typedef uint8_t ep_t;

class USBDevice_SAMD21G18x {
public:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    5f4c:	4a01      	ldr	r2, [pc, #4]	; (5f54 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x8>)
    5f4e:	4b02      	ldr	r3, [pc, #8]	; (5f58 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    5f50:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    5f52:	4770      	bx	lr
    5f54:	41005000 	.word	0x41005000
    5f58:	20000c38 	.word	0x20000c38

00005f5c <EIC_Handler>:

/*
 * External Interrupt Controller NVIC Interrupt Handler
 */
void EIC_Handler(void)
{
    5f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Test the 16 normal interrupts
  for (uint32_t i=EXTERNAL_INT_0; i<=EXTERNAL_INT_15; i++)
    5f5e:	2400      	movs	r4, #0
  {
    if ((EIC->INTFLAG.reg & (1 << i)) != 0)
    5f60:	2701      	movs	r7, #1
    5f62:	003e      	movs	r6, r7
    5f64:	40a6      	lsls	r6, r4
    5f66:	4d07      	ldr	r5, [pc, #28]	; (5f84 <EIC_Handler+0x28>)
    5f68:	692b      	ldr	r3, [r5, #16]
    5f6a:	421e      	tst	r6, r3
    5f6c:	d006      	beq.n	5f7c <EIC_Handler+0x20>
    {
      // Call the callback function if assigned
      if (callbacksInt[i]) {
    5f6e:	4b06      	ldr	r3, [pc, #24]	; (5f88 <EIC_Handler+0x2c>)
    5f70:	00a2      	lsls	r2, r4, #2
    5f72:	58d3      	ldr	r3, [r2, r3]
    5f74:	2b00      	cmp	r3, #0
    5f76:	d000      	beq.n	5f7a <EIC_Handler+0x1e>
        callbacksInt[i]();
    5f78:	4798      	blx	r3
      }

      // Clear the interrupt
      EIC->INTFLAG.reg = 1 << i;
    5f7a:	612e      	str	r6, [r5, #16]
 * External Interrupt Controller NVIC Interrupt Handler
 */
void EIC_Handler(void)
{
  // Test the 16 normal interrupts
  for (uint32_t i=EXTERNAL_INT_0; i<=EXTERNAL_INT_15; i++)
    5f7c:	3401      	adds	r4, #1
    5f7e:	2c10      	cmp	r4, #16
    5f80:	d1ef      	bne.n	5f62 <EIC_Handler+0x6>

      // Clear the interrupt
      EIC->INTFLAG.reg = 1 << i;
    }
  }
}
    5f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f84:	40001800 	.word	0x40001800
    5f88:	20000d40 	.word	0x20000d40

00005f8c <init>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    5f8c:	21fa      	movs	r1, #250	; 0xfa
void init( void )
{
  uint32_t ul ;

  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    5f8e:	4b33      	ldr	r3, [pc, #204]	; (605c <init+0xd0>)
 *   - At reset, ResetHandler did the system clock configuration. Core is running at 48MHz.
 *   - Watchdog is disabled by default, unless someone plays with NVM User page
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
    5f90:	b510      	push	{r4, lr}
    5f92:	6818      	ldr	r0, [r3, #0]
    5f94:	0089      	lsls	r1, r1, #2
    5f96:	f000 fcff 	bl	6998 <__aeabi_uidiv>
    5f9a:	4b31      	ldr	r3, [pc, #196]	; (6060 <init+0xd4>)
    5f9c:	3801      	subs	r0, #1
    5f9e:	4298      	cmp	r0, r3
    5fa0:	d824      	bhi.n	5fec <init+0x60>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    5fa2:	4930      	ldr	r1, [pc, #192]	; (6064 <init+0xd8>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    5fa4:	4a30      	ldr	r2, [pc, #192]	; (6068 <init+0xdc>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    5fa6:	6048      	str	r0, [r1, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    5fa8:	20c0      	movs	r0, #192	; 0xc0
    5faa:	6a13      	ldr	r3, [r2, #32]
    5fac:	0600      	lsls	r0, r0, #24
    5fae:	021b      	lsls	r3, r3, #8
    5fb0:	0a1b      	lsrs	r3, r3, #8
    5fb2:	4303      	orrs	r3, r0
    5fb4:	6213      	str	r3, [r2, #32]
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    5fb6:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    5fb8:	2307      	movs	r3, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    5fba:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    5fbc:	600b      	str	r3, [r1, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    5fbe:	2180      	movs	r1, #128	; 0x80
    5fc0:	6a13      	ldr	r3, [r2, #32]
    5fc2:	0609      	lsls	r1, r1, #24
    5fc4:	021b      	lsls	r3, r3, #8
    5fc6:	0a1b      	lsrs	r3, r3, #8
    5fc8:	430b      	orrs	r3, r1
//
//  // Clock EIC for I/O interrupts
//	PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    5fca:	21fc      	movs	r1, #252	; 0xfc
    5fcc:	6213      	str	r3, [r2, #32]
    5fce:	4b27      	ldr	r3, [pc, #156]	; (606c <init+0xe0>)
    5fd0:	6a1a      	ldr	r2, [r3, #32]
    5fd2:	430a      	orrs	r2, r1

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    5fd4:	21fc      	movs	r1, #252	; 0xfc
//
//  // Clock EIC for I/O interrupts
//	PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    5fd6:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    5fd8:	6a1a      	ldr	r2, [r3, #32]
    5fda:	0189      	lsls	r1, r1, #6
    5fdc:	430a      	orrs	r2, r1

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    5fde:	21a0      	movs	r1, #160	; 0xa0

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    5fe0:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    5fe2:	6a1a      	ldr	r2, [r3, #32]
    5fe4:	02c9      	lsls	r1, r1, #11
    5fe6:	430a      	orrs	r2, r1
    5fe8:	621a      	str	r2, [r3, #32]
    5fea:	e000      	b.n	5fee <init+0x62>
    5fec:	e7fe      	b.n	5fec <init+0x60>

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for ( ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
	  pinMode( ul, INPUT ) ;
    5fee:	0020      	movs	r0, r4
    5ff0:	2100      	movs	r1, #0

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for ( ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    5ff2:	3401      	adds	r4, #1
  {
	  pinMode( ul, INPUT ) ;
    5ff4:	f000 f876 	bl	60e4 <pinMode>

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for ( ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    5ff8:	2c0e      	cmp	r4, #14
    5ffa:	d1f8      	bne.n	5fee <init+0x62>
	  pinMode( ul, INPUT ) ;
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    5ffc:	4a1c      	ldr	r2, [pc, #112]	; (6070 <init+0xe4>)
    5ffe:	7853      	ldrb	r3, [r2, #1]
    6000:	4c1b      	ldr	r4, [pc, #108]	; (6070 <init+0xe4>)
    6002:	b25b      	sxtb	r3, r3
    6004:	2b00      	cmp	r3, #0
    6006:	dbfa      	blt.n	5ffe <init+0x72>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    6008:	4b1a      	ldr	r3, [pc, #104]	; (6074 <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    600a:	491b      	ldr	r1, [pc, #108]	; (6078 <init+0xec>)

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    600c:	8063      	strh	r3, [r4, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    600e:	7e4b      	ldrb	r3, [r1, #25]
    6010:	4a19      	ldr	r2, [pc, #100]	; (6078 <init+0xec>)
    6012:	09db      	lsrs	r3, r3, #7
    6014:	2b01      	cmp	r3, #1
    6016:	d0fa      	beq.n	600e <init+0x82>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    6018:	23e4      	movs	r3, #228	; 0xe4
    601a:	00db      	lsls	r3, r3, #3
    601c:	8093      	strh	r3, [r2, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    601e:	233f      	movs	r3, #63	; 0x3f
    6020:	70d3      	strb	r3, [r2, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    6022:	7e53      	ldrb	r3, [r2, #25]
    6024:	4914      	ldr	r1, [pc, #80]	; (6078 <init+0xec>)
    6026:	09db      	lsrs	r3, r3, #7
    6028:	2b01      	cmp	r3, #1
    602a:	d0fa      	beq.n	6022 <init+0x96>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    602c:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    602e:	2000      	movs	r0, #0

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    6030:	015b      	lsls	r3, r3, #5
    6032:	610b      	str	r3, [r1, #16]

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    6034:	7088      	strb	r0, [r1, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    6036:	f000 f825 	bl	6084 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    603a:	7863      	ldrb	r3, [r4, #1]
    603c:	b25b      	sxtb	r3, r3
    603e:	2b00      	cmp	r3, #0
    6040:	dbfb      	blt.n	603a <init+0xae>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    6042:	4a0e      	ldr	r2, [pc, #56]	; (607c <init+0xf0>)
    6044:	4b0a      	ldr	r3, [pc, #40]	; (6070 <init+0xe4>)
    6046:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    6048:	4a0d      	ldr	r2, [pc, #52]	; (6080 <init+0xf4>)
    604a:	79d3      	ldrb	r3, [r2, #7]
    604c:	09db      	lsrs	r3, r3, #7
    604e:	2b01      	cmp	r3, #1
    6050:	d0fb      	beq.n	604a <init+0xbe>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    6052:	2241      	movs	r2, #65	; 0x41
    6054:	4b0a      	ldr	r3, [pc, #40]	; (6080 <init+0xf4>)
    6056:	705a      	strb	r2, [r3, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    6058:	bd10      	pop	{r4, pc}
    605a:	46c0      	nop			; (mov r8, r8)
    605c:	20000098 	.word	0x20000098
    6060:	00ffffff 	.word	0x00ffffff
    6064:	e000e010 	.word	0xe000e010
    6068:	e000ed00 	.word	0xe000ed00
    606c:	40000400 	.word	0x40000400
    6070:	40000c00 	.word	0x40000c00
    6074:	0000401e 	.word	0x0000401e
    6078:	42004000 	.word	0x42004000
    607c:	00004021 	.word	0x00004021
    6080:	42004800 	.word	0x42004800

00006084 <analogReference>:
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    6084:	b510      	push	{r4, lr}
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    6086:	4c15      	ldr	r4, [pc, #84]	; (60dc <analogReference+0x58>)
    6088:	4a14      	ldr	r2, [pc, #80]	; (60dc <analogReference+0x58>)
    608a:	7e61      	ldrb	r1, [r4, #25]
    608c:	0013      	movs	r3, r2
    608e:	09c9      	lsrs	r1, r1, #7
    6090:	2901      	cmp	r1, #1
    6092:	d0f9      	beq.n	6088 <analogReference+0x4>
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
  syncADC();
  switch (mode)
    6094:	3801      	subs	r0, #1
    6096:	2804      	cmp	r0, #4
    6098:	d813      	bhi.n	60c2 <analogReference+0x3e>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    609a:	6919      	ldr	r1, [r3, #16]
    609c:	4a10      	ldr	r2, [pc, #64]	; (60e0 <analogReference+0x5c>)
    609e:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    60a0:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    60a2:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    60a4:	785a      	ldrb	r2, [r3, #1]
    60a6:	438a      	bics	r2, r1
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
  syncADC();
  switch (mode)
    60a8:	f000 fc6c 	bl	6984 <__gnu_thumb1_case_uqi>
    60ac:	07090503 	.word	0x07090503
    60b0:	03          	.byte	0x03
    60b1:	00          	.byte	0x00
  {
    case AR_INTERNAL:
    case AR_INTERNAL2V23:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    60b2:	390e      	subs	r1, #14
    60b4:	e002      	b.n	60bc <analogReference+0x38>
      break;

    case AR_EXTERNAL:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    60b6:	390c      	subs	r1, #12
    60b8:	e000      	b.n	60bc <analogReference+0x38>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    60ba:	390d      	subs	r1, #13
    60bc:	430a      	orrs	r2, r1
    60be:	705a      	strb	r2, [r3, #1]
      break;
    60c0:	e00a      	b.n	60d8 <analogReference+0x54>

    case AR_DEFAULT:
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    60c2:	21f0      	movs	r1, #240	; 0xf0
    60c4:	6913      	ldr	r3, [r2, #16]
    60c6:	0509      	lsls	r1, r1, #20
    60c8:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    60ca:	210f      	movs	r1, #15
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;

    case AR_DEFAULT:
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    60cc:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    60ce:	7853      	ldrb	r3, [r2, #1]
    60d0:	438b      	bics	r3, r1
    60d2:	390d      	subs	r1, #13
    60d4:	430b      	orrs	r3, r1
    60d6:	7053      	strb	r3, [r2, #1]
      break;
  }
}
    60d8:	bd10      	pop	{r4, pc}
    60da:	46c0      	nop			; (mov r8, r8)
    60dc:	42004000 	.word	0x42004000
    60e0:	f0ffffff 	.word	0xf0ffffff

000060e4 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    60e4:	2218      	movs	r2, #24
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    60e6:	b570      	push	{r4, r5, r6, lr}
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    60e8:	0016      	movs	r6, r2
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    60ea:	0005      	movs	r5, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    60ec:	4346      	muls	r6, r0
    60ee:	2008      	movs	r0, #8
    60f0:	4b24      	ldr	r3, [pc, #144]	; (6184 <pinMode+0xa0>)
    60f2:	199e      	adds	r6, r3, r6
    60f4:	5630      	ldrsb	r0, [r6, r0]
    60f6:	001c      	movs	r4, r3
    60f8:	1c43      	adds	r3, r0, #1
    60fa:	d041      	beq.n	6180 <pinMode+0x9c>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    60fc:	2903      	cmp	r1, #3
    60fe:	d83f      	bhi.n	6180 <pinMode+0x9c>
    6100:	0013      	movs	r3, r2
    6102:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    6104:	436b      	muls	r3, r5
    6106:	56e2      	ldrsb	r2, [r4, r3]
    6108:	18e3      	adds	r3, r4, r3
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    610a:	f000 fc3b 	bl	6984 <__gnu_thumb1_case_uqi>
    610e:	2802      	.short	0x2802
    6110:	1b0e      	.short	0x1b0e
  {
    case INPUT:
      // Set pin to input mode
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    6112:	2002      	movs	r0, #2
    6114:	6859      	ldr	r1, [r3, #4]
    6116:	01d3      	lsls	r3, r2, #7
    6118:	4a1b      	ldr	r2, [pc, #108]	; (6188 <pinMode+0xa4>)
    611a:	189b      	adds	r3, r3, r2
    611c:	185a      	adds	r2, r3, r1
    611e:	3240      	adds	r2, #64	; 0x40
    6120:	7010      	strb	r0, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6122:	2201      	movs	r2, #1
    6124:	408a      	lsls	r2, r1
    6126:	605a      	str	r2, [r3, #4]
    break ;
    6128:	e02a      	b.n	6180 <pinMode+0x9c>

    case INPUT_PULLUP:
      // Set pin to input mode with pull-up resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    612a:	2006      	movs	r0, #6
    612c:	6859      	ldr	r1, [r3, #4]
    612e:	01d3      	lsls	r3, r2, #7
    6130:	4a15      	ldr	r2, [pc, #84]	; (6188 <pinMode+0xa4>)
    6132:	189b      	adds	r3, r3, r2
    6134:	185a      	adds	r2, r3, r1
    6136:	3240      	adds	r2, #64	; 0x40
    6138:	7010      	strb	r0, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    613a:	2201      	movs	r2, #1
    613c:	408a      	lsls	r2, r1
    613e:	605a      	str	r2, [r3, #4]

      // Enable pull level (cf '22.6.3.2 Input Configuration' and '22.8.7 Data Output Value Set')
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6140:	619a      	str	r2, [r3, #24]
    break ;
    6142:	e01d      	b.n	6180 <pinMode+0x9c>

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    6144:	2006      	movs	r0, #6
    6146:	6859      	ldr	r1, [r3, #4]
    6148:	01d3      	lsls	r3, r2, #7
    614a:	4a0f      	ldr	r2, [pc, #60]	; (6188 <pinMode+0xa4>)
    614c:	189b      	adds	r3, r3, r2
    614e:	185a      	adds	r2, r3, r1
    6150:	3240      	adds	r2, #64	; 0x40
    6152:	7010      	strb	r0, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    6154:	2201      	movs	r2, #1
    6156:	408a      	lsls	r2, r1
    6158:	605a      	str	r2, [r3, #4]

      // Enable pull level (cf '22.6.3.2 Input Configuration' and '22.8.6 Data Output Value Clear')
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    615a:	615a      	str	r2, [r3, #20]
    break ;
    615c:	e010      	b.n	6180 <pinMode+0x9c>

    case OUTPUT:
      // enable input, to support reading back values
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].bit.INEN = 1 ;
    615e:	2402      	movs	r4, #2
    6160:	6858      	ldr	r0, [r3, #4]
    6162:	01d3      	lsls	r3, r2, #7
    6164:	4a08      	ldr	r2, [pc, #32]	; (6188 <pinMode+0xa4>)
    6166:	189b      	adds	r3, r3, r2
    6168:	181a      	adds	r2, r3, r0
    616a:	3240      	adds	r2, #64	; 0x40
    616c:	7811      	ldrb	r1, [r2, #0]
    616e:	4321      	orrs	r1, r4
    6170:	7011      	strb	r1, [r2, #0]

      // disable pullups
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].bit.PULLEN = 0 ;
    6172:	7811      	ldrb	r1, [r2, #0]
    6174:	1924      	adds	r4, r4, r4
    6176:	43a1      	bics	r1, r4
    6178:	7011      	strb	r1, [r2, #0]

      // Set pin to output mode
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    617a:	2201      	movs	r2, #1
    617c:	4082      	lsls	r2, r0
    617e:	609a      	str	r2, [r3, #8]

    default:
      // do nothing
    break ;
  }
}
    6180:	bd70      	pop	{r4, r5, r6, pc}
    6182:	46c0      	nop			; (mov r8, r8)
    6184:	0000e720 	.word	0x0000e720
    6188:	41004400 	.word	0x41004400

0000618c <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    618c:	2318      	movs	r3, #24
    618e:	2208      	movs	r2, #8
    6190:	4358      	muls	r0, r3
    break ;
  }
}

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
    6192:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    6194:	4e12      	ldr	r6, [pc, #72]	; (61e0 <digitalWrite+0x54>)
    6196:	1833      	adds	r3, r6, r0
    6198:	569a      	ldrsb	r2, [r3, r2]
    619a:	3201      	adds	r2, #1
    619c:	d01e      	beq.n	61dc <digitalWrite+0x50>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    619e:	2201      	movs	r2, #1
    61a0:	0015      	movs	r5, r2
  {
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    61a2:	685c      	ldr	r4, [r3, #4]
  uint32_t pinMask = (1ul << pin);

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    61a4:	5783      	ldrsb	r3, [r0, r6]
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    61a6:	40a5      	lsls	r5, r4

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    61a8:	480e      	ldr	r0, [pc, #56]	; (61e4 <digitalWrite+0x58>)
    61aa:	01db      	lsls	r3, r3, #7
    61ac:	181e      	adds	r6, r3, r0
    61ae:	68b0      	ldr	r0, [r6, #8]
    61b0:	4228      	tst	r0, r5
    61b2:	d10c      	bne.n	61ce <digitalWrite+0x42>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    61b4:	0008      	movs	r0, r1
    61b6:	1e47      	subs	r7, r0, #1
    61b8:	41b8      	sbcs	r0, r7
    61ba:	4002      	ands	r2, r0
    61bc:	0090      	lsls	r0, r2, #2
    61be:	2204      	movs	r2, #4
    61c0:	1934      	adds	r4, r6, r4
    61c2:	3440      	adds	r4, #64	; 0x40
    61c4:	7826      	ldrb	r6, [r4, #0]
    61c6:	4396      	bics	r6, r2
    61c8:	0032      	movs	r2, r6
    61ca:	4302      	orrs	r2, r0
    61cc:	7022      	strb	r2, [r4, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    61ce:	4a05      	ldr	r2, [pc, #20]	; (61e4 <digitalWrite+0x58>)
    61d0:	189b      	adds	r3, r3, r2
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
  }

  switch ( ulVal )
    61d2:	2900      	cmp	r1, #0
    61d4:	d101      	bne.n	61da <digitalWrite+0x4e>
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    61d6:	615d      	str	r5, [r3, #20]
    break ;
    61d8:	e000      	b.n	61dc <digitalWrite+0x50>

    default:
      PORT->Group[port].OUTSET.reg = pinMask;
    61da:	619d      	str	r5, [r3, #24]
    break ;
  }

  return ;
}
    61dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61de:	46c0      	nop			; (mov r8, r8)
    61e0:	0000e720 	.word	0x0000e720
    61e4:	41004400 	.word	0x41004400

000061e8 <digitalRead>:

int digitalRead( uint32_t ulPin )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    61e8:	2318      	movs	r3, #24

  return ;
}

int digitalRead( uint32_t ulPin )
{
    61ea:	b510      	push	{r4, lr}
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    61ec:	2408      	movs	r4, #8
    61ee:	4343      	muls	r3, r0
    61f0:	4907      	ldr	r1, [pc, #28]	; (6210 <digitalRead+0x28>)
  {
    return LOW ;
    61f2:	2000      	movs	r0, #0
}

int digitalRead( uint32_t ulPin )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    61f4:	18ca      	adds	r2, r1, r3
    61f6:	5714      	ldrsb	r4, [r2, r4]
    61f8:	3401      	adds	r4, #1
    61fa:	d008      	beq.n	620e <digitalRead+0x26>
  {
    return LOW ;
  }

  if ( (PORT->Group[g_APinDescription[ulPin].ulPort].IN.reg & (1ul << g_APinDescription[ulPin].ulPin)) != 0 )
    61fc:	565b      	ldrsb	r3, [r3, r1]
    61fe:	4905      	ldr	r1, [pc, #20]	; (6214 <digitalRead+0x2c>)
    6200:	01db      	lsls	r3, r3, #7
    6202:	185b      	adds	r3, r3, r1
    6204:	6a18      	ldr	r0, [r3, #32]
    6206:	6853      	ldr	r3, [r2, #4]
    6208:	40d8      	lsrs	r0, r3
int digitalRead( uint32_t ulPin )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
  {
    return LOW ;
    620a:	2301      	movs	r3, #1
    620c:	4018      	ands	r0, r3
  {
    return HIGH ;
  }

  return LOW ;
}
    620e:	bd10      	pop	{r4, pc}
    6210:	0000e720 	.word	0x0000e720
    6214:	41004400 	.word	0x41004400

00006218 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    6218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    621a:	2318      	movs	r3, #24

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    621c:	0002      	movs	r2, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    621e:	4343      	muls	r3, r0
    6220:	2008      	movs	r0, #8
    6222:	4c2c      	ldr	r4, [pc, #176]	; (62d4 <pinPeripheral+0xbc>)
    6224:	18e3      	adds	r3, r4, r3
    6226:	5618      	ldrsb	r0, [r3, r0]
    6228:	0023      	movs	r3, r4
  {
    return -1 ;
    622a:	0004      	movs	r4, r0
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    622c:	3001      	adds	r0, #1
    622e:	d04e      	beq.n	62ce <pinPeripheral+0xb6>
  {
    return -1 ;
  }

  switch ( ulPeripheral )
    6230:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    6232:	2400      	movs	r4, #0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
  {
    return -1 ;
  }

  switch ( ulPeripheral )
    6234:	280c      	cmp	r0, #12
    6236:	d84a      	bhi.n	62ce <pinPeripheral+0xb6>
    6238:	f000 fba4 	bl	6984 <__gnu_thumb1_case_uqi>
    623c:	1a1a1a47 	.word	0x1a1a1a47
    6240:	1a1a1a1a 	.word	0x1a1a1a1a
    6244:	0707071a 	.word	0x0707071a
    6248:	07          	.byte	0x07
    6249:	00          	.byte	0x00
    case PIO_OUTPUT:
      // Disable peripheral muxing, done in pinMode
//			PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].bit.PMUXEN = 0 ;

      // Configure pin mode, if requested
      if ( ulPeripheral == PIO_INPUT )
    624a:	2909      	cmp	r1, #9
    624c:	d101      	bne.n	6252 <pinPeripheral+0x3a>
      {
        pinMode( ulPin, INPUT ) ;
    624e:	2100      	movs	r1, #0
    6250:	e002      	b.n	6258 <pinPeripheral+0x40>
      }
      else
      {
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    6252:	290a      	cmp	r1, #10
    6254:	d104      	bne.n	6260 <pinPeripheral+0x48>
        {
          pinMode( ulPin, INPUT_PULLUP ) ;
    6256:	3908      	subs	r1, #8
    6258:	0010      	movs	r0, r2
    625a:	f7ff ff43 	bl	60e4 <pinMode>
    625e:	e023      	b.n	62a8 <pinPeripheral+0x90>
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    6260:	2400      	movs	r4, #0
        {
          pinMode( ulPin, INPUT_PULLUP ) ;
        }
        else
        {
          if ( ulPeripheral == PIO_OUTPUT )
    6262:	290b      	cmp	r1, #11
    6264:	d133      	bne.n	62ce <pinPeripheral+0xb6>
          {
            pinMode( ulPin, OUTPUT ) ;
    6266:	390a      	subs	r1, #10
    6268:	0010      	movs	r0, r2
    626a:	f7ff ff3b 	bl	60e4 <pinMode>
    626e:	e02e      	b.n	62ce <pinPeripheral+0xb6>
                                                                    PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PMUX( ulPeripheral ) |
                                                                    PORT_WRCONFIG_WRPINCFG |
                                                                    PORT_WRCONFIG_PINMASK( g_APinDescription[ulPin].ulPin - 16 ) ;
      }
#else
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    6270:	2018      	movs	r0, #24
    6272:	4342      	muls	r2, r0
    6274:	1898      	adds	r0, r3, r2
    6276:	6846      	ldr	r6, [r0, #4]
    6278:	2501      	movs	r5, #1
    627a:	0034      	movs	r4, r6
    627c:	569a      	ldrsb	r2, [r3, r2]
    627e:	402c      	ands	r4, r5
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    6280:	01d3      	lsls	r3, r2, #7
    6282:	0870      	lsrs	r0, r6, #1
    6284:	4a14      	ldr	r2, [pc, #80]	; (62d8 <pinPeripheral+0xc0>)
                                                                    PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PMUX( ulPeripheral ) |
                                                                    PORT_WRCONFIG_WRPINCFG |
                                                                    PORT_WRCONFIG_PINMASK( g_APinDescription[ulPin].ulPin - 16 ) ;
      }
#else
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    6286:	2c00      	cmp	r4, #0
    6288:	d010      	beq.n	62ac <pinPeripheral+0x94>
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    628a:	189a      	adds	r2, r3, r2
        // Set new muxing
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    628c:	230f      	movs	r3, #15
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    628e:	1810      	adds	r0, r2, r0
    6290:	3030      	adds	r0, #48	; 0x30
    6292:	7804      	ldrb	r4, [r0, #0]
        // Set new muxing
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    6294:	0109      	lsls	r1, r1, #4
    6296:	4023      	ands	r3, r4
    6298:	4319      	orrs	r1, r3
    629a:	b2c9      	uxtb	r1, r1
        // Enable port mux
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    629c:	1993      	adds	r3, r2, r6
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
        // Set new muxing
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    629e:	7001      	strb	r1, [r0, #0]
        // Enable port mux
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    62a0:	3340      	adds	r3, #64	; 0x40
    62a2:	781a      	ldrb	r2, [r3, #0]
    62a4:	4315      	orrs	r5, r2
    62a6:	701d      	strb	r5, [r3, #0]
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    62a8:	2400      	movs	r4, #0
    62aa:	e010      	b.n	62ce <pinPeripheral+0xb6>
      else // even pin
      {
        uint32_t temp ;

        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    62ac:	270f      	movs	r7, #15
      }
      else // even pin
      {
        uint32_t temp ;

        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
    62ae:	189b      	adds	r3, r3, r2
    62b0:	1818      	adds	r0, r3, r0
    62b2:	3030      	adds	r0, #48	; 0x30
    62b4:	7802      	ldrb	r2, [r0, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    62b6:	199b      	adds	r3, r3, r6
      else // even pin
      {
        uint32_t temp ;

        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    62b8:	43ba      	bics	r2, r7
    62ba:	4311      	orrs	r1, r2
    62bc:	b2c9      	uxtb	r1, r1
    62be:	7001      	strb	r1, [r0, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    62c0:	3340      	adds	r3, #64	; 0x40
    62c2:	781a      	ldrb	r2, [r3, #0]
    62c4:	4315      	orrs	r5, r2
    62c6:	701d      	strb	r5, [r3, #0]
    62c8:	e001      	b.n	62ce <pinPeripheral+0xb6>
      }
#endif
    break ;

    case PIO_NOT_A_PIN:
      return -1l ;
    62ca:	2401      	movs	r4, #1
    62cc:	4264      	negs	r4, r4
    break ;
  }

  return 0l ;
}
    62ce:	0020      	movs	r0, r4
    62d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62d2:	46c0      	nop			; (mov r8, r8)
    62d4:	0000e720 	.word	0x0000e720
    62d8:	41004400 	.word	0x41004400

000062dc <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    62dc:	2300      	movs	r3, #0
    62de:	6003      	str	r3, [r0, #0]
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
    62e0:	680a      	ldr	r2, [r1, #0]
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    62e2:	6043      	str	r3, [r0, #4]
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
    62e4:	6002      	str	r2, [r0, #0]
	capacity = rhs.capacity;
    62e6:	684a      	ldr	r2, [r1, #4]

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
	len = 0;
    62e8:	6083      	str	r3, [r0, #8]
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
	capacity = rhs.capacity;
    62ea:	6042      	str	r2, [r0, #4]
	len = rhs.len;
    62ec:	688a      	ldr	r2, [r1, #8]
    62ee:	6082      	str	r2, [r0, #8]
	rhs.buffer = NULL;
    62f0:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
    62f2:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
    62f4:	608b      	str	r3, [r1, #8]
#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String::String(String &&rval)
{
	init();
	move(rval);
}
    62f6:	4770      	bx	lr

000062f8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
    62f8:	b510      	push	{r4, lr}
    62fa:	0004      	movs	r4, r0
{
	free(buffer);
    62fc:	6800      	ldr	r0, [r0, #0]
    62fe:	f003 f989 	bl	9614 <free>
}
    6302:	0020      	movs	r0, r4
    6304:	bd10      	pop	{r4, pc}

00006306 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    6306:	b510      	push	{r4, lr}
    6308:	0004      	movs	r4, r0
	if (buffer) free(buffer);
    630a:	6800      	ldr	r0, [r0, #0]
    630c:	2800      	cmp	r0, #0
    630e:	d001      	beq.n	6314 <_ZN6String10invalidateEv+0xe>
    6310:	f003 f980 	bl	9614 <free>
	buffer = NULL;
    6314:	2300      	movs	r3, #0
    6316:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
    6318:	60a3      	str	r3, [r4, #8]
    631a:	6063      	str	r3, [r4, #4]
}
    631c:	bd10      	pop	{r4, pc}

0000631e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    631e:	b570      	push	{r4, r5, r6, lr}
    6320:	0004      	movs	r4, r0
    6322:	000d      	movs	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    6324:	6800      	ldr	r0, [r0, #0]
    6326:	3101      	adds	r1, #1
    6328:	f004 f80a 	bl	a340 <realloc>
    632c:	1e03      	subs	r3, r0, #0
	if (newbuffer) {
    632e:	d001      	beq.n	6334 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
		return 1;
    6330:	2001      	movs	r0, #1
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    6332:	c428      	stmia	r4!, {r3, r5}
		return 1;
	}
	return 0;
}
    6334:	bd70      	pop	{r4, r5, r6, pc}

00006336 <_ZN6String7reserveEj>:
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
    6336:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    6338:	b510      	push	{r4, lr}
    633a:	0004      	movs	r4, r0
	if (buffer && capacity >= size) return 1;
    633c:	2b00      	cmp	r3, #0
    633e:	d002      	beq.n	6346 <_ZN6String7reserveEj+0x10>
    6340:	6843      	ldr	r3, [r0, #4]
    6342:	428b      	cmp	r3, r1
    6344:	d209      	bcs.n	635a <_ZN6String7reserveEj+0x24>
	if (changeBuffer(size)) {
    6346:	0020      	movs	r0, r4
    6348:	f7ff ffe9 	bl	631e <_ZN6String12changeBufferEj>
    634c:	2800      	cmp	r0, #0
    634e:	d005      	beq.n	635c <_ZN6String7reserveEj+0x26>
		if (len == 0) buffer[0] = 0;
    6350:	68a3      	ldr	r3, [r4, #8]
    6352:	2b00      	cmp	r3, #0
    6354:	d101      	bne.n	635a <_ZN6String7reserveEj+0x24>
    6356:	6822      	ldr	r2, [r4, #0]
    6358:	7013      	strb	r3, [r2, #0]
    635a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
    635c:	bd10      	pop	{r4, pc}

0000635e <_ZN6String4copyEPK19__FlashStringHelperj>:
	strcpy(buffer, cstr);
	return *this;
}

String & String::copy(const __FlashStringHelper *pstr, unsigned int length)
{
    635e:	b570      	push	{r4, r5, r6, lr}
    6360:	000e      	movs	r6, r1
	if (!reserve(length)) {
    6362:	0011      	movs	r1, r2
	strcpy(buffer, cstr);
	return *this;
}

String & String::copy(const __FlashStringHelper *pstr, unsigned int length)
{
    6364:	0004      	movs	r4, r0
    6366:	0015      	movs	r5, r2
	if (!reserve(length)) {
    6368:	f7ff ffe5 	bl	6336 <_ZN6String7reserveEj>
    636c:	2800      	cmp	r0, #0
    636e:	d103      	bne.n	6378 <_ZN6String4copyEPK19__FlashStringHelperj+0x1a>
		invalidate();
    6370:	0020      	movs	r0, r4
    6372:	f7ff ffc8 	bl	6306 <_ZN6String10invalidateEv>
		return *this;
    6376:	e004      	b.n	6382 <_ZN6String4copyEPK19__FlashStringHelperj+0x24>
	}
	len = length;
    6378:	60a5      	str	r5, [r4, #8]
	strcpy_P(buffer, (PGM_P)pstr);
    637a:	0031      	movs	r1, r6
    637c:	6820      	ldr	r0, [r4, #0]
    637e:	f004 f842 	bl	a406 <strcpy>
	return *this;
}
    6382:	0020      	movs	r0, r4
    6384:	bd70      	pop	{r4, r5, r6, pc}

00006386 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    6386:	2300      	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    6388:	b570      	push	{r4, r5, r6, lr}
    638a:	0004      	movs	r4, r0
    638c:	1e0d      	subs	r5, r1, #0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    638e:	6003      	str	r3, [r0, #0]
	capacity = 0;
    6390:	6043      	str	r3, [r0, #4]
	len = 0;
    6392:	6083      	str	r3, [r0, #8]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    6394:	429d      	cmp	r5, r3
    6396:	d007      	beq.n	63a8 <_ZN6StringC1EPKc+0x22>
    6398:	0008      	movs	r0, r1
    639a:	f004 f83c 	bl	a416 <strlen>
    639e:	0029      	movs	r1, r5
    63a0:	0002      	movs	r2, r0
    63a2:	0020      	movs	r0, r4
    63a4:	f7ff ffdb 	bl	635e <_ZN6String4copyEPK19__FlashStringHelperj>
}
    63a8:	0020      	movs	r0, r4
    63aa:	bd70      	pop	{r4, r5, r6, pc}

000063ac <_ZN6String4moveERS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
    63ac:	b570      	push	{r4, r5, r6, lr}
    63ae:	0005      	movs	r5, r0
	if (buffer) {
    63b0:	6800      	ldr	r0, [r0, #0]
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
    63b2:	000c      	movs	r4, r1
	if (buffer) {
    63b4:	2800      	cmp	r0, #0
    63b6:	d004      	beq.n	63c2 <_ZN6String4moveERS_+0x16>
    63b8:	6809      	ldr	r1, [r1, #0]
	friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);

	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
    63ba:	2900      	cmp	r1, #0
    63bc:	d10c      	bne.n	63d8 <_ZN6String4moveERS_+0x2c>
			strcpy(buffer, rhs.buffer);
			len = rhs.len;
			rhs.len = 0;
			return;
		} else {
			free(buffer);
    63be:	f003 f929 	bl	9614 <free>
		}
	}
	buffer = rhs.buffer;
    63c2:	6823      	ldr	r3, [r4, #0]
    63c4:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
    63c6:	6863      	ldr	r3, [r4, #4]
    63c8:	606b      	str	r3, [r5, #4]
	len = rhs.len;
    63ca:	68a3      	ldr	r3, [r4, #8]
    63cc:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
    63ce:	2300      	movs	r3, #0
    63d0:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
    63d2:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
    63d4:	60a3      	str	r3, [r4, #8]
}
    63d6:	bd70      	pop	{r4, r5, r6, pc}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
	if (buffer) {
		if (rhs && capacity >= rhs.len) {
    63d8:	686b      	ldr	r3, [r5, #4]
    63da:	68a2      	ldr	r2, [r4, #8]
    63dc:	4293      	cmp	r3, r2
    63de:	d3ee      	bcc.n	63be <_ZN6String4moveERS_+0x12>
			strcpy(buffer, rhs.buffer);
    63e0:	f004 f811 	bl	a406 <strcpy>
			len = rhs.len;
    63e4:	68a3      	ldr	r3, [r4, #8]
    63e6:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
    63e8:	2300      	movs	r3, #0
    63ea:	e7f3      	b.n	63d4 <_ZN6String4moveERS_+0x28>

000063ec <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    63ec:	b510      	push	{r4, lr}
    63ee:	000b      	movs	r3, r1
    63f0:	1e04      	subs	r4, r0, #0
	if (this == &rhs) return *this;
    63f2:	428c      	cmp	r4, r1
    63f4:	d008      	beq.n	6408 <_ZN6StringaSERKS_+0x1c>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    63f6:	6809      	ldr	r1, [r1, #0]
    63f8:	2900      	cmp	r1, #0
    63fa:	d003      	beq.n	6404 <_ZN6StringaSERKS_+0x18>
    63fc:	689a      	ldr	r2, [r3, #8]
    63fe:	f7ff ffae 	bl	635e <_ZN6String4copyEPK19__FlashStringHelperj>
    6402:	e001      	b.n	6408 <_ZN6StringaSERKS_+0x1c>
	else invalidate();
    6404:	f7ff ff7f 	bl	6306 <_ZN6String10invalidateEv>
	
	return *this;
}
    6408:	0020      	movs	r0, r4
    640a:	bd10      	pop	{r4, pc}

0000640c <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    640c:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    640e:	b510      	push	{r4, lr}
    6410:	0004      	movs	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    6412:	6003      	str	r3, [r0, #0]
	capacity = 0;
    6414:	6043      	str	r3, [r0, #4]
	len = 0;
    6416:	6083      	str	r3, [r0, #8]
}

String::String(const String &value)
{
	init();
	*this = value;
    6418:	f7ff ffe8 	bl	63ec <_ZN6StringaSERKS_>
}
    641c:	0020      	movs	r0, r4
    641e:	bd10      	pop	{r4, pc}

00006420 <_ZN6StringaSEOS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    6420:	b510      	push	{r4, lr}
    6422:	1e04      	subs	r4, r0, #0
	if (this != &rval) move(rval);
    6424:	428c      	cmp	r4, r1
    6426:	d001      	beq.n	642c <_ZN6StringaSEOS_+0xc>
    6428:	f7ff ffc0 	bl	63ac <_ZN6String4moveERS_>
	return *this;
}
    642c:	0020      	movs	r0, r4
    642e:	bd10      	pop	{r4, pc}

00006430 <_ZN6StringaSEPK19__FlashStringHelper>:
	
	return *this;
}

String & String::operator = (const __FlashStringHelper *pstr)
{
    6430:	b570      	push	{r4, r5, r6, lr}
    6432:	0004      	movs	r4, r0
    6434:	1e0d      	subs	r5, r1, #0
	if (pstr) copy(pstr, strlen_P((PGM_P)pstr));
    6436:	d008      	beq.n	644a <_ZN6StringaSEPK19__FlashStringHelper+0x1a>
    6438:	0008      	movs	r0, r1
    643a:	f003 ffec 	bl	a416 <strlen>
    643e:	0029      	movs	r1, r5
    6440:	0002      	movs	r2, r0
    6442:	0020      	movs	r0, r4
    6444:	f7ff ff8b 	bl	635e <_ZN6String4copyEPK19__FlashStringHelperj>
    6448:	e001      	b.n	644e <_ZN6StringaSEPK19__FlashStringHelper+0x1e>
	else invalidate();
    644a:	f7ff ff5c 	bl	6306 <_ZN6String10invalidateEv>

	return *this;
}
    644e:	0020      	movs	r0, r4
    6450:	bd70      	pop	{r4, r5, r6, pc}

00006452 <_ZN6StringC1Edh>:
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::String(double value, unsigned char decimalPlaces)
    6452:	b530      	push	{r4, r5, lr}
    6454:	0004      	movs	r4, r0
    6456:	0010      	movs	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    6458:	2200      	movs	r2, #0
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::String(double value, unsigned char decimalPlaces)
    645a:	b08d      	sub	sp, #52	; 0x34
    645c:	0019      	movs	r1, r3
    645e:	ab10      	add	r3, sp, #64	; 0x40
    6460:	781b      	ldrb	r3, [r3, #0]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    6462:	6022      	str	r2, [r4, #0]
	capacity = 0;
    6464:	6062      	str	r2, [r4, #4]
	len = 0;
    6466:	60a2      	str	r2, [r4, #8]

String::String(double value, unsigned char decimalPlaces)
{
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
    6468:	ad03      	add	r5, sp, #12
    646a:	1c9a      	adds	r2, r3, #2
    646c:	b252      	sxtb	r2, r2
    646e:	9500      	str	r5, [sp, #0]
    6470:	f7fd ff26 	bl	42c0 <dtostrf>
    6474:	0001      	movs	r1, r0
    6476:	0020      	movs	r0, r4
    6478:	f7ff ffda 	bl	6430 <_ZN6StringaSEPK19__FlashStringHelper>
}
    647c:	0020      	movs	r0, r4
    647e:	b00d      	add	sp, #52	; 0x34
    6480:	bd30      	pop	{r4, r5, pc}

00006482 <_ZN6StringC1Efh>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    6482:	2300      	movs	r3, #0
	char buf[1 + 8 * sizeof(unsigned long)];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, unsigned char decimalPlaces)
    6484:	b570      	push	{r4, r5, r6, lr}
    6486:	0016      	movs	r6, r2
    6488:	b08c      	sub	sp, #48	; 0x30
    648a:	0004      	movs	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    648c:	6003      	str	r3, [r0, #0]
	capacity = 0;
    648e:	6043      	str	r3, [r0, #4]
	len = 0;
    6490:	6083      	str	r3, [r0, #8]

String::String(float value, unsigned char decimalPlaces)
{
	init();
	char buf[33];
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
    6492:	1c95      	adds	r5, r2, #2
    6494:	1c08      	adds	r0, r1, #0
    6496:	f002 ff3f 	bl	9318 <__aeabi_f2d>
    649a:	b26d      	sxtb	r5, r5
    649c:	ab03      	add	r3, sp, #12
    649e:	9300      	str	r3, [sp, #0]
    64a0:	002a      	movs	r2, r5
    64a2:	0033      	movs	r3, r6
    64a4:	f7fd ff0c 	bl	42c0 <dtostrf>
    64a8:	0001      	movs	r1, r0
    64aa:	0020      	movs	r0, r4
    64ac:	f7ff ffc0 	bl	6430 <_ZN6StringaSEPK19__FlashStringHelper>
}
    64b0:	0020      	movs	r0, r4
    64b2:	b00c      	add	sp, #48	; 0x30
    64b4:	bd70      	pop	{r4, r5, r6, pc}

000064b6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    64b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64b8:	0004      	movs	r4, r0
    64ba:	1e0f      	subs	r7, r1, #0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
    64bc:	d101      	bne.n	64c2 <_ZN6String6concatEPKcj+0xc>
    64be:	2600      	movs	r6, #0
    64c0:	e010      	b.n	64e4 <_ZN6String6concatEPKcj+0x2e>
	if (length == 0) return 1;
    64c2:	2601      	movs	r6, #1
    64c4:	2a00      	cmp	r2, #0
    64c6:	d00d      	beq.n	64e4 <_ZN6String6concatEPKcj+0x2e>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    64c8:	6883      	ldr	r3, [r0, #8]
    64ca:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    64cc:	0029      	movs	r1, r5
    64ce:	f7ff ff32 	bl	6336 <_ZN6String7reserveEj>
    64d2:	2800      	cmp	r0, #0
    64d4:	d0f3      	beq.n	64be <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
    64d6:	6823      	ldr	r3, [r4, #0]
    64d8:	68a2      	ldr	r2, [r4, #8]
    64da:	0039      	movs	r1, r7
    64dc:	1898      	adds	r0, r3, r2
    64de:	f003 ff92 	bl	a406 <strcpy>
	len = newlen;
    64e2:	60a5      	str	r5, [r4, #8]
	return 1;
}
    64e4:	0030      	movs	r0, r6
    64e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000064e8 <_ZN6String6concatERKS_>:
/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
    64e8:	b510      	push	{r4, lr}
	return concat(s.buffer, s.len);
    64ea:	688a      	ldr	r2, [r1, #8]
    64ec:	6809      	ldr	r1, [r1, #0]
    64ee:	f7ff ffe2 	bl	64b6 <_ZN6String6concatEPKcj>
}
    64f2:	bd10      	pop	{r4, pc}

000064f4 <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
    64f4:	b570      	push	{r4, r5, r6, lr}
    64f6:	0005      	movs	r5, r0
    64f8:	000c      	movs	r4, r1
	if (!cstr) return 0;
    64fa:	1e08      	subs	r0, r1, #0
    64fc:	d006      	beq.n	650c <_ZN6String6concatEPKc+0x18>
	return concat(cstr, strlen(cstr));
    64fe:	f003 ff8a 	bl	a416 <strlen>
    6502:	0021      	movs	r1, r4
    6504:	0002      	movs	r2, r0
    6506:	0028      	movs	r0, r5
    6508:	f7ff ffd5 	bl	64b6 <_ZN6String6concatEPKcj>
}
    650c:	bd70      	pop	{r4, r5, r6, pc}

0000650e <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    650e:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    6510:	2200      	movs	r2, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
    6512:	ab01      	add	r3, sp, #4
    6514:	7019      	strb	r1, [r3, #0]
	buf[1] = 0;
    6516:	705a      	strb	r2, [r3, #1]
	return concat(buf, 1);
    6518:	0019      	movs	r1, r3
    651a:	3201      	adds	r2, #1
    651c:	f7ff ffcb 	bl	64b6 <_ZN6String6concatEPKcj>
}
    6520:	bd0e      	pop	{r1, r2, r3, pc}

00006522 <_ZN6String6concatEf>:
	ultoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(float num)
{
    6522:	b530      	push	{r4, r5, lr}
    6524:	0005      	movs	r5, r0
    6526:	b089      	sub	sp, #36	; 0x24
	char buf[20];
	char* string = dtostrf(num, 4, 2, buf);
    6528:	1c08      	adds	r0, r1, #0
    652a:	f002 fef5 	bl	9318 <__aeabi_f2d>
    652e:	ab03      	add	r3, sp, #12
    6530:	9300      	str	r3, [sp, #0]
    6532:	2204      	movs	r2, #4
    6534:	2302      	movs	r3, #2
    6536:	f7fd fec3 	bl	42c0 <dtostrf>
    653a:	0004      	movs	r4, r0
	return concat(string, strlen(string));
    653c:	f003 ff6b 	bl	a416 <strlen>
    6540:	0021      	movs	r1, r4
    6542:	0002      	movs	r2, r0
    6544:	0028      	movs	r0, r5
    6546:	f7ff ffb6 	bl	64b6 <_ZN6String6concatEPKcj>
}
    654a:	b009      	add	sp, #36	; 0x24
    654c:	bd30      	pop	{r4, r5, pc}

0000654e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    654e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    6550:	688a      	ldr	r2, [r1, #8]
    6552:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    6554:	0004      	movs	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    6556:	f7ff ffae 	bl	64b6 <_ZN6String6concatEPKcj>
    655a:	2800      	cmp	r0, #0
    655c:	d102      	bne.n	6564 <_ZplRK15StringSumHelperRK6String+0x16>
    655e:	0020      	movs	r0, r4
    6560:	f7ff fed1 	bl	6306 <_ZN6String10invalidateEv>
	return a;
}
    6564:	0020      	movs	r0, r4
    6566:	bd10      	pop	{r4, pc}

00006568 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    6568:	b570      	push	{r4, r5, r6, lr}
    656a:	0004      	movs	r4, r0
    656c:	1e0d      	subs	r5, r1, #0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    656e:	d009      	beq.n	6584 <_ZplRK15StringSumHelperPKc+0x1c>
    6570:	0008      	movs	r0, r1
    6572:	f003 ff50 	bl	a416 <strlen>
    6576:	0029      	movs	r1, r5
    6578:	0002      	movs	r2, r0
    657a:	0020      	movs	r0, r4
    657c:	f7ff ff9b 	bl	64b6 <_ZN6String6concatEPKcj>
    6580:	2800      	cmp	r0, #0
    6582:	d102      	bne.n	658a <_ZplRK15StringSumHelperPKc+0x22>
    6584:	0020      	movs	r0, r4
    6586:	f7ff febe 	bl	6306 <_ZN6String10invalidateEv>
	return a;
}
    658a:	0020      	movs	r0, r4
    658c:	bd70      	pop	{r4, r5, r6, pc}

0000658e <_ZplRK15StringSumHelperf>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, float num)
{
    658e:	b510      	push	{r4, lr}
    6590:	0004      	movs	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    6592:	f7ff ffc6 	bl	6522 <_ZN6String6concatEf>
    6596:	2800      	cmp	r0, #0
    6598:	d102      	bne.n	65a0 <_ZplRK15StringSumHelperf+0x12>
    659a:	0020      	movs	r0, r4
    659c:	f7ff feb3 	bl	6306 <_ZN6String10invalidateEv>
	return a;
}
    65a0:	0020      	movs	r0, r4
    65a2:	bd10      	pop	{r4, pc}

000065a4 <_ZNK6String7indexOfEcj>:
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
    65a4:	6883      	ldr	r3, [r0, #8]
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    65a6:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
    65a8:	4293      	cmp	r3, r2
    65aa:	d907      	bls.n	65bc <_ZNK6String7indexOfEcj+0x18>
	const char* temp = strchr(buffer + fromIndex, ch);
    65ac:	6804      	ldr	r4, [r0, #0]
    65ae:	18a0      	adds	r0, r4, r2
    65b0:	f003 ff11 	bl	a3d6 <strchr>
	if (temp == NULL) return -1;
    65b4:	2800      	cmp	r0, #0
    65b6:	d001      	beq.n	65bc <_ZNK6String7indexOfEcj+0x18>
	return temp - buffer;
    65b8:	1b00      	subs	r0, r0, r4
    65ba:	e001      	b.n	65c0 <_ZNK6String7indexOfEcj+0x1c>
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
    65bc:	2001      	movs	r0, #1
    65be:	4240      	negs	r0, r0
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
	return temp - buffer;
}
    65c0:	bd10      	pop	{r4, pc}

000065c2 <_ZNK6String7indexOfEc>:
/*********************************************/
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
    65c2:	b510      	push	{r4, lr}
	return indexOf(c, 0);
    65c4:	2200      	movs	r2, #0
    65c6:	f7ff ffed 	bl	65a4 <_ZNK6String7indexOfEcj>
}
    65ca:	bd10      	pop	{r4, pc}

000065cc <_ZNK6String7indexOfERKS_j>:
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    65cc:	6883      	ldr	r3, [r0, #8]
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    65ce:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
    65d0:	4293      	cmp	r3, r2
    65d2:	d908      	bls.n	65e6 <_ZNK6String7indexOfERKS_j+0x1a>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    65d4:	6804      	ldr	r4, [r0, #0]
    65d6:	6809      	ldr	r1, [r1, #0]
    65d8:	18a0      	adds	r0, r4, r2
    65da:	f003 ff48 	bl	a46e <strstr>
	if (found == NULL) return -1;
    65de:	2800      	cmp	r0, #0
    65e0:	d001      	beq.n	65e6 <_ZNK6String7indexOfERKS_j+0x1a>
	return found - buffer;
    65e2:	1b00      	subs	r0, r0, r4
    65e4:	e001      	b.n	65ea <_ZNK6String7indexOfERKS_j+0x1e>
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    65e6:	2001      	movs	r0, #1
    65e8:	4240      	negs	r0, r0
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
    65ea:	bd10      	pop	{r4, pc}

000065ec <_ZNK6String7indexOfERKS_>:
	if (temp == NULL) return -1;
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
    65ec:	b510      	push	{r4, lr}
	return indexOf(s2, 0);
    65ee:	2200      	movs	r2, #0
    65f0:	f7ff ffec 	bl	65cc <_ZNK6String7indexOfERKS_j>
}
    65f4:	bd10      	pop	{r4, pc}
	...

000065f8 <_ZNK6String9substringEjj>:
	}
	return found;
}

String String::substring(unsigned int left, unsigned int right) const
{
    65f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    65fa:	0007      	movs	r7, r0
    65fc:	000e      	movs	r6, r1
    65fe:	0015      	movs	r5, r2
    6600:	001c      	movs	r4, r3
	if (left > right) {
    6602:	429a      	cmp	r2, r3
    6604:	d901      	bls.n	660a <_ZNK6String9substringEjj+0x12>
    6606:	0025      	movs	r5, r4
    6608:	0014      	movs	r4, r2
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    660a:	490d      	ldr	r1, [pc, #52]	; (6640 <_ZNK6String9substringEjj+0x48>)
    660c:	0038      	movs	r0, r7
    660e:	f7ff feba 	bl	6386 <_ZN6StringC1EPKc>
	if (left >= len) return out;
    6612:	68b3      	ldr	r3, [r6, #8]
    6614:	429d      	cmp	r5, r3
    6616:	d211      	bcs.n	663c <_ZNK6String9substringEjj+0x44>
    6618:	429c      	cmp	r4, r3
    661a:	d900      	bls.n	661e <_ZNK6String9substringEjj+0x26>
    661c:	001c      	movs	r4, r3
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    661e:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';	
	out = buffer + left;  // pointer arithmetic
    6620:	0038      	movs	r0, r7
		left = temp;
	}
	String out;
	if (left >= len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    6622:	191b      	adds	r3, r3, r4
    6624:	781a      	ldrb	r2, [r3, #0]
    6626:	9201      	str	r2, [sp, #4]
	buffer[right] = '\0';	
    6628:	2200      	movs	r2, #0
    662a:	701a      	strb	r2, [r3, #0]
	out = buffer + left;  // pointer arithmetic
    662c:	6833      	ldr	r3, [r6, #0]
    662e:	1959      	adds	r1, r3, r5
    6630:	f7ff fefe 	bl	6430 <_ZN6StringaSEPK19__FlashStringHelper>
	buffer[right] = temp;  //restore character
    6634:	466a      	mov	r2, sp
    6636:	6833      	ldr	r3, [r6, #0]
    6638:	7912      	ldrb	r2, [r2, #4]
    663a:	551a      	strb	r2, [r3, r4]
	return out;
}
    663c:	0038      	movs	r0, r7
    663e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6640:	0000e202 	.word	0x0000e202

00006644 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    6644:	6803      	ldr	r3, [r0, #0]
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
    6646:	b510      	push	{r4, lr}
	if (buffer) return atol(buffer);
	return 0;
    6648:	1e18      	subs	r0, r3, #0
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    664a:	d001      	beq.n	6650 <_ZNK6String5toIntEv+0xc>
    664c:	f002 ff8d 	bl	956a <atol>
	return 0;
}
    6650:	bd10      	pop	{r4, pc}

00006652 <_ZNK6String8toDoubleEv>:
	return float(toDouble());
}

double String::toDouble(void) const
{
	if (buffer) return atof(buffer);
    6652:	6800      	ldr	r0, [r0, #0]
{
	return float(toDouble());
}

double String::toDouble(void) const
{
    6654:	b510      	push	{r4, lr}
	if (buffer) return atof(buffer);
    6656:	2800      	cmp	r0, #0
    6658:	d002      	beq.n	6660 <_ZNK6String8toDoubleEv+0xe>
    665a:	f002 ff7b 	bl	9554 <atof>
    665e:	e001      	b.n	6664 <_ZNK6String8toDoubleEv+0x12>
	return 0;
    6660:	2000      	movs	r0, #0
    6662:	2100      	movs	r1, #0
}
    6664:	bd10      	pop	{r4, pc}

00006666 <_ZNK6String7toFloatEv>:
	if (buffer) return atol(buffer);
	return 0;
}

float String::toFloat(void) const
{
    6666:	b510      	push	{r4, lr}
	return float(toDouble());
    6668:	f7ff fff3 	bl	6652 <_ZNK6String8toDoubleEv>
    666c:	f002 fea8 	bl	93c0 <__aeabi_d2f>
}
    6670:	bd10      	pop	{r4, pc}
	...

00006674 <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    6674:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    6676:	4802      	ldr	r0, [pc, #8]	; (6680 <SERCOM0_Handler+0xc>)
    6678:	f7fe fb8e 	bl	4d98 <_ZN4Uart10IrqHandlerEv>
}
    667c:	bd10      	pop	{r4, pc}
    667e:	46c0      	nop			; (mov r8, r8)
    6680:	20000de4 	.word	0x20000de4

00006684 <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    6684:	b510      	push	{r4, lr}
  Serial.IrqHandler();
    6686:	4802      	ldr	r0, [pc, #8]	; (6690 <SERCOM5_Handler+0xc>)
    6688:	f7fe fb86 	bl	4d98 <_ZN4Uart10IrqHandlerEv>
}
    668c:	bd10      	pop	{r4, pc}
    668e:	46c0      	nop			; (mov r8, r8)
    6690:	20000d84 	.word	0x20000d84

00006694 <_GLOBAL__sub_I_g_APinDescription>:
    6694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
SERCOM sercom2( SERCOM2 ) ;
SERCOM sercom3( SERCOM3 ) ;
SERCOM sercom4( SERCOM4 ) ;
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    6696:	2401      	movs	r4, #1
    6698:	2603      	movs	r6, #3
} ;

const void* g_apTCInstances[TCC_INST_NUM+TC_INST_NUM]={ TCC0, TCC1, TCC2, TC3, TC4, TC5 } ;

// Multi-serial objects instantiation
SERCOM sercom0( SERCOM0 ) ;
    669a:	4f15      	ldr	r7, [pc, #84]	; (66f0 <_GLOBAL__sub_I_g_APinDescription+0x5c>)
    669c:	4915      	ldr	r1, [pc, #84]	; (66f4 <_GLOBAL__sub_I_g_APinDescription+0x60>)
    669e:	0038      	movs	r0, r7
    66a0:	f7fe f8d0 	bl	4844 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    66a4:	4914      	ldr	r1, [pc, #80]	; (66f8 <_GLOBAL__sub_I_g_APinDescription+0x64>)
    66a6:	4815      	ldr	r0, [pc, #84]	; (66fc <_GLOBAL__sub_I_g_APinDescription+0x68>)
    66a8:	f7fe f8cc 	bl	4844 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    66ac:	4914      	ldr	r1, [pc, #80]	; (6700 <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    66ae:	4815      	ldr	r0, [pc, #84]	; (6704 <_GLOBAL__sub_I_g_APinDescription+0x70>)
    66b0:	f7fe f8c8 	bl	4844 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    66b4:	4914      	ldr	r1, [pc, #80]	; (6708 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    66b6:	4815      	ldr	r0, [pc, #84]	; (670c <_GLOBAL__sub_I_g_APinDescription+0x78>)
    66b8:	f7fe f8c4 	bl	4844 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    66bc:	4914      	ldr	r1, [pc, #80]	; (6710 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    66be:	4815      	ldr	r0, [pc, #84]	; (6714 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    66c0:	f7fe f8c0 	bl	4844 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    66c4:	4d14      	ldr	r5, [pc, #80]	; (6718 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    66c6:	4915      	ldr	r1, [pc, #84]	; (671c <_GLOBAL__sub_I_g_APinDescription+0x88>)
    66c8:	0028      	movs	r0, r5
    66ca:	f7fe f8bb 	bl	4844 <_ZN6SERCOMC1EP6Sercom>

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    66ce:	0039      	movs	r1, r7
    66d0:	9600      	str	r6, [sp, #0]
    66d2:	0023      	movs	r3, r4
    66d4:	9401      	str	r4, [sp, #4]
    66d6:	2200      	movs	r2, #0
    66d8:	4811      	ldr	r0, [pc, #68]	; (6720 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    66da:	f7fe fb37 	bl	4d4c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    66de:	9600      	str	r6, [sp, #0]
    66e0:	0029      	movs	r1, r5
    66e2:	9401      	str	r4, [sp, #4]
    66e4:	231e      	movs	r3, #30
    66e6:	221f      	movs	r2, #31
    66e8:	480e      	ldr	r0, [pc, #56]	; (6724 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    66ea:	f7fe fb2f 	bl	4d4c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
}

void SERCOM5_Handler()
{
  Serial.IrqHandler();
}
    66ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    66f0:	20000e44 	.word	0x20000e44
    66f4:	42000800 	.word	0x42000800
    66f8:	42000c00 	.word	0x42000c00
    66fc:	20000e48 	.word	0x20000e48
    6700:	42001000 	.word	0x42001000
    6704:	20000e4c 	.word	0x20000e4c
    6708:	42001400 	.word	0x42001400
    670c:	20000e50 	.word	0x20000e50
    6710:	42001800 	.word	0x42001800
    6714:	20000e54 	.word	0x20000e54
    6718:	20000e58 	.word	0x20000e58
    671c:	42001c00 	.word	0x42001c00
    6720:	20000de4 	.word	0x20000de4
    6724:	20000d84 	.word	0x20000d84

00006728 <_ZN10RingBufferC1Ev>:
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
    6728:	b510      	push	{r4, lr}
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    672a:	2240      	movs	r2, #64	; 0x40
    672c:	2100      	movs	r1, #0
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
    672e:	0004      	movs	r4, r0
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    6730:	f002 ffa7 	bl	9682 <memset>
  }
}

void RingBuffer::clear()
{
	_iHead = 0;
    6734:	2300      	movs	r3, #0

RingBuffer::RingBuffer( void )
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    clear();
}
    6736:	0020      	movs	r0, r4
  }
}

void RingBuffer::clear()
{
	_iHead = 0;
    6738:	6423      	str	r3, [r4, #64]	; 0x40
	_iTail = 0;
    673a:	6463      	str	r3, [r4, #68]	; 0x44

RingBuffer::RingBuffer( void )
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    clear();
}
    673c:	bd10      	pop	{r4, pc}

0000673e <_ZN10RingBuffer10store_charEh>:
	return _aucBuffer[_iTail];
}

int RingBuffer::nextIndex(int index)
{
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    673e:	233f      	movs	r3, #63	; 0x3f
    clear();
}

void RingBuffer::store_char( uint8_t c )
{
  int i = nextIndex(_iHead);
    6740:	6c02      	ldr	r2, [r0, #64]	; 0x40
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    clear();
}

void RingBuffer::store_char( uint8_t c )
{
    6742:	b510      	push	{r4, lr}
	return _aucBuffer[_iTail];
}

int RingBuffer::nextIndex(int index)
{
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    6744:	1c54      	adds	r4, r2, #1
    6746:	4023      	ands	r3, r4

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if ( i != _iTail )
    6748:	6c44      	ldr	r4, [r0, #68]	; 0x44
    674a:	429c      	cmp	r4, r3
    674c:	d001      	beq.n	6752 <_ZN10RingBuffer10store_charEh+0x14>
  {
    _aucBuffer[_iHead] = c ;
    674e:	5481      	strb	r1, [r0, r2]
    _iHead = i ;
    6750:	6403      	str	r3, [r0, #64]	; 0x40
  }
}
    6752:	bd10      	pop	{r4, pc}

00006754 <_ZN10RingBuffer5clearEv>:

void RingBuffer::clear()
{
	_iHead = 0;
    6754:	2300      	movs	r3, #0
    6756:	6403      	str	r3, [r0, #64]	; 0x40
	_iTail = 0;
    6758:	6443      	str	r3, [r0, #68]	; 0x44
}
    675a:	4770      	bx	lr

0000675c <_ZN10RingBuffer9read_charEv>:

int RingBuffer::read_char()
{
	if(_iTail == _iHead)
    675c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    675e:	6c02      	ldr	r2, [r0, #64]	; 0x40
    6760:	4293      	cmp	r3, r2
    6762:	d006      	beq.n	6772 <_ZN10RingBuffer9read_charEv+0x16>
		return -1;

	uint8_t value = _aucBuffer[_iTail];
	_iTail = nextIndex(_iTail);
    6764:	213f      	movs	r1, #63	; 0x3f
int RingBuffer::read_char()
{
	if(_iTail == _iHead)
		return -1;

	uint8_t value = _aucBuffer[_iTail];
    6766:	5cc2      	ldrb	r2, [r0, r3]
	_iTail = nextIndex(_iTail);
    6768:	3301      	adds	r3, #1
    676a:	400b      	ands	r3, r1
    676c:	6443      	str	r3, [r0, #68]	; 0x44

	return value;
    676e:	0010      	movs	r0, r2
    6770:	e001      	b.n	6776 <_ZN10RingBuffer9read_charEv+0x1a>
}

int RingBuffer::read_char()
{
	if(_iTail == _iHead)
		return -1;
    6772:	2001      	movs	r0, #1
    6774:	4240      	negs	r0, r0

	uint8_t value = _aucBuffer[_iTail];
	_iTail = nextIndex(_iTail);

	return value;
}
    6776:	4770      	bx	lr

00006778 <_ZN10RingBuffer9availableEv>:

int RingBuffer::available()
{
	int delta = _iHead - _iTail;
    6778:	6c03      	ldr	r3, [r0, #64]	; 0x40
    677a:	6c40      	ldr	r0, [r0, #68]	; 0x44
    677c:	1a18      	subs	r0, r3, r0

	if(delta < 0)
    677e:	d500      	bpl.n	6782 <_ZN10RingBuffer9availableEv+0xa>
		return SERIAL_BUFFER_SIZE + delta;
    6780:	3040      	adds	r0, #64	; 0x40
	else
		return delta;
}
    6782:	4770      	bx	lr

00006784 <_ZN10RingBuffer4peekEv>:

int RingBuffer::peek()
{
	if(_iTail == _iHead)
    6784:	6c43      	ldr	r3, [r0, #68]	; 0x44
    6786:	6c02      	ldr	r2, [r0, #64]	; 0x40
    6788:	4293      	cmp	r3, r2
    678a:	d001      	beq.n	6790 <_ZN10RingBuffer4peekEv+0xc>
		return -1;

	return _aucBuffer[_iTail];
    678c:	5cc0      	ldrb	r0, [r0, r3]
    678e:	e001      	b.n	6794 <_ZN10RingBuffer4peekEv+0x10>
}

int RingBuffer::peek()
{
	if(_iTail == _iHead)
		return -1;
    6790:	2001      	movs	r0, #1
    6792:	4240      	negs	r0, r0

	return _aucBuffer[_iTail];
}
    6794:	4770      	bx	lr

00006796 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    6796:	b570      	push	{r4, r5, r6, lr}
    6798:	000e      	movs	r6, r1
	int sent = 0;
    679a:	2400      	movs	r4, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    679c:	6845      	ldr	r5, [r0, #4]
    679e:	2d00      	cmp	r5, #0
    67a0:	d009      	beq.n	67b6 <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
		int res = node->getInterface(interfaceCount);
    67a2:	682b      	ldr	r3, [r5, #0]
    67a4:	0031      	movs	r1, r6
    67a6:	685b      	ldr	r3, [r3, #4]
    67a8:	0028      	movs	r0, r5
    67aa:	4798      	blx	r3
		if (res < 0)
    67ac:	2800      	cmp	r0, #0
    67ae:	db04      	blt.n	67ba <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
			return -1;
		sent += res;
    67b0:	1824      	adds	r4, r4, r0

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
	int sent = 0;
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    67b2:	68ed      	ldr	r5, [r5, #12]
    67b4:	e7f3      	b.n	679e <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
    67b6:	0020      	movs	r0, r4
    67b8:	e001      	b.n	67be <_ZN13PluggableUSB_12getInterfaceEPh+0x28>
		int res = node->getInterface(interfaceCount);
		if (res < 0)
			return -1;
    67ba:	2001      	movs	r0, #1
    67bc:	4240      	negs	r0, r0
		sent += res;
	}
	return sent;
}
    67be:	bd70      	pop	{r4, r5, r6, pc}

000067c0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    67c0:	b570      	push	{r4, r5, r6, lr}
    67c2:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    67c4:	6844      	ldr	r4, [r0, #4]
    67c6:	2c00      	cmp	r4, #0
    67c8:	d008      	beq.n	67dc <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    67ca:	6823      	ldr	r3, [r4, #0]
    67cc:	0029      	movs	r1, r5
    67ce:	689b      	ldr	r3, [r3, #8]
    67d0:	0020      	movs	r0, r4
    67d2:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    67d4:	2800      	cmp	r0, #0
    67d6:	d102      	bne.n	67de <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
}

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    67d8:	68e4      	ldr	r4, [r4, #12]
    67da:	e7f4      	b.n	67c6 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
		int ret = node->getDescriptor(setup);
		// ret!=0 -> request has been processed
		if (ret)
			return ret;
	}
	return 0;
    67dc:	0020      	movs	r0, r4
}
    67de:	bd70      	pop	{r4, r5, r6, pc}

000067e0 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    67e0:	b570      	push	{r4, r5, r6, lr}
    67e2:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    67e4:	6844      	ldr	r4, [r0, #4]
    67e6:	2c00      	cmp	r4, #0
    67e8:	d007      	beq.n	67fa <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    67ea:	6823      	ldr	r3, [r4, #0]
    67ec:	0029      	movs	r1, r5
    67ee:	0020      	movs	r0, r4
    67f0:	68db      	ldr	r3, [r3, #12]
    67f2:	4798      	blx	r3
}

void PluggableUSB_::getShortName(char *iSerialNum)
{
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    67f4:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    67f6:	182d      	adds	r5, r5, r0
}

void PluggableUSB_::getShortName(char *iSerialNum)
{
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    67f8:	e7f5      	b.n	67e6 <_ZN13PluggableUSB_12getShortNameEPc+0x6>
               iSerialNum += node->getShortName(iSerialNum);
       }
       *iSerialNum = 0;
    67fa:	702c      	strb	r4, [r5, #0]
}
    67fc:	bd70      	pop	{r4, r5, r6, pc}

000067fe <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    67fe:	b570      	push	{r4, r5, r6, lr}
    6800:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    6802:	6844      	ldr	r4, [r0, #4]
    6804:	2c00      	cmp	r4, #0
    6806:	d008      	beq.n	681a <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    6808:	6823      	ldr	r3, [r4, #0]
    680a:	0029      	movs	r1, r5
    680c:	681b      	ldr	r3, [r3, #0]
    680e:	0020      	movs	r0, r4
    6810:	4798      	blx	r3
    6812:	2800      	cmp	r0, #0
    6814:	d102      	bne.n	681c <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
}

bool PluggableUSB_::setup(USBSetup& setup)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    6816:	68e4      	ldr	r4, [r4, #12]
    6818:	e7f4      	b.n	6804 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
		if (node->setup(setup)) {
			return true;
		}
	}
	return false;
    681a:	0020      	movs	r0, r4
}
    681c:	bd70      	pop	{r4, r5, r6, pc}
	...

00006820 <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    6820:	2101      	movs	r1, #1
    6822:	4a06      	ldr	r2, [pc, #24]	; (683c <_Z12PluggableUSBv+0x1c>)
	return true;
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
    6824:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    6826:	6813      	ldr	r3, [r2, #0]
    6828:	4805      	ldr	r0, [pc, #20]	; (6840 <_Z12PluggableUSBv+0x20>)
    682a:	400b      	ands	r3, r1
    682c:	d105      	bne.n	683a <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    682e:	2402      	movs	r4, #2
    6830:	7004      	strb	r4, [r0, #0]
    6832:	1924      	adds	r4, r4, r4
    6834:	7044      	strb	r4, [r0, #1]
    6836:	6043      	str	r3, [r0, #4]
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    6838:	6011      	str	r1, [r2, #0]
	return obj;
}
    683a:	bd10      	pop	{r4, pc}
    683c:	20000e64 	.word	0x20000e64
    6840:	20000e5c 	.word	0x20000e5c

00006844 <__aeabi_atexit>:
    6844:	000b      	movs	r3, r1
    6846:	b510      	push	{r4, lr}
    6848:	0001      	movs	r1, r0
    684a:	0018      	movs	r0, r3
    684c:	f002 fe94 	bl	9578 <__cxa_atexit>
    6850:	bd10      	pop	{r4, pc}
	...

00006854 <floor>:
    6854:	4a45      	ldr	r2, [pc, #276]	; (696c <floor+0x118>)
    6856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6858:	4656      	mov	r6, sl
    685a:	4692      	mov	sl, r2
    685c:	004b      	lsls	r3, r1, #1
    685e:	0d5b      	lsrs	r3, r3, #21
    6860:	449a      	add	sl, r3
    6862:	464d      	mov	r5, r9
    6864:	465f      	mov	r7, fp
    6866:	4644      	mov	r4, r8
    6868:	4652      	mov	r2, sl
    686a:	b4f0      	push	{r4, r5, r6, r7}
    686c:	4689      	mov	r9, r1
    686e:	0005      	movs	r5, r0
    6870:	000c      	movs	r4, r1
    6872:	000e      	movs	r6, r1
    6874:	0007      	movs	r7, r0
    6876:	2a13      	cmp	r2, #19
    6878:	dc22      	bgt.n	68c0 <floor+0x6c>
    687a:	2a00      	cmp	r2, #0
    687c:	db47      	blt.n	690e <floor+0xba>
    687e:	4652      	mov	r2, sl
    6880:	4b3b      	ldr	r3, [pc, #236]	; (6970 <floor+0x11c>)
    6882:	4113      	asrs	r3, r2
    6884:	4698      	mov	r8, r3
    6886:	000b      	movs	r3, r1
    6888:	4642      	mov	r2, r8
    688a:	4013      	ands	r3, r2
    688c:	4303      	orrs	r3, r0
    688e:	d011      	beq.n	68b4 <floor+0x60>
    6890:	4a38      	ldr	r2, [pc, #224]	; (6974 <floor+0x120>)
    6892:	4b39      	ldr	r3, [pc, #228]	; (6978 <floor+0x124>)
    6894:	f000 ff94 	bl	77c0 <__aeabi_dadd>
    6898:	2200      	movs	r2, #0
    689a:	2300      	movs	r3, #0
    689c:	f000 fa1c 	bl	6cd8 <__aeabi_dcmpgt>
    68a0:	2800      	cmp	r0, #0
    68a2:	d005      	beq.n	68b0 <floor+0x5c>
    68a4:	2c00      	cmp	r4, #0
    68a6:	db41      	blt.n	692c <floor+0xd8>
    68a8:	464e      	mov	r6, r9
    68aa:	4643      	mov	r3, r8
    68ac:	2700      	movs	r7, #0
    68ae:	439e      	bics	r6, r3
    68b0:	0038      	movs	r0, r7
    68b2:	0031      	movs	r1, r6
    68b4:	bc3c      	pop	{r2, r3, r4, r5}
    68b6:	4690      	mov	r8, r2
    68b8:	4699      	mov	r9, r3
    68ba:	46a2      	mov	sl, r4
    68bc:	46ab      	mov	fp, r5
    68be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    68c0:	4652      	mov	r2, sl
    68c2:	2a33      	cmp	r2, #51	; 0x33
    68c4:	dd08      	ble.n	68d8 <floor+0x84>
    68c6:	2380      	movs	r3, #128	; 0x80
    68c8:	00db      	lsls	r3, r3, #3
    68ca:	459a      	cmp	sl, r3
    68cc:	d1f2      	bne.n	68b4 <floor+0x60>
    68ce:	0002      	movs	r2, r0
    68d0:	000b      	movs	r3, r1
    68d2:	f000 ff75 	bl	77c0 <__aeabi_dadd>
    68d6:	e7ed      	b.n	68b4 <floor+0x60>
    68d8:	4a28      	ldr	r2, [pc, #160]	; (697c <floor+0x128>)
    68da:	4694      	mov	ip, r2
    68dc:	2201      	movs	r2, #1
    68de:	4463      	add	r3, ip
    68e0:	4252      	negs	r2, r2
    68e2:	40da      	lsrs	r2, r3
    68e4:	4693      	mov	fp, r2
    68e6:	4202      	tst	r2, r0
    68e8:	d0e4      	beq.n	68b4 <floor+0x60>
    68ea:	4a22      	ldr	r2, [pc, #136]	; (6974 <floor+0x120>)
    68ec:	4b22      	ldr	r3, [pc, #136]	; (6978 <floor+0x124>)
    68ee:	f000 ff67 	bl	77c0 <__aeabi_dadd>
    68f2:	2200      	movs	r2, #0
    68f4:	2300      	movs	r3, #0
    68f6:	f000 f9ef 	bl	6cd8 <__aeabi_dcmpgt>
    68fa:	2800      	cmp	r0, #0
    68fc:	d0d8      	beq.n	68b0 <floor+0x5c>
    68fe:	2c00      	cmp	r4, #0
    6900:	db1a      	blt.n	6938 <floor+0xe4>
    6902:	465b      	mov	r3, fp
    6904:	464e      	mov	r6, r9
    6906:	439f      	bics	r7, r3
    6908:	0038      	movs	r0, r7
    690a:	0031      	movs	r1, r6
    690c:	e7d2      	b.n	68b4 <floor+0x60>
    690e:	4a19      	ldr	r2, [pc, #100]	; (6974 <floor+0x120>)
    6910:	4b19      	ldr	r3, [pc, #100]	; (6978 <floor+0x124>)
    6912:	f000 ff55 	bl	77c0 <__aeabi_dadd>
    6916:	2200      	movs	r2, #0
    6918:	2300      	movs	r3, #0
    691a:	f000 f9dd 	bl	6cd8 <__aeabi_dcmpgt>
    691e:	2800      	cmp	r0, #0
    6920:	d0c6      	beq.n	68b0 <floor+0x5c>
    6922:	2c00      	cmp	r4, #0
    6924:	db16      	blt.n	6954 <floor+0x100>
    6926:	2700      	movs	r7, #0
    6928:	2600      	movs	r6, #0
    692a:	e7c1      	b.n	68b0 <floor+0x5c>
    692c:	2380      	movs	r3, #128	; 0x80
    692e:	4652      	mov	r2, sl
    6930:	035b      	lsls	r3, r3, #13
    6932:	4113      	asrs	r3, r2
    6934:	4499      	add	r9, r3
    6936:	e7b7      	b.n	68a8 <floor+0x54>
    6938:	4653      	mov	r3, sl
    693a:	2b14      	cmp	r3, #20
    693c:	d012      	beq.n	6964 <floor+0x110>
    693e:	2334      	movs	r3, #52	; 0x34
    6940:	4652      	mov	r2, sl
    6942:	2701      	movs	r7, #1
    6944:	1a9b      	subs	r3, r3, r2
    6946:	409f      	lsls	r7, r3
    6948:	197f      	adds	r7, r7, r5
    694a:	42af      	cmp	r7, r5
    694c:	419b      	sbcs	r3, r3
    694e:	425b      	negs	r3, r3
    6950:	4499      	add	r9, r3
    6952:	e7d6      	b.n	6902 <floor+0xae>
    6954:	0064      	lsls	r4, r4, #1
    6956:	0864      	lsrs	r4, r4, #1
    6958:	4325      	orrs	r5, r4
    695a:	2700      	movs	r7, #0
    695c:	2d00      	cmp	r5, #0
    695e:	d0a7      	beq.n	68b0 <floor+0x5c>
    6960:	4e07      	ldr	r6, [pc, #28]	; (6980 <floor+0x12c>)
    6962:	e7a5      	b.n	68b0 <floor+0x5c>
    6964:	3b13      	subs	r3, #19
    6966:	469c      	mov	ip, r3
    6968:	44e1      	add	r9, ip
    696a:	e7ca      	b.n	6902 <floor+0xae>
    696c:	fffffc01 	.word	0xfffffc01
    6970:	000fffff 	.word	0x000fffff
    6974:	8800759c 	.word	0x8800759c
    6978:	7e37e43c 	.word	0x7e37e43c
    697c:	fffffbed 	.word	0xfffffbed
    6980:	bff00000 	.word	0xbff00000

00006984 <__gnu_thumb1_case_uqi>:
    6984:	b402      	push	{r1}
    6986:	4671      	mov	r1, lr
    6988:	0849      	lsrs	r1, r1, #1
    698a:	0049      	lsls	r1, r1, #1
    698c:	5c09      	ldrb	r1, [r1, r0]
    698e:	0049      	lsls	r1, r1, #1
    6990:	448e      	add	lr, r1
    6992:	bc02      	pop	{r1}
    6994:	4770      	bx	lr
    6996:	46c0      	nop			; (mov r8, r8)

00006998 <__aeabi_uidiv>:
    6998:	2200      	movs	r2, #0
    699a:	0843      	lsrs	r3, r0, #1
    699c:	428b      	cmp	r3, r1
    699e:	d374      	bcc.n	6a8a <__aeabi_uidiv+0xf2>
    69a0:	0903      	lsrs	r3, r0, #4
    69a2:	428b      	cmp	r3, r1
    69a4:	d35f      	bcc.n	6a66 <__aeabi_uidiv+0xce>
    69a6:	0a03      	lsrs	r3, r0, #8
    69a8:	428b      	cmp	r3, r1
    69aa:	d344      	bcc.n	6a36 <__aeabi_uidiv+0x9e>
    69ac:	0b03      	lsrs	r3, r0, #12
    69ae:	428b      	cmp	r3, r1
    69b0:	d328      	bcc.n	6a04 <__aeabi_uidiv+0x6c>
    69b2:	0c03      	lsrs	r3, r0, #16
    69b4:	428b      	cmp	r3, r1
    69b6:	d30d      	bcc.n	69d4 <__aeabi_uidiv+0x3c>
    69b8:	22ff      	movs	r2, #255	; 0xff
    69ba:	0209      	lsls	r1, r1, #8
    69bc:	ba12      	rev	r2, r2
    69be:	0c03      	lsrs	r3, r0, #16
    69c0:	428b      	cmp	r3, r1
    69c2:	d302      	bcc.n	69ca <__aeabi_uidiv+0x32>
    69c4:	1212      	asrs	r2, r2, #8
    69c6:	0209      	lsls	r1, r1, #8
    69c8:	d065      	beq.n	6a96 <__aeabi_uidiv+0xfe>
    69ca:	0b03      	lsrs	r3, r0, #12
    69cc:	428b      	cmp	r3, r1
    69ce:	d319      	bcc.n	6a04 <__aeabi_uidiv+0x6c>
    69d0:	e000      	b.n	69d4 <__aeabi_uidiv+0x3c>
    69d2:	0a09      	lsrs	r1, r1, #8
    69d4:	0bc3      	lsrs	r3, r0, #15
    69d6:	428b      	cmp	r3, r1
    69d8:	d301      	bcc.n	69de <__aeabi_uidiv+0x46>
    69da:	03cb      	lsls	r3, r1, #15
    69dc:	1ac0      	subs	r0, r0, r3
    69de:	4152      	adcs	r2, r2
    69e0:	0b83      	lsrs	r3, r0, #14
    69e2:	428b      	cmp	r3, r1
    69e4:	d301      	bcc.n	69ea <__aeabi_uidiv+0x52>
    69e6:	038b      	lsls	r3, r1, #14
    69e8:	1ac0      	subs	r0, r0, r3
    69ea:	4152      	adcs	r2, r2
    69ec:	0b43      	lsrs	r3, r0, #13
    69ee:	428b      	cmp	r3, r1
    69f0:	d301      	bcc.n	69f6 <__aeabi_uidiv+0x5e>
    69f2:	034b      	lsls	r3, r1, #13
    69f4:	1ac0      	subs	r0, r0, r3
    69f6:	4152      	adcs	r2, r2
    69f8:	0b03      	lsrs	r3, r0, #12
    69fa:	428b      	cmp	r3, r1
    69fc:	d301      	bcc.n	6a02 <__aeabi_uidiv+0x6a>
    69fe:	030b      	lsls	r3, r1, #12
    6a00:	1ac0      	subs	r0, r0, r3
    6a02:	4152      	adcs	r2, r2
    6a04:	0ac3      	lsrs	r3, r0, #11
    6a06:	428b      	cmp	r3, r1
    6a08:	d301      	bcc.n	6a0e <__aeabi_uidiv+0x76>
    6a0a:	02cb      	lsls	r3, r1, #11
    6a0c:	1ac0      	subs	r0, r0, r3
    6a0e:	4152      	adcs	r2, r2
    6a10:	0a83      	lsrs	r3, r0, #10
    6a12:	428b      	cmp	r3, r1
    6a14:	d301      	bcc.n	6a1a <__aeabi_uidiv+0x82>
    6a16:	028b      	lsls	r3, r1, #10
    6a18:	1ac0      	subs	r0, r0, r3
    6a1a:	4152      	adcs	r2, r2
    6a1c:	0a43      	lsrs	r3, r0, #9
    6a1e:	428b      	cmp	r3, r1
    6a20:	d301      	bcc.n	6a26 <__aeabi_uidiv+0x8e>
    6a22:	024b      	lsls	r3, r1, #9
    6a24:	1ac0      	subs	r0, r0, r3
    6a26:	4152      	adcs	r2, r2
    6a28:	0a03      	lsrs	r3, r0, #8
    6a2a:	428b      	cmp	r3, r1
    6a2c:	d301      	bcc.n	6a32 <__aeabi_uidiv+0x9a>
    6a2e:	020b      	lsls	r3, r1, #8
    6a30:	1ac0      	subs	r0, r0, r3
    6a32:	4152      	adcs	r2, r2
    6a34:	d2cd      	bcs.n	69d2 <__aeabi_uidiv+0x3a>
    6a36:	09c3      	lsrs	r3, r0, #7
    6a38:	428b      	cmp	r3, r1
    6a3a:	d301      	bcc.n	6a40 <__aeabi_uidiv+0xa8>
    6a3c:	01cb      	lsls	r3, r1, #7
    6a3e:	1ac0      	subs	r0, r0, r3
    6a40:	4152      	adcs	r2, r2
    6a42:	0983      	lsrs	r3, r0, #6
    6a44:	428b      	cmp	r3, r1
    6a46:	d301      	bcc.n	6a4c <__aeabi_uidiv+0xb4>
    6a48:	018b      	lsls	r3, r1, #6
    6a4a:	1ac0      	subs	r0, r0, r3
    6a4c:	4152      	adcs	r2, r2
    6a4e:	0943      	lsrs	r3, r0, #5
    6a50:	428b      	cmp	r3, r1
    6a52:	d301      	bcc.n	6a58 <__aeabi_uidiv+0xc0>
    6a54:	014b      	lsls	r3, r1, #5
    6a56:	1ac0      	subs	r0, r0, r3
    6a58:	4152      	adcs	r2, r2
    6a5a:	0903      	lsrs	r3, r0, #4
    6a5c:	428b      	cmp	r3, r1
    6a5e:	d301      	bcc.n	6a64 <__aeabi_uidiv+0xcc>
    6a60:	010b      	lsls	r3, r1, #4
    6a62:	1ac0      	subs	r0, r0, r3
    6a64:	4152      	adcs	r2, r2
    6a66:	08c3      	lsrs	r3, r0, #3
    6a68:	428b      	cmp	r3, r1
    6a6a:	d301      	bcc.n	6a70 <__aeabi_uidiv+0xd8>
    6a6c:	00cb      	lsls	r3, r1, #3
    6a6e:	1ac0      	subs	r0, r0, r3
    6a70:	4152      	adcs	r2, r2
    6a72:	0883      	lsrs	r3, r0, #2
    6a74:	428b      	cmp	r3, r1
    6a76:	d301      	bcc.n	6a7c <__aeabi_uidiv+0xe4>
    6a78:	008b      	lsls	r3, r1, #2
    6a7a:	1ac0      	subs	r0, r0, r3
    6a7c:	4152      	adcs	r2, r2
    6a7e:	0843      	lsrs	r3, r0, #1
    6a80:	428b      	cmp	r3, r1
    6a82:	d301      	bcc.n	6a88 <__aeabi_uidiv+0xf0>
    6a84:	004b      	lsls	r3, r1, #1
    6a86:	1ac0      	subs	r0, r0, r3
    6a88:	4152      	adcs	r2, r2
    6a8a:	1a41      	subs	r1, r0, r1
    6a8c:	d200      	bcs.n	6a90 <__aeabi_uidiv+0xf8>
    6a8e:	4601      	mov	r1, r0
    6a90:	4152      	adcs	r2, r2
    6a92:	4610      	mov	r0, r2
    6a94:	4770      	bx	lr
    6a96:	e7ff      	b.n	6a98 <__aeabi_uidiv+0x100>
    6a98:	b501      	push	{r0, lr}
    6a9a:	2000      	movs	r0, #0
    6a9c:	f000 f8f0 	bl	6c80 <__aeabi_idiv0>
    6aa0:	bd02      	pop	{r1, pc}
    6aa2:	46c0      	nop			; (mov r8, r8)

00006aa4 <__aeabi_uidivmod>:
    6aa4:	2900      	cmp	r1, #0
    6aa6:	d0f7      	beq.n	6a98 <__aeabi_uidiv+0x100>
    6aa8:	e776      	b.n	6998 <__aeabi_uidiv>
    6aaa:	4770      	bx	lr

00006aac <__aeabi_idiv>:
    6aac:	4603      	mov	r3, r0
    6aae:	430b      	orrs	r3, r1
    6ab0:	d47f      	bmi.n	6bb2 <__aeabi_idiv+0x106>
    6ab2:	2200      	movs	r2, #0
    6ab4:	0843      	lsrs	r3, r0, #1
    6ab6:	428b      	cmp	r3, r1
    6ab8:	d374      	bcc.n	6ba4 <__aeabi_idiv+0xf8>
    6aba:	0903      	lsrs	r3, r0, #4
    6abc:	428b      	cmp	r3, r1
    6abe:	d35f      	bcc.n	6b80 <__aeabi_idiv+0xd4>
    6ac0:	0a03      	lsrs	r3, r0, #8
    6ac2:	428b      	cmp	r3, r1
    6ac4:	d344      	bcc.n	6b50 <__aeabi_idiv+0xa4>
    6ac6:	0b03      	lsrs	r3, r0, #12
    6ac8:	428b      	cmp	r3, r1
    6aca:	d328      	bcc.n	6b1e <__aeabi_idiv+0x72>
    6acc:	0c03      	lsrs	r3, r0, #16
    6ace:	428b      	cmp	r3, r1
    6ad0:	d30d      	bcc.n	6aee <__aeabi_idiv+0x42>
    6ad2:	22ff      	movs	r2, #255	; 0xff
    6ad4:	0209      	lsls	r1, r1, #8
    6ad6:	ba12      	rev	r2, r2
    6ad8:	0c03      	lsrs	r3, r0, #16
    6ada:	428b      	cmp	r3, r1
    6adc:	d302      	bcc.n	6ae4 <__aeabi_idiv+0x38>
    6ade:	1212      	asrs	r2, r2, #8
    6ae0:	0209      	lsls	r1, r1, #8
    6ae2:	d065      	beq.n	6bb0 <__aeabi_idiv+0x104>
    6ae4:	0b03      	lsrs	r3, r0, #12
    6ae6:	428b      	cmp	r3, r1
    6ae8:	d319      	bcc.n	6b1e <__aeabi_idiv+0x72>
    6aea:	e000      	b.n	6aee <__aeabi_idiv+0x42>
    6aec:	0a09      	lsrs	r1, r1, #8
    6aee:	0bc3      	lsrs	r3, r0, #15
    6af0:	428b      	cmp	r3, r1
    6af2:	d301      	bcc.n	6af8 <__aeabi_idiv+0x4c>
    6af4:	03cb      	lsls	r3, r1, #15
    6af6:	1ac0      	subs	r0, r0, r3
    6af8:	4152      	adcs	r2, r2
    6afa:	0b83      	lsrs	r3, r0, #14
    6afc:	428b      	cmp	r3, r1
    6afe:	d301      	bcc.n	6b04 <__aeabi_idiv+0x58>
    6b00:	038b      	lsls	r3, r1, #14
    6b02:	1ac0      	subs	r0, r0, r3
    6b04:	4152      	adcs	r2, r2
    6b06:	0b43      	lsrs	r3, r0, #13
    6b08:	428b      	cmp	r3, r1
    6b0a:	d301      	bcc.n	6b10 <__aeabi_idiv+0x64>
    6b0c:	034b      	lsls	r3, r1, #13
    6b0e:	1ac0      	subs	r0, r0, r3
    6b10:	4152      	adcs	r2, r2
    6b12:	0b03      	lsrs	r3, r0, #12
    6b14:	428b      	cmp	r3, r1
    6b16:	d301      	bcc.n	6b1c <__aeabi_idiv+0x70>
    6b18:	030b      	lsls	r3, r1, #12
    6b1a:	1ac0      	subs	r0, r0, r3
    6b1c:	4152      	adcs	r2, r2
    6b1e:	0ac3      	lsrs	r3, r0, #11
    6b20:	428b      	cmp	r3, r1
    6b22:	d301      	bcc.n	6b28 <__aeabi_idiv+0x7c>
    6b24:	02cb      	lsls	r3, r1, #11
    6b26:	1ac0      	subs	r0, r0, r3
    6b28:	4152      	adcs	r2, r2
    6b2a:	0a83      	lsrs	r3, r0, #10
    6b2c:	428b      	cmp	r3, r1
    6b2e:	d301      	bcc.n	6b34 <__aeabi_idiv+0x88>
    6b30:	028b      	lsls	r3, r1, #10
    6b32:	1ac0      	subs	r0, r0, r3
    6b34:	4152      	adcs	r2, r2
    6b36:	0a43      	lsrs	r3, r0, #9
    6b38:	428b      	cmp	r3, r1
    6b3a:	d301      	bcc.n	6b40 <__aeabi_idiv+0x94>
    6b3c:	024b      	lsls	r3, r1, #9
    6b3e:	1ac0      	subs	r0, r0, r3
    6b40:	4152      	adcs	r2, r2
    6b42:	0a03      	lsrs	r3, r0, #8
    6b44:	428b      	cmp	r3, r1
    6b46:	d301      	bcc.n	6b4c <__aeabi_idiv+0xa0>
    6b48:	020b      	lsls	r3, r1, #8
    6b4a:	1ac0      	subs	r0, r0, r3
    6b4c:	4152      	adcs	r2, r2
    6b4e:	d2cd      	bcs.n	6aec <__aeabi_idiv+0x40>
    6b50:	09c3      	lsrs	r3, r0, #7
    6b52:	428b      	cmp	r3, r1
    6b54:	d301      	bcc.n	6b5a <__aeabi_idiv+0xae>
    6b56:	01cb      	lsls	r3, r1, #7
    6b58:	1ac0      	subs	r0, r0, r3
    6b5a:	4152      	adcs	r2, r2
    6b5c:	0983      	lsrs	r3, r0, #6
    6b5e:	428b      	cmp	r3, r1
    6b60:	d301      	bcc.n	6b66 <__aeabi_idiv+0xba>
    6b62:	018b      	lsls	r3, r1, #6
    6b64:	1ac0      	subs	r0, r0, r3
    6b66:	4152      	adcs	r2, r2
    6b68:	0943      	lsrs	r3, r0, #5
    6b6a:	428b      	cmp	r3, r1
    6b6c:	d301      	bcc.n	6b72 <__aeabi_idiv+0xc6>
    6b6e:	014b      	lsls	r3, r1, #5
    6b70:	1ac0      	subs	r0, r0, r3
    6b72:	4152      	adcs	r2, r2
    6b74:	0903      	lsrs	r3, r0, #4
    6b76:	428b      	cmp	r3, r1
    6b78:	d301      	bcc.n	6b7e <__aeabi_idiv+0xd2>
    6b7a:	010b      	lsls	r3, r1, #4
    6b7c:	1ac0      	subs	r0, r0, r3
    6b7e:	4152      	adcs	r2, r2
    6b80:	08c3      	lsrs	r3, r0, #3
    6b82:	428b      	cmp	r3, r1
    6b84:	d301      	bcc.n	6b8a <__aeabi_idiv+0xde>
    6b86:	00cb      	lsls	r3, r1, #3
    6b88:	1ac0      	subs	r0, r0, r3
    6b8a:	4152      	adcs	r2, r2
    6b8c:	0883      	lsrs	r3, r0, #2
    6b8e:	428b      	cmp	r3, r1
    6b90:	d301      	bcc.n	6b96 <__aeabi_idiv+0xea>
    6b92:	008b      	lsls	r3, r1, #2
    6b94:	1ac0      	subs	r0, r0, r3
    6b96:	4152      	adcs	r2, r2
    6b98:	0843      	lsrs	r3, r0, #1
    6b9a:	428b      	cmp	r3, r1
    6b9c:	d301      	bcc.n	6ba2 <__aeabi_idiv+0xf6>
    6b9e:	004b      	lsls	r3, r1, #1
    6ba0:	1ac0      	subs	r0, r0, r3
    6ba2:	4152      	adcs	r2, r2
    6ba4:	1a41      	subs	r1, r0, r1
    6ba6:	d200      	bcs.n	6baa <__aeabi_idiv+0xfe>
    6ba8:	4601      	mov	r1, r0
    6baa:	4152      	adcs	r2, r2
    6bac:	4610      	mov	r0, r2
    6bae:	4770      	bx	lr
    6bb0:	e05d      	b.n	6c6e <__aeabi_idiv+0x1c2>
    6bb2:	0fca      	lsrs	r2, r1, #31
    6bb4:	d000      	beq.n	6bb8 <__aeabi_idiv+0x10c>
    6bb6:	4249      	negs	r1, r1
    6bb8:	1003      	asrs	r3, r0, #32
    6bba:	d300      	bcc.n	6bbe <__aeabi_idiv+0x112>
    6bbc:	4240      	negs	r0, r0
    6bbe:	4053      	eors	r3, r2
    6bc0:	2200      	movs	r2, #0
    6bc2:	469c      	mov	ip, r3
    6bc4:	0903      	lsrs	r3, r0, #4
    6bc6:	428b      	cmp	r3, r1
    6bc8:	d32d      	bcc.n	6c26 <__aeabi_idiv+0x17a>
    6bca:	0a03      	lsrs	r3, r0, #8
    6bcc:	428b      	cmp	r3, r1
    6bce:	d312      	bcc.n	6bf6 <__aeabi_idiv+0x14a>
    6bd0:	22fc      	movs	r2, #252	; 0xfc
    6bd2:	0189      	lsls	r1, r1, #6
    6bd4:	ba12      	rev	r2, r2
    6bd6:	0a03      	lsrs	r3, r0, #8
    6bd8:	428b      	cmp	r3, r1
    6bda:	d30c      	bcc.n	6bf6 <__aeabi_idiv+0x14a>
    6bdc:	0189      	lsls	r1, r1, #6
    6bde:	1192      	asrs	r2, r2, #6
    6be0:	428b      	cmp	r3, r1
    6be2:	d308      	bcc.n	6bf6 <__aeabi_idiv+0x14a>
    6be4:	0189      	lsls	r1, r1, #6
    6be6:	1192      	asrs	r2, r2, #6
    6be8:	428b      	cmp	r3, r1
    6bea:	d304      	bcc.n	6bf6 <__aeabi_idiv+0x14a>
    6bec:	0189      	lsls	r1, r1, #6
    6bee:	d03a      	beq.n	6c66 <__aeabi_idiv+0x1ba>
    6bf0:	1192      	asrs	r2, r2, #6
    6bf2:	e000      	b.n	6bf6 <__aeabi_idiv+0x14a>
    6bf4:	0989      	lsrs	r1, r1, #6
    6bf6:	09c3      	lsrs	r3, r0, #7
    6bf8:	428b      	cmp	r3, r1
    6bfa:	d301      	bcc.n	6c00 <__aeabi_idiv+0x154>
    6bfc:	01cb      	lsls	r3, r1, #7
    6bfe:	1ac0      	subs	r0, r0, r3
    6c00:	4152      	adcs	r2, r2
    6c02:	0983      	lsrs	r3, r0, #6
    6c04:	428b      	cmp	r3, r1
    6c06:	d301      	bcc.n	6c0c <__aeabi_idiv+0x160>
    6c08:	018b      	lsls	r3, r1, #6
    6c0a:	1ac0      	subs	r0, r0, r3
    6c0c:	4152      	adcs	r2, r2
    6c0e:	0943      	lsrs	r3, r0, #5
    6c10:	428b      	cmp	r3, r1
    6c12:	d301      	bcc.n	6c18 <__aeabi_idiv+0x16c>
    6c14:	014b      	lsls	r3, r1, #5
    6c16:	1ac0      	subs	r0, r0, r3
    6c18:	4152      	adcs	r2, r2
    6c1a:	0903      	lsrs	r3, r0, #4
    6c1c:	428b      	cmp	r3, r1
    6c1e:	d301      	bcc.n	6c24 <__aeabi_idiv+0x178>
    6c20:	010b      	lsls	r3, r1, #4
    6c22:	1ac0      	subs	r0, r0, r3
    6c24:	4152      	adcs	r2, r2
    6c26:	08c3      	lsrs	r3, r0, #3
    6c28:	428b      	cmp	r3, r1
    6c2a:	d301      	bcc.n	6c30 <__aeabi_idiv+0x184>
    6c2c:	00cb      	lsls	r3, r1, #3
    6c2e:	1ac0      	subs	r0, r0, r3
    6c30:	4152      	adcs	r2, r2
    6c32:	0883      	lsrs	r3, r0, #2
    6c34:	428b      	cmp	r3, r1
    6c36:	d301      	bcc.n	6c3c <__aeabi_idiv+0x190>
    6c38:	008b      	lsls	r3, r1, #2
    6c3a:	1ac0      	subs	r0, r0, r3
    6c3c:	4152      	adcs	r2, r2
    6c3e:	d2d9      	bcs.n	6bf4 <__aeabi_idiv+0x148>
    6c40:	0843      	lsrs	r3, r0, #1
    6c42:	428b      	cmp	r3, r1
    6c44:	d301      	bcc.n	6c4a <__aeabi_idiv+0x19e>
    6c46:	004b      	lsls	r3, r1, #1
    6c48:	1ac0      	subs	r0, r0, r3
    6c4a:	4152      	adcs	r2, r2
    6c4c:	1a41      	subs	r1, r0, r1
    6c4e:	d200      	bcs.n	6c52 <__aeabi_idiv+0x1a6>
    6c50:	4601      	mov	r1, r0
    6c52:	4663      	mov	r3, ip
    6c54:	4152      	adcs	r2, r2
    6c56:	105b      	asrs	r3, r3, #1
    6c58:	4610      	mov	r0, r2
    6c5a:	d301      	bcc.n	6c60 <__aeabi_idiv+0x1b4>
    6c5c:	4240      	negs	r0, r0
    6c5e:	2b00      	cmp	r3, #0
    6c60:	d500      	bpl.n	6c64 <__aeabi_idiv+0x1b8>
    6c62:	4249      	negs	r1, r1
    6c64:	4770      	bx	lr
    6c66:	4663      	mov	r3, ip
    6c68:	105b      	asrs	r3, r3, #1
    6c6a:	d300      	bcc.n	6c6e <__aeabi_idiv+0x1c2>
    6c6c:	4240      	negs	r0, r0
    6c6e:	b501      	push	{r0, lr}
    6c70:	2000      	movs	r0, #0
    6c72:	f000 f805 	bl	6c80 <__aeabi_idiv0>
    6c76:	bd02      	pop	{r1, pc}

00006c78 <__aeabi_idivmod>:
    6c78:	2900      	cmp	r1, #0
    6c7a:	d0f8      	beq.n	6c6e <__aeabi_idiv+0x1c2>
    6c7c:	e716      	b.n	6aac <__aeabi_idiv>
    6c7e:	4770      	bx	lr

00006c80 <__aeabi_idiv0>:
    6c80:	4770      	bx	lr
    6c82:	46c0      	nop			; (mov r8, r8)

00006c84 <__aeabi_cdrcmple>:
    6c84:	4684      	mov	ip, r0
    6c86:	1c10      	adds	r0, r2, #0
    6c88:	4662      	mov	r2, ip
    6c8a:	468c      	mov	ip, r1
    6c8c:	1c19      	adds	r1, r3, #0
    6c8e:	4663      	mov	r3, ip
    6c90:	e000      	b.n	6c94 <__aeabi_cdcmpeq>
    6c92:	46c0      	nop			; (mov r8, r8)

00006c94 <__aeabi_cdcmpeq>:
    6c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6c96:	f001 fc79 	bl	858c <__ledf2>
    6c9a:	2800      	cmp	r0, #0
    6c9c:	d401      	bmi.n	6ca2 <__aeabi_cdcmpeq+0xe>
    6c9e:	2100      	movs	r1, #0
    6ca0:	42c8      	cmn	r0, r1
    6ca2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006ca4 <__aeabi_dcmpeq>:
    6ca4:	b510      	push	{r4, lr}
    6ca6:	f001 fbcd 	bl	8444 <__eqdf2>
    6caa:	4240      	negs	r0, r0
    6cac:	3001      	adds	r0, #1
    6cae:	bd10      	pop	{r4, pc}

00006cb0 <__aeabi_dcmplt>:
    6cb0:	b510      	push	{r4, lr}
    6cb2:	f001 fc6b 	bl	858c <__ledf2>
    6cb6:	2800      	cmp	r0, #0
    6cb8:	db01      	blt.n	6cbe <__aeabi_dcmplt+0xe>
    6cba:	2000      	movs	r0, #0
    6cbc:	bd10      	pop	{r4, pc}
    6cbe:	2001      	movs	r0, #1
    6cc0:	bd10      	pop	{r4, pc}
    6cc2:	46c0      	nop			; (mov r8, r8)

00006cc4 <__aeabi_dcmple>:
    6cc4:	b510      	push	{r4, lr}
    6cc6:	f001 fc61 	bl	858c <__ledf2>
    6cca:	2800      	cmp	r0, #0
    6ccc:	dd01      	ble.n	6cd2 <__aeabi_dcmple+0xe>
    6cce:	2000      	movs	r0, #0
    6cd0:	bd10      	pop	{r4, pc}
    6cd2:	2001      	movs	r0, #1
    6cd4:	bd10      	pop	{r4, pc}
    6cd6:	46c0      	nop			; (mov r8, r8)

00006cd8 <__aeabi_dcmpgt>:
    6cd8:	b510      	push	{r4, lr}
    6cda:	f001 fbf3 	bl	84c4 <__gedf2>
    6cde:	2800      	cmp	r0, #0
    6ce0:	dc01      	bgt.n	6ce6 <__aeabi_dcmpgt+0xe>
    6ce2:	2000      	movs	r0, #0
    6ce4:	bd10      	pop	{r4, pc}
    6ce6:	2001      	movs	r0, #1
    6ce8:	bd10      	pop	{r4, pc}
    6cea:	46c0      	nop			; (mov r8, r8)

00006cec <__aeabi_dcmpge>:
    6cec:	b510      	push	{r4, lr}
    6cee:	f001 fbe9 	bl	84c4 <__gedf2>
    6cf2:	2800      	cmp	r0, #0
    6cf4:	da01      	bge.n	6cfa <__aeabi_dcmpge+0xe>
    6cf6:	2000      	movs	r0, #0
    6cf8:	bd10      	pop	{r4, pc}
    6cfa:	2001      	movs	r0, #1
    6cfc:	bd10      	pop	{r4, pc}
    6cfe:	46c0      	nop			; (mov r8, r8)

00006d00 <__aeabi_cfrcmple>:
    6d00:	4684      	mov	ip, r0
    6d02:	1c08      	adds	r0, r1, #0
    6d04:	4661      	mov	r1, ip
    6d06:	e7ff      	b.n	6d08 <__aeabi_cfcmpeq>

00006d08 <__aeabi_cfcmpeq>:
    6d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6d0a:	f000 fa33 	bl	7174 <__lesf2>
    6d0e:	2800      	cmp	r0, #0
    6d10:	d401      	bmi.n	6d16 <__aeabi_cfcmpeq+0xe>
    6d12:	2100      	movs	r1, #0
    6d14:	42c8      	cmn	r0, r1
    6d16:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006d18 <__aeabi_fcmpeq>:
    6d18:	b510      	push	{r4, lr}
    6d1a:	f000 f9bf 	bl	709c <__eqsf2>
    6d1e:	4240      	negs	r0, r0
    6d20:	3001      	adds	r0, #1
    6d22:	bd10      	pop	{r4, pc}

00006d24 <__aeabi_fcmplt>:
    6d24:	b510      	push	{r4, lr}
    6d26:	f000 fa25 	bl	7174 <__lesf2>
    6d2a:	2800      	cmp	r0, #0
    6d2c:	db01      	blt.n	6d32 <__aeabi_fcmplt+0xe>
    6d2e:	2000      	movs	r0, #0
    6d30:	bd10      	pop	{r4, pc}
    6d32:	2001      	movs	r0, #1
    6d34:	bd10      	pop	{r4, pc}
    6d36:	46c0      	nop			; (mov r8, r8)

00006d38 <__aeabi_fcmple>:
    6d38:	b510      	push	{r4, lr}
    6d3a:	f000 fa1b 	bl	7174 <__lesf2>
    6d3e:	2800      	cmp	r0, #0
    6d40:	dd01      	ble.n	6d46 <__aeabi_fcmple+0xe>
    6d42:	2000      	movs	r0, #0
    6d44:	bd10      	pop	{r4, pc}
    6d46:	2001      	movs	r0, #1
    6d48:	bd10      	pop	{r4, pc}
    6d4a:	46c0      	nop			; (mov r8, r8)

00006d4c <__aeabi_fcmpgt>:
    6d4c:	b510      	push	{r4, lr}
    6d4e:	f000 f9cd 	bl	70ec <__gesf2>
    6d52:	2800      	cmp	r0, #0
    6d54:	dc01      	bgt.n	6d5a <__aeabi_fcmpgt+0xe>
    6d56:	2000      	movs	r0, #0
    6d58:	bd10      	pop	{r4, pc}
    6d5a:	2001      	movs	r0, #1
    6d5c:	bd10      	pop	{r4, pc}
    6d5e:	46c0      	nop			; (mov r8, r8)

00006d60 <__aeabi_fcmpge>:
    6d60:	b510      	push	{r4, lr}
    6d62:	f000 f9c3 	bl	70ec <__gesf2>
    6d66:	2800      	cmp	r0, #0
    6d68:	da01      	bge.n	6d6e <__aeabi_fcmpge+0xe>
    6d6a:	2000      	movs	r0, #0
    6d6c:	bd10      	pop	{r4, pc}
    6d6e:	2001      	movs	r0, #1
    6d70:	bd10      	pop	{r4, pc}
    6d72:	46c0      	nop			; (mov r8, r8)

00006d74 <__aeabi_d2uiz>:
    6d74:	b570      	push	{r4, r5, r6, lr}
    6d76:	2200      	movs	r2, #0
    6d78:	4b0c      	ldr	r3, [pc, #48]	; (6dac <__aeabi_d2uiz+0x38>)
    6d7a:	0004      	movs	r4, r0
    6d7c:	000d      	movs	r5, r1
    6d7e:	f7ff ffb5 	bl	6cec <__aeabi_dcmpge>
    6d82:	2800      	cmp	r0, #0
    6d84:	d104      	bne.n	6d90 <__aeabi_d2uiz+0x1c>
    6d86:	0020      	movs	r0, r4
    6d88:	0029      	movs	r1, r5
    6d8a:	f002 fa57 	bl	923c <__aeabi_d2iz>
    6d8e:	bd70      	pop	{r4, r5, r6, pc}
    6d90:	4b06      	ldr	r3, [pc, #24]	; (6dac <__aeabi_d2uiz+0x38>)
    6d92:	2200      	movs	r2, #0
    6d94:	0020      	movs	r0, r4
    6d96:	0029      	movs	r1, r5
    6d98:	f001 fedc 	bl	8b54 <__aeabi_dsub>
    6d9c:	f002 fa4e 	bl	923c <__aeabi_d2iz>
    6da0:	2380      	movs	r3, #128	; 0x80
    6da2:	061b      	lsls	r3, r3, #24
    6da4:	469c      	mov	ip, r3
    6da6:	4460      	add	r0, ip
    6da8:	e7f1      	b.n	6d8e <__aeabi_d2uiz+0x1a>
    6daa:	46c0      	nop			; (mov r8, r8)
    6dac:	41e00000 	.word	0x41e00000

00006db0 <__aeabi_fadd>:
    6db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6db2:	024a      	lsls	r2, r1, #9
    6db4:	0243      	lsls	r3, r0, #9
    6db6:	0044      	lsls	r4, r0, #1
    6db8:	004e      	lsls	r6, r1, #1
    6dba:	0fc5      	lsrs	r5, r0, #31
    6dbc:	0e24      	lsrs	r4, r4, #24
    6dbe:	0028      	movs	r0, r5
    6dc0:	099b      	lsrs	r3, r3, #6
    6dc2:	0e36      	lsrs	r6, r6, #24
    6dc4:	0fc9      	lsrs	r1, r1, #31
    6dc6:	0992      	lsrs	r2, r2, #6
    6dc8:	428d      	cmp	r5, r1
    6dca:	d059      	beq.n	6e80 <__aeabi_fadd+0xd0>
    6dcc:	1ba0      	subs	r0, r4, r6
    6dce:	2800      	cmp	r0, #0
    6dd0:	dc00      	bgt.n	6dd4 <__aeabi_fadd+0x24>
    6dd2:	e08d      	b.n	6ef0 <__aeabi_fadd+0x140>
    6dd4:	2e00      	cmp	r6, #0
    6dd6:	d11a      	bne.n	6e0e <__aeabi_fadd+0x5e>
    6dd8:	2a00      	cmp	r2, #0
    6dda:	d000      	beq.n	6dde <__aeabi_fadd+0x2e>
    6ddc:	e079      	b.n	6ed2 <__aeabi_fadd+0x122>
    6dde:	075a      	lsls	r2, r3, #29
    6de0:	d004      	beq.n	6dec <__aeabi_fadd+0x3c>
    6de2:	220f      	movs	r2, #15
    6de4:	401a      	ands	r2, r3
    6de6:	2a04      	cmp	r2, #4
    6de8:	d000      	beq.n	6dec <__aeabi_fadd+0x3c>
    6dea:	3304      	adds	r3, #4
    6dec:	015a      	lsls	r2, r3, #5
    6dee:	d538      	bpl.n	6e62 <__aeabi_fadd+0xb2>
    6df0:	3401      	adds	r4, #1
    6df2:	2cff      	cmp	r4, #255	; 0xff
    6df4:	d100      	bne.n	6df8 <__aeabi_fadd+0x48>
    6df6:	e089      	b.n	6f0c <__aeabi_fadd+0x15c>
    6df8:	0028      	movs	r0, r5
    6dfa:	019b      	lsls	r3, r3, #6
    6dfc:	0a5b      	lsrs	r3, r3, #9
    6dfe:	b2e4      	uxtb	r4, r4
    6e00:	025b      	lsls	r3, r3, #9
    6e02:	05e4      	lsls	r4, r4, #23
    6e04:	0a5b      	lsrs	r3, r3, #9
    6e06:	4323      	orrs	r3, r4
    6e08:	07c0      	lsls	r0, r0, #31
    6e0a:	4318      	orrs	r0, r3
    6e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e0e:	2cff      	cmp	r4, #255	; 0xff
    6e10:	d0e5      	beq.n	6dde <__aeabi_fadd+0x2e>
    6e12:	2180      	movs	r1, #128	; 0x80
    6e14:	04c9      	lsls	r1, r1, #19
    6e16:	430a      	orrs	r2, r1
    6e18:	281b      	cmp	r0, #27
    6e1a:	dd00      	ble.n	6e1e <__aeabi_fadd+0x6e>
    6e1c:	e089      	b.n	6f32 <__aeabi_fadd+0x182>
    6e1e:	0016      	movs	r6, r2
    6e20:	2120      	movs	r1, #32
    6e22:	40c6      	lsrs	r6, r0
    6e24:	1a08      	subs	r0, r1, r0
    6e26:	4082      	lsls	r2, r0
    6e28:	1e51      	subs	r1, r2, #1
    6e2a:	418a      	sbcs	r2, r1
    6e2c:	4332      	orrs	r2, r6
    6e2e:	1a9b      	subs	r3, r3, r2
    6e30:	015a      	lsls	r2, r3, #5
    6e32:	d514      	bpl.n	6e5e <__aeabi_fadd+0xae>
    6e34:	019b      	lsls	r3, r3, #6
    6e36:	099e      	lsrs	r6, r3, #6
    6e38:	0030      	movs	r0, r6
    6e3a:	f002 fb4d 	bl	94d8 <__clzsi2>
    6e3e:	3805      	subs	r0, #5
    6e40:	4086      	lsls	r6, r0
    6e42:	4284      	cmp	r4, r0
    6e44:	dc65      	bgt.n	6f12 <__aeabi_fadd+0x162>
    6e46:	1b04      	subs	r4, r0, r4
    6e48:	0033      	movs	r3, r6
    6e4a:	2020      	movs	r0, #32
    6e4c:	3401      	adds	r4, #1
    6e4e:	40e3      	lsrs	r3, r4
    6e50:	1b04      	subs	r4, r0, r4
    6e52:	40a6      	lsls	r6, r4
    6e54:	1e72      	subs	r2, r6, #1
    6e56:	4196      	sbcs	r6, r2
    6e58:	2400      	movs	r4, #0
    6e5a:	4333      	orrs	r3, r6
    6e5c:	e7bf      	b.n	6dde <__aeabi_fadd+0x2e>
    6e5e:	075a      	lsls	r2, r3, #29
    6e60:	d1bf      	bne.n	6de2 <__aeabi_fadd+0x32>
    6e62:	08df      	lsrs	r7, r3, #3
    6e64:	0028      	movs	r0, r5
    6e66:	2cff      	cmp	r4, #255	; 0xff
    6e68:	d12f      	bne.n	6eca <__aeabi_fadd+0x11a>
    6e6a:	2f00      	cmp	r7, #0
    6e6c:	d100      	bne.n	6e70 <__aeabi_fadd+0xc0>
    6e6e:	e087      	b.n	6f80 <__aeabi_fadd+0x1d0>
    6e70:	2280      	movs	r2, #128	; 0x80
    6e72:	03d2      	lsls	r2, r2, #15
    6e74:	0013      	movs	r3, r2
    6e76:	433b      	orrs	r3, r7
    6e78:	025b      	lsls	r3, r3, #9
    6e7a:	0a5b      	lsrs	r3, r3, #9
    6e7c:	24ff      	movs	r4, #255	; 0xff
    6e7e:	e7bf      	b.n	6e00 <__aeabi_fadd+0x50>
    6e80:	1ba1      	subs	r1, r4, r6
    6e82:	2900      	cmp	r1, #0
    6e84:	dd49      	ble.n	6f1a <__aeabi_fadd+0x16a>
    6e86:	2e00      	cmp	r6, #0
    6e88:	d029      	beq.n	6ede <__aeabi_fadd+0x12e>
    6e8a:	2cff      	cmp	r4, #255	; 0xff
    6e8c:	d0a7      	beq.n	6dde <__aeabi_fadd+0x2e>
    6e8e:	2680      	movs	r6, #128	; 0x80
    6e90:	04f6      	lsls	r6, r6, #19
    6e92:	4332      	orrs	r2, r6
    6e94:	291b      	cmp	r1, #27
    6e96:	dd00      	ble.n	6e9a <__aeabi_fadd+0xea>
    6e98:	e08d      	b.n	6fb6 <__aeabi_fadd+0x206>
    6e9a:	0017      	movs	r7, r2
    6e9c:	2620      	movs	r6, #32
    6e9e:	40cf      	lsrs	r7, r1
    6ea0:	1a71      	subs	r1, r6, r1
    6ea2:	408a      	lsls	r2, r1
    6ea4:	1e51      	subs	r1, r2, #1
    6ea6:	418a      	sbcs	r2, r1
    6ea8:	433a      	orrs	r2, r7
    6eaa:	189b      	adds	r3, r3, r2
    6eac:	015a      	lsls	r2, r3, #5
    6eae:	d5d6      	bpl.n	6e5e <__aeabi_fadd+0xae>
    6eb0:	3401      	adds	r4, #1
    6eb2:	2cff      	cmp	r4, #255	; 0xff
    6eb4:	d064      	beq.n	6f80 <__aeabi_fadd+0x1d0>
    6eb6:	2201      	movs	r2, #1
    6eb8:	4976      	ldr	r1, [pc, #472]	; (7094 <__aeabi_fadd+0x2e4>)
    6eba:	401a      	ands	r2, r3
    6ebc:	085b      	lsrs	r3, r3, #1
    6ebe:	400b      	ands	r3, r1
    6ec0:	4313      	orrs	r3, r2
    6ec2:	e78c      	b.n	6dde <__aeabi_fadd+0x2e>
    6ec4:	1e03      	subs	r3, r0, #0
    6ec6:	d1ca      	bne.n	6e5e <__aeabi_fadd+0xae>
    6ec8:	2000      	movs	r0, #0
    6eca:	027b      	lsls	r3, r7, #9
    6ecc:	0a5b      	lsrs	r3, r3, #9
    6ece:	b2e4      	uxtb	r4, r4
    6ed0:	e796      	b.n	6e00 <__aeabi_fadd+0x50>
    6ed2:	3801      	subs	r0, #1
    6ed4:	2800      	cmp	r0, #0
    6ed6:	d0aa      	beq.n	6e2e <__aeabi_fadd+0x7e>
    6ed8:	2cff      	cmp	r4, #255	; 0xff
    6eda:	d19d      	bne.n	6e18 <__aeabi_fadd+0x68>
    6edc:	e77f      	b.n	6dde <__aeabi_fadd+0x2e>
    6ede:	2a00      	cmp	r2, #0
    6ee0:	d100      	bne.n	6ee4 <__aeabi_fadd+0x134>
    6ee2:	e77c      	b.n	6dde <__aeabi_fadd+0x2e>
    6ee4:	3901      	subs	r1, #1
    6ee6:	2900      	cmp	r1, #0
    6ee8:	d0df      	beq.n	6eaa <__aeabi_fadd+0xfa>
    6eea:	2cff      	cmp	r4, #255	; 0xff
    6eec:	d1d2      	bne.n	6e94 <__aeabi_fadd+0xe4>
    6eee:	e776      	b.n	6dde <__aeabi_fadd+0x2e>
    6ef0:	2800      	cmp	r0, #0
    6ef2:	d120      	bne.n	6f36 <__aeabi_fadd+0x186>
    6ef4:	1c60      	adds	r0, r4, #1
    6ef6:	b2c0      	uxtb	r0, r0
    6ef8:	2801      	cmp	r0, #1
    6efa:	dd53      	ble.n	6fa4 <__aeabi_fadd+0x1f4>
    6efc:	2780      	movs	r7, #128	; 0x80
    6efe:	1a9e      	subs	r6, r3, r2
    6f00:	04ff      	lsls	r7, r7, #19
    6f02:	4037      	ands	r7, r6
    6f04:	d02f      	beq.n	6f66 <__aeabi_fadd+0x1b6>
    6f06:	1ad6      	subs	r6, r2, r3
    6f08:	000d      	movs	r5, r1
    6f0a:	e795      	b.n	6e38 <__aeabi_fadd+0x88>
    6f0c:	0028      	movs	r0, r5
    6f0e:	2300      	movs	r3, #0
    6f10:	e776      	b.n	6e00 <__aeabi_fadd+0x50>
    6f12:	4b61      	ldr	r3, [pc, #388]	; (7098 <__aeabi_fadd+0x2e8>)
    6f14:	1a24      	subs	r4, r4, r0
    6f16:	4033      	ands	r3, r6
    6f18:	e761      	b.n	6dde <__aeabi_fadd+0x2e>
    6f1a:	2900      	cmp	r1, #0
    6f1c:	d14d      	bne.n	6fba <__aeabi_fadd+0x20a>
    6f1e:	1c61      	adds	r1, r4, #1
    6f20:	b2ce      	uxtb	r6, r1
    6f22:	2e01      	cmp	r6, #1
    6f24:	dd2f      	ble.n	6f86 <__aeabi_fadd+0x1d6>
    6f26:	29ff      	cmp	r1, #255	; 0xff
    6f28:	d02a      	beq.n	6f80 <__aeabi_fadd+0x1d0>
    6f2a:	189b      	adds	r3, r3, r2
    6f2c:	085b      	lsrs	r3, r3, #1
    6f2e:	000c      	movs	r4, r1
    6f30:	e755      	b.n	6dde <__aeabi_fadd+0x2e>
    6f32:	2201      	movs	r2, #1
    6f34:	e77b      	b.n	6e2e <__aeabi_fadd+0x7e>
    6f36:	2c00      	cmp	r4, #0
    6f38:	d11b      	bne.n	6f72 <__aeabi_fadd+0x1c2>
    6f3a:	2b00      	cmp	r3, #0
    6f3c:	d05b      	beq.n	6ff6 <__aeabi_fadd+0x246>
    6f3e:	43c0      	mvns	r0, r0
    6f40:	2800      	cmp	r0, #0
    6f42:	d00c      	beq.n	6f5e <__aeabi_fadd+0x1ae>
    6f44:	2eff      	cmp	r6, #255	; 0xff
    6f46:	d07e      	beq.n	7046 <__aeabi_fadd+0x296>
    6f48:	281b      	cmp	r0, #27
    6f4a:	dd00      	ble.n	6f4e <__aeabi_fadd+0x19e>
    6f4c:	e092      	b.n	7074 <__aeabi_fadd+0x2c4>
    6f4e:	001d      	movs	r5, r3
    6f50:	2420      	movs	r4, #32
    6f52:	40c5      	lsrs	r5, r0
    6f54:	1a20      	subs	r0, r4, r0
    6f56:	4083      	lsls	r3, r0
    6f58:	1e58      	subs	r0, r3, #1
    6f5a:	4183      	sbcs	r3, r0
    6f5c:	432b      	orrs	r3, r5
    6f5e:	1ad3      	subs	r3, r2, r3
    6f60:	0034      	movs	r4, r6
    6f62:	000d      	movs	r5, r1
    6f64:	e764      	b.n	6e30 <__aeabi_fadd+0x80>
    6f66:	2e00      	cmp	r6, #0
    6f68:	d000      	beq.n	6f6c <__aeabi_fadd+0x1bc>
    6f6a:	e765      	b.n	6e38 <__aeabi_fadd+0x88>
    6f6c:	2000      	movs	r0, #0
    6f6e:	2400      	movs	r4, #0
    6f70:	e7ab      	b.n	6eca <__aeabi_fadd+0x11a>
    6f72:	2eff      	cmp	r6, #255	; 0xff
    6f74:	d067      	beq.n	7046 <__aeabi_fadd+0x296>
    6f76:	2480      	movs	r4, #128	; 0x80
    6f78:	04e4      	lsls	r4, r4, #19
    6f7a:	4240      	negs	r0, r0
    6f7c:	4323      	orrs	r3, r4
    6f7e:	e7e3      	b.n	6f48 <__aeabi_fadd+0x198>
    6f80:	24ff      	movs	r4, #255	; 0xff
    6f82:	2300      	movs	r3, #0
    6f84:	e73c      	b.n	6e00 <__aeabi_fadd+0x50>
    6f86:	2c00      	cmp	r4, #0
    6f88:	d161      	bne.n	704e <__aeabi_fadd+0x29e>
    6f8a:	2b00      	cmp	r3, #0
    6f8c:	d07e      	beq.n	708c <__aeabi_fadd+0x2dc>
    6f8e:	2a00      	cmp	r2, #0
    6f90:	d100      	bne.n	6f94 <__aeabi_fadd+0x1e4>
    6f92:	e724      	b.n	6dde <__aeabi_fadd+0x2e>
    6f94:	189b      	adds	r3, r3, r2
    6f96:	015a      	lsls	r2, r3, #5
    6f98:	d400      	bmi.n	6f9c <__aeabi_fadd+0x1ec>
    6f9a:	e760      	b.n	6e5e <__aeabi_fadd+0xae>
    6f9c:	4a3e      	ldr	r2, [pc, #248]	; (7098 <__aeabi_fadd+0x2e8>)
    6f9e:	000c      	movs	r4, r1
    6fa0:	4013      	ands	r3, r2
    6fa2:	e71c      	b.n	6dde <__aeabi_fadd+0x2e>
    6fa4:	2c00      	cmp	r4, #0
    6fa6:	d11e      	bne.n	6fe6 <__aeabi_fadd+0x236>
    6fa8:	2b00      	cmp	r3, #0
    6faa:	d12f      	bne.n	700c <__aeabi_fadd+0x25c>
    6fac:	2a00      	cmp	r2, #0
    6fae:	d066      	beq.n	707e <__aeabi_fadd+0x2ce>
    6fb0:	0013      	movs	r3, r2
    6fb2:	000d      	movs	r5, r1
    6fb4:	e713      	b.n	6dde <__aeabi_fadd+0x2e>
    6fb6:	2201      	movs	r2, #1
    6fb8:	e777      	b.n	6eaa <__aeabi_fadd+0xfa>
    6fba:	2c00      	cmp	r4, #0
    6fbc:	d11f      	bne.n	6ffe <__aeabi_fadd+0x24e>
    6fbe:	2b00      	cmp	r3, #0
    6fc0:	d05a      	beq.n	7078 <__aeabi_fadd+0x2c8>
    6fc2:	43c9      	mvns	r1, r1
    6fc4:	2900      	cmp	r1, #0
    6fc6:	d00b      	beq.n	6fe0 <__aeabi_fadd+0x230>
    6fc8:	2eff      	cmp	r6, #255	; 0xff
    6fca:	d050      	beq.n	706e <__aeabi_fadd+0x2be>
    6fcc:	291b      	cmp	r1, #27
    6fce:	dc5f      	bgt.n	7090 <__aeabi_fadd+0x2e0>
    6fd0:	001f      	movs	r7, r3
    6fd2:	2420      	movs	r4, #32
    6fd4:	40cf      	lsrs	r7, r1
    6fd6:	1a61      	subs	r1, r4, r1
    6fd8:	408b      	lsls	r3, r1
    6fda:	1e59      	subs	r1, r3, #1
    6fdc:	418b      	sbcs	r3, r1
    6fde:	433b      	orrs	r3, r7
    6fe0:	189b      	adds	r3, r3, r2
    6fe2:	0034      	movs	r4, r6
    6fe4:	e762      	b.n	6eac <__aeabi_fadd+0xfc>
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	d11c      	bne.n	7024 <__aeabi_fadd+0x274>
    6fea:	2a00      	cmp	r2, #0
    6fec:	d04a      	beq.n	7084 <__aeabi_fadd+0x2d4>
    6fee:	0013      	movs	r3, r2
    6ff0:	000d      	movs	r5, r1
    6ff2:	24ff      	movs	r4, #255	; 0xff
    6ff4:	e6f3      	b.n	6dde <__aeabi_fadd+0x2e>
    6ff6:	0013      	movs	r3, r2
    6ff8:	0034      	movs	r4, r6
    6ffa:	000d      	movs	r5, r1
    6ffc:	e6ef      	b.n	6dde <__aeabi_fadd+0x2e>
    6ffe:	2eff      	cmp	r6, #255	; 0xff
    7000:	d035      	beq.n	706e <__aeabi_fadd+0x2be>
    7002:	2480      	movs	r4, #128	; 0x80
    7004:	04e4      	lsls	r4, r4, #19
    7006:	4249      	negs	r1, r1
    7008:	4323      	orrs	r3, r4
    700a:	e7df      	b.n	6fcc <__aeabi_fadd+0x21c>
    700c:	2a00      	cmp	r2, #0
    700e:	d100      	bne.n	7012 <__aeabi_fadd+0x262>
    7010:	e6e5      	b.n	6dde <__aeabi_fadd+0x2e>
    7012:	2780      	movs	r7, #128	; 0x80
    7014:	1a98      	subs	r0, r3, r2
    7016:	04ff      	lsls	r7, r7, #19
    7018:	4007      	ands	r7, r0
    701a:	d100      	bne.n	701e <__aeabi_fadd+0x26e>
    701c:	e752      	b.n	6ec4 <__aeabi_fadd+0x114>
    701e:	1ad3      	subs	r3, r2, r3
    7020:	000d      	movs	r5, r1
    7022:	e6dc      	b.n	6dde <__aeabi_fadd+0x2e>
    7024:	24ff      	movs	r4, #255	; 0xff
    7026:	2a00      	cmp	r2, #0
    7028:	d100      	bne.n	702c <__aeabi_fadd+0x27c>
    702a:	e6d8      	b.n	6dde <__aeabi_fadd+0x2e>
    702c:	2080      	movs	r0, #128	; 0x80
    702e:	08db      	lsrs	r3, r3, #3
    7030:	03c0      	lsls	r0, r0, #15
    7032:	4203      	tst	r3, r0
    7034:	d004      	beq.n	7040 <__aeabi_fadd+0x290>
    7036:	08d2      	lsrs	r2, r2, #3
    7038:	4202      	tst	r2, r0
    703a:	d101      	bne.n	7040 <__aeabi_fadd+0x290>
    703c:	0013      	movs	r3, r2
    703e:	000d      	movs	r5, r1
    7040:	00db      	lsls	r3, r3, #3
    7042:	24ff      	movs	r4, #255	; 0xff
    7044:	e6cb      	b.n	6dde <__aeabi_fadd+0x2e>
    7046:	0013      	movs	r3, r2
    7048:	24ff      	movs	r4, #255	; 0xff
    704a:	000d      	movs	r5, r1
    704c:	e6c7      	b.n	6dde <__aeabi_fadd+0x2e>
    704e:	2b00      	cmp	r3, #0
    7050:	d00d      	beq.n	706e <__aeabi_fadd+0x2be>
    7052:	24ff      	movs	r4, #255	; 0xff
    7054:	2a00      	cmp	r2, #0
    7056:	d100      	bne.n	705a <__aeabi_fadd+0x2aa>
    7058:	e6c1      	b.n	6dde <__aeabi_fadd+0x2e>
    705a:	2180      	movs	r1, #128	; 0x80
    705c:	08db      	lsrs	r3, r3, #3
    705e:	03c9      	lsls	r1, r1, #15
    7060:	420b      	tst	r3, r1
    7062:	d0ed      	beq.n	7040 <__aeabi_fadd+0x290>
    7064:	08d2      	lsrs	r2, r2, #3
    7066:	420a      	tst	r2, r1
    7068:	d1ea      	bne.n	7040 <__aeabi_fadd+0x290>
    706a:	0013      	movs	r3, r2
    706c:	e7e8      	b.n	7040 <__aeabi_fadd+0x290>
    706e:	0013      	movs	r3, r2
    7070:	24ff      	movs	r4, #255	; 0xff
    7072:	e6b4      	b.n	6dde <__aeabi_fadd+0x2e>
    7074:	2301      	movs	r3, #1
    7076:	e772      	b.n	6f5e <__aeabi_fadd+0x1ae>
    7078:	0013      	movs	r3, r2
    707a:	0034      	movs	r4, r6
    707c:	e6af      	b.n	6dde <__aeabi_fadd+0x2e>
    707e:	2700      	movs	r7, #0
    7080:	2000      	movs	r0, #0
    7082:	e722      	b.n	6eca <__aeabi_fadd+0x11a>
    7084:	2780      	movs	r7, #128	; 0x80
    7086:	2000      	movs	r0, #0
    7088:	03ff      	lsls	r7, r7, #15
    708a:	e6f1      	b.n	6e70 <__aeabi_fadd+0xc0>
    708c:	0013      	movs	r3, r2
    708e:	e6a6      	b.n	6dde <__aeabi_fadd+0x2e>
    7090:	2301      	movs	r3, #1
    7092:	e7a5      	b.n	6fe0 <__aeabi_fadd+0x230>
    7094:	7dffffff 	.word	0x7dffffff
    7098:	fbffffff 	.word	0xfbffffff

0000709c <__eqsf2>:
    709c:	0243      	lsls	r3, r0, #9
    709e:	b570      	push	{r4, r5, r6, lr}
    70a0:	0042      	lsls	r2, r0, #1
    70a2:	004c      	lsls	r4, r1, #1
    70a4:	0a5d      	lsrs	r5, r3, #9
    70a6:	0fc3      	lsrs	r3, r0, #31
    70a8:	0248      	lsls	r0, r1, #9
    70aa:	0e12      	lsrs	r2, r2, #24
    70ac:	0a46      	lsrs	r6, r0, #9
    70ae:	0e24      	lsrs	r4, r4, #24
    70b0:	0fc9      	lsrs	r1, r1, #31
    70b2:	2aff      	cmp	r2, #255	; 0xff
    70b4:	d00f      	beq.n	70d6 <__eqsf2+0x3a>
    70b6:	2cff      	cmp	r4, #255	; 0xff
    70b8:	d011      	beq.n	70de <__eqsf2+0x42>
    70ba:	2001      	movs	r0, #1
    70bc:	42a2      	cmp	r2, r4
    70be:	d000      	beq.n	70c2 <__eqsf2+0x26>
    70c0:	bd70      	pop	{r4, r5, r6, pc}
    70c2:	42b5      	cmp	r5, r6
    70c4:	d1fc      	bne.n	70c0 <__eqsf2+0x24>
    70c6:	428b      	cmp	r3, r1
    70c8:	d00d      	beq.n	70e6 <__eqsf2+0x4a>
    70ca:	2a00      	cmp	r2, #0
    70cc:	d1f8      	bne.n	70c0 <__eqsf2+0x24>
    70ce:	0028      	movs	r0, r5
    70d0:	1e43      	subs	r3, r0, #1
    70d2:	4198      	sbcs	r0, r3
    70d4:	e7f4      	b.n	70c0 <__eqsf2+0x24>
    70d6:	2001      	movs	r0, #1
    70d8:	2d00      	cmp	r5, #0
    70da:	d1f1      	bne.n	70c0 <__eqsf2+0x24>
    70dc:	e7eb      	b.n	70b6 <__eqsf2+0x1a>
    70de:	2001      	movs	r0, #1
    70e0:	2e00      	cmp	r6, #0
    70e2:	d1ed      	bne.n	70c0 <__eqsf2+0x24>
    70e4:	e7e9      	b.n	70ba <__eqsf2+0x1e>
    70e6:	2000      	movs	r0, #0
    70e8:	e7ea      	b.n	70c0 <__eqsf2+0x24>
    70ea:	46c0      	nop			; (mov r8, r8)

000070ec <__gesf2>:
    70ec:	0243      	lsls	r3, r0, #9
    70ee:	b5f0      	push	{r4, r5, r6, r7, lr}
    70f0:	0042      	lsls	r2, r0, #1
    70f2:	0a5d      	lsrs	r5, r3, #9
    70f4:	0fc3      	lsrs	r3, r0, #31
    70f6:	0248      	lsls	r0, r1, #9
    70f8:	0a44      	lsrs	r4, r0, #9
    70fa:	0048      	lsls	r0, r1, #1
    70fc:	0e12      	lsrs	r2, r2, #24
    70fe:	0e00      	lsrs	r0, r0, #24
    7100:	0fc9      	lsrs	r1, r1, #31
    7102:	2aff      	cmp	r2, #255	; 0xff
    7104:	d01f      	beq.n	7146 <__gesf2+0x5a>
    7106:	28ff      	cmp	r0, #255	; 0xff
    7108:	d022      	beq.n	7150 <__gesf2+0x64>
    710a:	2a00      	cmp	r2, #0
    710c:	d109      	bne.n	7122 <__gesf2+0x36>
    710e:	426e      	negs	r6, r5
    7110:	416e      	adcs	r6, r5
    7112:	2800      	cmp	r0, #0
    7114:	d10f      	bne.n	7136 <__gesf2+0x4a>
    7116:	2c00      	cmp	r4, #0
    7118:	d10d      	bne.n	7136 <__gesf2+0x4a>
    711a:	2000      	movs	r0, #0
    711c:	2d00      	cmp	r5, #0
    711e:	d009      	beq.n	7134 <__gesf2+0x48>
    7120:	e005      	b.n	712e <__gesf2+0x42>
    7122:	2800      	cmp	r0, #0
    7124:	d101      	bne.n	712a <__gesf2+0x3e>
    7126:	2c00      	cmp	r4, #0
    7128:	d001      	beq.n	712e <__gesf2+0x42>
    712a:	428b      	cmp	r3, r1
    712c:	d013      	beq.n	7156 <__gesf2+0x6a>
    712e:	4258      	negs	r0, r3
    7130:	2301      	movs	r3, #1
    7132:	4318      	orrs	r0, r3
    7134:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7136:	2e00      	cmp	r6, #0
    7138:	d0f7      	beq.n	712a <__gesf2+0x3e>
    713a:	4248      	negs	r0, r1
    713c:	4141      	adcs	r1, r0
    713e:	2001      	movs	r0, #1
    7140:	4249      	negs	r1, r1
    7142:	4308      	orrs	r0, r1
    7144:	e7f6      	b.n	7134 <__gesf2+0x48>
    7146:	2d00      	cmp	r5, #0
    7148:	d0dd      	beq.n	7106 <__gesf2+0x1a>
    714a:	2002      	movs	r0, #2
    714c:	4240      	negs	r0, r0
    714e:	e7f1      	b.n	7134 <__gesf2+0x48>
    7150:	2c00      	cmp	r4, #0
    7152:	d0da      	beq.n	710a <__gesf2+0x1e>
    7154:	e7f9      	b.n	714a <__gesf2+0x5e>
    7156:	4282      	cmp	r2, r0
    7158:	dce9      	bgt.n	712e <__gesf2+0x42>
    715a:	db04      	blt.n	7166 <__gesf2+0x7a>
    715c:	42a5      	cmp	r5, r4
    715e:	d8e6      	bhi.n	712e <__gesf2+0x42>
    7160:	2000      	movs	r0, #0
    7162:	42a5      	cmp	r5, r4
    7164:	d2e6      	bcs.n	7134 <__gesf2+0x48>
    7166:	4258      	negs	r0, r3
    7168:	4143      	adcs	r3, r0
    716a:	2001      	movs	r0, #1
    716c:	425b      	negs	r3, r3
    716e:	4318      	orrs	r0, r3
    7170:	e7e0      	b.n	7134 <__gesf2+0x48>
    7172:	46c0      	nop			; (mov r8, r8)

00007174 <__lesf2>:
    7174:	0243      	lsls	r3, r0, #9
    7176:	b5f0      	push	{r4, r5, r6, r7, lr}
    7178:	0042      	lsls	r2, r0, #1
    717a:	004c      	lsls	r4, r1, #1
    717c:	0a5e      	lsrs	r6, r3, #9
    717e:	0fc3      	lsrs	r3, r0, #31
    7180:	0248      	lsls	r0, r1, #9
    7182:	0e12      	lsrs	r2, r2, #24
    7184:	0a45      	lsrs	r5, r0, #9
    7186:	0e24      	lsrs	r4, r4, #24
    7188:	0fc9      	lsrs	r1, r1, #31
    718a:	2aff      	cmp	r2, #255	; 0xff
    718c:	d017      	beq.n	71be <__lesf2+0x4a>
    718e:	2cff      	cmp	r4, #255	; 0xff
    7190:	d019      	beq.n	71c6 <__lesf2+0x52>
    7192:	2a00      	cmp	r2, #0
    7194:	d10b      	bne.n	71ae <__lesf2+0x3a>
    7196:	4270      	negs	r0, r6
    7198:	4170      	adcs	r0, r6
    719a:	2c00      	cmp	r4, #0
    719c:	d017      	beq.n	71ce <__lesf2+0x5a>
    719e:	2800      	cmp	r0, #0
    71a0:	d007      	beq.n	71b2 <__lesf2+0x3e>
    71a2:	4248      	negs	r0, r1
    71a4:	4141      	adcs	r1, r0
    71a6:	2001      	movs	r0, #1
    71a8:	4249      	negs	r1, r1
    71aa:	4308      	orrs	r0, r1
    71ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71ae:	2c00      	cmp	r4, #0
    71b0:	d013      	beq.n	71da <__lesf2+0x66>
    71b2:	428b      	cmp	r3, r1
    71b4:	d014      	beq.n	71e0 <__lesf2+0x6c>
    71b6:	4258      	negs	r0, r3
    71b8:	2301      	movs	r3, #1
    71ba:	4318      	orrs	r0, r3
    71bc:	e7f6      	b.n	71ac <__lesf2+0x38>
    71be:	2002      	movs	r0, #2
    71c0:	2e00      	cmp	r6, #0
    71c2:	d1f3      	bne.n	71ac <__lesf2+0x38>
    71c4:	e7e3      	b.n	718e <__lesf2+0x1a>
    71c6:	2002      	movs	r0, #2
    71c8:	2d00      	cmp	r5, #0
    71ca:	d1ef      	bne.n	71ac <__lesf2+0x38>
    71cc:	e7e1      	b.n	7192 <__lesf2+0x1e>
    71ce:	2d00      	cmp	r5, #0
    71d0:	d1e5      	bne.n	719e <__lesf2+0x2a>
    71d2:	2000      	movs	r0, #0
    71d4:	2e00      	cmp	r6, #0
    71d6:	d0e9      	beq.n	71ac <__lesf2+0x38>
    71d8:	e7ed      	b.n	71b6 <__lesf2+0x42>
    71da:	2d00      	cmp	r5, #0
    71dc:	d1e9      	bne.n	71b2 <__lesf2+0x3e>
    71de:	e7ea      	b.n	71b6 <__lesf2+0x42>
    71e0:	42a2      	cmp	r2, r4
    71e2:	dce8      	bgt.n	71b6 <__lesf2+0x42>
    71e4:	db04      	blt.n	71f0 <__lesf2+0x7c>
    71e6:	42ae      	cmp	r6, r5
    71e8:	d8e5      	bhi.n	71b6 <__lesf2+0x42>
    71ea:	2000      	movs	r0, #0
    71ec:	42ae      	cmp	r6, r5
    71ee:	d2dd      	bcs.n	71ac <__lesf2+0x38>
    71f0:	4258      	negs	r0, r3
    71f2:	4143      	adcs	r3, r0
    71f4:	2001      	movs	r0, #1
    71f6:	425b      	negs	r3, r3
    71f8:	4318      	orrs	r0, r3
    71fa:	e7d7      	b.n	71ac <__lesf2+0x38>

000071fc <__aeabi_fmul>:
    71fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    71fe:	4657      	mov	r7, sl
    7200:	464e      	mov	r6, r9
    7202:	4645      	mov	r5, r8
    7204:	0043      	lsls	r3, r0, #1
    7206:	b4e0      	push	{r5, r6, r7}
    7208:	0246      	lsls	r6, r0, #9
    720a:	4688      	mov	r8, r1
    720c:	0a76      	lsrs	r6, r6, #9
    720e:	0e1f      	lsrs	r7, r3, #24
    7210:	0fc4      	lsrs	r4, r0, #31
    7212:	2f00      	cmp	r7, #0
    7214:	d047      	beq.n	72a6 <__aeabi_fmul+0xaa>
    7216:	2fff      	cmp	r7, #255	; 0xff
    7218:	d025      	beq.n	7266 <__aeabi_fmul+0x6a>
    721a:	2300      	movs	r3, #0
    721c:	2580      	movs	r5, #128	; 0x80
    721e:	469a      	mov	sl, r3
    7220:	4699      	mov	r9, r3
    7222:	00f6      	lsls	r6, r6, #3
    7224:	04ed      	lsls	r5, r5, #19
    7226:	432e      	orrs	r6, r5
    7228:	3f7f      	subs	r7, #127	; 0x7f
    722a:	4643      	mov	r3, r8
    722c:	4642      	mov	r2, r8
    722e:	025d      	lsls	r5, r3, #9
    7230:	0fd2      	lsrs	r2, r2, #31
    7232:	005b      	lsls	r3, r3, #1
    7234:	0a6d      	lsrs	r5, r5, #9
    7236:	0e1b      	lsrs	r3, r3, #24
    7238:	4690      	mov	r8, r2
    723a:	d040      	beq.n	72be <__aeabi_fmul+0xc2>
    723c:	2bff      	cmp	r3, #255	; 0xff
    723e:	d039      	beq.n	72b4 <__aeabi_fmul+0xb8>
    7240:	2280      	movs	r2, #128	; 0x80
    7242:	2000      	movs	r0, #0
    7244:	00ed      	lsls	r5, r5, #3
    7246:	04d2      	lsls	r2, r2, #19
    7248:	4315      	orrs	r5, r2
    724a:	3b7f      	subs	r3, #127	; 0x7f
    724c:	18fb      	adds	r3, r7, r3
    724e:	4642      	mov	r2, r8
    7250:	4657      	mov	r7, sl
    7252:	1c59      	adds	r1, r3, #1
    7254:	4062      	eors	r2, r4
    7256:	468c      	mov	ip, r1
    7258:	4307      	orrs	r7, r0
    725a:	2f0f      	cmp	r7, #15
    725c:	d85c      	bhi.n	7318 <__aeabi_fmul+0x11c>
    725e:	496f      	ldr	r1, [pc, #444]	; (741c <__aeabi_fmul+0x220>)
    7260:	00bf      	lsls	r7, r7, #2
    7262:	59c9      	ldr	r1, [r1, r7]
    7264:	468f      	mov	pc, r1
    7266:	2e00      	cmp	r6, #0
    7268:	d145      	bne.n	72f6 <__aeabi_fmul+0xfa>
    726a:	2308      	movs	r3, #8
    726c:	469a      	mov	sl, r3
    726e:	3b06      	subs	r3, #6
    7270:	4699      	mov	r9, r3
    7272:	e7da      	b.n	722a <__aeabi_fmul+0x2e>
    7274:	4642      	mov	r2, r8
    7276:	2802      	cmp	r0, #2
    7278:	d02d      	beq.n	72d6 <__aeabi_fmul+0xda>
    727a:	2803      	cmp	r0, #3
    727c:	d100      	bne.n	7280 <__aeabi_fmul+0x84>
    727e:	e0c3      	b.n	7408 <__aeabi_fmul+0x20c>
    7280:	2801      	cmp	r0, #1
    7282:	d000      	beq.n	7286 <__aeabi_fmul+0x8a>
    7284:	e0a2      	b.n	73cc <__aeabi_fmul+0x1d0>
    7286:	2500      	movs	r5, #0
    7288:	2600      	movs	r6, #0
    728a:	4002      	ands	r2, r0
    728c:	b2d4      	uxtb	r4, r2
    728e:	0276      	lsls	r6, r6, #9
    7290:	05ed      	lsls	r5, r5, #23
    7292:	0a76      	lsrs	r6, r6, #9
    7294:	432e      	orrs	r6, r5
    7296:	07e4      	lsls	r4, r4, #31
    7298:	4326      	orrs	r6, r4
    729a:	0030      	movs	r0, r6
    729c:	bc1c      	pop	{r2, r3, r4}
    729e:	4690      	mov	r8, r2
    72a0:	4699      	mov	r9, r3
    72a2:	46a2      	mov	sl, r4
    72a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72a6:	2e00      	cmp	r6, #0
    72a8:	d11a      	bne.n	72e0 <__aeabi_fmul+0xe4>
    72aa:	2304      	movs	r3, #4
    72ac:	469a      	mov	sl, r3
    72ae:	3b03      	subs	r3, #3
    72b0:	4699      	mov	r9, r3
    72b2:	e7ba      	b.n	722a <__aeabi_fmul+0x2e>
    72b4:	002a      	movs	r2, r5
    72b6:	1e51      	subs	r1, r2, #1
    72b8:	418a      	sbcs	r2, r1
    72ba:	1c90      	adds	r0, r2, #2
    72bc:	e7c6      	b.n	724c <__aeabi_fmul+0x50>
    72be:	2001      	movs	r0, #1
    72c0:	2d00      	cmp	r5, #0
    72c2:	d0c3      	beq.n	724c <__aeabi_fmul+0x50>
    72c4:	0028      	movs	r0, r5
    72c6:	f002 f907 	bl	94d8 <__clzsi2>
    72ca:	1f43      	subs	r3, r0, #5
    72cc:	3076      	adds	r0, #118	; 0x76
    72ce:	409d      	lsls	r5, r3
    72d0:	4243      	negs	r3, r0
    72d2:	2000      	movs	r0, #0
    72d4:	e7ba      	b.n	724c <__aeabi_fmul+0x50>
    72d6:	2401      	movs	r4, #1
    72d8:	25ff      	movs	r5, #255	; 0xff
    72da:	4014      	ands	r4, r2
    72dc:	2600      	movs	r6, #0
    72de:	e7d6      	b.n	728e <__aeabi_fmul+0x92>
    72e0:	0030      	movs	r0, r6
    72e2:	f002 f8f9 	bl	94d8 <__clzsi2>
    72e6:	1f43      	subs	r3, r0, #5
    72e8:	409e      	lsls	r6, r3
    72ea:	2300      	movs	r3, #0
    72ec:	3076      	adds	r0, #118	; 0x76
    72ee:	4247      	negs	r7, r0
    72f0:	469a      	mov	sl, r3
    72f2:	4699      	mov	r9, r3
    72f4:	e799      	b.n	722a <__aeabi_fmul+0x2e>
    72f6:	230c      	movs	r3, #12
    72f8:	469a      	mov	sl, r3
    72fa:	3b09      	subs	r3, #9
    72fc:	4699      	mov	r9, r3
    72fe:	e794      	b.n	722a <__aeabi_fmul+0x2e>
    7300:	2680      	movs	r6, #128	; 0x80
    7302:	2400      	movs	r4, #0
    7304:	03f6      	lsls	r6, r6, #15
    7306:	25ff      	movs	r5, #255	; 0xff
    7308:	e7c1      	b.n	728e <__aeabi_fmul+0x92>
    730a:	0035      	movs	r5, r6
    730c:	4648      	mov	r0, r9
    730e:	e7b2      	b.n	7276 <__aeabi_fmul+0x7a>
    7310:	0035      	movs	r5, r6
    7312:	0022      	movs	r2, r4
    7314:	4648      	mov	r0, r9
    7316:	e7ae      	b.n	7276 <__aeabi_fmul+0x7a>
    7318:	0429      	lsls	r1, r5, #16
    731a:	0c09      	lsrs	r1, r1, #16
    731c:	0008      	movs	r0, r1
    731e:	0c37      	lsrs	r7, r6, #16
    7320:	0436      	lsls	r6, r6, #16
    7322:	0c36      	lsrs	r6, r6, #16
    7324:	0c2c      	lsrs	r4, r5, #16
    7326:	4379      	muls	r1, r7
    7328:	4370      	muls	r0, r6
    732a:	4367      	muls	r7, r4
    732c:	4374      	muls	r4, r6
    732e:	0c06      	lsrs	r6, r0, #16
    7330:	1864      	adds	r4, r4, r1
    7332:	1936      	adds	r6, r6, r4
    7334:	42b1      	cmp	r1, r6
    7336:	d903      	bls.n	7340 <__aeabi_fmul+0x144>
    7338:	2180      	movs	r1, #128	; 0x80
    733a:	0249      	lsls	r1, r1, #9
    733c:	4688      	mov	r8, r1
    733e:	4447      	add	r7, r8
    7340:	0400      	lsls	r0, r0, #16
    7342:	0c00      	lsrs	r0, r0, #16
    7344:	0431      	lsls	r1, r6, #16
    7346:	1809      	adds	r1, r1, r0
    7348:	018d      	lsls	r5, r1, #6
    734a:	1e68      	subs	r0, r5, #1
    734c:	4185      	sbcs	r5, r0
    734e:	0e89      	lsrs	r1, r1, #26
    7350:	4329      	orrs	r1, r5
    7352:	0c35      	lsrs	r5, r6, #16
    7354:	19ed      	adds	r5, r5, r7
    7356:	01ad      	lsls	r5, r5, #6
    7358:	430d      	orrs	r5, r1
    735a:	0129      	lsls	r1, r5, #4
    735c:	d504      	bpl.n	7368 <__aeabi_fmul+0x16c>
    735e:	2301      	movs	r3, #1
    7360:	0869      	lsrs	r1, r5, #1
    7362:	401d      	ands	r5, r3
    7364:	4663      	mov	r3, ip
    7366:	430d      	orrs	r5, r1
    7368:	0019      	movs	r1, r3
    736a:	317f      	adds	r1, #127	; 0x7f
    736c:	2900      	cmp	r1, #0
    736e:	dd25      	ble.n	73bc <__aeabi_fmul+0x1c0>
    7370:	0768      	lsls	r0, r5, #29
    7372:	d004      	beq.n	737e <__aeabi_fmul+0x182>
    7374:	200f      	movs	r0, #15
    7376:	4028      	ands	r0, r5
    7378:	2804      	cmp	r0, #4
    737a:	d000      	beq.n	737e <__aeabi_fmul+0x182>
    737c:	3504      	adds	r5, #4
    737e:	0128      	lsls	r0, r5, #4
    7380:	d503      	bpl.n	738a <__aeabi_fmul+0x18e>
    7382:	4927      	ldr	r1, [pc, #156]	; (7420 <__aeabi_fmul+0x224>)
    7384:	3380      	adds	r3, #128	; 0x80
    7386:	400d      	ands	r5, r1
    7388:	0019      	movs	r1, r3
    738a:	29fe      	cmp	r1, #254	; 0xfe
    738c:	dca3      	bgt.n	72d6 <__aeabi_fmul+0xda>
    738e:	2401      	movs	r4, #1
    7390:	01ad      	lsls	r5, r5, #6
    7392:	0a6e      	lsrs	r6, r5, #9
    7394:	4014      	ands	r4, r2
    7396:	b2cd      	uxtb	r5, r1
    7398:	e779      	b.n	728e <__aeabi_fmul+0x92>
    739a:	2080      	movs	r0, #128	; 0x80
    739c:	03c0      	lsls	r0, r0, #15
    739e:	4206      	tst	r6, r0
    73a0:	d007      	beq.n	73b2 <__aeabi_fmul+0x1b6>
    73a2:	4205      	tst	r5, r0
    73a4:	d105      	bne.n	73b2 <__aeabi_fmul+0x1b6>
    73a6:	4328      	orrs	r0, r5
    73a8:	0246      	lsls	r6, r0, #9
    73aa:	0a76      	lsrs	r6, r6, #9
    73ac:	4644      	mov	r4, r8
    73ae:	25ff      	movs	r5, #255	; 0xff
    73b0:	e76d      	b.n	728e <__aeabi_fmul+0x92>
    73b2:	4306      	orrs	r6, r0
    73b4:	0276      	lsls	r6, r6, #9
    73b6:	0a76      	lsrs	r6, r6, #9
    73b8:	25ff      	movs	r5, #255	; 0xff
    73ba:	e768      	b.n	728e <__aeabi_fmul+0x92>
    73bc:	2401      	movs	r4, #1
    73be:	1a61      	subs	r1, r4, r1
    73c0:	291b      	cmp	r1, #27
    73c2:	dd05      	ble.n	73d0 <__aeabi_fmul+0x1d4>
    73c4:	4014      	ands	r4, r2
    73c6:	2500      	movs	r5, #0
    73c8:	2600      	movs	r6, #0
    73ca:	e760      	b.n	728e <__aeabi_fmul+0x92>
    73cc:	4663      	mov	r3, ip
    73ce:	e7cb      	b.n	7368 <__aeabi_fmul+0x16c>
    73d0:	002e      	movs	r6, r5
    73d2:	2320      	movs	r3, #32
    73d4:	40ce      	lsrs	r6, r1
    73d6:	1a59      	subs	r1, r3, r1
    73d8:	408d      	lsls	r5, r1
    73da:	1e6b      	subs	r3, r5, #1
    73dc:	419d      	sbcs	r5, r3
    73de:	432e      	orrs	r6, r5
    73e0:	0773      	lsls	r3, r6, #29
    73e2:	d004      	beq.n	73ee <__aeabi_fmul+0x1f2>
    73e4:	230f      	movs	r3, #15
    73e6:	4033      	ands	r3, r6
    73e8:	2b04      	cmp	r3, #4
    73ea:	d000      	beq.n	73ee <__aeabi_fmul+0x1f2>
    73ec:	3604      	adds	r6, #4
    73ee:	0173      	lsls	r3, r6, #5
    73f0:	d504      	bpl.n	73fc <__aeabi_fmul+0x200>
    73f2:	2401      	movs	r4, #1
    73f4:	2501      	movs	r5, #1
    73f6:	4014      	ands	r4, r2
    73f8:	2600      	movs	r6, #0
    73fa:	e748      	b.n	728e <__aeabi_fmul+0x92>
    73fc:	2401      	movs	r4, #1
    73fe:	01b6      	lsls	r6, r6, #6
    7400:	0a76      	lsrs	r6, r6, #9
    7402:	4014      	ands	r4, r2
    7404:	2500      	movs	r5, #0
    7406:	e742      	b.n	728e <__aeabi_fmul+0x92>
    7408:	2680      	movs	r6, #128	; 0x80
    740a:	2401      	movs	r4, #1
    740c:	03f6      	lsls	r6, r6, #15
    740e:	432e      	orrs	r6, r5
    7410:	0276      	lsls	r6, r6, #9
    7412:	0a76      	lsrs	r6, r6, #9
    7414:	4014      	ands	r4, r2
    7416:	25ff      	movs	r5, #255	; 0xff
    7418:	e739      	b.n	728e <__aeabi_fmul+0x92>
    741a:	46c0      	nop			; (mov r8, r8)
    741c:	0000eb40 	.word	0x0000eb40
    7420:	f7ffffff 	.word	0xf7ffffff

00007424 <__aeabi_fsub>:
    7424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7426:	024a      	lsls	r2, r1, #9
    7428:	004e      	lsls	r6, r1, #1
    742a:	0243      	lsls	r3, r0, #9
    742c:	0044      	lsls	r4, r0, #1
    742e:	0e24      	lsrs	r4, r4, #24
    7430:	0fc5      	lsrs	r5, r0, #31
    7432:	099b      	lsrs	r3, r3, #6
    7434:	0e36      	lsrs	r6, r6, #24
    7436:	0fc9      	lsrs	r1, r1, #31
    7438:	0992      	lsrs	r2, r2, #6
    743a:	2eff      	cmp	r6, #255	; 0xff
    743c:	d100      	bne.n	7440 <__aeabi_fsub+0x1c>
    743e:	e083      	b.n	7548 <__aeabi_fsub+0x124>
    7440:	2001      	movs	r0, #1
    7442:	4041      	eors	r1, r0
    7444:	1ba0      	subs	r0, r4, r6
    7446:	42a9      	cmp	r1, r5
    7448:	d05c      	beq.n	7504 <__aeabi_fsub+0xe0>
    744a:	2800      	cmp	r0, #0
    744c:	dc00      	bgt.n	7450 <__aeabi_fsub+0x2c>
    744e:	e095      	b.n	757c <__aeabi_fsub+0x158>
    7450:	2e00      	cmp	r6, #0
    7452:	d11c      	bne.n	748e <__aeabi_fsub+0x6a>
    7454:	2a00      	cmp	r2, #0
    7456:	d000      	beq.n	745a <__aeabi_fsub+0x36>
    7458:	e081      	b.n	755e <__aeabi_fsub+0x13a>
    745a:	075a      	lsls	r2, r3, #29
    745c:	d004      	beq.n	7468 <__aeabi_fsub+0x44>
    745e:	220f      	movs	r2, #15
    7460:	401a      	ands	r2, r3
    7462:	2a04      	cmp	r2, #4
    7464:	d000      	beq.n	7468 <__aeabi_fsub+0x44>
    7466:	3304      	adds	r3, #4
    7468:	015a      	lsls	r2, r3, #5
    746a:	d53b      	bpl.n	74e4 <__aeabi_fsub+0xc0>
    746c:	3401      	adds	r4, #1
    746e:	2cff      	cmp	r4, #255	; 0xff
    7470:	d100      	bne.n	7474 <__aeabi_fsub+0x50>
    7472:	e091      	b.n	7598 <__aeabi_fsub+0x174>
    7474:	2001      	movs	r0, #1
    7476:	019b      	lsls	r3, r3, #6
    7478:	0a5b      	lsrs	r3, r3, #9
    747a:	b2e4      	uxtb	r4, r4
    747c:	4005      	ands	r5, r0
    747e:	025b      	lsls	r3, r3, #9
    7480:	05e4      	lsls	r4, r4, #23
    7482:	0a5b      	lsrs	r3, r3, #9
    7484:	07ed      	lsls	r5, r5, #31
    7486:	4323      	orrs	r3, r4
    7488:	432b      	orrs	r3, r5
    748a:	0018      	movs	r0, r3
    748c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    748e:	2cff      	cmp	r4, #255	; 0xff
    7490:	d0e3      	beq.n	745a <__aeabi_fsub+0x36>
    7492:	2180      	movs	r1, #128	; 0x80
    7494:	04c9      	lsls	r1, r1, #19
    7496:	430a      	orrs	r2, r1
    7498:	281b      	cmp	r0, #27
    749a:	dd00      	ble.n	749e <__aeabi_fsub+0x7a>
    749c:	e090      	b.n	75c0 <__aeabi_fsub+0x19c>
    749e:	0016      	movs	r6, r2
    74a0:	2120      	movs	r1, #32
    74a2:	40c6      	lsrs	r6, r0
    74a4:	1a08      	subs	r0, r1, r0
    74a6:	4082      	lsls	r2, r0
    74a8:	1e51      	subs	r1, r2, #1
    74aa:	418a      	sbcs	r2, r1
    74ac:	4332      	orrs	r2, r6
    74ae:	1a9b      	subs	r3, r3, r2
    74b0:	015a      	lsls	r2, r3, #5
    74b2:	d515      	bpl.n	74e0 <__aeabi_fsub+0xbc>
    74b4:	019b      	lsls	r3, r3, #6
    74b6:	099e      	lsrs	r6, r3, #6
    74b8:	0030      	movs	r0, r6
    74ba:	f002 f80d 	bl	94d8 <__clzsi2>
    74be:	3805      	subs	r0, #5
    74c0:	4086      	lsls	r6, r0
    74c2:	4284      	cmp	r4, r0
    74c4:	dc6c      	bgt.n	75a0 <__aeabi_fsub+0x17c>
    74c6:	1b04      	subs	r4, r0, r4
    74c8:	0033      	movs	r3, r6
    74ca:	2020      	movs	r0, #32
    74cc:	3401      	adds	r4, #1
    74ce:	40e3      	lsrs	r3, r4
    74d0:	1b04      	subs	r4, r0, r4
    74d2:	40a6      	lsls	r6, r4
    74d4:	1e72      	subs	r2, r6, #1
    74d6:	4196      	sbcs	r6, r2
    74d8:	2400      	movs	r4, #0
    74da:	4333      	orrs	r3, r6
    74dc:	e7bd      	b.n	745a <__aeabi_fsub+0x36>
    74de:	000d      	movs	r5, r1
    74e0:	075a      	lsls	r2, r3, #29
    74e2:	d1bc      	bne.n	745e <__aeabi_fsub+0x3a>
    74e4:	08df      	lsrs	r7, r3, #3
    74e6:	2301      	movs	r3, #1
    74e8:	401d      	ands	r5, r3
    74ea:	2cff      	cmp	r4, #255	; 0xff
    74ec:	d133      	bne.n	7556 <__aeabi_fsub+0x132>
    74ee:	2f00      	cmp	r7, #0
    74f0:	d100      	bne.n	74f4 <__aeabi_fsub+0xd0>
    74f2:	e090      	b.n	7616 <__aeabi_fsub+0x1f2>
    74f4:	2280      	movs	r2, #128	; 0x80
    74f6:	03d2      	lsls	r2, r2, #15
    74f8:	0013      	movs	r3, r2
    74fa:	433b      	orrs	r3, r7
    74fc:	025b      	lsls	r3, r3, #9
    74fe:	0a5b      	lsrs	r3, r3, #9
    7500:	24ff      	movs	r4, #255	; 0xff
    7502:	e7bc      	b.n	747e <__aeabi_fsub+0x5a>
    7504:	2800      	cmp	r0, #0
    7506:	dd4f      	ble.n	75a8 <__aeabi_fsub+0x184>
    7508:	2e00      	cmp	r6, #0
    750a:	d02e      	beq.n	756a <__aeabi_fsub+0x146>
    750c:	2cff      	cmp	r4, #255	; 0xff
    750e:	d0a4      	beq.n	745a <__aeabi_fsub+0x36>
    7510:	2580      	movs	r5, #128	; 0x80
    7512:	04ed      	lsls	r5, r5, #19
    7514:	432a      	orrs	r2, r5
    7516:	281b      	cmp	r0, #27
    7518:	dd00      	ble.n	751c <__aeabi_fsub+0xf8>
    751a:	e097      	b.n	764c <__aeabi_fsub+0x228>
    751c:	0016      	movs	r6, r2
    751e:	2520      	movs	r5, #32
    7520:	40c6      	lsrs	r6, r0
    7522:	1a28      	subs	r0, r5, r0
    7524:	4082      	lsls	r2, r0
    7526:	1e50      	subs	r0, r2, #1
    7528:	4182      	sbcs	r2, r0
    752a:	4332      	orrs	r2, r6
    752c:	189b      	adds	r3, r3, r2
    752e:	015a      	lsls	r2, r3, #5
    7530:	d5d5      	bpl.n	74de <__aeabi_fsub+0xba>
    7532:	3401      	adds	r4, #1
    7534:	2cff      	cmp	r4, #255	; 0xff
    7536:	d06d      	beq.n	7614 <__aeabi_fsub+0x1f0>
    7538:	2201      	movs	r2, #1
    753a:	487b      	ldr	r0, [pc, #492]	; (7728 <__aeabi_fsub+0x304>)
    753c:	401a      	ands	r2, r3
    753e:	085b      	lsrs	r3, r3, #1
    7540:	4003      	ands	r3, r0
    7542:	4313      	orrs	r3, r2
    7544:	000d      	movs	r5, r1
    7546:	e788      	b.n	745a <__aeabi_fsub+0x36>
    7548:	2a00      	cmp	r2, #0
    754a:	d000      	beq.n	754e <__aeabi_fsub+0x12a>
    754c:	e77a      	b.n	7444 <__aeabi_fsub+0x20>
    754e:	e777      	b.n	7440 <__aeabi_fsub+0x1c>
    7550:	1e03      	subs	r3, r0, #0
    7552:	d1c5      	bne.n	74e0 <__aeabi_fsub+0xbc>
    7554:	2500      	movs	r5, #0
    7556:	027b      	lsls	r3, r7, #9
    7558:	0a5b      	lsrs	r3, r3, #9
    755a:	b2e4      	uxtb	r4, r4
    755c:	e78f      	b.n	747e <__aeabi_fsub+0x5a>
    755e:	3801      	subs	r0, #1
    7560:	2800      	cmp	r0, #0
    7562:	d0a4      	beq.n	74ae <__aeabi_fsub+0x8a>
    7564:	2cff      	cmp	r4, #255	; 0xff
    7566:	d197      	bne.n	7498 <__aeabi_fsub+0x74>
    7568:	e777      	b.n	745a <__aeabi_fsub+0x36>
    756a:	2a00      	cmp	r2, #0
    756c:	d100      	bne.n	7570 <__aeabi_fsub+0x14c>
    756e:	e774      	b.n	745a <__aeabi_fsub+0x36>
    7570:	3801      	subs	r0, #1
    7572:	2800      	cmp	r0, #0
    7574:	d0da      	beq.n	752c <__aeabi_fsub+0x108>
    7576:	2cff      	cmp	r4, #255	; 0xff
    7578:	d1cd      	bne.n	7516 <__aeabi_fsub+0xf2>
    757a:	e76e      	b.n	745a <__aeabi_fsub+0x36>
    757c:	2800      	cmp	r0, #0
    757e:	d121      	bne.n	75c4 <__aeabi_fsub+0x1a0>
    7580:	1c60      	adds	r0, r4, #1
    7582:	b2c0      	uxtb	r0, r0
    7584:	2801      	cmp	r0, #1
    7586:	dd58      	ble.n	763a <__aeabi_fsub+0x216>
    7588:	2780      	movs	r7, #128	; 0x80
    758a:	1a9e      	subs	r6, r3, r2
    758c:	04ff      	lsls	r7, r7, #19
    758e:	4037      	ands	r7, r6
    7590:	d02f      	beq.n	75f2 <__aeabi_fsub+0x1ce>
    7592:	1ad6      	subs	r6, r2, r3
    7594:	000d      	movs	r5, r1
    7596:	e78f      	b.n	74b8 <__aeabi_fsub+0x94>
    7598:	2301      	movs	r3, #1
    759a:	401d      	ands	r5, r3
    759c:	2300      	movs	r3, #0
    759e:	e76e      	b.n	747e <__aeabi_fsub+0x5a>
    75a0:	4b62      	ldr	r3, [pc, #392]	; (772c <__aeabi_fsub+0x308>)
    75a2:	1a24      	subs	r4, r4, r0
    75a4:	4033      	ands	r3, r6
    75a6:	e758      	b.n	745a <__aeabi_fsub+0x36>
    75a8:	2800      	cmp	r0, #0
    75aa:	d151      	bne.n	7650 <__aeabi_fsub+0x22c>
    75ac:	1c60      	adds	r0, r4, #1
    75ae:	b2c6      	uxtb	r6, r0
    75b0:	2e01      	cmp	r6, #1
    75b2:	dd33      	ble.n	761c <__aeabi_fsub+0x1f8>
    75b4:	28ff      	cmp	r0, #255	; 0xff
    75b6:	d02d      	beq.n	7614 <__aeabi_fsub+0x1f0>
    75b8:	189b      	adds	r3, r3, r2
    75ba:	085b      	lsrs	r3, r3, #1
    75bc:	0004      	movs	r4, r0
    75be:	e74c      	b.n	745a <__aeabi_fsub+0x36>
    75c0:	2201      	movs	r2, #1
    75c2:	e774      	b.n	74ae <__aeabi_fsub+0x8a>
    75c4:	2c00      	cmp	r4, #0
    75c6:	d01a      	beq.n	75fe <__aeabi_fsub+0x1da>
    75c8:	2eff      	cmp	r6, #255	; 0xff
    75ca:	d01f      	beq.n	760c <__aeabi_fsub+0x1e8>
    75cc:	2480      	movs	r4, #128	; 0x80
    75ce:	04e4      	lsls	r4, r4, #19
    75d0:	4240      	negs	r0, r0
    75d2:	4323      	orrs	r3, r4
    75d4:	281b      	cmp	r0, #27
    75d6:	dd00      	ble.n	75da <__aeabi_fsub+0x1b6>
    75d8:	e096      	b.n	7708 <__aeabi_fsub+0x2e4>
    75da:	001d      	movs	r5, r3
    75dc:	2420      	movs	r4, #32
    75de:	40c5      	lsrs	r5, r0
    75e0:	1a20      	subs	r0, r4, r0
    75e2:	4083      	lsls	r3, r0
    75e4:	1e58      	subs	r0, r3, #1
    75e6:	4183      	sbcs	r3, r0
    75e8:	432b      	orrs	r3, r5
    75ea:	1ad3      	subs	r3, r2, r3
    75ec:	0034      	movs	r4, r6
    75ee:	000d      	movs	r5, r1
    75f0:	e75e      	b.n	74b0 <__aeabi_fsub+0x8c>
    75f2:	2e00      	cmp	r6, #0
    75f4:	d000      	beq.n	75f8 <__aeabi_fsub+0x1d4>
    75f6:	e75f      	b.n	74b8 <__aeabi_fsub+0x94>
    75f8:	2500      	movs	r5, #0
    75fa:	2400      	movs	r4, #0
    75fc:	e7ab      	b.n	7556 <__aeabi_fsub+0x132>
    75fe:	2b00      	cmp	r3, #0
    7600:	d044      	beq.n	768c <__aeabi_fsub+0x268>
    7602:	43c0      	mvns	r0, r0
    7604:	2800      	cmp	r0, #0
    7606:	d0f0      	beq.n	75ea <__aeabi_fsub+0x1c6>
    7608:	2eff      	cmp	r6, #255	; 0xff
    760a:	d1e3      	bne.n	75d4 <__aeabi_fsub+0x1b0>
    760c:	0013      	movs	r3, r2
    760e:	24ff      	movs	r4, #255	; 0xff
    7610:	000d      	movs	r5, r1
    7612:	e722      	b.n	745a <__aeabi_fsub+0x36>
    7614:	000d      	movs	r5, r1
    7616:	24ff      	movs	r4, #255	; 0xff
    7618:	2300      	movs	r3, #0
    761a:	e730      	b.n	747e <__aeabi_fsub+0x5a>
    761c:	2c00      	cmp	r4, #0
    761e:	d15d      	bne.n	76dc <__aeabi_fsub+0x2b8>
    7620:	2b00      	cmp	r3, #0
    7622:	d07d      	beq.n	7720 <__aeabi_fsub+0x2fc>
    7624:	2a00      	cmp	r2, #0
    7626:	d100      	bne.n	762a <__aeabi_fsub+0x206>
    7628:	e717      	b.n	745a <__aeabi_fsub+0x36>
    762a:	189b      	adds	r3, r3, r2
    762c:	015a      	lsls	r2, r3, #5
    762e:	d400      	bmi.n	7632 <__aeabi_fsub+0x20e>
    7630:	e756      	b.n	74e0 <__aeabi_fsub+0xbc>
    7632:	4a3e      	ldr	r2, [pc, #248]	; (772c <__aeabi_fsub+0x308>)
    7634:	0004      	movs	r4, r0
    7636:	4013      	ands	r3, r2
    7638:	e70f      	b.n	745a <__aeabi_fsub+0x36>
    763a:	2c00      	cmp	r4, #0
    763c:	d11e      	bne.n	767c <__aeabi_fsub+0x258>
    763e:	2b00      	cmp	r3, #0
    7640:	d12f      	bne.n	76a2 <__aeabi_fsub+0x27e>
    7642:	2a00      	cmp	r2, #0
    7644:	d065      	beq.n	7712 <__aeabi_fsub+0x2ee>
    7646:	0013      	movs	r3, r2
    7648:	000d      	movs	r5, r1
    764a:	e706      	b.n	745a <__aeabi_fsub+0x36>
    764c:	2201      	movs	r2, #1
    764e:	e76d      	b.n	752c <__aeabi_fsub+0x108>
    7650:	2c00      	cmp	r4, #0
    7652:	d11f      	bne.n	7694 <__aeabi_fsub+0x270>
    7654:	2b00      	cmp	r3, #0
    7656:	d059      	beq.n	770c <__aeabi_fsub+0x2e8>
    7658:	43c0      	mvns	r0, r0
    765a:	2800      	cmp	r0, #0
    765c:	d00b      	beq.n	7676 <__aeabi_fsub+0x252>
    765e:	2eff      	cmp	r6, #255	; 0xff
    7660:	d04f      	beq.n	7702 <__aeabi_fsub+0x2de>
    7662:	281b      	cmp	r0, #27
    7664:	dc5e      	bgt.n	7724 <__aeabi_fsub+0x300>
    7666:	001d      	movs	r5, r3
    7668:	2420      	movs	r4, #32
    766a:	40c5      	lsrs	r5, r0
    766c:	1a20      	subs	r0, r4, r0
    766e:	4083      	lsls	r3, r0
    7670:	1e58      	subs	r0, r3, #1
    7672:	4183      	sbcs	r3, r0
    7674:	432b      	orrs	r3, r5
    7676:	189b      	adds	r3, r3, r2
    7678:	0034      	movs	r4, r6
    767a:	e758      	b.n	752e <__aeabi_fsub+0x10a>
    767c:	2b00      	cmp	r3, #0
    767e:	d11c      	bne.n	76ba <__aeabi_fsub+0x296>
    7680:	2a00      	cmp	r2, #0
    7682:	d049      	beq.n	7718 <__aeabi_fsub+0x2f4>
    7684:	0013      	movs	r3, r2
    7686:	000d      	movs	r5, r1
    7688:	24ff      	movs	r4, #255	; 0xff
    768a:	e6e6      	b.n	745a <__aeabi_fsub+0x36>
    768c:	0013      	movs	r3, r2
    768e:	0034      	movs	r4, r6
    7690:	000d      	movs	r5, r1
    7692:	e6e2      	b.n	745a <__aeabi_fsub+0x36>
    7694:	2eff      	cmp	r6, #255	; 0xff
    7696:	d034      	beq.n	7702 <__aeabi_fsub+0x2de>
    7698:	2480      	movs	r4, #128	; 0x80
    769a:	04e4      	lsls	r4, r4, #19
    769c:	4240      	negs	r0, r0
    769e:	4323      	orrs	r3, r4
    76a0:	e7df      	b.n	7662 <__aeabi_fsub+0x23e>
    76a2:	2a00      	cmp	r2, #0
    76a4:	d100      	bne.n	76a8 <__aeabi_fsub+0x284>
    76a6:	e6d8      	b.n	745a <__aeabi_fsub+0x36>
    76a8:	2780      	movs	r7, #128	; 0x80
    76aa:	1a98      	subs	r0, r3, r2
    76ac:	04ff      	lsls	r7, r7, #19
    76ae:	4007      	ands	r7, r0
    76b0:	d100      	bne.n	76b4 <__aeabi_fsub+0x290>
    76b2:	e74d      	b.n	7550 <__aeabi_fsub+0x12c>
    76b4:	1ad3      	subs	r3, r2, r3
    76b6:	000d      	movs	r5, r1
    76b8:	e6cf      	b.n	745a <__aeabi_fsub+0x36>
    76ba:	24ff      	movs	r4, #255	; 0xff
    76bc:	2a00      	cmp	r2, #0
    76be:	d100      	bne.n	76c2 <__aeabi_fsub+0x29e>
    76c0:	e6cb      	b.n	745a <__aeabi_fsub+0x36>
    76c2:	2080      	movs	r0, #128	; 0x80
    76c4:	08db      	lsrs	r3, r3, #3
    76c6:	03c0      	lsls	r0, r0, #15
    76c8:	4203      	tst	r3, r0
    76ca:	d004      	beq.n	76d6 <__aeabi_fsub+0x2b2>
    76cc:	08d2      	lsrs	r2, r2, #3
    76ce:	4202      	tst	r2, r0
    76d0:	d101      	bne.n	76d6 <__aeabi_fsub+0x2b2>
    76d2:	0013      	movs	r3, r2
    76d4:	000d      	movs	r5, r1
    76d6:	00db      	lsls	r3, r3, #3
    76d8:	24ff      	movs	r4, #255	; 0xff
    76da:	e6be      	b.n	745a <__aeabi_fsub+0x36>
    76dc:	2b00      	cmp	r3, #0
    76de:	d010      	beq.n	7702 <__aeabi_fsub+0x2de>
    76e0:	24ff      	movs	r4, #255	; 0xff
    76e2:	2a00      	cmp	r2, #0
    76e4:	d100      	bne.n	76e8 <__aeabi_fsub+0x2c4>
    76e6:	e6b8      	b.n	745a <__aeabi_fsub+0x36>
    76e8:	2080      	movs	r0, #128	; 0x80
    76ea:	08db      	lsrs	r3, r3, #3
    76ec:	03c0      	lsls	r0, r0, #15
    76ee:	4203      	tst	r3, r0
    76f0:	d003      	beq.n	76fa <__aeabi_fsub+0x2d6>
    76f2:	08d2      	lsrs	r2, r2, #3
    76f4:	4202      	tst	r2, r0
    76f6:	d100      	bne.n	76fa <__aeabi_fsub+0x2d6>
    76f8:	0013      	movs	r3, r2
    76fa:	00db      	lsls	r3, r3, #3
    76fc:	000d      	movs	r5, r1
    76fe:	24ff      	movs	r4, #255	; 0xff
    7700:	e6ab      	b.n	745a <__aeabi_fsub+0x36>
    7702:	0013      	movs	r3, r2
    7704:	24ff      	movs	r4, #255	; 0xff
    7706:	e6a8      	b.n	745a <__aeabi_fsub+0x36>
    7708:	2301      	movs	r3, #1
    770a:	e76e      	b.n	75ea <__aeabi_fsub+0x1c6>
    770c:	0013      	movs	r3, r2
    770e:	0034      	movs	r4, r6
    7710:	e6a3      	b.n	745a <__aeabi_fsub+0x36>
    7712:	2700      	movs	r7, #0
    7714:	2500      	movs	r5, #0
    7716:	e71e      	b.n	7556 <__aeabi_fsub+0x132>
    7718:	2780      	movs	r7, #128	; 0x80
    771a:	2500      	movs	r5, #0
    771c:	03ff      	lsls	r7, r7, #15
    771e:	e6e9      	b.n	74f4 <__aeabi_fsub+0xd0>
    7720:	0013      	movs	r3, r2
    7722:	e69a      	b.n	745a <__aeabi_fsub+0x36>
    7724:	2301      	movs	r3, #1
    7726:	e7a6      	b.n	7676 <__aeabi_fsub+0x252>
    7728:	7dffffff 	.word	0x7dffffff
    772c:	fbffffff 	.word	0xfbffffff

00007730 <__aeabi_i2f>:
    7730:	b570      	push	{r4, r5, r6, lr}
    7732:	2800      	cmp	r0, #0
    7734:	d030      	beq.n	7798 <__aeabi_i2f+0x68>
    7736:	17c3      	asrs	r3, r0, #31
    7738:	18c5      	adds	r5, r0, r3
    773a:	405d      	eors	r5, r3
    773c:	0fc4      	lsrs	r4, r0, #31
    773e:	0028      	movs	r0, r5
    7740:	f001 feca 	bl	94d8 <__clzsi2>
    7744:	239e      	movs	r3, #158	; 0x9e
    7746:	1a1b      	subs	r3, r3, r0
    7748:	2b96      	cmp	r3, #150	; 0x96
    774a:	dc0d      	bgt.n	7768 <__aeabi_i2f+0x38>
    774c:	2296      	movs	r2, #150	; 0x96
    774e:	1ad2      	subs	r2, r2, r3
    7750:	4095      	lsls	r5, r2
    7752:	026a      	lsls	r2, r5, #9
    7754:	0a52      	lsrs	r2, r2, #9
    7756:	b2d8      	uxtb	r0, r3
    7758:	0252      	lsls	r2, r2, #9
    775a:	05c0      	lsls	r0, r0, #23
    775c:	0a52      	lsrs	r2, r2, #9
    775e:	07e4      	lsls	r4, r4, #31
    7760:	4302      	orrs	r2, r0
    7762:	4322      	orrs	r2, r4
    7764:	0010      	movs	r0, r2
    7766:	bd70      	pop	{r4, r5, r6, pc}
    7768:	2b99      	cmp	r3, #153	; 0x99
    776a:	dc19      	bgt.n	77a0 <__aeabi_i2f+0x70>
    776c:	2299      	movs	r2, #153	; 0x99
    776e:	1ad2      	subs	r2, r2, r3
    7770:	4095      	lsls	r5, r2
    7772:	4a12      	ldr	r2, [pc, #72]	; (77bc <__aeabi_i2f+0x8c>)
    7774:	402a      	ands	r2, r5
    7776:	0769      	lsls	r1, r5, #29
    7778:	d004      	beq.n	7784 <__aeabi_i2f+0x54>
    777a:	210f      	movs	r1, #15
    777c:	400d      	ands	r5, r1
    777e:	2d04      	cmp	r5, #4
    7780:	d000      	beq.n	7784 <__aeabi_i2f+0x54>
    7782:	3204      	adds	r2, #4
    7784:	0151      	lsls	r1, r2, #5
    7786:	d503      	bpl.n	7790 <__aeabi_i2f+0x60>
    7788:	4b0c      	ldr	r3, [pc, #48]	; (77bc <__aeabi_i2f+0x8c>)
    778a:	401a      	ands	r2, r3
    778c:	239f      	movs	r3, #159	; 0x9f
    778e:	1a1b      	subs	r3, r3, r0
    7790:	0192      	lsls	r2, r2, #6
    7792:	0a52      	lsrs	r2, r2, #9
    7794:	b2d8      	uxtb	r0, r3
    7796:	e7df      	b.n	7758 <__aeabi_i2f+0x28>
    7798:	2400      	movs	r4, #0
    779a:	2000      	movs	r0, #0
    779c:	2200      	movs	r2, #0
    779e:	e7db      	b.n	7758 <__aeabi_i2f+0x28>
    77a0:	2205      	movs	r2, #5
    77a2:	002e      	movs	r6, r5
    77a4:	1a12      	subs	r2, r2, r0
    77a6:	21b9      	movs	r1, #185	; 0xb9
    77a8:	40d6      	lsrs	r6, r2
    77aa:	002a      	movs	r2, r5
    77ac:	1ac9      	subs	r1, r1, r3
    77ae:	408a      	lsls	r2, r1
    77b0:	1e55      	subs	r5, r2, #1
    77b2:	41aa      	sbcs	r2, r5
    77b4:	0035      	movs	r5, r6
    77b6:	4315      	orrs	r5, r2
    77b8:	e7db      	b.n	7772 <__aeabi_i2f+0x42>
    77ba:	46c0      	nop			; (mov r8, r8)
    77bc:	fbffffff 	.word	0xfbffffff

000077c0 <__aeabi_dadd>:
    77c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    77c2:	4656      	mov	r6, sl
    77c4:	465f      	mov	r7, fp
    77c6:	464d      	mov	r5, r9
    77c8:	4644      	mov	r4, r8
    77ca:	b4f0      	push	{r4, r5, r6, r7}
    77cc:	000f      	movs	r7, r1
    77ce:	0ffd      	lsrs	r5, r7, #31
    77d0:	46aa      	mov	sl, r5
    77d2:	0309      	lsls	r1, r1, #12
    77d4:	007c      	lsls	r4, r7, #1
    77d6:	002e      	movs	r6, r5
    77d8:	005f      	lsls	r7, r3, #1
    77da:	0f45      	lsrs	r5, r0, #29
    77dc:	0a49      	lsrs	r1, r1, #9
    77de:	0d7f      	lsrs	r7, r7, #21
    77e0:	4329      	orrs	r1, r5
    77e2:	00c5      	lsls	r5, r0, #3
    77e4:	0318      	lsls	r0, r3, #12
    77e6:	46bc      	mov	ip, r7
    77e8:	0a40      	lsrs	r0, r0, #9
    77ea:	0f57      	lsrs	r7, r2, #29
    77ec:	0d64      	lsrs	r4, r4, #21
    77ee:	0fdb      	lsrs	r3, r3, #31
    77f0:	4338      	orrs	r0, r7
    77f2:	00d2      	lsls	r2, r2, #3
    77f4:	459a      	cmp	sl, r3
    77f6:	d100      	bne.n	77fa <__aeabi_dadd+0x3a>
    77f8:	e0aa      	b.n	7950 <__aeabi_dadd+0x190>
    77fa:	4666      	mov	r6, ip
    77fc:	1ba6      	subs	r6, r4, r6
    77fe:	2e00      	cmp	r6, #0
    7800:	dc00      	bgt.n	7804 <__aeabi_dadd+0x44>
    7802:	e0ff      	b.n	7a04 <__aeabi_dadd+0x244>
    7804:	4663      	mov	r3, ip
    7806:	2b00      	cmp	r3, #0
    7808:	d139      	bne.n	787e <__aeabi_dadd+0xbe>
    780a:	0003      	movs	r3, r0
    780c:	4313      	orrs	r3, r2
    780e:	d000      	beq.n	7812 <__aeabi_dadd+0x52>
    7810:	e0d9      	b.n	79c6 <__aeabi_dadd+0x206>
    7812:	076b      	lsls	r3, r5, #29
    7814:	d009      	beq.n	782a <__aeabi_dadd+0x6a>
    7816:	230f      	movs	r3, #15
    7818:	402b      	ands	r3, r5
    781a:	2b04      	cmp	r3, #4
    781c:	d005      	beq.n	782a <__aeabi_dadd+0x6a>
    781e:	1d2b      	adds	r3, r5, #4
    7820:	42ab      	cmp	r3, r5
    7822:	41ad      	sbcs	r5, r5
    7824:	426d      	negs	r5, r5
    7826:	1949      	adds	r1, r1, r5
    7828:	001d      	movs	r5, r3
    782a:	020b      	lsls	r3, r1, #8
    782c:	d400      	bmi.n	7830 <__aeabi_dadd+0x70>
    782e:	e082      	b.n	7936 <__aeabi_dadd+0x176>
    7830:	4bca      	ldr	r3, [pc, #808]	; (7b5c <__aeabi_dadd+0x39c>)
    7832:	3401      	adds	r4, #1
    7834:	429c      	cmp	r4, r3
    7836:	d100      	bne.n	783a <__aeabi_dadd+0x7a>
    7838:	e0fe      	b.n	7a38 <__aeabi_dadd+0x278>
    783a:	000a      	movs	r2, r1
    783c:	4656      	mov	r6, sl
    783e:	4bc8      	ldr	r3, [pc, #800]	; (7b60 <__aeabi_dadd+0x3a0>)
    7840:	08ed      	lsrs	r5, r5, #3
    7842:	401a      	ands	r2, r3
    7844:	0750      	lsls	r0, r2, #29
    7846:	0564      	lsls	r4, r4, #21
    7848:	0252      	lsls	r2, r2, #9
    784a:	4305      	orrs	r5, r0
    784c:	0b12      	lsrs	r2, r2, #12
    784e:	0d64      	lsrs	r4, r4, #21
    7850:	2100      	movs	r1, #0
    7852:	0312      	lsls	r2, r2, #12
    7854:	0d0b      	lsrs	r3, r1, #20
    7856:	051b      	lsls	r3, r3, #20
    7858:	0564      	lsls	r4, r4, #21
    785a:	0b12      	lsrs	r2, r2, #12
    785c:	431a      	orrs	r2, r3
    785e:	0863      	lsrs	r3, r4, #1
    7860:	4cc0      	ldr	r4, [pc, #768]	; (7b64 <__aeabi_dadd+0x3a4>)
    7862:	07f6      	lsls	r6, r6, #31
    7864:	4014      	ands	r4, r2
    7866:	431c      	orrs	r4, r3
    7868:	0064      	lsls	r4, r4, #1
    786a:	0864      	lsrs	r4, r4, #1
    786c:	4334      	orrs	r4, r6
    786e:	0028      	movs	r0, r5
    7870:	0021      	movs	r1, r4
    7872:	bc3c      	pop	{r2, r3, r4, r5}
    7874:	4690      	mov	r8, r2
    7876:	4699      	mov	r9, r3
    7878:	46a2      	mov	sl, r4
    787a:	46ab      	mov	fp, r5
    787c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    787e:	4bb7      	ldr	r3, [pc, #732]	; (7b5c <__aeabi_dadd+0x39c>)
    7880:	429c      	cmp	r4, r3
    7882:	d0c6      	beq.n	7812 <__aeabi_dadd+0x52>
    7884:	2380      	movs	r3, #128	; 0x80
    7886:	041b      	lsls	r3, r3, #16
    7888:	4318      	orrs	r0, r3
    788a:	2e38      	cmp	r6, #56	; 0x38
    788c:	dd00      	ble.n	7890 <__aeabi_dadd+0xd0>
    788e:	e0eb      	b.n	7a68 <__aeabi_dadd+0x2a8>
    7890:	2e1f      	cmp	r6, #31
    7892:	dd00      	ble.n	7896 <__aeabi_dadd+0xd6>
    7894:	e11e      	b.n	7ad4 <__aeabi_dadd+0x314>
    7896:	2320      	movs	r3, #32
    7898:	1b9b      	subs	r3, r3, r6
    789a:	469c      	mov	ip, r3
    789c:	0003      	movs	r3, r0
    789e:	4667      	mov	r7, ip
    78a0:	40bb      	lsls	r3, r7
    78a2:	4698      	mov	r8, r3
    78a4:	0013      	movs	r3, r2
    78a6:	4647      	mov	r7, r8
    78a8:	40f3      	lsrs	r3, r6
    78aa:	433b      	orrs	r3, r7
    78ac:	4667      	mov	r7, ip
    78ae:	40ba      	lsls	r2, r7
    78b0:	1e57      	subs	r7, r2, #1
    78b2:	41ba      	sbcs	r2, r7
    78b4:	4313      	orrs	r3, r2
    78b6:	0002      	movs	r2, r0
    78b8:	40f2      	lsrs	r2, r6
    78ba:	1aeb      	subs	r3, r5, r3
    78bc:	429d      	cmp	r5, r3
    78be:	41b6      	sbcs	r6, r6
    78c0:	001d      	movs	r5, r3
    78c2:	1a8a      	subs	r2, r1, r2
    78c4:	4276      	negs	r6, r6
    78c6:	1b91      	subs	r1, r2, r6
    78c8:	020b      	lsls	r3, r1, #8
    78ca:	d531      	bpl.n	7930 <__aeabi_dadd+0x170>
    78cc:	024a      	lsls	r2, r1, #9
    78ce:	0a56      	lsrs	r6, r2, #9
    78d0:	2e00      	cmp	r6, #0
    78d2:	d100      	bne.n	78d6 <__aeabi_dadd+0x116>
    78d4:	e0b4      	b.n	7a40 <__aeabi_dadd+0x280>
    78d6:	0030      	movs	r0, r6
    78d8:	f001 fdfe 	bl	94d8 <__clzsi2>
    78dc:	0003      	movs	r3, r0
    78de:	3b08      	subs	r3, #8
    78e0:	2b1f      	cmp	r3, #31
    78e2:	dd00      	ble.n	78e6 <__aeabi_dadd+0x126>
    78e4:	e0b5      	b.n	7a52 <__aeabi_dadd+0x292>
    78e6:	2220      	movs	r2, #32
    78e8:	0029      	movs	r1, r5
    78ea:	1ad2      	subs	r2, r2, r3
    78ec:	40d1      	lsrs	r1, r2
    78ee:	409e      	lsls	r6, r3
    78f0:	000a      	movs	r2, r1
    78f2:	409d      	lsls	r5, r3
    78f4:	4332      	orrs	r2, r6
    78f6:	429c      	cmp	r4, r3
    78f8:	dd00      	ble.n	78fc <__aeabi_dadd+0x13c>
    78fa:	e0b1      	b.n	7a60 <__aeabi_dadd+0x2a0>
    78fc:	1b1c      	subs	r4, r3, r4
    78fe:	1c63      	adds	r3, r4, #1
    7900:	2b1f      	cmp	r3, #31
    7902:	dd00      	ble.n	7906 <__aeabi_dadd+0x146>
    7904:	e0d5      	b.n	7ab2 <__aeabi_dadd+0x2f2>
    7906:	2120      	movs	r1, #32
    7908:	0014      	movs	r4, r2
    790a:	0028      	movs	r0, r5
    790c:	1ac9      	subs	r1, r1, r3
    790e:	408c      	lsls	r4, r1
    7910:	40d8      	lsrs	r0, r3
    7912:	408d      	lsls	r5, r1
    7914:	4304      	orrs	r4, r0
    7916:	40da      	lsrs	r2, r3
    7918:	1e68      	subs	r0, r5, #1
    791a:	4185      	sbcs	r5, r0
    791c:	0011      	movs	r1, r2
    791e:	4325      	orrs	r5, r4
    7920:	2400      	movs	r4, #0
    7922:	e776      	b.n	7812 <__aeabi_dadd+0x52>
    7924:	4641      	mov	r1, r8
    7926:	4331      	orrs	r1, r6
    7928:	d100      	bne.n	792c <__aeabi_dadd+0x16c>
    792a:	e234      	b.n	7d96 <__aeabi_dadd+0x5d6>
    792c:	0031      	movs	r1, r6
    792e:	4645      	mov	r5, r8
    7930:	076b      	lsls	r3, r5, #29
    7932:	d000      	beq.n	7936 <__aeabi_dadd+0x176>
    7934:	e76f      	b.n	7816 <__aeabi_dadd+0x56>
    7936:	4656      	mov	r6, sl
    7938:	0748      	lsls	r0, r1, #29
    793a:	08ed      	lsrs	r5, r5, #3
    793c:	08c9      	lsrs	r1, r1, #3
    793e:	4305      	orrs	r5, r0
    7940:	4b86      	ldr	r3, [pc, #536]	; (7b5c <__aeabi_dadd+0x39c>)
    7942:	429c      	cmp	r4, r3
    7944:	d035      	beq.n	79b2 <__aeabi_dadd+0x1f2>
    7946:	030a      	lsls	r2, r1, #12
    7948:	0564      	lsls	r4, r4, #21
    794a:	0b12      	lsrs	r2, r2, #12
    794c:	0d64      	lsrs	r4, r4, #21
    794e:	e77f      	b.n	7850 <__aeabi_dadd+0x90>
    7950:	4663      	mov	r3, ip
    7952:	1ae3      	subs	r3, r4, r3
    7954:	469b      	mov	fp, r3
    7956:	2b00      	cmp	r3, #0
    7958:	dc00      	bgt.n	795c <__aeabi_dadd+0x19c>
    795a:	e08b      	b.n	7a74 <__aeabi_dadd+0x2b4>
    795c:	4667      	mov	r7, ip
    795e:	2f00      	cmp	r7, #0
    7960:	d03c      	beq.n	79dc <__aeabi_dadd+0x21c>
    7962:	4f7e      	ldr	r7, [pc, #504]	; (7b5c <__aeabi_dadd+0x39c>)
    7964:	42bc      	cmp	r4, r7
    7966:	d100      	bne.n	796a <__aeabi_dadd+0x1aa>
    7968:	e753      	b.n	7812 <__aeabi_dadd+0x52>
    796a:	2780      	movs	r7, #128	; 0x80
    796c:	043f      	lsls	r7, r7, #16
    796e:	4338      	orrs	r0, r7
    7970:	465b      	mov	r3, fp
    7972:	2b38      	cmp	r3, #56	; 0x38
    7974:	dc00      	bgt.n	7978 <__aeabi_dadd+0x1b8>
    7976:	e0f7      	b.n	7b68 <__aeabi_dadd+0x3a8>
    7978:	4302      	orrs	r2, r0
    797a:	1e50      	subs	r0, r2, #1
    797c:	4182      	sbcs	r2, r0
    797e:	2000      	movs	r0, #0
    7980:	b2d2      	uxtb	r2, r2
    7982:	1953      	adds	r3, r2, r5
    7984:	1842      	adds	r2, r0, r1
    7986:	42ab      	cmp	r3, r5
    7988:	4189      	sbcs	r1, r1
    798a:	001d      	movs	r5, r3
    798c:	4249      	negs	r1, r1
    798e:	1889      	adds	r1, r1, r2
    7990:	020b      	lsls	r3, r1, #8
    7992:	d5cd      	bpl.n	7930 <__aeabi_dadd+0x170>
    7994:	4b71      	ldr	r3, [pc, #452]	; (7b5c <__aeabi_dadd+0x39c>)
    7996:	3401      	adds	r4, #1
    7998:	429c      	cmp	r4, r3
    799a:	d100      	bne.n	799e <__aeabi_dadd+0x1de>
    799c:	e13d      	b.n	7c1a <__aeabi_dadd+0x45a>
    799e:	2001      	movs	r0, #1
    79a0:	4a6f      	ldr	r2, [pc, #444]	; (7b60 <__aeabi_dadd+0x3a0>)
    79a2:	086b      	lsrs	r3, r5, #1
    79a4:	400a      	ands	r2, r1
    79a6:	4028      	ands	r0, r5
    79a8:	4318      	orrs	r0, r3
    79aa:	07d5      	lsls	r5, r2, #31
    79ac:	4305      	orrs	r5, r0
    79ae:	0851      	lsrs	r1, r2, #1
    79b0:	e72f      	b.n	7812 <__aeabi_dadd+0x52>
    79b2:	002b      	movs	r3, r5
    79b4:	430b      	orrs	r3, r1
    79b6:	d100      	bne.n	79ba <__aeabi_dadd+0x1fa>
    79b8:	e1cb      	b.n	7d52 <__aeabi_dadd+0x592>
    79ba:	2380      	movs	r3, #128	; 0x80
    79bc:	031b      	lsls	r3, r3, #12
    79be:	430b      	orrs	r3, r1
    79c0:	031a      	lsls	r2, r3, #12
    79c2:	0b12      	lsrs	r2, r2, #12
    79c4:	e744      	b.n	7850 <__aeabi_dadd+0x90>
    79c6:	3e01      	subs	r6, #1
    79c8:	2e00      	cmp	r6, #0
    79ca:	d16d      	bne.n	7aa8 <__aeabi_dadd+0x2e8>
    79cc:	1aae      	subs	r6, r5, r2
    79ce:	42b5      	cmp	r5, r6
    79d0:	419b      	sbcs	r3, r3
    79d2:	1a09      	subs	r1, r1, r0
    79d4:	425b      	negs	r3, r3
    79d6:	1ac9      	subs	r1, r1, r3
    79d8:	0035      	movs	r5, r6
    79da:	e775      	b.n	78c8 <__aeabi_dadd+0x108>
    79dc:	0007      	movs	r7, r0
    79de:	4317      	orrs	r7, r2
    79e0:	d100      	bne.n	79e4 <__aeabi_dadd+0x224>
    79e2:	e716      	b.n	7812 <__aeabi_dadd+0x52>
    79e4:	2301      	movs	r3, #1
    79e6:	425b      	negs	r3, r3
    79e8:	469c      	mov	ip, r3
    79ea:	44e3      	add	fp, ip
    79ec:	465b      	mov	r3, fp
    79ee:	2b00      	cmp	r3, #0
    79f0:	d000      	beq.n	79f4 <__aeabi_dadd+0x234>
    79f2:	e0e0      	b.n	7bb6 <__aeabi_dadd+0x3f6>
    79f4:	18aa      	adds	r2, r5, r2
    79f6:	42aa      	cmp	r2, r5
    79f8:	419b      	sbcs	r3, r3
    79fa:	1809      	adds	r1, r1, r0
    79fc:	425b      	negs	r3, r3
    79fe:	1859      	adds	r1, r3, r1
    7a00:	0015      	movs	r5, r2
    7a02:	e7c5      	b.n	7990 <__aeabi_dadd+0x1d0>
    7a04:	2e00      	cmp	r6, #0
    7a06:	d175      	bne.n	7af4 <__aeabi_dadd+0x334>
    7a08:	1c66      	adds	r6, r4, #1
    7a0a:	0576      	lsls	r6, r6, #21
    7a0c:	0d76      	lsrs	r6, r6, #21
    7a0e:	2e01      	cmp	r6, #1
    7a10:	dc00      	bgt.n	7a14 <__aeabi_dadd+0x254>
    7a12:	e0f3      	b.n	7bfc <__aeabi_dadd+0x43c>
    7a14:	1aae      	subs	r6, r5, r2
    7a16:	46b0      	mov	r8, r6
    7a18:	4545      	cmp	r5, r8
    7a1a:	41bf      	sbcs	r7, r7
    7a1c:	1a0e      	subs	r6, r1, r0
    7a1e:	427f      	negs	r7, r7
    7a20:	1bf6      	subs	r6, r6, r7
    7a22:	0237      	lsls	r7, r6, #8
    7a24:	d400      	bmi.n	7a28 <__aeabi_dadd+0x268>
    7a26:	e08f      	b.n	7b48 <__aeabi_dadd+0x388>
    7a28:	1b55      	subs	r5, r2, r5
    7a2a:	42aa      	cmp	r2, r5
    7a2c:	41b6      	sbcs	r6, r6
    7a2e:	1a41      	subs	r1, r0, r1
    7a30:	4276      	negs	r6, r6
    7a32:	1b8e      	subs	r6, r1, r6
    7a34:	469a      	mov	sl, r3
    7a36:	e74b      	b.n	78d0 <__aeabi_dadd+0x110>
    7a38:	4656      	mov	r6, sl
    7a3a:	2200      	movs	r2, #0
    7a3c:	2500      	movs	r5, #0
    7a3e:	e707      	b.n	7850 <__aeabi_dadd+0x90>
    7a40:	0028      	movs	r0, r5
    7a42:	f001 fd49 	bl	94d8 <__clzsi2>
    7a46:	3020      	adds	r0, #32
    7a48:	0003      	movs	r3, r0
    7a4a:	3b08      	subs	r3, #8
    7a4c:	2b1f      	cmp	r3, #31
    7a4e:	dc00      	bgt.n	7a52 <__aeabi_dadd+0x292>
    7a50:	e749      	b.n	78e6 <__aeabi_dadd+0x126>
    7a52:	002a      	movs	r2, r5
    7a54:	3828      	subs	r0, #40	; 0x28
    7a56:	4082      	lsls	r2, r0
    7a58:	2500      	movs	r5, #0
    7a5a:	429c      	cmp	r4, r3
    7a5c:	dc00      	bgt.n	7a60 <__aeabi_dadd+0x2a0>
    7a5e:	e74d      	b.n	78fc <__aeabi_dadd+0x13c>
    7a60:	493f      	ldr	r1, [pc, #252]	; (7b60 <__aeabi_dadd+0x3a0>)
    7a62:	1ae4      	subs	r4, r4, r3
    7a64:	4011      	ands	r1, r2
    7a66:	e6d4      	b.n	7812 <__aeabi_dadd+0x52>
    7a68:	4302      	orrs	r2, r0
    7a6a:	1e50      	subs	r0, r2, #1
    7a6c:	4182      	sbcs	r2, r0
    7a6e:	b2d3      	uxtb	r3, r2
    7a70:	2200      	movs	r2, #0
    7a72:	e722      	b.n	78ba <__aeabi_dadd+0xfa>
    7a74:	2b00      	cmp	r3, #0
    7a76:	d000      	beq.n	7a7a <__aeabi_dadd+0x2ba>
    7a78:	e0f3      	b.n	7c62 <__aeabi_dadd+0x4a2>
    7a7a:	1c63      	adds	r3, r4, #1
    7a7c:	469c      	mov	ip, r3
    7a7e:	055b      	lsls	r3, r3, #21
    7a80:	0d5b      	lsrs	r3, r3, #21
    7a82:	2b01      	cmp	r3, #1
    7a84:	dc00      	bgt.n	7a88 <__aeabi_dadd+0x2c8>
    7a86:	e09f      	b.n	7bc8 <__aeabi_dadd+0x408>
    7a88:	4b34      	ldr	r3, [pc, #208]	; (7b5c <__aeabi_dadd+0x39c>)
    7a8a:	459c      	cmp	ip, r3
    7a8c:	d100      	bne.n	7a90 <__aeabi_dadd+0x2d0>
    7a8e:	e0c3      	b.n	7c18 <__aeabi_dadd+0x458>
    7a90:	18aa      	adds	r2, r5, r2
    7a92:	1809      	adds	r1, r1, r0
    7a94:	42aa      	cmp	r2, r5
    7a96:	4180      	sbcs	r0, r0
    7a98:	4240      	negs	r0, r0
    7a9a:	1841      	adds	r1, r0, r1
    7a9c:	07cd      	lsls	r5, r1, #31
    7a9e:	0852      	lsrs	r2, r2, #1
    7aa0:	4315      	orrs	r5, r2
    7aa2:	0849      	lsrs	r1, r1, #1
    7aa4:	4664      	mov	r4, ip
    7aa6:	e6b4      	b.n	7812 <__aeabi_dadd+0x52>
    7aa8:	4b2c      	ldr	r3, [pc, #176]	; (7b5c <__aeabi_dadd+0x39c>)
    7aaa:	429c      	cmp	r4, r3
    7aac:	d000      	beq.n	7ab0 <__aeabi_dadd+0x2f0>
    7aae:	e6ec      	b.n	788a <__aeabi_dadd+0xca>
    7ab0:	e6af      	b.n	7812 <__aeabi_dadd+0x52>
    7ab2:	0011      	movs	r1, r2
    7ab4:	3c1f      	subs	r4, #31
    7ab6:	40e1      	lsrs	r1, r4
    7ab8:	000c      	movs	r4, r1
    7aba:	2b20      	cmp	r3, #32
    7abc:	d100      	bne.n	7ac0 <__aeabi_dadd+0x300>
    7abe:	e07f      	b.n	7bc0 <__aeabi_dadd+0x400>
    7ac0:	2140      	movs	r1, #64	; 0x40
    7ac2:	1acb      	subs	r3, r1, r3
    7ac4:	409a      	lsls	r2, r3
    7ac6:	4315      	orrs	r5, r2
    7ac8:	1e6a      	subs	r2, r5, #1
    7aca:	4195      	sbcs	r5, r2
    7acc:	2100      	movs	r1, #0
    7ace:	4325      	orrs	r5, r4
    7ad0:	2400      	movs	r4, #0
    7ad2:	e72d      	b.n	7930 <__aeabi_dadd+0x170>
    7ad4:	0033      	movs	r3, r6
    7ad6:	0007      	movs	r7, r0
    7ad8:	3b20      	subs	r3, #32
    7ada:	40df      	lsrs	r7, r3
    7adc:	003b      	movs	r3, r7
    7ade:	2e20      	cmp	r6, #32
    7ae0:	d070      	beq.n	7bc4 <__aeabi_dadd+0x404>
    7ae2:	2740      	movs	r7, #64	; 0x40
    7ae4:	1bbe      	subs	r6, r7, r6
    7ae6:	40b0      	lsls	r0, r6
    7ae8:	4302      	orrs	r2, r0
    7aea:	1e50      	subs	r0, r2, #1
    7aec:	4182      	sbcs	r2, r0
    7aee:	4313      	orrs	r3, r2
    7af0:	2200      	movs	r2, #0
    7af2:	e6e2      	b.n	78ba <__aeabi_dadd+0xfa>
    7af4:	2c00      	cmp	r4, #0
    7af6:	d04f      	beq.n	7b98 <__aeabi_dadd+0x3d8>
    7af8:	4c18      	ldr	r4, [pc, #96]	; (7b5c <__aeabi_dadd+0x39c>)
    7afa:	45a4      	cmp	ip, r4
    7afc:	d100      	bne.n	7b00 <__aeabi_dadd+0x340>
    7afe:	e0ab      	b.n	7c58 <__aeabi_dadd+0x498>
    7b00:	2480      	movs	r4, #128	; 0x80
    7b02:	0424      	lsls	r4, r4, #16
    7b04:	4276      	negs	r6, r6
    7b06:	4321      	orrs	r1, r4
    7b08:	2e38      	cmp	r6, #56	; 0x38
    7b0a:	dd00      	ble.n	7b0e <__aeabi_dadd+0x34e>
    7b0c:	e0df      	b.n	7cce <__aeabi_dadd+0x50e>
    7b0e:	2e1f      	cmp	r6, #31
    7b10:	dd00      	ble.n	7b14 <__aeabi_dadd+0x354>
    7b12:	e143      	b.n	7d9c <__aeabi_dadd+0x5dc>
    7b14:	2720      	movs	r7, #32
    7b16:	1bbc      	subs	r4, r7, r6
    7b18:	46a1      	mov	r9, r4
    7b1a:	000c      	movs	r4, r1
    7b1c:	464f      	mov	r7, r9
    7b1e:	40bc      	lsls	r4, r7
    7b20:	46a0      	mov	r8, r4
    7b22:	002c      	movs	r4, r5
    7b24:	4647      	mov	r7, r8
    7b26:	40f4      	lsrs	r4, r6
    7b28:	433c      	orrs	r4, r7
    7b2a:	464f      	mov	r7, r9
    7b2c:	40bd      	lsls	r5, r7
    7b2e:	1e6f      	subs	r7, r5, #1
    7b30:	41bd      	sbcs	r5, r7
    7b32:	40f1      	lsrs	r1, r6
    7b34:	432c      	orrs	r4, r5
    7b36:	1b15      	subs	r5, r2, r4
    7b38:	42aa      	cmp	r2, r5
    7b3a:	4192      	sbcs	r2, r2
    7b3c:	1a41      	subs	r1, r0, r1
    7b3e:	4252      	negs	r2, r2
    7b40:	1a89      	subs	r1, r1, r2
    7b42:	4664      	mov	r4, ip
    7b44:	469a      	mov	sl, r3
    7b46:	e6bf      	b.n	78c8 <__aeabi_dadd+0x108>
    7b48:	4641      	mov	r1, r8
    7b4a:	4645      	mov	r5, r8
    7b4c:	4331      	orrs	r1, r6
    7b4e:	d000      	beq.n	7b52 <__aeabi_dadd+0x392>
    7b50:	e6be      	b.n	78d0 <__aeabi_dadd+0x110>
    7b52:	2600      	movs	r6, #0
    7b54:	2400      	movs	r4, #0
    7b56:	2500      	movs	r5, #0
    7b58:	e6f2      	b.n	7940 <__aeabi_dadd+0x180>
    7b5a:	46c0      	nop			; (mov r8, r8)
    7b5c:	000007ff 	.word	0x000007ff
    7b60:	ff7fffff 	.word	0xff7fffff
    7b64:	800fffff 	.word	0x800fffff
    7b68:	2b1f      	cmp	r3, #31
    7b6a:	dc59      	bgt.n	7c20 <__aeabi_dadd+0x460>
    7b6c:	2720      	movs	r7, #32
    7b6e:	1aff      	subs	r7, r7, r3
    7b70:	46bc      	mov	ip, r7
    7b72:	0007      	movs	r7, r0
    7b74:	4663      	mov	r3, ip
    7b76:	409f      	lsls	r7, r3
    7b78:	465b      	mov	r3, fp
    7b7a:	46b9      	mov	r9, r7
    7b7c:	0017      	movs	r7, r2
    7b7e:	40df      	lsrs	r7, r3
    7b80:	46b8      	mov	r8, r7
    7b82:	464f      	mov	r7, r9
    7b84:	4643      	mov	r3, r8
    7b86:	431f      	orrs	r7, r3
    7b88:	4663      	mov	r3, ip
    7b8a:	409a      	lsls	r2, r3
    7b8c:	1e53      	subs	r3, r2, #1
    7b8e:	419a      	sbcs	r2, r3
    7b90:	465b      	mov	r3, fp
    7b92:	433a      	orrs	r2, r7
    7b94:	40d8      	lsrs	r0, r3
    7b96:	e6f4      	b.n	7982 <__aeabi_dadd+0x1c2>
    7b98:	000c      	movs	r4, r1
    7b9a:	432c      	orrs	r4, r5
    7b9c:	d05c      	beq.n	7c58 <__aeabi_dadd+0x498>
    7b9e:	43f6      	mvns	r6, r6
    7ba0:	2e00      	cmp	r6, #0
    7ba2:	d155      	bne.n	7c50 <__aeabi_dadd+0x490>
    7ba4:	1b55      	subs	r5, r2, r5
    7ba6:	42aa      	cmp	r2, r5
    7ba8:	41a4      	sbcs	r4, r4
    7baa:	1a41      	subs	r1, r0, r1
    7bac:	4264      	negs	r4, r4
    7bae:	1b09      	subs	r1, r1, r4
    7bb0:	469a      	mov	sl, r3
    7bb2:	4664      	mov	r4, ip
    7bb4:	e688      	b.n	78c8 <__aeabi_dadd+0x108>
    7bb6:	4f96      	ldr	r7, [pc, #600]	; (7e10 <__aeabi_dadd+0x650>)
    7bb8:	42bc      	cmp	r4, r7
    7bba:	d000      	beq.n	7bbe <__aeabi_dadd+0x3fe>
    7bbc:	e6d8      	b.n	7970 <__aeabi_dadd+0x1b0>
    7bbe:	e628      	b.n	7812 <__aeabi_dadd+0x52>
    7bc0:	2200      	movs	r2, #0
    7bc2:	e780      	b.n	7ac6 <__aeabi_dadd+0x306>
    7bc4:	2000      	movs	r0, #0
    7bc6:	e78f      	b.n	7ae8 <__aeabi_dadd+0x328>
    7bc8:	000b      	movs	r3, r1
    7bca:	432b      	orrs	r3, r5
    7bcc:	2c00      	cmp	r4, #0
    7bce:	d000      	beq.n	7bd2 <__aeabi_dadd+0x412>
    7bd0:	e0c2      	b.n	7d58 <__aeabi_dadd+0x598>
    7bd2:	2b00      	cmp	r3, #0
    7bd4:	d100      	bne.n	7bd8 <__aeabi_dadd+0x418>
    7bd6:	e101      	b.n	7ddc <__aeabi_dadd+0x61c>
    7bd8:	0003      	movs	r3, r0
    7bda:	4313      	orrs	r3, r2
    7bdc:	d100      	bne.n	7be0 <__aeabi_dadd+0x420>
    7bde:	e618      	b.n	7812 <__aeabi_dadd+0x52>
    7be0:	18ab      	adds	r3, r5, r2
    7be2:	42ab      	cmp	r3, r5
    7be4:	41b6      	sbcs	r6, r6
    7be6:	1809      	adds	r1, r1, r0
    7be8:	4276      	negs	r6, r6
    7bea:	1871      	adds	r1, r6, r1
    7bec:	020a      	lsls	r2, r1, #8
    7bee:	d400      	bmi.n	7bf2 <__aeabi_dadd+0x432>
    7bf0:	e109      	b.n	7e06 <__aeabi_dadd+0x646>
    7bf2:	4a88      	ldr	r2, [pc, #544]	; (7e14 <__aeabi_dadd+0x654>)
    7bf4:	001d      	movs	r5, r3
    7bf6:	4011      	ands	r1, r2
    7bf8:	4664      	mov	r4, ip
    7bfa:	e60a      	b.n	7812 <__aeabi_dadd+0x52>
    7bfc:	2c00      	cmp	r4, #0
    7bfe:	d15b      	bne.n	7cb8 <__aeabi_dadd+0x4f8>
    7c00:	000e      	movs	r6, r1
    7c02:	432e      	orrs	r6, r5
    7c04:	d000      	beq.n	7c08 <__aeabi_dadd+0x448>
    7c06:	e08a      	b.n	7d1e <__aeabi_dadd+0x55e>
    7c08:	0001      	movs	r1, r0
    7c0a:	4311      	orrs	r1, r2
    7c0c:	d100      	bne.n	7c10 <__aeabi_dadd+0x450>
    7c0e:	e0c2      	b.n	7d96 <__aeabi_dadd+0x5d6>
    7c10:	0001      	movs	r1, r0
    7c12:	0015      	movs	r5, r2
    7c14:	469a      	mov	sl, r3
    7c16:	e5fc      	b.n	7812 <__aeabi_dadd+0x52>
    7c18:	4664      	mov	r4, ip
    7c1a:	2100      	movs	r1, #0
    7c1c:	2500      	movs	r5, #0
    7c1e:	e68f      	b.n	7940 <__aeabi_dadd+0x180>
    7c20:	2320      	movs	r3, #32
    7c22:	425b      	negs	r3, r3
    7c24:	469c      	mov	ip, r3
    7c26:	44dc      	add	ip, fp
    7c28:	4663      	mov	r3, ip
    7c2a:	0007      	movs	r7, r0
    7c2c:	40df      	lsrs	r7, r3
    7c2e:	465b      	mov	r3, fp
    7c30:	46bc      	mov	ip, r7
    7c32:	2b20      	cmp	r3, #32
    7c34:	d100      	bne.n	7c38 <__aeabi_dadd+0x478>
    7c36:	e0ac      	b.n	7d92 <__aeabi_dadd+0x5d2>
    7c38:	2340      	movs	r3, #64	; 0x40
    7c3a:	465f      	mov	r7, fp
    7c3c:	1bdb      	subs	r3, r3, r7
    7c3e:	4098      	lsls	r0, r3
    7c40:	4302      	orrs	r2, r0
    7c42:	1e50      	subs	r0, r2, #1
    7c44:	4182      	sbcs	r2, r0
    7c46:	4663      	mov	r3, ip
    7c48:	4313      	orrs	r3, r2
    7c4a:	001a      	movs	r2, r3
    7c4c:	2000      	movs	r0, #0
    7c4e:	e698      	b.n	7982 <__aeabi_dadd+0x1c2>
    7c50:	4c6f      	ldr	r4, [pc, #444]	; (7e10 <__aeabi_dadd+0x650>)
    7c52:	45a4      	cmp	ip, r4
    7c54:	d000      	beq.n	7c58 <__aeabi_dadd+0x498>
    7c56:	e757      	b.n	7b08 <__aeabi_dadd+0x348>
    7c58:	0001      	movs	r1, r0
    7c5a:	0015      	movs	r5, r2
    7c5c:	4664      	mov	r4, ip
    7c5e:	469a      	mov	sl, r3
    7c60:	e5d7      	b.n	7812 <__aeabi_dadd+0x52>
    7c62:	2c00      	cmp	r4, #0
    7c64:	d139      	bne.n	7cda <__aeabi_dadd+0x51a>
    7c66:	000c      	movs	r4, r1
    7c68:	432c      	orrs	r4, r5
    7c6a:	d06e      	beq.n	7d4a <__aeabi_dadd+0x58a>
    7c6c:	43db      	mvns	r3, r3
    7c6e:	2b00      	cmp	r3, #0
    7c70:	d01a      	beq.n	7ca8 <__aeabi_dadd+0x4e8>
    7c72:	4c67      	ldr	r4, [pc, #412]	; (7e10 <__aeabi_dadd+0x650>)
    7c74:	45a4      	cmp	ip, r4
    7c76:	d068      	beq.n	7d4a <__aeabi_dadd+0x58a>
    7c78:	2b38      	cmp	r3, #56	; 0x38
    7c7a:	dd00      	ble.n	7c7e <__aeabi_dadd+0x4be>
    7c7c:	e0a4      	b.n	7dc8 <__aeabi_dadd+0x608>
    7c7e:	2b1f      	cmp	r3, #31
    7c80:	dd00      	ble.n	7c84 <__aeabi_dadd+0x4c4>
    7c82:	e0ae      	b.n	7de2 <__aeabi_dadd+0x622>
    7c84:	2420      	movs	r4, #32
    7c86:	000f      	movs	r7, r1
    7c88:	1ae4      	subs	r4, r4, r3
    7c8a:	40a7      	lsls	r7, r4
    7c8c:	46b9      	mov	r9, r7
    7c8e:	002f      	movs	r7, r5
    7c90:	40df      	lsrs	r7, r3
    7c92:	46b8      	mov	r8, r7
    7c94:	46a3      	mov	fp, r4
    7c96:	464f      	mov	r7, r9
    7c98:	4644      	mov	r4, r8
    7c9a:	4327      	orrs	r7, r4
    7c9c:	465c      	mov	r4, fp
    7c9e:	40a5      	lsls	r5, r4
    7ca0:	1e6c      	subs	r4, r5, #1
    7ca2:	41a5      	sbcs	r5, r4
    7ca4:	40d9      	lsrs	r1, r3
    7ca6:	433d      	orrs	r5, r7
    7ca8:	18ad      	adds	r5, r5, r2
    7caa:	4295      	cmp	r5, r2
    7cac:	419b      	sbcs	r3, r3
    7cae:	1809      	adds	r1, r1, r0
    7cb0:	425b      	negs	r3, r3
    7cb2:	1859      	adds	r1, r3, r1
    7cb4:	4664      	mov	r4, ip
    7cb6:	e66b      	b.n	7990 <__aeabi_dadd+0x1d0>
    7cb8:	000c      	movs	r4, r1
    7cba:	432c      	orrs	r4, r5
    7cbc:	d115      	bne.n	7cea <__aeabi_dadd+0x52a>
    7cbe:	0001      	movs	r1, r0
    7cc0:	4311      	orrs	r1, r2
    7cc2:	d07b      	beq.n	7dbc <__aeabi_dadd+0x5fc>
    7cc4:	0001      	movs	r1, r0
    7cc6:	0015      	movs	r5, r2
    7cc8:	469a      	mov	sl, r3
    7cca:	4c51      	ldr	r4, [pc, #324]	; (7e10 <__aeabi_dadd+0x650>)
    7ccc:	e5a1      	b.n	7812 <__aeabi_dadd+0x52>
    7cce:	430d      	orrs	r5, r1
    7cd0:	1e69      	subs	r1, r5, #1
    7cd2:	418d      	sbcs	r5, r1
    7cd4:	2100      	movs	r1, #0
    7cd6:	b2ec      	uxtb	r4, r5
    7cd8:	e72d      	b.n	7b36 <__aeabi_dadd+0x376>
    7cda:	4c4d      	ldr	r4, [pc, #308]	; (7e10 <__aeabi_dadd+0x650>)
    7cdc:	45a4      	cmp	ip, r4
    7cde:	d034      	beq.n	7d4a <__aeabi_dadd+0x58a>
    7ce0:	2480      	movs	r4, #128	; 0x80
    7ce2:	0424      	lsls	r4, r4, #16
    7ce4:	425b      	negs	r3, r3
    7ce6:	4321      	orrs	r1, r4
    7ce8:	e7c6      	b.n	7c78 <__aeabi_dadd+0x4b8>
    7cea:	0004      	movs	r4, r0
    7cec:	4314      	orrs	r4, r2
    7cee:	d04e      	beq.n	7d8e <__aeabi_dadd+0x5ce>
    7cf0:	08ed      	lsrs	r5, r5, #3
    7cf2:	074c      	lsls	r4, r1, #29
    7cf4:	432c      	orrs	r4, r5
    7cf6:	2580      	movs	r5, #128	; 0x80
    7cf8:	08c9      	lsrs	r1, r1, #3
    7cfa:	032d      	lsls	r5, r5, #12
    7cfc:	4229      	tst	r1, r5
    7cfe:	d008      	beq.n	7d12 <__aeabi_dadd+0x552>
    7d00:	08c6      	lsrs	r6, r0, #3
    7d02:	422e      	tst	r6, r5
    7d04:	d105      	bne.n	7d12 <__aeabi_dadd+0x552>
    7d06:	08d2      	lsrs	r2, r2, #3
    7d08:	0741      	lsls	r1, r0, #29
    7d0a:	4311      	orrs	r1, r2
    7d0c:	000c      	movs	r4, r1
    7d0e:	469a      	mov	sl, r3
    7d10:	0031      	movs	r1, r6
    7d12:	0f62      	lsrs	r2, r4, #29
    7d14:	00c9      	lsls	r1, r1, #3
    7d16:	00e5      	lsls	r5, r4, #3
    7d18:	4311      	orrs	r1, r2
    7d1a:	4c3d      	ldr	r4, [pc, #244]	; (7e10 <__aeabi_dadd+0x650>)
    7d1c:	e579      	b.n	7812 <__aeabi_dadd+0x52>
    7d1e:	0006      	movs	r6, r0
    7d20:	4316      	orrs	r6, r2
    7d22:	d100      	bne.n	7d26 <__aeabi_dadd+0x566>
    7d24:	e575      	b.n	7812 <__aeabi_dadd+0x52>
    7d26:	1aae      	subs	r6, r5, r2
    7d28:	46b0      	mov	r8, r6
    7d2a:	4545      	cmp	r5, r8
    7d2c:	41bf      	sbcs	r7, r7
    7d2e:	1a0e      	subs	r6, r1, r0
    7d30:	427f      	negs	r7, r7
    7d32:	1bf6      	subs	r6, r6, r7
    7d34:	0237      	lsls	r7, r6, #8
    7d36:	d400      	bmi.n	7d3a <__aeabi_dadd+0x57a>
    7d38:	e5f4      	b.n	7924 <__aeabi_dadd+0x164>
    7d3a:	1b55      	subs	r5, r2, r5
    7d3c:	42aa      	cmp	r2, r5
    7d3e:	41b6      	sbcs	r6, r6
    7d40:	1a41      	subs	r1, r0, r1
    7d42:	4276      	negs	r6, r6
    7d44:	1b89      	subs	r1, r1, r6
    7d46:	469a      	mov	sl, r3
    7d48:	e563      	b.n	7812 <__aeabi_dadd+0x52>
    7d4a:	0001      	movs	r1, r0
    7d4c:	0015      	movs	r5, r2
    7d4e:	4664      	mov	r4, ip
    7d50:	e55f      	b.n	7812 <__aeabi_dadd+0x52>
    7d52:	2200      	movs	r2, #0
    7d54:	2500      	movs	r5, #0
    7d56:	e57b      	b.n	7850 <__aeabi_dadd+0x90>
    7d58:	2b00      	cmp	r3, #0
    7d5a:	d03b      	beq.n	7dd4 <__aeabi_dadd+0x614>
    7d5c:	0003      	movs	r3, r0
    7d5e:	4313      	orrs	r3, r2
    7d60:	d015      	beq.n	7d8e <__aeabi_dadd+0x5ce>
    7d62:	08ed      	lsrs	r5, r5, #3
    7d64:	074b      	lsls	r3, r1, #29
    7d66:	432b      	orrs	r3, r5
    7d68:	2580      	movs	r5, #128	; 0x80
    7d6a:	08c9      	lsrs	r1, r1, #3
    7d6c:	032d      	lsls	r5, r5, #12
    7d6e:	4229      	tst	r1, r5
    7d70:	d007      	beq.n	7d82 <__aeabi_dadd+0x5c2>
    7d72:	08c4      	lsrs	r4, r0, #3
    7d74:	422c      	tst	r4, r5
    7d76:	d104      	bne.n	7d82 <__aeabi_dadd+0x5c2>
    7d78:	0741      	lsls	r1, r0, #29
    7d7a:	000b      	movs	r3, r1
    7d7c:	0021      	movs	r1, r4
    7d7e:	08d2      	lsrs	r2, r2, #3
    7d80:	4313      	orrs	r3, r2
    7d82:	00c9      	lsls	r1, r1, #3
    7d84:	0f5a      	lsrs	r2, r3, #29
    7d86:	4311      	orrs	r1, r2
    7d88:	00dd      	lsls	r5, r3, #3
    7d8a:	4c21      	ldr	r4, [pc, #132]	; (7e10 <__aeabi_dadd+0x650>)
    7d8c:	e541      	b.n	7812 <__aeabi_dadd+0x52>
    7d8e:	4c20      	ldr	r4, [pc, #128]	; (7e10 <__aeabi_dadd+0x650>)
    7d90:	e53f      	b.n	7812 <__aeabi_dadd+0x52>
    7d92:	2000      	movs	r0, #0
    7d94:	e754      	b.n	7c40 <__aeabi_dadd+0x480>
    7d96:	2600      	movs	r6, #0
    7d98:	2500      	movs	r5, #0
    7d9a:	e5d1      	b.n	7940 <__aeabi_dadd+0x180>
    7d9c:	0034      	movs	r4, r6
    7d9e:	000f      	movs	r7, r1
    7da0:	3c20      	subs	r4, #32
    7da2:	40e7      	lsrs	r7, r4
    7da4:	003c      	movs	r4, r7
    7da6:	2e20      	cmp	r6, #32
    7da8:	d02b      	beq.n	7e02 <__aeabi_dadd+0x642>
    7daa:	2740      	movs	r7, #64	; 0x40
    7dac:	1bbe      	subs	r6, r7, r6
    7dae:	40b1      	lsls	r1, r6
    7db0:	430d      	orrs	r5, r1
    7db2:	1e69      	subs	r1, r5, #1
    7db4:	418d      	sbcs	r5, r1
    7db6:	2100      	movs	r1, #0
    7db8:	432c      	orrs	r4, r5
    7dba:	e6bc      	b.n	7b36 <__aeabi_dadd+0x376>
    7dbc:	2180      	movs	r1, #128	; 0x80
    7dbe:	2600      	movs	r6, #0
    7dc0:	0309      	lsls	r1, r1, #12
    7dc2:	4c13      	ldr	r4, [pc, #76]	; (7e10 <__aeabi_dadd+0x650>)
    7dc4:	2500      	movs	r5, #0
    7dc6:	e5bb      	b.n	7940 <__aeabi_dadd+0x180>
    7dc8:	430d      	orrs	r5, r1
    7dca:	1e69      	subs	r1, r5, #1
    7dcc:	418d      	sbcs	r5, r1
    7dce:	2100      	movs	r1, #0
    7dd0:	b2ed      	uxtb	r5, r5
    7dd2:	e769      	b.n	7ca8 <__aeabi_dadd+0x4e8>
    7dd4:	0001      	movs	r1, r0
    7dd6:	0015      	movs	r5, r2
    7dd8:	4c0d      	ldr	r4, [pc, #52]	; (7e10 <__aeabi_dadd+0x650>)
    7dda:	e51a      	b.n	7812 <__aeabi_dadd+0x52>
    7ddc:	0001      	movs	r1, r0
    7dde:	0015      	movs	r5, r2
    7de0:	e517      	b.n	7812 <__aeabi_dadd+0x52>
    7de2:	001c      	movs	r4, r3
    7de4:	000f      	movs	r7, r1
    7de6:	3c20      	subs	r4, #32
    7de8:	40e7      	lsrs	r7, r4
    7dea:	003c      	movs	r4, r7
    7dec:	2b20      	cmp	r3, #32
    7dee:	d00c      	beq.n	7e0a <__aeabi_dadd+0x64a>
    7df0:	2740      	movs	r7, #64	; 0x40
    7df2:	1afb      	subs	r3, r7, r3
    7df4:	4099      	lsls	r1, r3
    7df6:	430d      	orrs	r5, r1
    7df8:	1e69      	subs	r1, r5, #1
    7dfa:	418d      	sbcs	r5, r1
    7dfc:	2100      	movs	r1, #0
    7dfe:	4325      	orrs	r5, r4
    7e00:	e752      	b.n	7ca8 <__aeabi_dadd+0x4e8>
    7e02:	2100      	movs	r1, #0
    7e04:	e7d4      	b.n	7db0 <__aeabi_dadd+0x5f0>
    7e06:	001d      	movs	r5, r3
    7e08:	e592      	b.n	7930 <__aeabi_dadd+0x170>
    7e0a:	2100      	movs	r1, #0
    7e0c:	e7f3      	b.n	7df6 <__aeabi_dadd+0x636>
    7e0e:	46c0      	nop			; (mov r8, r8)
    7e10:	000007ff 	.word	0x000007ff
    7e14:	ff7fffff 	.word	0xff7fffff

00007e18 <__aeabi_ddiv>:
    7e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e1a:	4656      	mov	r6, sl
    7e1c:	464d      	mov	r5, r9
    7e1e:	4644      	mov	r4, r8
    7e20:	465f      	mov	r7, fp
    7e22:	b4f0      	push	{r4, r5, r6, r7}
    7e24:	001d      	movs	r5, r3
    7e26:	030e      	lsls	r6, r1, #12
    7e28:	004c      	lsls	r4, r1, #1
    7e2a:	0fcb      	lsrs	r3, r1, #31
    7e2c:	b087      	sub	sp, #28
    7e2e:	0007      	movs	r7, r0
    7e30:	4692      	mov	sl, r2
    7e32:	4681      	mov	r9, r0
    7e34:	0b36      	lsrs	r6, r6, #12
    7e36:	0d64      	lsrs	r4, r4, #21
    7e38:	4698      	mov	r8, r3
    7e3a:	d06a      	beq.n	7f12 <__aeabi_ddiv+0xfa>
    7e3c:	4b6d      	ldr	r3, [pc, #436]	; (7ff4 <__aeabi_ddiv+0x1dc>)
    7e3e:	429c      	cmp	r4, r3
    7e40:	d035      	beq.n	7eae <__aeabi_ddiv+0x96>
    7e42:	2280      	movs	r2, #128	; 0x80
    7e44:	0f43      	lsrs	r3, r0, #29
    7e46:	0412      	lsls	r2, r2, #16
    7e48:	4313      	orrs	r3, r2
    7e4a:	00f6      	lsls	r6, r6, #3
    7e4c:	431e      	orrs	r6, r3
    7e4e:	00c3      	lsls	r3, r0, #3
    7e50:	4699      	mov	r9, r3
    7e52:	4b69      	ldr	r3, [pc, #420]	; (7ff8 <__aeabi_ddiv+0x1e0>)
    7e54:	2700      	movs	r7, #0
    7e56:	469c      	mov	ip, r3
    7e58:	2300      	movs	r3, #0
    7e5a:	4464      	add	r4, ip
    7e5c:	9302      	str	r3, [sp, #8]
    7e5e:	032b      	lsls	r3, r5, #12
    7e60:	0068      	lsls	r0, r5, #1
    7e62:	0b1b      	lsrs	r3, r3, #12
    7e64:	0fed      	lsrs	r5, r5, #31
    7e66:	4651      	mov	r1, sl
    7e68:	469b      	mov	fp, r3
    7e6a:	0d40      	lsrs	r0, r0, #21
    7e6c:	9500      	str	r5, [sp, #0]
    7e6e:	d100      	bne.n	7e72 <__aeabi_ddiv+0x5a>
    7e70:	e078      	b.n	7f64 <__aeabi_ddiv+0x14c>
    7e72:	4b60      	ldr	r3, [pc, #384]	; (7ff4 <__aeabi_ddiv+0x1dc>)
    7e74:	4298      	cmp	r0, r3
    7e76:	d06c      	beq.n	7f52 <__aeabi_ddiv+0x13a>
    7e78:	465b      	mov	r3, fp
    7e7a:	00da      	lsls	r2, r3, #3
    7e7c:	0f4b      	lsrs	r3, r1, #29
    7e7e:	2180      	movs	r1, #128	; 0x80
    7e80:	0409      	lsls	r1, r1, #16
    7e82:	430b      	orrs	r3, r1
    7e84:	4313      	orrs	r3, r2
    7e86:	469b      	mov	fp, r3
    7e88:	4653      	mov	r3, sl
    7e8a:	00d9      	lsls	r1, r3, #3
    7e8c:	4b5a      	ldr	r3, [pc, #360]	; (7ff8 <__aeabi_ddiv+0x1e0>)
    7e8e:	469c      	mov	ip, r3
    7e90:	2300      	movs	r3, #0
    7e92:	4460      	add	r0, ip
    7e94:	4642      	mov	r2, r8
    7e96:	1a20      	subs	r0, r4, r0
    7e98:	406a      	eors	r2, r5
    7e9a:	4692      	mov	sl, r2
    7e9c:	9001      	str	r0, [sp, #4]
    7e9e:	431f      	orrs	r7, r3
    7ea0:	2f0f      	cmp	r7, #15
    7ea2:	d900      	bls.n	7ea6 <__aeabi_ddiv+0x8e>
    7ea4:	e0b0      	b.n	8008 <__aeabi_ddiv+0x1f0>
    7ea6:	4855      	ldr	r0, [pc, #340]	; (7ffc <__aeabi_ddiv+0x1e4>)
    7ea8:	00bf      	lsls	r7, r7, #2
    7eaa:	59c0      	ldr	r0, [r0, r7]
    7eac:	4687      	mov	pc, r0
    7eae:	4337      	orrs	r7, r6
    7eb0:	d000      	beq.n	7eb4 <__aeabi_ddiv+0x9c>
    7eb2:	e088      	b.n	7fc6 <__aeabi_ddiv+0x1ae>
    7eb4:	2300      	movs	r3, #0
    7eb6:	4699      	mov	r9, r3
    7eb8:	3302      	adds	r3, #2
    7eba:	2708      	movs	r7, #8
    7ebc:	2600      	movs	r6, #0
    7ebe:	9302      	str	r3, [sp, #8]
    7ec0:	e7cd      	b.n	7e5e <__aeabi_ddiv+0x46>
    7ec2:	4643      	mov	r3, r8
    7ec4:	46b3      	mov	fp, r6
    7ec6:	4649      	mov	r1, r9
    7ec8:	9300      	str	r3, [sp, #0]
    7eca:	9b02      	ldr	r3, [sp, #8]
    7ecc:	9a00      	ldr	r2, [sp, #0]
    7ece:	4692      	mov	sl, r2
    7ed0:	2b02      	cmp	r3, #2
    7ed2:	d000      	beq.n	7ed6 <__aeabi_ddiv+0xbe>
    7ed4:	e1bf      	b.n	8256 <__aeabi_ddiv+0x43e>
    7ed6:	2100      	movs	r1, #0
    7ed8:	4653      	mov	r3, sl
    7eda:	2201      	movs	r2, #1
    7edc:	2600      	movs	r6, #0
    7ede:	4689      	mov	r9, r1
    7ee0:	401a      	ands	r2, r3
    7ee2:	4b44      	ldr	r3, [pc, #272]	; (7ff4 <__aeabi_ddiv+0x1dc>)
    7ee4:	2100      	movs	r1, #0
    7ee6:	0336      	lsls	r6, r6, #12
    7ee8:	0d0c      	lsrs	r4, r1, #20
    7eea:	0524      	lsls	r4, r4, #20
    7eec:	0b36      	lsrs	r6, r6, #12
    7eee:	4326      	orrs	r6, r4
    7ef0:	4c43      	ldr	r4, [pc, #268]	; (8000 <__aeabi_ddiv+0x1e8>)
    7ef2:	051b      	lsls	r3, r3, #20
    7ef4:	4026      	ands	r6, r4
    7ef6:	431e      	orrs	r6, r3
    7ef8:	0076      	lsls	r6, r6, #1
    7efa:	07d2      	lsls	r2, r2, #31
    7efc:	0876      	lsrs	r6, r6, #1
    7efe:	4316      	orrs	r6, r2
    7f00:	4648      	mov	r0, r9
    7f02:	0031      	movs	r1, r6
    7f04:	b007      	add	sp, #28
    7f06:	bc3c      	pop	{r2, r3, r4, r5}
    7f08:	4690      	mov	r8, r2
    7f0a:	4699      	mov	r9, r3
    7f0c:	46a2      	mov	sl, r4
    7f0e:	46ab      	mov	fp, r5
    7f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f12:	0033      	movs	r3, r6
    7f14:	4303      	orrs	r3, r0
    7f16:	d04f      	beq.n	7fb8 <__aeabi_ddiv+0x1a0>
    7f18:	2e00      	cmp	r6, #0
    7f1a:	d100      	bne.n	7f1e <__aeabi_ddiv+0x106>
    7f1c:	e1bc      	b.n	8298 <__aeabi_ddiv+0x480>
    7f1e:	0030      	movs	r0, r6
    7f20:	f001 fada 	bl	94d8 <__clzsi2>
    7f24:	0003      	movs	r3, r0
    7f26:	3b0b      	subs	r3, #11
    7f28:	2b1c      	cmp	r3, #28
    7f2a:	dd00      	ble.n	7f2e <__aeabi_ddiv+0x116>
    7f2c:	e1ad      	b.n	828a <__aeabi_ddiv+0x472>
    7f2e:	221d      	movs	r2, #29
    7f30:	0001      	movs	r1, r0
    7f32:	1ad3      	subs	r3, r2, r3
    7f34:	3908      	subs	r1, #8
    7f36:	003a      	movs	r2, r7
    7f38:	408f      	lsls	r7, r1
    7f3a:	408e      	lsls	r6, r1
    7f3c:	40da      	lsrs	r2, r3
    7f3e:	46b9      	mov	r9, r7
    7f40:	4316      	orrs	r6, r2
    7f42:	4b30      	ldr	r3, [pc, #192]	; (8004 <__aeabi_ddiv+0x1ec>)
    7f44:	2700      	movs	r7, #0
    7f46:	469c      	mov	ip, r3
    7f48:	2300      	movs	r3, #0
    7f4a:	4460      	add	r0, ip
    7f4c:	4244      	negs	r4, r0
    7f4e:	9302      	str	r3, [sp, #8]
    7f50:	e785      	b.n	7e5e <__aeabi_ddiv+0x46>
    7f52:	4653      	mov	r3, sl
    7f54:	465a      	mov	r2, fp
    7f56:	4313      	orrs	r3, r2
    7f58:	d12c      	bne.n	7fb4 <__aeabi_ddiv+0x19c>
    7f5a:	2300      	movs	r3, #0
    7f5c:	2100      	movs	r1, #0
    7f5e:	469b      	mov	fp, r3
    7f60:	3302      	adds	r3, #2
    7f62:	e797      	b.n	7e94 <__aeabi_ddiv+0x7c>
    7f64:	430b      	orrs	r3, r1
    7f66:	d020      	beq.n	7faa <__aeabi_ddiv+0x192>
    7f68:	465b      	mov	r3, fp
    7f6a:	2b00      	cmp	r3, #0
    7f6c:	d100      	bne.n	7f70 <__aeabi_ddiv+0x158>
    7f6e:	e19e      	b.n	82ae <__aeabi_ddiv+0x496>
    7f70:	4658      	mov	r0, fp
    7f72:	f001 fab1 	bl	94d8 <__clzsi2>
    7f76:	0003      	movs	r3, r0
    7f78:	3b0b      	subs	r3, #11
    7f7a:	2b1c      	cmp	r3, #28
    7f7c:	dd00      	ble.n	7f80 <__aeabi_ddiv+0x168>
    7f7e:	e18f      	b.n	82a0 <__aeabi_ddiv+0x488>
    7f80:	0002      	movs	r2, r0
    7f82:	4659      	mov	r1, fp
    7f84:	3a08      	subs	r2, #8
    7f86:	4091      	lsls	r1, r2
    7f88:	468b      	mov	fp, r1
    7f8a:	211d      	movs	r1, #29
    7f8c:	1acb      	subs	r3, r1, r3
    7f8e:	4651      	mov	r1, sl
    7f90:	40d9      	lsrs	r1, r3
    7f92:	000b      	movs	r3, r1
    7f94:	4659      	mov	r1, fp
    7f96:	430b      	orrs	r3, r1
    7f98:	4651      	mov	r1, sl
    7f9a:	469b      	mov	fp, r3
    7f9c:	4091      	lsls	r1, r2
    7f9e:	4b19      	ldr	r3, [pc, #100]	; (8004 <__aeabi_ddiv+0x1ec>)
    7fa0:	469c      	mov	ip, r3
    7fa2:	4460      	add	r0, ip
    7fa4:	4240      	negs	r0, r0
    7fa6:	2300      	movs	r3, #0
    7fa8:	e774      	b.n	7e94 <__aeabi_ddiv+0x7c>
    7faa:	2300      	movs	r3, #0
    7fac:	2100      	movs	r1, #0
    7fae:	469b      	mov	fp, r3
    7fb0:	3301      	adds	r3, #1
    7fb2:	e76f      	b.n	7e94 <__aeabi_ddiv+0x7c>
    7fb4:	2303      	movs	r3, #3
    7fb6:	e76d      	b.n	7e94 <__aeabi_ddiv+0x7c>
    7fb8:	2300      	movs	r3, #0
    7fba:	4699      	mov	r9, r3
    7fbc:	3301      	adds	r3, #1
    7fbe:	2704      	movs	r7, #4
    7fc0:	2600      	movs	r6, #0
    7fc2:	9302      	str	r3, [sp, #8]
    7fc4:	e74b      	b.n	7e5e <__aeabi_ddiv+0x46>
    7fc6:	2303      	movs	r3, #3
    7fc8:	270c      	movs	r7, #12
    7fca:	9302      	str	r3, [sp, #8]
    7fcc:	e747      	b.n	7e5e <__aeabi_ddiv+0x46>
    7fce:	2201      	movs	r2, #1
    7fd0:	1ad5      	subs	r5, r2, r3
    7fd2:	2d38      	cmp	r5, #56	; 0x38
    7fd4:	dc00      	bgt.n	7fd8 <__aeabi_ddiv+0x1c0>
    7fd6:	e1b0      	b.n	833a <__aeabi_ddiv+0x522>
    7fd8:	4653      	mov	r3, sl
    7fda:	401a      	ands	r2, r3
    7fdc:	2100      	movs	r1, #0
    7fde:	2300      	movs	r3, #0
    7fe0:	2600      	movs	r6, #0
    7fe2:	4689      	mov	r9, r1
    7fe4:	e77e      	b.n	7ee4 <__aeabi_ddiv+0xcc>
    7fe6:	2300      	movs	r3, #0
    7fe8:	2680      	movs	r6, #128	; 0x80
    7fea:	4699      	mov	r9, r3
    7fec:	2200      	movs	r2, #0
    7fee:	0336      	lsls	r6, r6, #12
    7ff0:	4b00      	ldr	r3, [pc, #0]	; (7ff4 <__aeabi_ddiv+0x1dc>)
    7ff2:	e777      	b.n	7ee4 <__aeabi_ddiv+0xcc>
    7ff4:	000007ff 	.word	0x000007ff
    7ff8:	fffffc01 	.word	0xfffffc01
    7ffc:	0000eb80 	.word	0x0000eb80
    8000:	800fffff 	.word	0x800fffff
    8004:	000003f3 	.word	0x000003f3
    8008:	455e      	cmp	r6, fp
    800a:	d900      	bls.n	800e <__aeabi_ddiv+0x1f6>
    800c:	e172      	b.n	82f4 <__aeabi_ddiv+0x4dc>
    800e:	d100      	bne.n	8012 <__aeabi_ddiv+0x1fa>
    8010:	e16d      	b.n	82ee <__aeabi_ddiv+0x4d6>
    8012:	9b01      	ldr	r3, [sp, #4]
    8014:	464d      	mov	r5, r9
    8016:	3b01      	subs	r3, #1
    8018:	9301      	str	r3, [sp, #4]
    801a:	2300      	movs	r3, #0
    801c:	0034      	movs	r4, r6
    801e:	9302      	str	r3, [sp, #8]
    8020:	465b      	mov	r3, fp
    8022:	021e      	lsls	r6, r3, #8
    8024:	0e0b      	lsrs	r3, r1, #24
    8026:	431e      	orrs	r6, r3
    8028:	020b      	lsls	r3, r1, #8
    802a:	9303      	str	r3, [sp, #12]
    802c:	0c33      	lsrs	r3, r6, #16
    802e:	4699      	mov	r9, r3
    8030:	0433      	lsls	r3, r6, #16
    8032:	0c1b      	lsrs	r3, r3, #16
    8034:	4649      	mov	r1, r9
    8036:	0020      	movs	r0, r4
    8038:	9300      	str	r3, [sp, #0]
    803a:	f7fe fcad 	bl	6998 <__aeabi_uidiv>
    803e:	9b00      	ldr	r3, [sp, #0]
    8040:	0037      	movs	r7, r6
    8042:	4343      	muls	r3, r0
    8044:	0006      	movs	r6, r0
    8046:	4649      	mov	r1, r9
    8048:	0020      	movs	r0, r4
    804a:	4698      	mov	r8, r3
    804c:	f7fe fd2a 	bl	6aa4 <__aeabi_uidivmod>
    8050:	0c2c      	lsrs	r4, r5, #16
    8052:	0409      	lsls	r1, r1, #16
    8054:	430c      	orrs	r4, r1
    8056:	45a0      	cmp	r8, r4
    8058:	d909      	bls.n	806e <__aeabi_ddiv+0x256>
    805a:	19e4      	adds	r4, r4, r7
    805c:	1e73      	subs	r3, r6, #1
    805e:	42a7      	cmp	r7, r4
    8060:	d900      	bls.n	8064 <__aeabi_ddiv+0x24c>
    8062:	e15c      	b.n	831e <__aeabi_ddiv+0x506>
    8064:	45a0      	cmp	r8, r4
    8066:	d800      	bhi.n	806a <__aeabi_ddiv+0x252>
    8068:	e159      	b.n	831e <__aeabi_ddiv+0x506>
    806a:	3e02      	subs	r6, #2
    806c:	19e4      	adds	r4, r4, r7
    806e:	4643      	mov	r3, r8
    8070:	1ae4      	subs	r4, r4, r3
    8072:	4649      	mov	r1, r9
    8074:	0020      	movs	r0, r4
    8076:	f7fe fc8f 	bl	6998 <__aeabi_uidiv>
    807a:	0003      	movs	r3, r0
    807c:	9a00      	ldr	r2, [sp, #0]
    807e:	4680      	mov	r8, r0
    8080:	4353      	muls	r3, r2
    8082:	4649      	mov	r1, r9
    8084:	0020      	movs	r0, r4
    8086:	469b      	mov	fp, r3
    8088:	f7fe fd0c 	bl	6aa4 <__aeabi_uidivmod>
    808c:	042a      	lsls	r2, r5, #16
    808e:	0409      	lsls	r1, r1, #16
    8090:	0c12      	lsrs	r2, r2, #16
    8092:	430a      	orrs	r2, r1
    8094:	4593      	cmp	fp, r2
    8096:	d90d      	bls.n	80b4 <__aeabi_ddiv+0x29c>
    8098:	4643      	mov	r3, r8
    809a:	19d2      	adds	r2, r2, r7
    809c:	3b01      	subs	r3, #1
    809e:	4297      	cmp	r7, r2
    80a0:	d900      	bls.n	80a4 <__aeabi_ddiv+0x28c>
    80a2:	e13a      	b.n	831a <__aeabi_ddiv+0x502>
    80a4:	4593      	cmp	fp, r2
    80a6:	d800      	bhi.n	80aa <__aeabi_ddiv+0x292>
    80a8:	e137      	b.n	831a <__aeabi_ddiv+0x502>
    80aa:	2302      	movs	r3, #2
    80ac:	425b      	negs	r3, r3
    80ae:	469c      	mov	ip, r3
    80b0:	19d2      	adds	r2, r2, r7
    80b2:	44e0      	add	r8, ip
    80b4:	465b      	mov	r3, fp
    80b6:	1ad2      	subs	r2, r2, r3
    80b8:	4643      	mov	r3, r8
    80ba:	0436      	lsls	r6, r6, #16
    80bc:	4333      	orrs	r3, r6
    80be:	469b      	mov	fp, r3
    80c0:	9903      	ldr	r1, [sp, #12]
    80c2:	0c18      	lsrs	r0, r3, #16
    80c4:	0c0b      	lsrs	r3, r1, #16
    80c6:	001d      	movs	r5, r3
    80c8:	9305      	str	r3, [sp, #20]
    80ca:	0409      	lsls	r1, r1, #16
    80cc:	465b      	mov	r3, fp
    80ce:	0c09      	lsrs	r1, r1, #16
    80d0:	000c      	movs	r4, r1
    80d2:	041b      	lsls	r3, r3, #16
    80d4:	0c1b      	lsrs	r3, r3, #16
    80d6:	4344      	muls	r4, r0
    80d8:	9104      	str	r1, [sp, #16]
    80da:	4359      	muls	r1, r3
    80dc:	436b      	muls	r3, r5
    80de:	4368      	muls	r0, r5
    80e0:	191b      	adds	r3, r3, r4
    80e2:	0c0d      	lsrs	r5, r1, #16
    80e4:	18eb      	adds	r3, r5, r3
    80e6:	429c      	cmp	r4, r3
    80e8:	d903      	bls.n	80f2 <__aeabi_ddiv+0x2da>
    80ea:	2480      	movs	r4, #128	; 0x80
    80ec:	0264      	lsls	r4, r4, #9
    80ee:	46a4      	mov	ip, r4
    80f0:	4460      	add	r0, ip
    80f2:	0c1c      	lsrs	r4, r3, #16
    80f4:	0409      	lsls	r1, r1, #16
    80f6:	041b      	lsls	r3, r3, #16
    80f8:	0c09      	lsrs	r1, r1, #16
    80fa:	1820      	adds	r0, r4, r0
    80fc:	185d      	adds	r5, r3, r1
    80fe:	4282      	cmp	r2, r0
    8100:	d200      	bcs.n	8104 <__aeabi_ddiv+0x2ec>
    8102:	e0de      	b.n	82c2 <__aeabi_ddiv+0x4aa>
    8104:	d100      	bne.n	8108 <__aeabi_ddiv+0x2f0>
    8106:	e0d7      	b.n	82b8 <__aeabi_ddiv+0x4a0>
    8108:	1a16      	subs	r6, r2, r0
    810a:	9b02      	ldr	r3, [sp, #8]
    810c:	469c      	mov	ip, r3
    810e:	1b5d      	subs	r5, r3, r5
    8110:	45ac      	cmp	ip, r5
    8112:	419b      	sbcs	r3, r3
    8114:	425b      	negs	r3, r3
    8116:	1af6      	subs	r6, r6, r3
    8118:	42b7      	cmp	r7, r6
    811a:	d100      	bne.n	811e <__aeabi_ddiv+0x306>
    811c:	e106      	b.n	832c <__aeabi_ddiv+0x514>
    811e:	4649      	mov	r1, r9
    8120:	0030      	movs	r0, r6
    8122:	f7fe fc39 	bl	6998 <__aeabi_uidiv>
    8126:	9b00      	ldr	r3, [sp, #0]
    8128:	0004      	movs	r4, r0
    812a:	4343      	muls	r3, r0
    812c:	4649      	mov	r1, r9
    812e:	0030      	movs	r0, r6
    8130:	4698      	mov	r8, r3
    8132:	f7fe fcb7 	bl	6aa4 <__aeabi_uidivmod>
    8136:	0c2e      	lsrs	r6, r5, #16
    8138:	0409      	lsls	r1, r1, #16
    813a:	430e      	orrs	r6, r1
    813c:	45b0      	cmp	r8, r6
    813e:	d909      	bls.n	8154 <__aeabi_ddiv+0x33c>
    8140:	19f6      	adds	r6, r6, r7
    8142:	1e63      	subs	r3, r4, #1
    8144:	42b7      	cmp	r7, r6
    8146:	d900      	bls.n	814a <__aeabi_ddiv+0x332>
    8148:	e0f3      	b.n	8332 <__aeabi_ddiv+0x51a>
    814a:	45b0      	cmp	r8, r6
    814c:	d800      	bhi.n	8150 <__aeabi_ddiv+0x338>
    814e:	e0f0      	b.n	8332 <__aeabi_ddiv+0x51a>
    8150:	3c02      	subs	r4, #2
    8152:	19f6      	adds	r6, r6, r7
    8154:	4643      	mov	r3, r8
    8156:	1af3      	subs	r3, r6, r3
    8158:	4649      	mov	r1, r9
    815a:	0018      	movs	r0, r3
    815c:	9302      	str	r3, [sp, #8]
    815e:	f7fe fc1b 	bl	6998 <__aeabi_uidiv>
    8162:	9b00      	ldr	r3, [sp, #0]
    8164:	0006      	movs	r6, r0
    8166:	4343      	muls	r3, r0
    8168:	4649      	mov	r1, r9
    816a:	9802      	ldr	r0, [sp, #8]
    816c:	4698      	mov	r8, r3
    816e:	f7fe fc99 	bl	6aa4 <__aeabi_uidivmod>
    8172:	042d      	lsls	r5, r5, #16
    8174:	0409      	lsls	r1, r1, #16
    8176:	0c2d      	lsrs	r5, r5, #16
    8178:	430d      	orrs	r5, r1
    817a:	45a8      	cmp	r8, r5
    817c:	d909      	bls.n	8192 <__aeabi_ddiv+0x37a>
    817e:	19ed      	adds	r5, r5, r7
    8180:	1e73      	subs	r3, r6, #1
    8182:	42af      	cmp	r7, r5
    8184:	d900      	bls.n	8188 <__aeabi_ddiv+0x370>
    8186:	e0d6      	b.n	8336 <__aeabi_ddiv+0x51e>
    8188:	45a8      	cmp	r8, r5
    818a:	d800      	bhi.n	818e <__aeabi_ddiv+0x376>
    818c:	e0d3      	b.n	8336 <__aeabi_ddiv+0x51e>
    818e:	3e02      	subs	r6, #2
    8190:	19ed      	adds	r5, r5, r7
    8192:	0424      	lsls	r4, r4, #16
    8194:	0021      	movs	r1, r4
    8196:	4643      	mov	r3, r8
    8198:	4331      	orrs	r1, r6
    819a:	9e04      	ldr	r6, [sp, #16]
    819c:	9a05      	ldr	r2, [sp, #20]
    819e:	0030      	movs	r0, r6
    81a0:	1aed      	subs	r5, r5, r3
    81a2:	040b      	lsls	r3, r1, #16
    81a4:	0c0c      	lsrs	r4, r1, #16
    81a6:	0c1b      	lsrs	r3, r3, #16
    81a8:	4358      	muls	r0, r3
    81aa:	4366      	muls	r6, r4
    81ac:	4353      	muls	r3, r2
    81ae:	4354      	muls	r4, r2
    81b0:	199a      	adds	r2, r3, r6
    81b2:	0c03      	lsrs	r3, r0, #16
    81b4:	189b      	adds	r3, r3, r2
    81b6:	429e      	cmp	r6, r3
    81b8:	d903      	bls.n	81c2 <__aeabi_ddiv+0x3aa>
    81ba:	2280      	movs	r2, #128	; 0x80
    81bc:	0252      	lsls	r2, r2, #9
    81be:	4694      	mov	ip, r2
    81c0:	4464      	add	r4, ip
    81c2:	0c1a      	lsrs	r2, r3, #16
    81c4:	0400      	lsls	r0, r0, #16
    81c6:	041b      	lsls	r3, r3, #16
    81c8:	0c00      	lsrs	r0, r0, #16
    81ca:	1914      	adds	r4, r2, r4
    81cc:	181b      	adds	r3, r3, r0
    81ce:	42a5      	cmp	r5, r4
    81d0:	d350      	bcc.n	8274 <__aeabi_ddiv+0x45c>
    81d2:	d04d      	beq.n	8270 <__aeabi_ddiv+0x458>
    81d4:	2301      	movs	r3, #1
    81d6:	4319      	orrs	r1, r3
    81d8:	4a96      	ldr	r2, [pc, #600]	; (8434 <__aeabi_ddiv+0x61c>)
    81da:	9b01      	ldr	r3, [sp, #4]
    81dc:	4694      	mov	ip, r2
    81de:	4463      	add	r3, ip
    81e0:	2b00      	cmp	r3, #0
    81e2:	dc00      	bgt.n	81e6 <__aeabi_ddiv+0x3ce>
    81e4:	e6f3      	b.n	7fce <__aeabi_ddiv+0x1b6>
    81e6:	074a      	lsls	r2, r1, #29
    81e8:	d009      	beq.n	81fe <__aeabi_ddiv+0x3e6>
    81ea:	220f      	movs	r2, #15
    81ec:	400a      	ands	r2, r1
    81ee:	2a04      	cmp	r2, #4
    81f0:	d005      	beq.n	81fe <__aeabi_ddiv+0x3e6>
    81f2:	1d0a      	adds	r2, r1, #4
    81f4:	428a      	cmp	r2, r1
    81f6:	4189      	sbcs	r1, r1
    81f8:	4249      	negs	r1, r1
    81fa:	448b      	add	fp, r1
    81fc:	0011      	movs	r1, r2
    81fe:	465a      	mov	r2, fp
    8200:	01d2      	lsls	r2, r2, #7
    8202:	d508      	bpl.n	8216 <__aeabi_ddiv+0x3fe>
    8204:	465a      	mov	r2, fp
    8206:	4b8c      	ldr	r3, [pc, #560]	; (8438 <__aeabi_ddiv+0x620>)
    8208:	401a      	ands	r2, r3
    820a:	4693      	mov	fp, r2
    820c:	2280      	movs	r2, #128	; 0x80
    820e:	00d2      	lsls	r2, r2, #3
    8210:	4694      	mov	ip, r2
    8212:	9b01      	ldr	r3, [sp, #4]
    8214:	4463      	add	r3, ip
    8216:	4a89      	ldr	r2, [pc, #548]	; (843c <__aeabi_ddiv+0x624>)
    8218:	4293      	cmp	r3, r2
    821a:	dd00      	ble.n	821e <__aeabi_ddiv+0x406>
    821c:	e65b      	b.n	7ed6 <__aeabi_ddiv+0xbe>
    821e:	465a      	mov	r2, fp
    8220:	08c9      	lsrs	r1, r1, #3
    8222:	0750      	lsls	r0, r2, #29
    8224:	4308      	orrs	r0, r1
    8226:	0256      	lsls	r6, r2, #9
    8228:	4651      	mov	r1, sl
    822a:	2201      	movs	r2, #1
    822c:	055b      	lsls	r3, r3, #21
    822e:	4681      	mov	r9, r0
    8230:	0b36      	lsrs	r6, r6, #12
    8232:	0d5b      	lsrs	r3, r3, #21
    8234:	400a      	ands	r2, r1
    8236:	e655      	b.n	7ee4 <__aeabi_ddiv+0xcc>
    8238:	2380      	movs	r3, #128	; 0x80
    823a:	031b      	lsls	r3, r3, #12
    823c:	421e      	tst	r6, r3
    823e:	d011      	beq.n	8264 <__aeabi_ddiv+0x44c>
    8240:	465a      	mov	r2, fp
    8242:	421a      	tst	r2, r3
    8244:	d10e      	bne.n	8264 <__aeabi_ddiv+0x44c>
    8246:	465e      	mov	r6, fp
    8248:	431e      	orrs	r6, r3
    824a:	0336      	lsls	r6, r6, #12
    824c:	0b36      	lsrs	r6, r6, #12
    824e:	002a      	movs	r2, r5
    8250:	4689      	mov	r9, r1
    8252:	4b7b      	ldr	r3, [pc, #492]	; (8440 <__aeabi_ddiv+0x628>)
    8254:	e646      	b.n	7ee4 <__aeabi_ddiv+0xcc>
    8256:	2b03      	cmp	r3, #3
    8258:	d100      	bne.n	825c <__aeabi_ddiv+0x444>
    825a:	e0e1      	b.n	8420 <__aeabi_ddiv+0x608>
    825c:	2b01      	cmp	r3, #1
    825e:	d1bb      	bne.n	81d8 <__aeabi_ddiv+0x3c0>
    8260:	401a      	ands	r2, r3
    8262:	e6bb      	b.n	7fdc <__aeabi_ddiv+0x1c4>
    8264:	431e      	orrs	r6, r3
    8266:	0336      	lsls	r6, r6, #12
    8268:	0b36      	lsrs	r6, r6, #12
    826a:	4642      	mov	r2, r8
    826c:	4b74      	ldr	r3, [pc, #464]	; (8440 <__aeabi_ddiv+0x628>)
    826e:	e639      	b.n	7ee4 <__aeabi_ddiv+0xcc>
    8270:	2b00      	cmp	r3, #0
    8272:	d0b1      	beq.n	81d8 <__aeabi_ddiv+0x3c0>
    8274:	197d      	adds	r5, r7, r5
    8276:	1e4a      	subs	r2, r1, #1
    8278:	42af      	cmp	r7, r5
    827a:	d952      	bls.n	8322 <__aeabi_ddiv+0x50a>
    827c:	0011      	movs	r1, r2
    827e:	42a5      	cmp	r5, r4
    8280:	d1a8      	bne.n	81d4 <__aeabi_ddiv+0x3bc>
    8282:	9a03      	ldr	r2, [sp, #12]
    8284:	429a      	cmp	r2, r3
    8286:	d1a5      	bne.n	81d4 <__aeabi_ddiv+0x3bc>
    8288:	e7a6      	b.n	81d8 <__aeabi_ddiv+0x3c0>
    828a:	0003      	movs	r3, r0
    828c:	003e      	movs	r6, r7
    828e:	3b28      	subs	r3, #40	; 0x28
    8290:	409e      	lsls	r6, r3
    8292:	2300      	movs	r3, #0
    8294:	4699      	mov	r9, r3
    8296:	e654      	b.n	7f42 <__aeabi_ddiv+0x12a>
    8298:	f001 f91e 	bl	94d8 <__clzsi2>
    829c:	3020      	adds	r0, #32
    829e:	e641      	b.n	7f24 <__aeabi_ddiv+0x10c>
    82a0:	0003      	movs	r3, r0
    82a2:	4652      	mov	r2, sl
    82a4:	3b28      	subs	r3, #40	; 0x28
    82a6:	409a      	lsls	r2, r3
    82a8:	2100      	movs	r1, #0
    82aa:	4693      	mov	fp, r2
    82ac:	e677      	b.n	7f9e <__aeabi_ddiv+0x186>
    82ae:	4650      	mov	r0, sl
    82b0:	f001 f912 	bl	94d8 <__clzsi2>
    82b4:	3020      	adds	r0, #32
    82b6:	e65e      	b.n	7f76 <__aeabi_ddiv+0x15e>
    82b8:	9b02      	ldr	r3, [sp, #8]
    82ba:	2600      	movs	r6, #0
    82bc:	42ab      	cmp	r3, r5
    82be:	d300      	bcc.n	82c2 <__aeabi_ddiv+0x4aa>
    82c0:	e723      	b.n	810a <__aeabi_ddiv+0x2f2>
    82c2:	9e03      	ldr	r6, [sp, #12]
    82c4:	9902      	ldr	r1, [sp, #8]
    82c6:	46b4      	mov	ip, r6
    82c8:	4461      	add	r1, ip
    82ca:	4688      	mov	r8, r1
    82cc:	45b0      	cmp	r8, r6
    82ce:	41b6      	sbcs	r6, r6
    82d0:	465b      	mov	r3, fp
    82d2:	4276      	negs	r6, r6
    82d4:	19f6      	adds	r6, r6, r7
    82d6:	18b2      	adds	r2, r6, r2
    82d8:	3b01      	subs	r3, #1
    82da:	9102      	str	r1, [sp, #8]
    82dc:	4297      	cmp	r7, r2
    82de:	d213      	bcs.n	8308 <__aeabi_ddiv+0x4f0>
    82e0:	4290      	cmp	r0, r2
    82e2:	d84f      	bhi.n	8384 <__aeabi_ddiv+0x56c>
    82e4:	d100      	bne.n	82e8 <__aeabi_ddiv+0x4d0>
    82e6:	e08e      	b.n	8406 <__aeabi_ddiv+0x5ee>
    82e8:	1a16      	subs	r6, r2, r0
    82ea:	469b      	mov	fp, r3
    82ec:	e70d      	b.n	810a <__aeabi_ddiv+0x2f2>
    82ee:	4589      	cmp	r9, r1
    82f0:	d200      	bcs.n	82f4 <__aeabi_ddiv+0x4dc>
    82f2:	e68e      	b.n	8012 <__aeabi_ddiv+0x1fa>
    82f4:	0874      	lsrs	r4, r6, #1
    82f6:	464b      	mov	r3, r9
    82f8:	07f6      	lsls	r6, r6, #31
    82fa:	0035      	movs	r5, r6
    82fc:	085b      	lsrs	r3, r3, #1
    82fe:	431d      	orrs	r5, r3
    8300:	464b      	mov	r3, r9
    8302:	07db      	lsls	r3, r3, #31
    8304:	9302      	str	r3, [sp, #8]
    8306:	e68b      	b.n	8020 <__aeabi_ddiv+0x208>
    8308:	4297      	cmp	r7, r2
    830a:	d1ed      	bne.n	82e8 <__aeabi_ddiv+0x4d0>
    830c:	9903      	ldr	r1, [sp, #12]
    830e:	9c02      	ldr	r4, [sp, #8]
    8310:	42a1      	cmp	r1, r4
    8312:	d9e5      	bls.n	82e0 <__aeabi_ddiv+0x4c8>
    8314:	1a3e      	subs	r6, r7, r0
    8316:	469b      	mov	fp, r3
    8318:	e6f7      	b.n	810a <__aeabi_ddiv+0x2f2>
    831a:	4698      	mov	r8, r3
    831c:	e6ca      	b.n	80b4 <__aeabi_ddiv+0x29c>
    831e:	001e      	movs	r6, r3
    8320:	e6a5      	b.n	806e <__aeabi_ddiv+0x256>
    8322:	42ac      	cmp	r4, r5
    8324:	d83e      	bhi.n	83a4 <__aeabi_ddiv+0x58c>
    8326:	d074      	beq.n	8412 <__aeabi_ddiv+0x5fa>
    8328:	0011      	movs	r1, r2
    832a:	e753      	b.n	81d4 <__aeabi_ddiv+0x3bc>
    832c:	2101      	movs	r1, #1
    832e:	4249      	negs	r1, r1
    8330:	e752      	b.n	81d8 <__aeabi_ddiv+0x3c0>
    8332:	001c      	movs	r4, r3
    8334:	e70e      	b.n	8154 <__aeabi_ddiv+0x33c>
    8336:	001e      	movs	r6, r3
    8338:	e72b      	b.n	8192 <__aeabi_ddiv+0x37a>
    833a:	2d1f      	cmp	r5, #31
    833c:	dc3c      	bgt.n	83b8 <__aeabi_ddiv+0x5a0>
    833e:	2320      	movs	r3, #32
    8340:	000a      	movs	r2, r1
    8342:	4658      	mov	r0, fp
    8344:	1b5b      	subs	r3, r3, r5
    8346:	4098      	lsls	r0, r3
    8348:	40ea      	lsrs	r2, r5
    834a:	4099      	lsls	r1, r3
    834c:	4302      	orrs	r2, r0
    834e:	1e48      	subs	r0, r1, #1
    8350:	4181      	sbcs	r1, r0
    8352:	465e      	mov	r6, fp
    8354:	4311      	orrs	r1, r2
    8356:	40ee      	lsrs	r6, r5
    8358:	074b      	lsls	r3, r1, #29
    835a:	d009      	beq.n	8370 <__aeabi_ddiv+0x558>
    835c:	230f      	movs	r3, #15
    835e:	400b      	ands	r3, r1
    8360:	2b04      	cmp	r3, #4
    8362:	d005      	beq.n	8370 <__aeabi_ddiv+0x558>
    8364:	000b      	movs	r3, r1
    8366:	1d19      	adds	r1, r3, #4
    8368:	4299      	cmp	r1, r3
    836a:	419b      	sbcs	r3, r3
    836c:	425b      	negs	r3, r3
    836e:	18f6      	adds	r6, r6, r3
    8370:	0233      	lsls	r3, r6, #8
    8372:	d53c      	bpl.n	83ee <__aeabi_ddiv+0x5d6>
    8374:	4653      	mov	r3, sl
    8376:	2201      	movs	r2, #1
    8378:	2100      	movs	r1, #0
    837a:	401a      	ands	r2, r3
    837c:	2600      	movs	r6, #0
    837e:	2301      	movs	r3, #1
    8380:	4689      	mov	r9, r1
    8382:	e5af      	b.n	7ee4 <__aeabi_ddiv+0xcc>
    8384:	2302      	movs	r3, #2
    8386:	425b      	negs	r3, r3
    8388:	469c      	mov	ip, r3
    838a:	9c03      	ldr	r4, [sp, #12]
    838c:	44e3      	add	fp, ip
    838e:	46a4      	mov	ip, r4
    8390:	9b02      	ldr	r3, [sp, #8]
    8392:	4463      	add	r3, ip
    8394:	4698      	mov	r8, r3
    8396:	45a0      	cmp	r8, r4
    8398:	41b6      	sbcs	r6, r6
    839a:	4276      	negs	r6, r6
    839c:	19f6      	adds	r6, r6, r7
    839e:	9302      	str	r3, [sp, #8]
    83a0:	18b2      	adds	r2, r6, r2
    83a2:	e6b1      	b.n	8108 <__aeabi_ddiv+0x2f0>
    83a4:	9803      	ldr	r0, [sp, #12]
    83a6:	1e8a      	subs	r2, r1, #2
    83a8:	0041      	lsls	r1, r0, #1
    83aa:	4281      	cmp	r1, r0
    83ac:	41b6      	sbcs	r6, r6
    83ae:	4276      	negs	r6, r6
    83b0:	19f6      	adds	r6, r6, r7
    83b2:	19ad      	adds	r5, r5, r6
    83b4:	9103      	str	r1, [sp, #12]
    83b6:	e761      	b.n	827c <__aeabi_ddiv+0x464>
    83b8:	221f      	movs	r2, #31
    83ba:	4252      	negs	r2, r2
    83bc:	1ad3      	subs	r3, r2, r3
    83be:	465a      	mov	r2, fp
    83c0:	40da      	lsrs	r2, r3
    83c2:	0013      	movs	r3, r2
    83c4:	2d20      	cmp	r5, #32
    83c6:	d029      	beq.n	841c <__aeabi_ddiv+0x604>
    83c8:	2240      	movs	r2, #64	; 0x40
    83ca:	4658      	mov	r0, fp
    83cc:	1b55      	subs	r5, r2, r5
    83ce:	40a8      	lsls	r0, r5
    83d0:	4301      	orrs	r1, r0
    83d2:	1e48      	subs	r0, r1, #1
    83d4:	4181      	sbcs	r1, r0
    83d6:	2007      	movs	r0, #7
    83d8:	430b      	orrs	r3, r1
    83da:	4018      	ands	r0, r3
    83dc:	2600      	movs	r6, #0
    83de:	2800      	cmp	r0, #0
    83e0:	d009      	beq.n	83f6 <__aeabi_ddiv+0x5de>
    83e2:	220f      	movs	r2, #15
    83e4:	2600      	movs	r6, #0
    83e6:	401a      	ands	r2, r3
    83e8:	0019      	movs	r1, r3
    83ea:	2a04      	cmp	r2, #4
    83ec:	d1bb      	bne.n	8366 <__aeabi_ddiv+0x54e>
    83ee:	000b      	movs	r3, r1
    83f0:	0770      	lsls	r0, r6, #29
    83f2:	0276      	lsls	r6, r6, #9
    83f4:	0b36      	lsrs	r6, r6, #12
    83f6:	08db      	lsrs	r3, r3, #3
    83f8:	4303      	orrs	r3, r0
    83fa:	4699      	mov	r9, r3
    83fc:	2201      	movs	r2, #1
    83fe:	4653      	mov	r3, sl
    8400:	401a      	ands	r2, r3
    8402:	2300      	movs	r3, #0
    8404:	e56e      	b.n	7ee4 <__aeabi_ddiv+0xcc>
    8406:	9902      	ldr	r1, [sp, #8]
    8408:	428d      	cmp	r5, r1
    840a:	d8bb      	bhi.n	8384 <__aeabi_ddiv+0x56c>
    840c:	469b      	mov	fp, r3
    840e:	2600      	movs	r6, #0
    8410:	e67b      	b.n	810a <__aeabi_ddiv+0x2f2>
    8412:	9803      	ldr	r0, [sp, #12]
    8414:	4298      	cmp	r0, r3
    8416:	d3c5      	bcc.n	83a4 <__aeabi_ddiv+0x58c>
    8418:	0011      	movs	r1, r2
    841a:	e732      	b.n	8282 <__aeabi_ddiv+0x46a>
    841c:	2000      	movs	r0, #0
    841e:	e7d7      	b.n	83d0 <__aeabi_ddiv+0x5b8>
    8420:	2680      	movs	r6, #128	; 0x80
    8422:	465b      	mov	r3, fp
    8424:	0336      	lsls	r6, r6, #12
    8426:	431e      	orrs	r6, r3
    8428:	0336      	lsls	r6, r6, #12
    842a:	0b36      	lsrs	r6, r6, #12
    842c:	9a00      	ldr	r2, [sp, #0]
    842e:	4689      	mov	r9, r1
    8430:	4b03      	ldr	r3, [pc, #12]	; (8440 <__aeabi_ddiv+0x628>)
    8432:	e557      	b.n	7ee4 <__aeabi_ddiv+0xcc>
    8434:	000003ff 	.word	0x000003ff
    8438:	feffffff 	.word	0xfeffffff
    843c:	000007fe 	.word	0x000007fe
    8440:	000007ff 	.word	0x000007ff

00008444 <__eqdf2>:
    8444:	b5f0      	push	{r4, r5, r6, r7, lr}
    8446:	465f      	mov	r7, fp
    8448:	4656      	mov	r6, sl
    844a:	464d      	mov	r5, r9
    844c:	4644      	mov	r4, r8
    844e:	b4f0      	push	{r4, r5, r6, r7}
    8450:	031f      	lsls	r7, r3, #12
    8452:	005c      	lsls	r4, r3, #1
    8454:	0fdb      	lsrs	r3, r3, #31
    8456:	469a      	mov	sl, r3
    8458:	4b19      	ldr	r3, [pc, #100]	; (84c0 <__eqdf2+0x7c>)
    845a:	030e      	lsls	r6, r1, #12
    845c:	004d      	lsls	r5, r1, #1
    845e:	0fc9      	lsrs	r1, r1, #31
    8460:	4680      	mov	r8, r0
    8462:	0b36      	lsrs	r6, r6, #12
    8464:	0d6d      	lsrs	r5, r5, #21
    8466:	468b      	mov	fp, r1
    8468:	4691      	mov	r9, r2
    846a:	0b3f      	lsrs	r7, r7, #12
    846c:	0d64      	lsrs	r4, r4, #21
    846e:	429d      	cmp	r5, r3
    8470:	d019      	beq.n	84a6 <__eqdf2+0x62>
    8472:	4b13      	ldr	r3, [pc, #76]	; (84c0 <__eqdf2+0x7c>)
    8474:	429c      	cmp	r4, r3
    8476:	d01b      	beq.n	84b0 <__eqdf2+0x6c>
    8478:	2301      	movs	r3, #1
    847a:	42a5      	cmp	r5, r4
    847c:	d006      	beq.n	848c <__eqdf2+0x48>
    847e:	0018      	movs	r0, r3
    8480:	bc3c      	pop	{r2, r3, r4, r5}
    8482:	4690      	mov	r8, r2
    8484:	4699      	mov	r9, r3
    8486:	46a2      	mov	sl, r4
    8488:	46ab      	mov	fp, r5
    848a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    848c:	42be      	cmp	r6, r7
    848e:	d1f6      	bne.n	847e <__eqdf2+0x3a>
    8490:	45c8      	cmp	r8, r9
    8492:	d1f4      	bne.n	847e <__eqdf2+0x3a>
    8494:	45d3      	cmp	fp, sl
    8496:	d010      	beq.n	84ba <__eqdf2+0x76>
    8498:	2d00      	cmp	r5, #0
    849a:	d1f0      	bne.n	847e <__eqdf2+0x3a>
    849c:	4330      	orrs	r0, r6
    849e:	0003      	movs	r3, r0
    84a0:	1e5a      	subs	r2, r3, #1
    84a2:	4193      	sbcs	r3, r2
    84a4:	e7eb      	b.n	847e <__eqdf2+0x3a>
    84a6:	0031      	movs	r1, r6
    84a8:	2301      	movs	r3, #1
    84aa:	4301      	orrs	r1, r0
    84ac:	d1e7      	bne.n	847e <__eqdf2+0x3a>
    84ae:	e7e0      	b.n	8472 <__eqdf2+0x2e>
    84b0:	433a      	orrs	r2, r7
    84b2:	2301      	movs	r3, #1
    84b4:	2a00      	cmp	r2, #0
    84b6:	d1e2      	bne.n	847e <__eqdf2+0x3a>
    84b8:	e7de      	b.n	8478 <__eqdf2+0x34>
    84ba:	2300      	movs	r3, #0
    84bc:	e7df      	b.n	847e <__eqdf2+0x3a>
    84be:	46c0      	nop			; (mov r8, r8)
    84c0:	000007ff 	.word	0x000007ff

000084c4 <__gedf2>:
    84c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    84c6:	465f      	mov	r7, fp
    84c8:	4644      	mov	r4, r8
    84ca:	4656      	mov	r6, sl
    84cc:	464d      	mov	r5, r9
    84ce:	b4f0      	push	{r4, r5, r6, r7}
    84d0:	031f      	lsls	r7, r3, #12
    84d2:	0b3c      	lsrs	r4, r7, #12
    84d4:	4f2c      	ldr	r7, [pc, #176]	; (8588 <__gedf2+0xc4>)
    84d6:	030e      	lsls	r6, r1, #12
    84d8:	004d      	lsls	r5, r1, #1
    84da:	46a3      	mov	fp, r4
    84dc:	005c      	lsls	r4, r3, #1
    84de:	4684      	mov	ip, r0
    84e0:	0b36      	lsrs	r6, r6, #12
    84e2:	0d6d      	lsrs	r5, r5, #21
    84e4:	0fc9      	lsrs	r1, r1, #31
    84e6:	4690      	mov	r8, r2
    84e8:	0d64      	lsrs	r4, r4, #21
    84ea:	0fdb      	lsrs	r3, r3, #31
    84ec:	42bd      	cmp	r5, r7
    84ee:	d02b      	beq.n	8548 <__gedf2+0x84>
    84f0:	4f25      	ldr	r7, [pc, #148]	; (8588 <__gedf2+0xc4>)
    84f2:	42bc      	cmp	r4, r7
    84f4:	d02e      	beq.n	8554 <__gedf2+0x90>
    84f6:	2d00      	cmp	r5, #0
    84f8:	d10e      	bne.n	8518 <__gedf2+0x54>
    84fa:	4330      	orrs	r0, r6
    84fc:	0007      	movs	r7, r0
    84fe:	4681      	mov	r9, r0
    8500:	4278      	negs	r0, r7
    8502:	4178      	adcs	r0, r7
    8504:	2c00      	cmp	r4, #0
    8506:	d117      	bne.n	8538 <__gedf2+0x74>
    8508:	465f      	mov	r7, fp
    850a:	433a      	orrs	r2, r7
    850c:	d114      	bne.n	8538 <__gedf2+0x74>
    850e:	464b      	mov	r3, r9
    8510:	2000      	movs	r0, #0
    8512:	2b00      	cmp	r3, #0
    8514:	d00a      	beq.n	852c <__gedf2+0x68>
    8516:	e006      	b.n	8526 <__gedf2+0x62>
    8518:	2c00      	cmp	r4, #0
    851a:	d102      	bne.n	8522 <__gedf2+0x5e>
    851c:	4658      	mov	r0, fp
    851e:	4302      	orrs	r2, r0
    8520:	d001      	beq.n	8526 <__gedf2+0x62>
    8522:	4299      	cmp	r1, r3
    8524:	d01a      	beq.n	855c <__gedf2+0x98>
    8526:	2301      	movs	r3, #1
    8528:	4248      	negs	r0, r1
    852a:	4318      	orrs	r0, r3
    852c:	bc3c      	pop	{r2, r3, r4, r5}
    852e:	4690      	mov	r8, r2
    8530:	4699      	mov	r9, r3
    8532:	46a2      	mov	sl, r4
    8534:	46ab      	mov	fp, r5
    8536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8538:	2800      	cmp	r0, #0
    853a:	d0f2      	beq.n	8522 <__gedf2+0x5e>
    853c:	4258      	negs	r0, r3
    853e:	4158      	adcs	r0, r3
    8540:	2201      	movs	r2, #1
    8542:	4240      	negs	r0, r0
    8544:	4310      	orrs	r0, r2
    8546:	e7f1      	b.n	852c <__gedf2+0x68>
    8548:	0037      	movs	r7, r6
    854a:	4307      	orrs	r7, r0
    854c:	d0d0      	beq.n	84f0 <__gedf2+0x2c>
    854e:	2002      	movs	r0, #2
    8550:	4240      	negs	r0, r0
    8552:	e7eb      	b.n	852c <__gedf2+0x68>
    8554:	465f      	mov	r7, fp
    8556:	4317      	orrs	r7, r2
    8558:	d0cd      	beq.n	84f6 <__gedf2+0x32>
    855a:	e7f8      	b.n	854e <__gedf2+0x8a>
    855c:	42a5      	cmp	r5, r4
    855e:	dce2      	bgt.n	8526 <__gedf2+0x62>
    8560:	db05      	blt.n	856e <__gedf2+0xaa>
    8562:	455e      	cmp	r6, fp
    8564:	d8df      	bhi.n	8526 <__gedf2+0x62>
    8566:	d008      	beq.n	857a <__gedf2+0xb6>
    8568:	2000      	movs	r0, #0
    856a:	455e      	cmp	r6, fp
    856c:	d2de      	bcs.n	852c <__gedf2+0x68>
    856e:	4248      	negs	r0, r1
    8570:	4148      	adcs	r0, r1
    8572:	2301      	movs	r3, #1
    8574:	4240      	negs	r0, r0
    8576:	4318      	orrs	r0, r3
    8578:	e7d8      	b.n	852c <__gedf2+0x68>
    857a:	45c4      	cmp	ip, r8
    857c:	d8d3      	bhi.n	8526 <__gedf2+0x62>
    857e:	2000      	movs	r0, #0
    8580:	45c4      	cmp	ip, r8
    8582:	d3f4      	bcc.n	856e <__gedf2+0xaa>
    8584:	e7d2      	b.n	852c <__gedf2+0x68>
    8586:	46c0      	nop			; (mov r8, r8)
    8588:	000007ff 	.word	0x000007ff

0000858c <__ledf2>:
    858c:	b5f0      	push	{r4, r5, r6, r7, lr}
    858e:	465f      	mov	r7, fp
    8590:	464d      	mov	r5, r9
    8592:	4644      	mov	r4, r8
    8594:	4656      	mov	r6, sl
    8596:	b4f0      	push	{r4, r5, r6, r7}
    8598:	031c      	lsls	r4, r3, #12
    859a:	0b24      	lsrs	r4, r4, #12
    859c:	46a4      	mov	ip, r4
    859e:	4c2f      	ldr	r4, [pc, #188]	; (865c <__ledf2+0xd0>)
    85a0:	030f      	lsls	r7, r1, #12
    85a2:	004d      	lsls	r5, r1, #1
    85a4:	005e      	lsls	r6, r3, #1
    85a6:	0fc9      	lsrs	r1, r1, #31
    85a8:	4680      	mov	r8, r0
    85aa:	0b3f      	lsrs	r7, r7, #12
    85ac:	0d6d      	lsrs	r5, r5, #21
    85ae:	468b      	mov	fp, r1
    85b0:	4691      	mov	r9, r2
    85b2:	0d76      	lsrs	r6, r6, #21
    85b4:	0fdb      	lsrs	r3, r3, #31
    85b6:	42a5      	cmp	r5, r4
    85b8:	d020      	beq.n	85fc <__ledf2+0x70>
    85ba:	4c28      	ldr	r4, [pc, #160]	; (865c <__ledf2+0xd0>)
    85bc:	42a6      	cmp	r6, r4
    85be:	d022      	beq.n	8606 <__ledf2+0x7a>
    85c0:	2d00      	cmp	r5, #0
    85c2:	d112      	bne.n	85ea <__ledf2+0x5e>
    85c4:	4338      	orrs	r0, r7
    85c6:	4244      	negs	r4, r0
    85c8:	4144      	adcs	r4, r0
    85ca:	2e00      	cmp	r6, #0
    85cc:	d020      	beq.n	8610 <__ledf2+0x84>
    85ce:	2c00      	cmp	r4, #0
    85d0:	d00d      	beq.n	85ee <__ledf2+0x62>
    85d2:	425c      	negs	r4, r3
    85d4:	4163      	adcs	r3, r4
    85d6:	2401      	movs	r4, #1
    85d8:	425b      	negs	r3, r3
    85da:	431c      	orrs	r4, r3
    85dc:	0020      	movs	r0, r4
    85de:	bc3c      	pop	{r2, r3, r4, r5}
    85e0:	4690      	mov	r8, r2
    85e2:	4699      	mov	r9, r3
    85e4:	46a2      	mov	sl, r4
    85e6:	46ab      	mov	fp, r5
    85e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    85ea:	2e00      	cmp	r6, #0
    85ec:	d017      	beq.n	861e <__ledf2+0x92>
    85ee:	455b      	cmp	r3, fp
    85f0:	d019      	beq.n	8626 <__ledf2+0x9a>
    85f2:	465b      	mov	r3, fp
    85f4:	425c      	negs	r4, r3
    85f6:	2301      	movs	r3, #1
    85f8:	431c      	orrs	r4, r3
    85fa:	e7ef      	b.n	85dc <__ledf2+0x50>
    85fc:	0039      	movs	r1, r7
    85fe:	2402      	movs	r4, #2
    8600:	4301      	orrs	r1, r0
    8602:	d1eb      	bne.n	85dc <__ledf2+0x50>
    8604:	e7d9      	b.n	85ba <__ledf2+0x2e>
    8606:	4661      	mov	r1, ip
    8608:	2402      	movs	r4, #2
    860a:	4311      	orrs	r1, r2
    860c:	d1e6      	bne.n	85dc <__ledf2+0x50>
    860e:	e7d7      	b.n	85c0 <__ledf2+0x34>
    8610:	4661      	mov	r1, ip
    8612:	430a      	orrs	r2, r1
    8614:	d1db      	bne.n	85ce <__ledf2+0x42>
    8616:	2400      	movs	r4, #0
    8618:	2800      	cmp	r0, #0
    861a:	d0df      	beq.n	85dc <__ledf2+0x50>
    861c:	e7e9      	b.n	85f2 <__ledf2+0x66>
    861e:	4661      	mov	r1, ip
    8620:	430a      	orrs	r2, r1
    8622:	d1e4      	bne.n	85ee <__ledf2+0x62>
    8624:	e7e5      	b.n	85f2 <__ledf2+0x66>
    8626:	42b5      	cmp	r5, r6
    8628:	dd03      	ble.n	8632 <__ledf2+0xa6>
    862a:	2201      	movs	r2, #1
    862c:	425c      	negs	r4, r3
    862e:	4314      	orrs	r4, r2
    8630:	e7d4      	b.n	85dc <__ledf2+0x50>
    8632:	42b5      	cmp	r5, r6
    8634:	dbcd      	blt.n	85d2 <__ledf2+0x46>
    8636:	4567      	cmp	r7, ip
    8638:	d8db      	bhi.n	85f2 <__ledf2+0x66>
    863a:	d009      	beq.n	8650 <__ledf2+0xc4>
    863c:	2400      	movs	r4, #0
    863e:	4567      	cmp	r7, ip
    8640:	d2cc      	bcs.n	85dc <__ledf2+0x50>
    8642:	4659      	mov	r1, fp
    8644:	424c      	negs	r4, r1
    8646:	4161      	adcs	r1, r4
    8648:	2401      	movs	r4, #1
    864a:	4249      	negs	r1, r1
    864c:	430c      	orrs	r4, r1
    864e:	e7c5      	b.n	85dc <__ledf2+0x50>
    8650:	45c8      	cmp	r8, r9
    8652:	d8ce      	bhi.n	85f2 <__ledf2+0x66>
    8654:	2400      	movs	r4, #0
    8656:	45c8      	cmp	r8, r9
    8658:	d3f3      	bcc.n	8642 <__ledf2+0xb6>
    865a:	e7bf      	b.n	85dc <__ledf2+0x50>
    865c:	000007ff 	.word	0x000007ff

00008660 <__aeabi_dmul>:
    8660:	b5f0      	push	{r4, r5, r6, r7, lr}
    8662:	465f      	mov	r7, fp
    8664:	4656      	mov	r6, sl
    8666:	464d      	mov	r5, r9
    8668:	4644      	mov	r4, r8
    866a:	b4f0      	push	{r4, r5, r6, r7}
    866c:	030d      	lsls	r5, r1, #12
    866e:	4699      	mov	r9, r3
    8670:	004e      	lsls	r6, r1, #1
    8672:	0b2b      	lsrs	r3, r5, #12
    8674:	b087      	sub	sp, #28
    8676:	0007      	movs	r7, r0
    8678:	4692      	mov	sl, r2
    867a:	4680      	mov	r8, r0
    867c:	469b      	mov	fp, r3
    867e:	0d76      	lsrs	r6, r6, #21
    8680:	0fcc      	lsrs	r4, r1, #31
    8682:	2e00      	cmp	r6, #0
    8684:	d069      	beq.n	875a <__aeabi_dmul+0xfa>
    8686:	4b6d      	ldr	r3, [pc, #436]	; (883c <__aeabi_dmul+0x1dc>)
    8688:	429e      	cmp	r6, r3
    868a:	d035      	beq.n	86f8 <__aeabi_dmul+0x98>
    868c:	465b      	mov	r3, fp
    868e:	2280      	movs	r2, #128	; 0x80
    8690:	00dd      	lsls	r5, r3, #3
    8692:	0412      	lsls	r2, r2, #16
    8694:	0f43      	lsrs	r3, r0, #29
    8696:	4313      	orrs	r3, r2
    8698:	432b      	orrs	r3, r5
    869a:	469b      	mov	fp, r3
    869c:	00c3      	lsls	r3, r0, #3
    869e:	4698      	mov	r8, r3
    86a0:	4b67      	ldr	r3, [pc, #412]	; (8840 <__aeabi_dmul+0x1e0>)
    86a2:	2700      	movs	r7, #0
    86a4:	469c      	mov	ip, r3
    86a6:	2300      	movs	r3, #0
    86a8:	4466      	add	r6, ip
    86aa:	9301      	str	r3, [sp, #4]
    86ac:	464a      	mov	r2, r9
    86ae:	0315      	lsls	r5, r2, #12
    86b0:	0050      	lsls	r0, r2, #1
    86b2:	0fd2      	lsrs	r2, r2, #31
    86b4:	4653      	mov	r3, sl
    86b6:	0b2d      	lsrs	r5, r5, #12
    86b8:	0d40      	lsrs	r0, r0, #21
    86ba:	4691      	mov	r9, r2
    86bc:	d100      	bne.n	86c0 <__aeabi_dmul+0x60>
    86be:	e076      	b.n	87ae <__aeabi_dmul+0x14e>
    86c0:	4a5e      	ldr	r2, [pc, #376]	; (883c <__aeabi_dmul+0x1dc>)
    86c2:	4290      	cmp	r0, r2
    86c4:	d06c      	beq.n	87a0 <__aeabi_dmul+0x140>
    86c6:	2280      	movs	r2, #128	; 0x80
    86c8:	0f5b      	lsrs	r3, r3, #29
    86ca:	0412      	lsls	r2, r2, #16
    86cc:	4313      	orrs	r3, r2
    86ce:	4a5c      	ldr	r2, [pc, #368]	; (8840 <__aeabi_dmul+0x1e0>)
    86d0:	00ed      	lsls	r5, r5, #3
    86d2:	4694      	mov	ip, r2
    86d4:	431d      	orrs	r5, r3
    86d6:	4653      	mov	r3, sl
    86d8:	2200      	movs	r2, #0
    86da:	00db      	lsls	r3, r3, #3
    86dc:	4460      	add	r0, ip
    86de:	4649      	mov	r1, r9
    86e0:	1836      	adds	r6, r6, r0
    86e2:	1c70      	adds	r0, r6, #1
    86e4:	4061      	eors	r1, r4
    86e6:	9002      	str	r0, [sp, #8]
    86e8:	4317      	orrs	r7, r2
    86ea:	2f0f      	cmp	r7, #15
    86ec:	d900      	bls.n	86f0 <__aeabi_dmul+0x90>
    86ee:	e0af      	b.n	8850 <__aeabi_dmul+0x1f0>
    86f0:	4854      	ldr	r0, [pc, #336]	; (8844 <__aeabi_dmul+0x1e4>)
    86f2:	00bf      	lsls	r7, r7, #2
    86f4:	59c7      	ldr	r7, [r0, r7]
    86f6:	46bf      	mov	pc, r7
    86f8:	465b      	mov	r3, fp
    86fa:	431f      	orrs	r7, r3
    86fc:	d000      	beq.n	8700 <__aeabi_dmul+0xa0>
    86fe:	e088      	b.n	8812 <__aeabi_dmul+0x1b2>
    8700:	2300      	movs	r3, #0
    8702:	469b      	mov	fp, r3
    8704:	4698      	mov	r8, r3
    8706:	3302      	adds	r3, #2
    8708:	2708      	movs	r7, #8
    870a:	9301      	str	r3, [sp, #4]
    870c:	e7ce      	b.n	86ac <__aeabi_dmul+0x4c>
    870e:	4649      	mov	r1, r9
    8710:	2a02      	cmp	r2, #2
    8712:	d06a      	beq.n	87ea <__aeabi_dmul+0x18a>
    8714:	2a03      	cmp	r2, #3
    8716:	d100      	bne.n	871a <__aeabi_dmul+0xba>
    8718:	e209      	b.n	8b2e <__aeabi_dmul+0x4ce>
    871a:	2a01      	cmp	r2, #1
    871c:	d000      	beq.n	8720 <__aeabi_dmul+0xc0>
    871e:	e1bb      	b.n	8a98 <__aeabi_dmul+0x438>
    8720:	4011      	ands	r1, r2
    8722:	2200      	movs	r2, #0
    8724:	2300      	movs	r3, #0
    8726:	2500      	movs	r5, #0
    8728:	4690      	mov	r8, r2
    872a:	b2cc      	uxtb	r4, r1
    872c:	2100      	movs	r1, #0
    872e:	032d      	lsls	r5, r5, #12
    8730:	0d0a      	lsrs	r2, r1, #20
    8732:	0512      	lsls	r2, r2, #20
    8734:	0b2d      	lsrs	r5, r5, #12
    8736:	4315      	orrs	r5, r2
    8738:	4a43      	ldr	r2, [pc, #268]	; (8848 <__aeabi_dmul+0x1e8>)
    873a:	051b      	lsls	r3, r3, #20
    873c:	4015      	ands	r5, r2
    873e:	431d      	orrs	r5, r3
    8740:	006d      	lsls	r5, r5, #1
    8742:	07e4      	lsls	r4, r4, #31
    8744:	086d      	lsrs	r5, r5, #1
    8746:	4325      	orrs	r5, r4
    8748:	4640      	mov	r0, r8
    874a:	0029      	movs	r1, r5
    874c:	b007      	add	sp, #28
    874e:	bc3c      	pop	{r2, r3, r4, r5}
    8750:	4690      	mov	r8, r2
    8752:	4699      	mov	r9, r3
    8754:	46a2      	mov	sl, r4
    8756:	46ab      	mov	fp, r5
    8758:	bdf0      	pop	{r4, r5, r6, r7, pc}
    875a:	4303      	orrs	r3, r0
    875c:	d052      	beq.n	8804 <__aeabi_dmul+0x1a4>
    875e:	465b      	mov	r3, fp
    8760:	2b00      	cmp	r3, #0
    8762:	d100      	bne.n	8766 <__aeabi_dmul+0x106>
    8764:	e18a      	b.n	8a7c <__aeabi_dmul+0x41c>
    8766:	4658      	mov	r0, fp
    8768:	f000 feb6 	bl	94d8 <__clzsi2>
    876c:	0003      	movs	r3, r0
    876e:	3b0b      	subs	r3, #11
    8770:	2b1c      	cmp	r3, #28
    8772:	dd00      	ble.n	8776 <__aeabi_dmul+0x116>
    8774:	e17b      	b.n	8a6e <__aeabi_dmul+0x40e>
    8776:	221d      	movs	r2, #29
    8778:	1ad3      	subs	r3, r2, r3
    877a:	003a      	movs	r2, r7
    877c:	0001      	movs	r1, r0
    877e:	465d      	mov	r5, fp
    8780:	40da      	lsrs	r2, r3
    8782:	3908      	subs	r1, #8
    8784:	408d      	lsls	r5, r1
    8786:	0013      	movs	r3, r2
    8788:	408f      	lsls	r7, r1
    878a:	432b      	orrs	r3, r5
    878c:	469b      	mov	fp, r3
    878e:	46b8      	mov	r8, r7
    8790:	4b2e      	ldr	r3, [pc, #184]	; (884c <__aeabi_dmul+0x1ec>)
    8792:	2700      	movs	r7, #0
    8794:	469c      	mov	ip, r3
    8796:	2300      	movs	r3, #0
    8798:	4460      	add	r0, ip
    879a:	4246      	negs	r6, r0
    879c:	9301      	str	r3, [sp, #4]
    879e:	e785      	b.n	86ac <__aeabi_dmul+0x4c>
    87a0:	4652      	mov	r2, sl
    87a2:	432a      	orrs	r2, r5
    87a4:	d12c      	bne.n	8800 <__aeabi_dmul+0x1a0>
    87a6:	2500      	movs	r5, #0
    87a8:	2300      	movs	r3, #0
    87aa:	2202      	movs	r2, #2
    87ac:	e797      	b.n	86de <__aeabi_dmul+0x7e>
    87ae:	4652      	mov	r2, sl
    87b0:	432a      	orrs	r2, r5
    87b2:	d021      	beq.n	87f8 <__aeabi_dmul+0x198>
    87b4:	2d00      	cmp	r5, #0
    87b6:	d100      	bne.n	87ba <__aeabi_dmul+0x15a>
    87b8:	e154      	b.n	8a64 <__aeabi_dmul+0x404>
    87ba:	0028      	movs	r0, r5
    87bc:	f000 fe8c 	bl	94d8 <__clzsi2>
    87c0:	0003      	movs	r3, r0
    87c2:	3b0b      	subs	r3, #11
    87c4:	2b1c      	cmp	r3, #28
    87c6:	dd00      	ble.n	87ca <__aeabi_dmul+0x16a>
    87c8:	e146      	b.n	8a58 <__aeabi_dmul+0x3f8>
    87ca:	211d      	movs	r1, #29
    87cc:	1acb      	subs	r3, r1, r3
    87ce:	4651      	mov	r1, sl
    87d0:	0002      	movs	r2, r0
    87d2:	40d9      	lsrs	r1, r3
    87d4:	4653      	mov	r3, sl
    87d6:	3a08      	subs	r2, #8
    87d8:	4095      	lsls	r5, r2
    87da:	4093      	lsls	r3, r2
    87dc:	430d      	orrs	r5, r1
    87de:	4a1b      	ldr	r2, [pc, #108]	; (884c <__aeabi_dmul+0x1ec>)
    87e0:	4694      	mov	ip, r2
    87e2:	4460      	add	r0, ip
    87e4:	4240      	negs	r0, r0
    87e6:	2200      	movs	r2, #0
    87e8:	e779      	b.n	86de <__aeabi_dmul+0x7e>
    87ea:	2401      	movs	r4, #1
    87ec:	2200      	movs	r2, #0
    87ee:	400c      	ands	r4, r1
    87f0:	4b12      	ldr	r3, [pc, #72]	; (883c <__aeabi_dmul+0x1dc>)
    87f2:	2500      	movs	r5, #0
    87f4:	4690      	mov	r8, r2
    87f6:	e799      	b.n	872c <__aeabi_dmul+0xcc>
    87f8:	2500      	movs	r5, #0
    87fa:	2300      	movs	r3, #0
    87fc:	2201      	movs	r2, #1
    87fe:	e76e      	b.n	86de <__aeabi_dmul+0x7e>
    8800:	2203      	movs	r2, #3
    8802:	e76c      	b.n	86de <__aeabi_dmul+0x7e>
    8804:	2300      	movs	r3, #0
    8806:	469b      	mov	fp, r3
    8808:	4698      	mov	r8, r3
    880a:	3301      	adds	r3, #1
    880c:	2704      	movs	r7, #4
    880e:	9301      	str	r3, [sp, #4]
    8810:	e74c      	b.n	86ac <__aeabi_dmul+0x4c>
    8812:	2303      	movs	r3, #3
    8814:	270c      	movs	r7, #12
    8816:	9301      	str	r3, [sp, #4]
    8818:	e748      	b.n	86ac <__aeabi_dmul+0x4c>
    881a:	2300      	movs	r3, #0
    881c:	2580      	movs	r5, #128	; 0x80
    881e:	4698      	mov	r8, r3
    8820:	2400      	movs	r4, #0
    8822:	032d      	lsls	r5, r5, #12
    8824:	4b05      	ldr	r3, [pc, #20]	; (883c <__aeabi_dmul+0x1dc>)
    8826:	e781      	b.n	872c <__aeabi_dmul+0xcc>
    8828:	465d      	mov	r5, fp
    882a:	4643      	mov	r3, r8
    882c:	9a01      	ldr	r2, [sp, #4]
    882e:	e76f      	b.n	8710 <__aeabi_dmul+0xb0>
    8830:	465d      	mov	r5, fp
    8832:	4643      	mov	r3, r8
    8834:	0021      	movs	r1, r4
    8836:	9a01      	ldr	r2, [sp, #4]
    8838:	e76a      	b.n	8710 <__aeabi_dmul+0xb0>
    883a:	46c0      	nop			; (mov r8, r8)
    883c:	000007ff 	.word	0x000007ff
    8840:	fffffc01 	.word	0xfffffc01
    8844:	0000ebc0 	.word	0x0000ebc0
    8848:	800fffff 	.word	0x800fffff
    884c:	000003f3 	.word	0x000003f3
    8850:	4642      	mov	r2, r8
    8852:	0c12      	lsrs	r2, r2, #16
    8854:	4691      	mov	r9, r2
    8856:	0c1a      	lsrs	r2, r3, #16
    8858:	4694      	mov	ip, r2
    885a:	4642      	mov	r2, r8
    885c:	0417      	lsls	r7, r2, #16
    885e:	464a      	mov	r2, r9
    8860:	041b      	lsls	r3, r3, #16
    8862:	0c1b      	lsrs	r3, r3, #16
    8864:	435a      	muls	r2, r3
    8866:	4660      	mov	r0, ip
    8868:	4690      	mov	r8, r2
    886a:	464a      	mov	r2, r9
    886c:	4342      	muls	r2, r0
    886e:	0010      	movs	r0, r2
    8870:	9203      	str	r2, [sp, #12]
    8872:	4662      	mov	r2, ip
    8874:	001c      	movs	r4, r3
    8876:	0c3f      	lsrs	r7, r7, #16
    8878:	437a      	muls	r2, r7
    887a:	437c      	muls	r4, r7
    887c:	4442      	add	r2, r8
    887e:	9201      	str	r2, [sp, #4]
    8880:	0c22      	lsrs	r2, r4, #16
    8882:	4692      	mov	sl, r2
    8884:	9a01      	ldr	r2, [sp, #4]
    8886:	4452      	add	r2, sl
    8888:	4590      	cmp	r8, r2
    888a:	d906      	bls.n	889a <__aeabi_dmul+0x23a>
    888c:	4682      	mov	sl, r0
    888e:	2080      	movs	r0, #128	; 0x80
    8890:	0240      	lsls	r0, r0, #9
    8892:	4680      	mov	r8, r0
    8894:	44c2      	add	sl, r8
    8896:	4650      	mov	r0, sl
    8898:	9003      	str	r0, [sp, #12]
    889a:	0c10      	lsrs	r0, r2, #16
    889c:	9004      	str	r0, [sp, #16]
    889e:	4648      	mov	r0, r9
    88a0:	0424      	lsls	r4, r4, #16
    88a2:	0c24      	lsrs	r4, r4, #16
    88a4:	0412      	lsls	r2, r2, #16
    88a6:	1912      	adds	r2, r2, r4
    88a8:	9205      	str	r2, [sp, #20]
    88aa:	0c2a      	lsrs	r2, r5, #16
    88ac:	042d      	lsls	r5, r5, #16
    88ae:	0c2d      	lsrs	r5, r5, #16
    88b0:	4368      	muls	r0, r5
    88b2:	002c      	movs	r4, r5
    88b4:	4682      	mov	sl, r0
    88b6:	4648      	mov	r0, r9
    88b8:	437c      	muls	r4, r7
    88ba:	4350      	muls	r0, r2
    88bc:	4681      	mov	r9, r0
    88be:	0c20      	lsrs	r0, r4, #16
    88c0:	4680      	mov	r8, r0
    88c2:	4357      	muls	r7, r2
    88c4:	4457      	add	r7, sl
    88c6:	4447      	add	r7, r8
    88c8:	45ba      	cmp	sl, r7
    88ca:	d903      	bls.n	88d4 <__aeabi_dmul+0x274>
    88cc:	2080      	movs	r0, #128	; 0x80
    88ce:	0240      	lsls	r0, r0, #9
    88d0:	4680      	mov	r8, r0
    88d2:	44c1      	add	r9, r8
    88d4:	0c38      	lsrs	r0, r7, #16
    88d6:	043f      	lsls	r7, r7, #16
    88d8:	46b8      	mov	r8, r7
    88da:	4448      	add	r0, r9
    88dc:	0424      	lsls	r4, r4, #16
    88de:	0c24      	lsrs	r4, r4, #16
    88e0:	9001      	str	r0, [sp, #4]
    88e2:	9804      	ldr	r0, [sp, #16]
    88e4:	44a0      	add	r8, r4
    88e6:	4440      	add	r0, r8
    88e8:	9004      	str	r0, [sp, #16]
    88ea:	4658      	mov	r0, fp
    88ec:	0c00      	lsrs	r0, r0, #16
    88ee:	4681      	mov	r9, r0
    88f0:	4658      	mov	r0, fp
    88f2:	0404      	lsls	r4, r0, #16
    88f4:	0c20      	lsrs	r0, r4, #16
    88f6:	4682      	mov	sl, r0
    88f8:	0007      	movs	r7, r0
    88fa:	4648      	mov	r0, r9
    88fc:	435f      	muls	r7, r3
    88fe:	464c      	mov	r4, r9
    8900:	4343      	muls	r3, r0
    8902:	4660      	mov	r0, ip
    8904:	4360      	muls	r0, r4
    8906:	4664      	mov	r4, ip
    8908:	4683      	mov	fp, r0
    890a:	4650      	mov	r0, sl
    890c:	4344      	muls	r4, r0
    890e:	0c38      	lsrs	r0, r7, #16
    8910:	4684      	mov	ip, r0
    8912:	18e4      	adds	r4, r4, r3
    8914:	4464      	add	r4, ip
    8916:	42a3      	cmp	r3, r4
    8918:	d903      	bls.n	8922 <__aeabi_dmul+0x2c2>
    891a:	2380      	movs	r3, #128	; 0x80
    891c:	025b      	lsls	r3, r3, #9
    891e:	469c      	mov	ip, r3
    8920:	44e3      	add	fp, ip
    8922:	4648      	mov	r0, r9
    8924:	043f      	lsls	r7, r7, #16
    8926:	0c23      	lsrs	r3, r4, #16
    8928:	0c3f      	lsrs	r7, r7, #16
    892a:	0424      	lsls	r4, r4, #16
    892c:	19e4      	adds	r4, r4, r7
    892e:	4657      	mov	r7, sl
    8930:	4368      	muls	r0, r5
    8932:	436f      	muls	r7, r5
    8934:	4684      	mov	ip, r0
    8936:	464d      	mov	r5, r9
    8938:	4650      	mov	r0, sl
    893a:	4355      	muls	r5, r2
    893c:	4342      	muls	r2, r0
    893e:	0c38      	lsrs	r0, r7, #16
    8940:	4681      	mov	r9, r0
    8942:	4462      	add	r2, ip
    8944:	444a      	add	r2, r9
    8946:	445b      	add	r3, fp
    8948:	4594      	cmp	ip, r2
    894a:	d903      	bls.n	8954 <__aeabi_dmul+0x2f4>
    894c:	2080      	movs	r0, #128	; 0x80
    894e:	0240      	lsls	r0, r0, #9
    8950:	4684      	mov	ip, r0
    8952:	4465      	add	r5, ip
    8954:	9803      	ldr	r0, [sp, #12]
    8956:	043f      	lsls	r7, r7, #16
    8958:	4683      	mov	fp, r0
    895a:	9804      	ldr	r0, [sp, #16]
    895c:	0c3f      	lsrs	r7, r7, #16
    895e:	4684      	mov	ip, r0
    8960:	44e3      	add	fp, ip
    8962:	45c3      	cmp	fp, r8
    8964:	4180      	sbcs	r0, r0
    8966:	4240      	negs	r0, r0
    8968:	4682      	mov	sl, r0
    896a:	0410      	lsls	r0, r2, #16
    896c:	4684      	mov	ip, r0
    896e:	9801      	ldr	r0, [sp, #4]
    8970:	4467      	add	r7, ip
    8972:	4684      	mov	ip, r0
    8974:	4467      	add	r7, ip
    8976:	44a3      	add	fp, r4
    8978:	46bc      	mov	ip, r7
    897a:	45a3      	cmp	fp, r4
    897c:	41a4      	sbcs	r4, r4
    897e:	4699      	mov	r9, r3
    8980:	44d4      	add	ip, sl
    8982:	4264      	negs	r4, r4
    8984:	4287      	cmp	r7, r0
    8986:	41bf      	sbcs	r7, r7
    8988:	45d4      	cmp	ip, sl
    898a:	4180      	sbcs	r0, r0
    898c:	44e1      	add	r9, ip
    898e:	46a0      	mov	r8, r4
    8990:	4599      	cmp	r9, r3
    8992:	419b      	sbcs	r3, r3
    8994:	427f      	negs	r7, r7
    8996:	4240      	negs	r0, r0
    8998:	44c8      	add	r8, r9
    899a:	4307      	orrs	r7, r0
    899c:	0c12      	lsrs	r2, r2, #16
    899e:	18ba      	adds	r2, r7, r2
    89a0:	45a0      	cmp	r8, r4
    89a2:	41a4      	sbcs	r4, r4
    89a4:	425f      	negs	r7, r3
    89a6:	003b      	movs	r3, r7
    89a8:	4264      	negs	r4, r4
    89aa:	4323      	orrs	r3, r4
    89ac:	18d7      	adds	r7, r2, r3
    89ae:	4643      	mov	r3, r8
    89b0:	197d      	adds	r5, r7, r5
    89b2:	0ddb      	lsrs	r3, r3, #23
    89b4:	026d      	lsls	r5, r5, #9
    89b6:	431d      	orrs	r5, r3
    89b8:	465b      	mov	r3, fp
    89ba:	025a      	lsls	r2, r3, #9
    89bc:	9b05      	ldr	r3, [sp, #20]
    89be:	431a      	orrs	r2, r3
    89c0:	1e53      	subs	r3, r2, #1
    89c2:	419a      	sbcs	r2, r3
    89c4:	465b      	mov	r3, fp
    89c6:	0ddb      	lsrs	r3, r3, #23
    89c8:	431a      	orrs	r2, r3
    89ca:	4643      	mov	r3, r8
    89cc:	025b      	lsls	r3, r3, #9
    89ce:	4313      	orrs	r3, r2
    89d0:	01ea      	lsls	r2, r5, #7
    89d2:	d507      	bpl.n	89e4 <__aeabi_dmul+0x384>
    89d4:	2201      	movs	r2, #1
    89d6:	085c      	lsrs	r4, r3, #1
    89d8:	4013      	ands	r3, r2
    89da:	4323      	orrs	r3, r4
    89dc:	07ea      	lsls	r2, r5, #31
    89de:	9e02      	ldr	r6, [sp, #8]
    89e0:	4313      	orrs	r3, r2
    89e2:	086d      	lsrs	r5, r5, #1
    89e4:	4a57      	ldr	r2, [pc, #348]	; (8b44 <__aeabi_dmul+0x4e4>)
    89e6:	18b2      	adds	r2, r6, r2
    89e8:	2a00      	cmp	r2, #0
    89ea:	dd4b      	ble.n	8a84 <__aeabi_dmul+0x424>
    89ec:	0758      	lsls	r0, r3, #29
    89ee:	d009      	beq.n	8a04 <__aeabi_dmul+0x3a4>
    89f0:	200f      	movs	r0, #15
    89f2:	4018      	ands	r0, r3
    89f4:	2804      	cmp	r0, #4
    89f6:	d005      	beq.n	8a04 <__aeabi_dmul+0x3a4>
    89f8:	1d18      	adds	r0, r3, #4
    89fa:	4298      	cmp	r0, r3
    89fc:	419b      	sbcs	r3, r3
    89fe:	425b      	negs	r3, r3
    8a00:	18ed      	adds	r5, r5, r3
    8a02:	0003      	movs	r3, r0
    8a04:	01e8      	lsls	r0, r5, #7
    8a06:	d504      	bpl.n	8a12 <__aeabi_dmul+0x3b2>
    8a08:	4a4f      	ldr	r2, [pc, #316]	; (8b48 <__aeabi_dmul+0x4e8>)
    8a0a:	4015      	ands	r5, r2
    8a0c:	2280      	movs	r2, #128	; 0x80
    8a0e:	00d2      	lsls	r2, r2, #3
    8a10:	18b2      	adds	r2, r6, r2
    8a12:	484e      	ldr	r0, [pc, #312]	; (8b4c <__aeabi_dmul+0x4ec>)
    8a14:	4282      	cmp	r2, r0
    8a16:	dd00      	ble.n	8a1a <__aeabi_dmul+0x3ba>
    8a18:	e6e7      	b.n	87ea <__aeabi_dmul+0x18a>
    8a1a:	2401      	movs	r4, #1
    8a1c:	08db      	lsrs	r3, r3, #3
    8a1e:	0768      	lsls	r0, r5, #29
    8a20:	4318      	orrs	r0, r3
    8a22:	026d      	lsls	r5, r5, #9
    8a24:	0553      	lsls	r3, r2, #21
    8a26:	4680      	mov	r8, r0
    8a28:	0b2d      	lsrs	r5, r5, #12
    8a2a:	0d5b      	lsrs	r3, r3, #21
    8a2c:	400c      	ands	r4, r1
    8a2e:	e67d      	b.n	872c <__aeabi_dmul+0xcc>
    8a30:	2280      	movs	r2, #128	; 0x80
    8a32:	4659      	mov	r1, fp
    8a34:	0312      	lsls	r2, r2, #12
    8a36:	4211      	tst	r1, r2
    8a38:	d008      	beq.n	8a4c <__aeabi_dmul+0x3ec>
    8a3a:	4215      	tst	r5, r2
    8a3c:	d106      	bne.n	8a4c <__aeabi_dmul+0x3ec>
    8a3e:	4315      	orrs	r5, r2
    8a40:	032d      	lsls	r5, r5, #12
    8a42:	4698      	mov	r8, r3
    8a44:	0b2d      	lsrs	r5, r5, #12
    8a46:	464c      	mov	r4, r9
    8a48:	4b41      	ldr	r3, [pc, #260]	; (8b50 <__aeabi_dmul+0x4f0>)
    8a4a:	e66f      	b.n	872c <__aeabi_dmul+0xcc>
    8a4c:	465d      	mov	r5, fp
    8a4e:	4315      	orrs	r5, r2
    8a50:	032d      	lsls	r5, r5, #12
    8a52:	0b2d      	lsrs	r5, r5, #12
    8a54:	4b3e      	ldr	r3, [pc, #248]	; (8b50 <__aeabi_dmul+0x4f0>)
    8a56:	e669      	b.n	872c <__aeabi_dmul+0xcc>
    8a58:	0003      	movs	r3, r0
    8a5a:	4655      	mov	r5, sl
    8a5c:	3b28      	subs	r3, #40	; 0x28
    8a5e:	409d      	lsls	r5, r3
    8a60:	2300      	movs	r3, #0
    8a62:	e6bc      	b.n	87de <__aeabi_dmul+0x17e>
    8a64:	4650      	mov	r0, sl
    8a66:	f000 fd37 	bl	94d8 <__clzsi2>
    8a6a:	3020      	adds	r0, #32
    8a6c:	e6a8      	b.n	87c0 <__aeabi_dmul+0x160>
    8a6e:	0003      	movs	r3, r0
    8a70:	3b28      	subs	r3, #40	; 0x28
    8a72:	409f      	lsls	r7, r3
    8a74:	2300      	movs	r3, #0
    8a76:	46bb      	mov	fp, r7
    8a78:	4698      	mov	r8, r3
    8a7a:	e689      	b.n	8790 <__aeabi_dmul+0x130>
    8a7c:	f000 fd2c 	bl	94d8 <__clzsi2>
    8a80:	3020      	adds	r0, #32
    8a82:	e673      	b.n	876c <__aeabi_dmul+0x10c>
    8a84:	2401      	movs	r4, #1
    8a86:	1aa6      	subs	r6, r4, r2
    8a88:	2e38      	cmp	r6, #56	; 0x38
    8a8a:	dd07      	ble.n	8a9c <__aeabi_dmul+0x43c>
    8a8c:	2200      	movs	r2, #0
    8a8e:	400c      	ands	r4, r1
    8a90:	2300      	movs	r3, #0
    8a92:	2500      	movs	r5, #0
    8a94:	4690      	mov	r8, r2
    8a96:	e649      	b.n	872c <__aeabi_dmul+0xcc>
    8a98:	9e02      	ldr	r6, [sp, #8]
    8a9a:	e7a3      	b.n	89e4 <__aeabi_dmul+0x384>
    8a9c:	2e1f      	cmp	r6, #31
    8a9e:	dc20      	bgt.n	8ae2 <__aeabi_dmul+0x482>
    8aa0:	2220      	movs	r2, #32
    8aa2:	002c      	movs	r4, r5
    8aa4:	0018      	movs	r0, r3
    8aa6:	1b92      	subs	r2, r2, r6
    8aa8:	40f0      	lsrs	r0, r6
    8aaa:	4094      	lsls	r4, r2
    8aac:	4093      	lsls	r3, r2
    8aae:	4304      	orrs	r4, r0
    8ab0:	1e58      	subs	r0, r3, #1
    8ab2:	4183      	sbcs	r3, r0
    8ab4:	431c      	orrs	r4, r3
    8ab6:	40f5      	lsrs	r5, r6
    8ab8:	0763      	lsls	r3, r4, #29
    8aba:	d009      	beq.n	8ad0 <__aeabi_dmul+0x470>
    8abc:	230f      	movs	r3, #15
    8abe:	4023      	ands	r3, r4
    8ac0:	2b04      	cmp	r3, #4
    8ac2:	d005      	beq.n	8ad0 <__aeabi_dmul+0x470>
    8ac4:	0023      	movs	r3, r4
    8ac6:	1d1c      	adds	r4, r3, #4
    8ac8:	429c      	cmp	r4, r3
    8aca:	4192      	sbcs	r2, r2
    8acc:	4252      	negs	r2, r2
    8ace:	18ad      	adds	r5, r5, r2
    8ad0:	022b      	lsls	r3, r5, #8
    8ad2:	d51f      	bpl.n	8b14 <__aeabi_dmul+0x4b4>
    8ad4:	2401      	movs	r4, #1
    8ad6:	2200      	movs	r2, #0
    8ad8:	400c      	ands	r4, r1
    8ada:	2301      	movs	r3, #1
    8adc:	2500      	movs	r5, #0
    8ade:	4690      	mov	r8, r2
    8ae0:	e624      	b.n	872c <__aeabi_dmul+0xcc>
    8ae2:	201f      	movs	r0, #31
    8ae4:	002c      	movs	r4, r5
    8ae6:	4240      	negs	r0, r0
    8ae8:	1a82      	subs	r2, r0, r2
    8aea:	40d4      	lsrs	r4, r2
    8aec:	2e20      	cmp	r6, #32
    8aee:	d01c      	beq.n	8b2a <__aeabi_dmul+0x4ca>
    8af0:	2240      	movs	r2, #64	; 0x40
    8af2:	1b96      	subs	r6, r2, r6
    8af4:	40b5      	lsls	r5, r6
    8af6:	432b      	orrs	r3, r5
    8af8:	1e58      	subs	r0, r3, #1
    8afa:	4183      	sbcs	r3, r0
    8afc:	2007      	movs	r0, #7
    8afe:	4323      	orrs	r3, r4
    8b00:	4018      	ands	r0, r3
    8b02:	2500      	movs	r5, #0
    8b04:	2800      	cmp	r0, #0
    8b06:	d009      	beq.n	8b1c <__aeabi_dmul+0x4bc>
    8b08:	220f      	movs	r2, #15
    8b0a:	2500      	movs	r5, #0
    8b0c:	401a      	ands	r2, r3
    8b0e:	001c      	movs	r4, r3
    8b10:	2a04      	cmp	r2, #4
    8b12:	d1d8      	bne.n	8ac6 <__aeabi_dmul+0x466>
    8b14:	0023      	movs	r3, r4
    8b16:	0768      	lsls	r0, r5, #29
    8b18:	026d      	lsls	r5, r5, #9
    8b1a:	0b2d      	lsrs	r5, r5, #12
    8b1c:	2401      	movs	r4, #1
    8b1e:	08db      	lsrs	r3, r3, #3
    8b20:	4303      	orrs	r3, r0
    8b22:	4698      	mov	r8, r3
    8b24:	400c      	ands	r4, r1
    8b26:	2300      	movs	r3, #0
    8b28:	e600      	b.n	872c <__aeabi_dmul+0xcc>
    8b2a:	2500      	movs	r5, #0
    8b2c:	e7e3      	b.n	8af6 <__aeabi_dmul+0x496>
    8b2e:	2280      	movs	r2, #128	; 0x80
    8b30:	2401      	movs	r4, #1
    8b32:	0312      	lsls	r2, r2, #12
    8b34:	4315      	orrs	r5, r2
    8b36:	032d      	lsls	r5, r5, #12
    8b38:	4698      	mov	r8, r3
    8b3a:	0b2d      	lsrs	r5, r5, #12
    8b3c:	400c      	ands	r4, r1
    8b3e:	4b04      	ldr	r3, [pc, #16]	; (8b50 <__aeabi_dmul+0x4f0>)
    8b40:	e5f4      	b.n	872c <__aeabi_dmul+0xcc>
    8b42:	46c0      	nop			; (mov r8, r8)
    8b44:	000003ff 	.word	0x000003ff
    8b48:	feffffff 	.word	0xfeffffff
    8b4c:	000007fe 	.word	0x000007fe
    8b50:	000007ff 	.word	0x000007ff

00008b54 <__aeabi_dsub>:
    8b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b56:	4657      	mov	r7, sl
    8b58:	464e      	mov	r6, r9
    8b5a:	4645      	mov	r5, r8
    8b5c:	b4e0      	push	{r5, r6, r7}
    8b5e:	000e      	movs	r6, r1
    8b60:	0011      	movs	r1, r2
    8b62:	0ff2      	lsrs	r2, r6, #31
    8b64:	4692      	mov	sl, r2
    8b66:	00c5      	lsls	r5, r0, #3
    8b68:	0f42      	lsrs	r2, r0, #29
    8b6a:	0318      	lsls	r0, r3, #12
    8b6c:	0337      	lsls	r7, r6, #12
    8b6e:	0074      	lsls	r4, r6, #1
    8b70:	0a40      	lsrs	r0, r0, #9
    8b72:	0f4e      	lsrs	r6, r1, #29
    8b74:	0a7f      	lsrs	r7, r7, #9
    8b76:	4330      	orrs	r0, r6
    8b78:	4ecf      	ldr	r6, [pc, #828]	; (8eb8 <__aeabi_dsub+0x364>)
    8b7a:	4317      	orrs	r7, r2
    8b7c:	005a      	lsls	r2, r3, #1
    8b7e:	0d64      	lsrs	r4, r4, #21
    8b80:	0d52      	lsrs	r2, r2, #21
    8b82:	0fdb      	lsrs	r3, r3, #31
    8b84:	00c9      	lsls	r1, r1, #3
    8b86:	42b2      	cmp	r2, r6
    8b88:	d100      	bne.n	8b8c <__aeabi_dsub+0x38>
    8b8a:	e0e5      	b.n	8d58 <__aeabi_dsub+0x204>
    8b8c:	2601      	movs	r6, #1
    8b8e:	4073      	eors	r3, r6
    8b90:	1aa6      	subs	r6, r4, r2
    8b92:	46b4      	mov	ip, r6
    8b94:	4553      	cmp	r3, sl
    8b96:	d100      	bne.n	8b9a <__aeabi_dsub+0x46>
    8b98:	e0af      	b.n	8cfa <__aeabi_dsub+0x1a6>
    8b9a:	2e00      	cmp	r6, #0
    8b9c:	dc00      	bgt.n	8ba0 <__aeabi_dsub+0x4c>
    8b9e:	e10d      	b.n	8dbc <__aeabi_dsub+0x268>
    8ba0:	2a00      	cmp	r2, #0
    8ba2:	d13a      	bne.n	8c1a <__aeabi_dsub+0xc6>
    8ba4:	0003      	movs	r3, r0
    8ba6:	430b      	orrs	r3, r1
    8ba8:	d000      	beq.n	8bac <__aeabi_dsub+0x58>
    8baa:	e0e4      	b.n	8d76 <__aeabi_dsub+0x222>
    8bac:	076b      	lsls	r3, r5, #29
    8bae:	d009      	beq.n	8bc4 <__aeabi_dsub+0x70>
    8bb0:	230f      	movs	r3, #15
    8bb2:	402b      	ands	r3, r5
    8bb4:	2b04      	cmp	r3, #4
    8bb6:	d005      	beq.n	8bc4 <__aeabi_dsub+0x70>
    8bb8:	1d2b      	adds	r3, r5, #4
    8bba:	42ab      	cmp	r3, r5
    8bbc:	41ad      	sbcs	r5, r5
    8bbe:	426d      	negs	r5, r5
    8bc0:	197f      	adds	r7, r7, r5
    8bc2:	001d      	movs	r5, r3
    8bc4:	023b      	lsls	r3, r7, #8
    8bc6:	d400      	bmi.n	8bca <__aeabi_dsub+0x76>
    8bc8:	e088      	b.n	8cdc <__aeabi_dsub+0x188>
    8bca:	4bbb      	ldr	r3, [pc, #748]	; (8eb8 <__aeabi_dsub+0x364>)
    8bcc:	3401      	adds	r4, #1
    8bce:	429c      	cmp	r4, r3
    8bd0:	d100      	bne.n	8bd4 <__aeabi_dsub+0x80>
    8bd2:	e110      	b.n	8df6 <__aeabi_dsub+0x2a2>
    8bd4:	003a      	movs	r2, r7
    8bd6:	4bb9      	ldr	r3, [pc, #740]	; (8ebc <__aeabi_dsub+0x368>)
    8bd8:	4651      	mov	r1, sl
    8bda:	401a      	ands	r2, r3
    8bdc:	2301      	movs	r3, #1
    8bde:	0750      	lsls	r0, r2, #29
    8be0:	08ed      	lsrs	r5, r5, #3
    8be2:	0252      	lsls	r2, r2, #9
    8be4:	0564      	lsls	r4, r4, #21
    8be6:	4305      	orrs	r5, r0
    8be8:	0b12      	lsrs	r2, r2, #12
    8bea:	0d64      	lsrs	r4, r4, #21
    8bec:	400b      	ands	r3, r1
    8bee:	2100      	movs	r1, #0
    8bf0:	0028      	movs	r0, r5
    8bf2:	0312      	lsls	r2, r2, #12
    8bf4:	0d0d      	lsrs	r5, r1, #20
    8bf6:	0b12      	lsrs	r2, r2, #12
    8bf8:	0564      	lsls	r4, r4, #21
    8bfa:	052d      	lsls	r5, r5, #20
    8bfc:	4315      	orrs	r5, r2
    8bfe:	0862      	lsrs	r2, r4, #1
    8c00:	4caf      	ldr	r4, [pc, #700]	; (8ec0 <__aeabi_dsub+0x36c>)
    8c02:	07db      	lsls	r3, r3, #31
    8c04:	402c      	ands	r4, r5
    8c06:	4314      	orrs	r4, r2
    8c08:	0064      	lsls	r4, r4, #1
    8c0a:	0864      	lsrs	r4, r4, #1
    8c0c:	431c      	orrs	r4, r3
    8c0e:	0021      	movs	r1, r4
    8c10:	bc1c      	pop	{r2, r3, r4}
    8c12:	4690      	mov	r8, r2
    8c14:	4699      	mov	r9, r3
    8c16:	46a2      	mov	sl, r4
    8c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c1a:	4ba7      	ldr	r3, [pc, #668]	; (8eb8 <__aeabi_dsub+0x364>)
    8c1c:	429c      	cmp	r4, r3
    8c1e:	d0c5      	beq.n	8bac <__aeabi_dsub+0x58>
    8c20:	2380      	movs	r3, #128	; 0x80
    8c22:	041b      	lsls	r3, r3, #16
    8c24:	4318      	orrs	r0, r3
    8c26:	4663      	mov	r3, ip
    8c28:	2b38      	cmp	r3, #56	; 0x38
    8c2a:	dd00      	ble.n	8c2e <__aeabi_dsub+0xda>
    8c2c:	e0fd      	b.n	8e2a <__aeabi_dsub+0x2d6>
    8c2e:	2b1f      	cmp	r3, #31
    8c30:	dd00      	ble.n	8c34 <__aeabi_dsub+0xe0>
    8c32:	e130      	b.n	8e96 <__aeabi_dsub+0x342>
    8c34:	4662      	mov	r2, ip
    8c36:	2320      	movs	r3, #32
    8c38:	1a9b      	subs	r3, r3, r2
    8c3a:	0002      	movs	r2, r0
    8c3c:	409a      	lsls	r2, r3
    8c3e:	4666      	mov	r6, ip
    8c40:	4690      	mov	r8, r2
    8c42:	000a      	movs	r2, r1
    8c44:	4099      	lsls	r1, r3
    8c46:	40f2      	lsrs	r2, r6
    8c48:	4646      	mov	r6, r8
    8c4a:	1e4b      	subs	r3, r1, #1
    8c4c:	4199      	sbcs	r1, r3
    8c4e:	4332      	orrs	r2, r6
    8c50:	4311      	orrs	r1, r2
    8c52:	4663      	mov	r3, ip
    8c54:	0002      	movs	r2, r0
    8c56:	40da      	lsrs	r2, r3
    8c58:	1a69      	subs	r1, r5, r1
    8c5a:	428d      	cmp	r5, r1
    8c5c:	419b      	sbcs	r3, r3
    8c5e:	000d      	movs	r5, r1
    8c60:	1aba      	subs	r2, r7, r2
    8c62:	425b      	negs	r3, r3
    8c64:	1ad7      	subs	r7, r2, r3
    8c66:	023b      	lsls	r3, r7, #8
    8c68:	d535      	bpl.n	8cd6 <__aeabi_dsub+0x182>
    8c6a:	027a      	lsls	r2, r7, #9
    8c6c:	0a53      	lsrs	r3, r2, #9
    8c6e:	4698      	mov	r8, r3
    8c70:	4643      	mov	r3, r8
    8c72:	2b00      	cmp	r3, #0
    8c74:	d100      	bne.n	8c78 <__aeabi_dsub+0x124>
    8c76:	e0c4      	b.n	8e02 <__aeabi_dsub+0x2ae>
    8c78:	4640      	mov	r0, r8
    8c7a:	f000 fc2d 	bl	94d8 <__clzsi2>
    8c7e:	0003      	movs	r3, r0
    8c80:	3b08      	subs	r3, #8
    8c82:	2b1f      	cmp	r3, #31
    8c84:	dd00      	ble.n	8c88 <__aeabi_dsub+0x134>
    8c86:	e0c5      	b.n	8e14 <__aeabi_dsub+0x2c0>
    8c88:	2220      	movs	r2, #32
    8c8a:	0029      	movs	r1, r5
    8c8c:	1ad2      	subs	r2, r2, r3
    8c8e:	4647      	mov	r7, r8
    8c90:	40d1      	lsrs	r1, r2
    8c92:	409f      	lsls	r7, r3
    8c94:	000a      	movs	r2, r1
    8c96:	409d      	lsls	r5, r3
    8c98:	433a      	orrs	r2, r7
    8c9a:	429c      	cmp	r4, r3
    8c9c:	dd00      	ble.n	8ca0 <__aeabi_dsub+0x14c>
    8c9e:	e0c0      	b.n	8e22 <__aeabi_dsub+0x2ce>
    8ca0:	1b1c      	subs	r4, r3, r4
    8ca2:	1c63      	adds	r3, r4, #1
    8ca4:	2b1f      	cmp	r3, #31
    8ca6:	dd00      	ble.n	8caa <__aeabi_dsub+0x156>
    8ca8:	e0e4      	b.n	8e74 <__aeabi_dsub+0x320>
    8caa:	2120      	movs	r1, #32
    8cac:	0014      	movs	r4, r2
    8cae:	0028      	movs	r0, r5
    8cb0:	1ac9      	subs	r1, r1, r3
    8cb2:	40d8      	lsrs	r0, r3
    8cb4:	408c      	lsls	r4, r1
    8cb6:	408d      	lsls	r5, r1
    8cb8:	4304      	orrs	r4, r0
    8cba:	40da      	lsrs	r2, r3
    8cbc:	1e68      	subs	r0, r5, #1
    8cbe:	4185      	sbcs	r5, r0
    8cc0:	0017      	movs	r7, r2
    8cc2:	4325      	orrs	r5, r4
    8cc4:	2400      	movs	r4, #0
    8cc6:	e771      	b.n	8bac <__aeabi_dsub+0x58>
    8cc8:	4642      	mov	r2, r8
    8cca:	4663      	mov	r3, ip
    8ccc:	431a      	orrs	r2, r3
    8cce:	d100      	bne.n	8cd2 <__aeabi_dsub+0x17e>
    8cd0:	e24c      	b.n	916c <__aeabi_dsub+0x618>
    8cd2:	4667      	mov	r7, ip
    8cd4:	4645      	mov	r5, r8
    8cd6:	076b      	lsls	r3, r5, #29
    8cd8:	d000      	beq.n	8cdc <__aeabi_dsub+0x188>
    8cda:	e769      	b.n	8bb0 <__aeabi_dsub+0x5c>
    8cdc:	2301      	movs	r3, #1
    8cde:	4651      	mov	r1, sl
    8ce0:	0778      	lsls	r0, r7, #29
    8ce2:	08ed      	lsrs	r5, r5, #3
    8ce4:	08fa      	lsrs	r2, r7, #3
    8ce6:	400b      	ands	r3, r1
    8ce8:	4305      	orrs	r5, r0
    8cea:	4973      	ldr	r1, [pc, #460]	; (8eb8 <__aeabi_dsub+0x364>)
    8cec:	428c      	cmp	r4, r1
    8cee:	d038      	beq.n	8d62 <__aeabi_dsub+0x20e>
    8cf0:	0312      	lsls	r2, r2, #12
    8cf2:	0564      	lsls	r4, r4, #21
    8cf4:	0b12      	lsrs	r2, r2, #12
    8cf6:	0d64      	lsrs	r4, r4, #21
    8cf8:	e779      	b.n	8bee <__aeabi_dsub+0x9a>
    8cfa:	2e00      	cmp	r6, #0
    8cfc:	dc00      	bgt.n	8d00 <__aeabi_dsub+0x1ac>
    8cfe:	e09a      	b.n	8e36 <__aeabi_dsub+0x2e2>
    8d00:	2a00      	cmp	r2, #0
    8d02:	d047      	beq.n	8d94 <__aeabi_dsub+0x240>
    8d04:	4a6c      	ldr	r2, [pc, #432]	; (8eb8 <__aeabi_dsub+0x364>)
    8d06:	4294      	cmp	r4, r2
    8d08:	d100      	bne.n	8d0c <__aeabi_dsub+0x1b8>
    8d0a:	e74f      	b.n	8bac <__aeabi_dsub+0x58>
    8d0c:	2280      	movs	r2, #128	; 0x80
    8d0e:	0412      	lsls	r2, r2, #16
    8d10:	4310      	orrs	r0, r2
    8d12:	4662      	mov	r2, ip
    8d14:	2a38      	cmp	r2, #56	; 0x38
    8d16:	dc00      	bgt.n	8d1a <__aeabi_dsub+0x1c6>
    8d18:	e108      	b.n	8f2c <__aeabi_dsub+0x3d8>
    8d1a:	4301      	orrs	r1, r0
    8d1c:	1e48      	subs	r0, r1, #1
    8d1e:	4181      	sbcs	r1, r0
    8d20:	2200      	movs	r2, #0
    8d22:	b2c9      	uxtb	r1, r1
    8d24:	1949      	adds	r1, r1, r5
    8d26:	19d2      	adds	r2, r2, r7
    8d28:	42a9      	cmp	r1, r5
    8d2a:	41bf      	sbcs	r7, r7
    8d2c:	000d      	movs	r5, r1
    8d2e:	427f      	negs	r7, r7
    8d30:	18bf      	adds	r7, r7, r2
    8d32:	023a      	lsls	r2, r7, #8
    8d34:	d400      	bmi.n	8d38 <__aeabi_dsub+0x1e4>
    8d36:	e142      	b.n	8fbe <__aeabi_dsub+0x46a>
    8d38:	4a5f      	ldr	r2, [pc, #380]	; (8eb8 <__aeabi_dsub+0x364>)
    8d3a:	3401      	adds	r4, #1
    8d3c:	4294      	cmp	r4, r2
    8d3e:	d100      	bne.n	8d42 <__aeabi_dsub+0x1ee>
    8d40:	e14e      	b.n	8fe0 <__aeabi_dsub+0x48c>
    8d42:	2001      	movs	r0, #1
    8d44:	4a5d      	ldr	r2, [pc, #372]	; (8ebc <__aeabi_dsub+0x368>)
    8d46:	0869      	lsrs	r1, r5, #1
    8d48:	403a      	ands	r2, r7
    8d4a:	4028      	ands	r0, r5
    8d4c:	4308      	orrs	r0, r1
    8d4e:	07d5      	lsls	r5, r2, #31
    8d50:	4305      	orrs	r5, r0
    8d52:	0857      	lsrs	r7, r2, #1
    8d54:	469a      	mov	sl, r3
    8d56:	e729      	b.n	8bac <__aeabi_dsub+0x58>
    8d58:	0006      	movs	r6, r0
    8d5a:	430e      	orrs	r6, r1
    8d5c:	d000      	beq.n	8d60 <__aeabi_dsub+0x20c>
    8d5e:	e717      	b.n	8b90 <__aeabi_dsub+0x3c>
    8d60:	e714      	b.n	8b8c <__aeabi_dsub+0x38>
    8d62:	0029      	movs	r1, r5
    8d64:	4311      	orrs	r1, r2
    8d66:	d100      	bne.n	8d6a <__aeabi_dsub+0x216>
    8d68:	e1f9      	b.n	915e <__aeabi_dsub+0x60a>
    8d6a:	2180      	movs	r1, #128	; 0x80
    8d6c:	0309      	lsls	r1, r1, #12
    8d6e:	430a      	orrs	r2, r1
    8d70:	0312      	lsls	r2, r2, #12
    8d72:	0b12      	lsrs	r2, r2, #12
    8d74:	e73b      	b.n	8bee <__aeabi_dsub+0x9a>
    8d76:	2301      	movs	r3, #1
    8d78:	425b      	negs	r3, r3
    8d7a:	4698      	mov	r8, r3
    8d7c:	44c4      	add	ip, r8
    8d7e:	4663      	mov	r3, ip
    8d80:	2b00      	cmp	r3, #0
    8d82:	d172      	bne.n	8e6a <__aeabi_dsub+0x316>
    8d84:	1a69      	subs	r1, r5, r1
    8d86:	428d      	cmp	r5, r1
    8d88:	419b      	sbcs	r3, r3
    8d8a:	1a3f      	subs	r7, r7, r0
    8d8c:	425b      	negs	r3, r3
    8d8e:	1aff      	subs	r7, r7, r3
    8d90:	000d      	movs	r5, r1
    8d92:	e768      	b.n	8c66 <__aeabi_dsub+0x112>
    8d94:	0002      	movs	r2, r0
    8d96:	430a      	orrs	r2, r1
    8d98:	d100      	bne.n	8d9c <__aeabi_dsub+0x248>
    8d9a:	e707      	b.n	8bac <__aeabi_dsub+0x58>
    8d9c:	2201      	movs	r2, #1
    8d9e:	4252      	negs	r2, r2
    8da0:	4690      	mov	r8, r2
    8da2:	44c4      	add	ip, r8
    8da4:	4662      	mov	r2, ip
    8da6:	2a00      	cmp	r2, #0
    8da8:	d000      	beq.n	8dac <__aeabi_dsub+0x258>
    8daa:	e0e6      	b.n	8f7a <__aeabi_dsub+0x426>
    8dac:	1869      	adds	r1, r5, r1
    8dae:	42a9      	cmp	r1, r5
    8db0:	41b6      	sbcs	r6, r6
    8db2:	183f      	adds	r7, r7, r0
    8db4:	4276      	negs	r6, r6
    8db6:	19f7      	adds	r7, r6, r7
    8db8:	000d      	movs	r5, r1
    8dba:	e7ba      	b.n	8d32 <__aeabi_dsub+0x1de>
    8dbc:	2e00      	cmp	r6, #0
    8dbe:	d000      	beq.n	8dc2 <__aeabi_dsub+0x26e>
    8dc0:	e080      	b.n	8ec4 <__aeabi_dsub+0x370>
    8dc2:	1c62      	adds	r2, r4, #1
    8dc4:	0552      	lsls	r2, r2, #21
    8dc6:	0d52      	lsrs	r2, r2, #21
    8dc8:	2a01      	cmp	r2, #1
    8dca:	dc00      	bgt.n	8dce <__aeabi_dsub+0x27a>
    8dcc:	e0f9      	b.n	8fc2 <__aeabi_dsub+0x46e>
    8dce:	1a6a      	subs	r2, r5, r1
    8dd0:	4691      	mov	r9, r2
    8dd2:	454d      	cmp	r5, r9
    8dd4:	41b6      	sbcs	r6, r6
    8dd6:	1a3a      	subs	r2, r7, r0
    8dd8:	4276      	negs	r6, r6
    8dda:	1b92      	subs	r2, r2, r6
    8ddc:	4690      	mov	r8, r2
    8dde:	0212      	lsls	r2, r2, #8
    8de0:	d400      	bmi.n	8de4 <__aeabi_dsub+0x290>
    8de2:	e099      	b.n	8f18 <__aeabi_dsub+0x3c4>
    8de4:	1b4d      	subs	r5, r1, r5
    8de6:	42a9      	cmp	r1, r5
    8de8:	4189      	sbcs	r1, r1
    8dea:	1bc7      	subs	r7, r0, r7
    8dec:	4249      	negs	r1, r1
    8dee:	1a7a      	subs	r2, r7, r1
    8df0:	4690      	mov	r8, r2
    8df2:	469a      	mov	sl, r3
    8df4:	e73c      	b.n	8c70 <__aeabi_dsub+0x11c>
    8df6:	4652      	mov	r2, sl
    8df8:	2301      	movs	r3, #1
    8dfa:	2500      	movs	r5, #0
    8dfc:	4013      	ands	r3, r2
    8dfe:	2200      	movs	r2, #0
    8e00:	e6f5      	b.n	8bee <__aeabi_dsub+0x9a>
    8e02:	0028      	movs	r0, r5
    8e04:	f000 fb68 	bl	94d8 <__clzsi2>
    8e08:	3020      	adds	r0, #32
    8e0a:	0003      	movs	r3, r0
    8e0c:	3b08      	subs	r3, #8
    8e0e:	2b1f      	cmp	r3, #31
    8e10:	dc00      	bgt.n	8e14 <__aeabi_dsub+0x2c0>
    8e12:	e739      	b.n	8c88 <__aeabi_dsub+0x134>
    8e14:	002a      	movs	r2, r5
    8e16:	3828      	subs	r0, #40	; 0x28
    8e18:	4082      	lsls	r2, r0
    8e1a:	2500      	movs	r5, #0
    8e1c:	429c      	cmp	r4, r3
    8e1e:	dc00      	bgt.n	8e22 <__aeabi_dsub+0x2ce>
    8e20:	e73e      	b.n	8ca0 <__aeabi_dsub+0x14c>
    8e22:	4f26      	ldr	r7, [pc, #152]	; (8ebc <__aeabi_dsub+0x368>)
    8e24:	1ae4      	subs	r4, r4, r3
    8e26:	4017      	ands	r7, r2
    8e28:	e6c0      	b.n	8bac <__aeabi_dsub+0x58>
    8e2a:	4301      	orrs	r1, r0
    8e2c:	1e48      	subs	r0, r1, #1
    8e2e:	4181      	sbcs	r1, r0
    8e30:	2200      	movs	r2, #0
    8e32:	b2c9      	uxtb	r1, r1
    8e34:	e710      	b.n	8c58 <__aeabi_dsub+0x104>
    8e36:	2e00      	cmp	r6, #0
    8e38:	d000      	beq.n	8e3c <__aeabi_dsub+0x2e8>
    8e3a:	e0f1      	b.n	9020 <__aeabi_dsub+0x4cc>
    8e3c:	1c62      	adds	r2, r4, #1
    8e3e:	4694      	mov	ip, r2
    8e40:	0552      	lsls	r2, r2, #21
    8e42:	0d52      	lsrs	r2, r2, #21
    8e44:	2a01      	cmp	r2, #1
    8e46:	dc00      	bgt.n	8e4a <__aeabi_dsub+0x2f6>
    8e48:	e0a0      	b.n	8f8c <__aeabi_dsub+0x438>
    8e4a:	4a1b      	ldr	r2, [pc, #108]	; (8eb8 <__aeabi_dsub+0x364>)
    8e4c:	4594      	cmp	ip, r2
    8e4e:	d100      	bne.n	8e52 <__aeabi_dsub+0x2fe>
    8e50:	e0c5      	b.n	8fde <__aeabi_dsub+0x48a>
    8e52:	1869      	adds	r1, r5, r1
    8e54:	42a9      	cmp	r1, r5
    8e56:	4192      	sbcs	r2, r2
    8e58:	183f      	adds	r7, r7, r0
    8e5a:	4252      	negs	r2, r2
    8e5c:	19d2      	adds	r2, r2, r7
    8e5e:	0849      	lsrs	r1, r1, #1
    8e60:	07d5      	lsls	r5, r2, #31
    8e62:	430d      	orrs	r5, r1
    8e64:	0857      	lsrs	r7, r2, #1
    8e66:	4664      	mov	r4, ip
    8e68:	e6a0      	b.n	8bac <__aeabi_dsub+0x58>
    8e6a:	4b13      	ldr	r3, [pc, #76]	; (8eb8 <__aeabi_dsub+0x364>)
    8e6c:	429c      	cmp	r4, r3
    8e6e:	d000      	beq.n	8e72 <__aeabi_dsub+0x31e>
    8e70:	e6d9      	b.n	8c26 <__aeabi_dsub+0xd2>
    8e72:	e69b      	b.n	8bac <__aeabi_dsub+0x58>
    8e74:	0011      	movs	r1, r2
    8e76:	3c1f      	subs	r4, #31
    8e78:	40e1      	lsrs	r1, r4
    8e7a:	000c      	movs	r4, r1
    8e7c:	2b20      	cmp	r3, #32
    8e7e:	d100      	bne.n	8e82 <__aeabi_dsub+0x32e>
    8e80:	e080      	b.n	8f84 <__aeabi_dsub+0x430>
    8e82:	2140      	movs	r1, #64	; 0x40
    8e84:	1acb      	subs	r3, r1, r3
    8e86:	409a      	lsls	r2, r3
    8e88:	4315      	orrs	r5, r2
    8e8a:	1e6a      	subs	r2, r5, #1
    8e8c:	4195      	sbcs	r5, r2
    8e8e:	2700      	movs	r7, #0
    8e90:	4325      	orrs	r5, r4
    8e92:	2400      	movs	r4, #0
    8e94:	e71f      	b.n	8cd6 <__aeabi_dsub+0x182>
    8e96:	4663      	mov	r3, ip
    8e98:	0002      	movs	r2, r0
    8e9a:	3b20      	subs	r3, #32
    8e9c:	40da      	lsrs	r2, r3
    8e9e:	4663      	mov	r3, ip
    8ea0:	2b20      	cmp	r3, #32
    8ea2:	d071      	beq.n	8f88 <__aeabi_dsub+0x434>
    8ea4:	2340      	movs	r3, #64	; 0x40
    8ea6:	4666      	mov	r6, ip
    8ea8:	1b9b      	subs	r3, r3, r6
    8eaa:	4098      	lsls	r0, r3
    8eac:	4301      	orrs	r1, r0
    8eae:	1e48      	subs	r0, r1, #1
    8eb0:	4181      	sbcs	r1, r0
    8eb2:	4311      	orrs	r1, r2
    8eb4:	2200      	movs	r2, #0
    8eb6:	e6cf      	b.n	8c58 <__aeabi_dsub+0x104>
    8eb8:	000007ff 	.word	0x000007ff
    8ebc:	ff7fffff 	.word	0xff7fffff
    8ec0:	800fffff 	.word	0x800fffff
    8ec4:	2c00      	cmp	r4, #0
    8ec6:	d048      	beq.n	8f5a <__aeabi_dsub+0x406>
    8ec8:	4cca      	ldr	r4, [pc, #808]	; (91f4 <__aeabi_dsub+0x6a0>)
    8eca:	42a2      	cmp	r2, r4
    8ecc:	d100      	bne.n	8ed0 <__aeabi_dsub+0x37c>
    8ece:	e0a2      	b.n	9016 <__aeabi_dsub+0x4c2>
    8ed0:	4274      	negs	r4, r6
    8ed2:	46a1      	mov	r9, r4
    8ed4:	2480      	movs	r4, #128	; 0x80
    8ed6:	0424      	lsls	r4, r4, #16
    8ed8:	4327      	orrs	r7, r4
    8eda:	464c      	mov	r4, r9
    8edc:	2c38      	cmp	r4, #56	; 0x38
    8ede:	dd00      	ble.n	8ee2 <__aeabi_dsub+0x38e>
    8ee0:	e0db      	b.n	909a <__aeabi_dsub+0x546>
    8ee2:	2c1f      	cmp	r4, #31
    8ee4:	dd00      	ble.n	8ee8 <__aeabi_dsub+0x394>
    8ee6:	e144      	b.n	9172 <__aeabi_dsub+0x61e>
    8ee8:	464e      	mov	r6, r9
    8eea:	2420      	movs	r4, #32
    8eec:	1ba4      	subs	r4, r4, r6
    8eee:	003e      	movs	r6, r7
    8ef0:	40a6      	lsls	r6, r4
    8ef2:	46a2      	mov	sl, r4
    8ef4:	46b0      	mov	r8, r6
    8ef6:	464c      	mov	r4, r9
    8ef8:	002e      	movs	r6, r5
    8efa:	40e6      	lsrs	r6, r4
    8efc:	46b4      	mov	ip, r6
    8efe:	4646      	mov	r6, r8
    8f00:	4664      	mov	r4, ip
    8f02:	4326      	orrs	r6, r4
    8f04:	4654      	mov	r4, sl
    8f06:	40a5      	lsls	r5, r4
    8f08:	1e6c      	subs	r4, r5, #1
    8f0a:	41a5      	sbcs	r5, r4
    8f0c:	0034      	movs	r4, r6
    8f0e:	432c      	orrs	r4, r5
    8f10:	464d      	mov	r5, r9
    8f12:	40ef      	lsrs	r7, r5
    8f14:	1b0d      	subs	r5, r1, r4
    8f16:	e028      	b.n	8f6a <__aeabi_dsub+0x416>
    8f18:	464a      	mov	r2, r9
    8f1a:	4643      	mov	r3, r8
    8f1c:	464d      	mov	r5, r9
    8f1e:	431a      	orrs	r2, r3
    8f20:	d000      	beq.n	8f24 <__aeabi_dsub+0x3d0>
    8f22:	e6a5      	b.n	8c70 <__aeabi_dsub+0x11c>
    8f24:	2300      	movs	r3, #0
    8f26:	2400      	movs	r4, #0
    8f28:	2500      	movs	r5, #0
    8f2a:	e6de      	b.n	8cea <__aeabi_dsub+0x196>
    8f2c:	2a1f      	cmp	r2, #31
    8f2e:	dc5a      	bgt.n	8fe6 <__aeabi_dsub+0x492>
    8f30:	4666      	mov	r6, ip
    8f32:	2220      	movs	r2, #32
    8f34:	1b92      	subs	r2, r2, r6
    8f36:	0006      	movs	r6, r0
    8f38:	4096      	lsls	r6, r2
    8f3a:	4691      	mov	r9, r2
    8f3c:	46b0      	mov	r8, r6
    8f3e:	4662      	mov	r2, ip
    8f40:	000e      	movs	r6, r1
    8f42:	40d6      	lsrs	r6, r2
    8f44:	4642      	mov	r2, r8
    8f46:	4316      	orrs	r6, r2
    8f48:	464a      	mov	r2, r9
    8f4a:	4091      	lsls	r1, r2
    8f4c:	1e4a      	subs	r2, r1, #1
    8f4e:	4191      	sbcs	r1, r2
    8f50:	0002      	movs	r2, r0
    8f52:	4660      	mov	r0, ip
    8f54:	4331      	orrs	r1, r6
    8f56:	40c2      	lsrs	r2, r0
    8f58:	e6e4      	b.n	8d24 <__aeabi_dsub+0x1d0>
    8f5a:	003c      	movs	r4, r7
    8f5c:	432c      	orrs	r4, r5
    8f5e:	d05a      	beq.n	9016 <__aeabi_dsub+0x4c2>
    8f60:	43f4      	mvns	r4, r6
    8f62:	46a1      	mov	r9, r4
    8f64:	2c00      	cmp	r4, #0
    8f66:	d152      	bne.n	900e <__aeabi_dsub+0x4ba>
    8f68:	1b4d      	subs	r5, r1, r5
    8f6a:	42a9      	cmp	r1, r5
    8f6c:	4189      	sbcs	r1, r1
    8f6e:	1bc7      	subs	r7, r0, r7
    8f70:	4249      	negs	r1, r1
    8f72:	1a7f      	subs	r7, r7, r1
    8f74:	0014      	movs	r4, r2
    8f76:	469a      	mov	sl, r3
    8f78:	e675      	b.n	8c66 <__aeabi_dsub+0x112>
    8f7a:	4a9e      	ldr	r2, [pc, #632]	; (91f4 <__aeabi_dsub+0x6a0>)
    8f7c:	4294      	cmp	r4, r2
    8f7e:	d000      	beq.n	8f82 <__aeabi_dsub+0x42e>
    8f80:	e6c7      	b.n	8d12 <__aeabi_dsub+0x1be>
    8f82:	e613      	b.n	8bac <__aeabi_dsub+0x58>
    8f84:	2200      	movs	r2, #0
    8f86:	e77f      	b.n	8e88 <__aeabi_dsub+0x334>
    8f88:	2000      	movs	r0, #0
    8f8a:	e78f      	b.n	8eac <__aeabi_dsub+0x358>
    8f8c:	2c00      	cmp	r4, #0
    8f8e:	d000      	beq.n	8f92 <__aeabi_dsub+0x43e>
    8f90:	e0c8      	b.n	9124 <__aeabi_dsub+0x5d0>
    8f92:	003b      	movs	r3, r7
    8f94:	432b      	orrs	r3, r5
    8f96:	d100      	bne.n	8f9a <__aeabi_dsub+0x446>
    8f98:	e10f      	b.n	91ba <__aeabi_dsub+0x666>
    8f9a:	0003      	movs	r3, r0
    8f9c:	430b      	orrs	r3, r1
    8f9e:	d100      	bne.n	8fa2 <__aeabi_dsub+0x44e>
    8fa0:	e604      	b.n	8bac <__aeabi_dsub+0x58>
    8fa2:	1869      	adds	r1, r5, r1
    8fa4:	42a9      	cmp	r1, r5
    8fa6:	419b      	sbcs	r3, r3
    8fa8:	183f      	adds	r7, r7, r0
    8faa:	425b      	negs	r3, r3
    8fac:	19df      	adds	r7, r3, r7
    8fae:	023b      	lsls	r3, r7, #8
    8fb0:	d400      	bmi.n	8fb4 <__aeabi_dsub+0x460>
    8fb2:	e11a      	b.n	91ea <__aeabi_dsub+0x696>
    8fb4:	4b90      	ldr	r3, [pc, #576]	; (91f8 <__aeabi_dsub+0x6a4>)
    8fb6:	000d      	movs	r5, r1
    8fb8:	401f      	ands	r7, r3
    8fba:	4664      	mov	r4, ip
    8fbc:	e5f6      	b.n	8bac <__aeabi_dsub+0x58>
    8fbe:	469a      	mov	sl, r3
    8fc0:	e689      	b.n	8cd6 <__aeabi_dsub+0x182>
    8fc2:	003a      	movs	r2, r7
    8fc4:	432a      	orrs	r2, r5
    8fc6:	2c00      	cmp	r4, #0
    8fc8:	d15c      	bne.n	9084 <__aeabi_dsub+0x530>
    8fca:	2a00      	cmp	r2, #0
    8fcc:	d175      	bne.n	90ba <__aeabi_dsub+0x566>
    8fce:	0002      	movs	r2, r0
    8fd0:	430a      	orrs	r2, r1
    8fd2:	d100      	bne.n	8fd6 <__aeabi_dsub+0x482>
    8fd4:	e0ca      	b.n	916c <__aeabi_dsub+0x618>
    8fd6:	0007      	movs	r7, r0
    8fd8:	000d      	movs	r5, r1
    8fda:	469a      	mov	sl, r3
    8fdc:	e5e6      	b.n	8bac <__aeabi_dsub+0x58>
    8fde:	4664      	mov	r4, ip
    8fe0:	2200      	movs	r2, #0
    8fe2:	2500      	movs	r5, #0
    8fe4:	e681      	b.n	8cea <__aeabi_dsub+0x196>
    8fe6:	4662      	mov	r2, ip
    8fe8:	0006      	movs	r6, r0
    8fea:	3a20      	subs	r2, #32
    8fec:	40d6      	lsrs	r6, r2
    8fee:	4662      	mov	r2, ip
    8ff0:	46b0      	mov	r8, r6
    8ff2:	2a20      	cmp	r2, #32
    8ff4:	d100      	bne.n	8ff8 <__aeabi_dsub+0x4a4>
    8ff6:	e0b7      	b.n	9168 <__aeabi_dsub+0x614>
    8ff8:	2240      	movs	r2, #64	; 0x40
    8ffa:	4666      	mov	r6, ip
    8ffc:	1b92      	subs	r2, r2, r6
    8ffe:	4090      	lsls	r0, r2
    9000:	4301      	orrs	r1, r0
    9002:	4642      	mov	r2, r8
    9004:	1e48      	subs	r0, r1, #1
    9006:	4181      	sbcs	r1, r0
    9008:	4311      	orrs	r1, r2
    900a:	2200      	movs	r2, #0
    900c:	e68a      	b.n	8d24 <__aeabi_dsub+0x1d0>
    900e:	4c79      	ldr	r4, [pc, #484]	; (91f4 <__aeabi_dsub+0x6a0>)
    9010:	42a2      	cmp	r2, r4
    9012:	d000      	beq.n	9016 <__aeabi_dsub+0x4c2>
    9014:	e761      	b.n	8eda <__aeabi_dsub+0x386>
    9016:	0007      	movs	r7, r0
    9018:	000d      	movs	r5, r1
    901a:	0014      	movs	r4, r2
    901c:	469a      	mov	sl, r3
    901e:	e5c5      	b.n	8bac <__aeabi_dsub+0x58>
    9020:	2c00      	cmp	r4, #0
    9022:	d141      	bne.n	90a8 <__aeabi_dsub+0x554>
    9024:	003c      	movs	r4, r7
    9026:	432c      	orrs	r4, r5
    9028:	d078      	beq.n	911c <__aeabi_dsub+0x5c8>
    902a:	43f4      	mvns	r4, r6
    902c:	46a1      	mov	r9, r4
    902e:	2c00      	cmp	r4, #0
    9030:	d020      	beq.n	9074 <__aeabi_dsub+0x520>
    9032:	4c70      	ldr	r4, [pc, #448]	; (91f4 <__aeabi_dsub+0x6a0>)
    9034:	42a2      	cmp	r2, r4
    9036:	d071      	beq.n	911c <__aeabi_dsub+0x5c8>
    9038:	464c      	mov	r4, r9
    903a:	2c38      	cmp	r4, #56	; 0x38
    903c:	dd00      	ble.n	9040 <__aeabi_dsub+0x4ec>
    903e:	e0b2      	b.n	91a6 <__aeabi_dsub+0x652>
    9040:	2c1f      	cmp	r4, #31
    9042:	dd00      	ble.n	9046 <__aeabi_dsub+0x4f2>
    9044:	e0bc      	b.n	91c0 <__aeabi_dsub+0x66c>
    9046:	2620      	movs	r6, #32
    9048:	1b34      	subs	r4, r6, r4
    904a:	46a2      	mov	sl, r4
    904c:	003c      	movs	r4, r7
    904e:	4656      	mov	r6, sl
    9050:	40b4      	lsls	r4, r6
    9052:	464e      	mov	r6, r9
    9054:	46a0      	mov	r8, r4
    9056:	002c      	movs	r4, r5
    9058:	40f4      	lsrs	r4, r6
    905a:	46a4      	mov	ip, r4
    905c:	4644      	mov	r4, r8
    905e:	4666      	mov	r6, ip
    9060:	4334      	orrs	r4, r6
    9062:	46a4      	mov	ip, r4
    9064:	4654      	mov	r4, sl
    9066:	40a5      	lsls	r5, r4
    9068:	4664      	mov	r4, ip
    906a:	1e6e      	subs	r6, r5, #1
    906c:	41b5      	sbcs	r5, r6
    906e:	4325      	orrs	r5, r4
    9070:	464c      	mov	r4, r9
    9072:	40e7      	lsrs	r7, r4
    9074:	186d      	adds	r5, r5, r1
    9076:	428d      	cmp	r5, r1
    9078:	4189      	sbcs	r1, r1
    907a:	183f      	adds	r7, r7, r0
    907c:	4249      	negs	r1, r1
    907e:	19cf      	adds	r7, r1, r7
    9080:	0014      	movs	r4, r2
    9082:	e656      	b.n	8d32 <__aeabi_dsub+0x1de>
    9084:	2a00      	cmp	r2, #0
    9086:	d12f      	bne.n	90e8 <__aeabi_dsub+0x594>
    9088:	0002      	movs	r2, r0
    908a:	430a      	orrs	r2, r1
    908c:	d100      	bne.n	9090 <__aeabi_dsub+0x53c>
    908e:	e084      	b.n	919a <__aeabi_dsub+0x646>
    9090:	0007      	movs	r7, r0
    9092:	000d      	movs	r5, r1
    9094:	469a      	mov	sl, r3
    9096:	4c57      	ldr	r4, [pc, #348]	; (91f4 <__aeabi_dsub+0x6a0>)
    9098:	e588      	b.n	8bac <__aeabi_dsub+0x58>
    909a:	433d      	orrs	r5, r7
    909c:	1e6f      	subs	r7, r5, #1
    909e:	41bd      	sbcs	r5, r7
    90a0:	b2ec      	uxtb	r4, r5
    90a2:	2700      	movs	r7, #0
    90a4:	1b0d      	subs	r5, r1, r4
    90a6:	e760      	b.n	8f6a <__aeabi_dsub+0x416>
    90a8:	4c52      	ldr	r4, [pc, #328]	; (91f4 <__aeabi_dsub+0x6a0>)
    90aa:	42a2      	cmp	r2, r4
    90ac:	d036      	beq.n	911c <__aeabi_dsub+0x5c8>
    90ae:	4274      	negs	r4, r6
    90b0:	2680      	movs	r6, #128	; 0x80
    90b2:	0436      	lsls	r6, r6, #16
    90b4:	46a1      	mov	r9, r4
    90b6:	4337      	orrs	r7, r6
    90b8:	e7be      	b.n	9038 <__aeabi_dsub+0x4e4>
    90ba:	0002      	movs	r2, r0
    90bc:	430a      	orrs	r2, r1
    90be:	d100      	bne.n	90c2 <__aeabi_dsub+0x56e>
    90c0:	e574      	b.n	8bac <__aeabi_dsub+0x58>
    90c2:	1a6a      	subs	r2, r5, r1
    90c4:	4690      	mov	r8, r2
    90c6:	4545      	cmp	r5, r8
    90c8:	41b6      	sbcs	r6, r6
    90ca:	1a3a      	subs	r2, r7, r0
    90cc:	4276      	negs	r6, r6
    90ce:	1b92      	subs	r2, r2, r6
    90d0:	4694      	mov	ip, r2
    90d2:	0212      	lsls	r2, r2, #8
    90d4:	d400      	bmi.n	90d8 <__aeabi_dsub+0x584>
    90d6:	e5f7      	b.n	8cc8 <__aeabi_dsub+0x174>
    90d8:	1b4d      	subs	r5, r1, r5
    90da:	42a9      	cmp	r1, r5
    90dc:	4189      	sbcs	r1, r1
    90de:	1bc7      	subs	r7, r0, r7
    90e0:	4249      	negs	r1, r1
    90e2:	1a7f      	subs	r7, r7, r1
    90e4:	469a      	mov	sl, r3
    90e6:	e561      	b.n	8bac <__aeabi_dsub+0x58>
    90e8:	0002      	movs	r2, r0
    90ea:	430a      	orrs	r2, r1
    90ec:	d03a      	beq.n	9164 <__aeabi_dsub+0x610>
    90ee:	08ed      	lsrs	r5, r5, #3
    90f0:	077c      	lsls	r4, r7, #29
    90f2:	432c      	orrs	r4, r5
    90f4:	2580      	movs	r5, #128	; 0x80
    90f6:	08fa      	lsrs	r2, r7, #3
    90f8:	032d      	lsls	r5, r5, #12
    90fa:	422a      	tst	r2, r5
    90fc:	d008      	beq.n	9110 <__aeabi_dsub+0x5bc>
    90fe:	08c7      	lsrs	r7, r0, #3
    9100:	422f      	tst	r7, r5
    9102:	d105      	bne.n	9110 <__aeabi_dsub+0x5bc>
    9104:	0745      	lsls	r5, r0, #29
    9106:	002c      	movs	r4, r5
    9108:	003a      	movs	r2, r7
    910a:	469a      	mov	sl, r3
    910c:	08c9      	lsrs	r1, r1, #3
    910e:	430c      	orrs	r4, r1
    9110:	0f67      	lsrs	r7, r4, #29
    9112:	00d2      	lsls	r2, r2, #3
    9114:	00e5      	lsls	r5, r4, #3
    9116:	4317      	orrs	r7, r2
    9118:	4c36      	ldr	r4, [pc, #216]	; (91f4 <__aeabi_dsub+0x6a0>)
    911a:	e547      	b.n	8bac <__aeabi_dsub+0x58>
    911c:	0007      	movs	r7, r0
    911e:	000d      	movs	r5, r1
    9120:	0014      	movs	r4, r2
    9122:	e543      	b.n	8bac <__aeabi_dsub+0x58>
    9124:	003a      	movs	r2, r7
    9126:	432a      	orrs	r2, r5
    9128:	d043      	beq.n	91b2 <__aeabi_dsub+0x65e>
    912a:	0002      	movs	r2, r0
    912c:	430a      	orrs	r2, r1
    912e:	d019      	beq.n	9164 <__aeabi_dsub+0x610>
    9130:	08ed      	lsrs	r5, r5, #3
    9132:	077c      	lsls	r4, r7, #29
    9134:	432c      	orrs	r4, r5
    9136:	2580      	movs	r5, #128	; 0x80
    9138:	08fa      	lsrs	r2, r7, #3
    913a:	032d      	lsls	r5, r5, #12
    913c:	422a      	tst	r2, r5
    913e:	d007      	beq.n	9150 <__aeabi_dsub+0x5fc>
    9140:	08c6      	lsrs	r6, r0, #3
    9142:	422e      	tst	r6, r5
    9144:	d104      	bne.n	9150 <__aeabi_dsub+0x5fc>
    9146:	0747      	lsls	r7, r0, #29
    9148:	003c      	movs	r4, r7
    914a:	0032      	movs	r2, r6
    914c:	08c9      	lsrs	r1, r1, #3
    914e:	430c      	orrs	r4, r1
    9150:	00d7      	lsls	r7, r2, #3
    9152:	0f62      	lsrs	r2, r4, #29
    9154:	00e5      	lsls	r5, r4, #3
    9156:	4317      	orrs	r7, r2
    9158:	469a      	mov	sl, r3
    915a:	4c26      	ldr	r4, [pc, #152]	; (91f4 <__aeabi_dsub+0x6a0>)
    915c:	e526      	b.n	8bac <__aeabi_dsub+0x58>
    915e:	2200      	movs	r2, #0
    9160:	2500      	movs	r5, #0
    9162:	e544      	b.n	8bee <__aeabi_dsub+0x9a>
    9164:	4c23      	ldr	r4, [pc, #140]	; (91f4 <__aeabi_dsub+0x6a0>)
    9166:	e521      	b.n	8bac <__aeabi_dsub+0x58>
    9168:	2000      	movs	r0, #0
    916a:	e749      	b.n	9000 <__aeabi_dsub+0x4ac>
    916c:	2300      	movs	r3, #0
    916e:	2500      	movs	r5, #0
    9170:	e5bb      	b.n	8cea <__aeabi_dsub+0x196>
    9172:	464c      	mov	r4, r9
    9174:	003e      	movs	r6, r7
    9176:	3c20      	subs	r4, #32
    9178:	40e6      	lsrs	r6, r4
    917a:	464c      	mov	r4, r9
    917c:	46b4      	mov	ip, r6
    917e:	2c20      	cmp	r4, #32
    9180:	d031      	beq.n	91e6 <__aeabi_dsub+0x692>
    9182:	2440      	movs	r4, #64	; 0x40
    9184:	464e      	mov	r6, r9
    9186:	1ba6      	subs	r6, r4, r6
    9188:	40b7      	lsls	r7, r6
    918a:	433d      	orrs	r5, r7
    918c:	1e6c      	subs	r4, r5, #1
    918e:	41a5      	sbcs	r5, r4
    9190:	4664      	mov	r4, ip
    9192:	432c      	orrs	r4, r5
    9194:	2700      	movs	r7, #0
    9196:	1b0d      	subs	r5, r1, r4
    9198:	e6e7      	b.n	8f6a <__aeabi_dsub+0x416>
    919a:	2280      	movs	r2, #128	; 0x80
    919c:	2300      	movs	r3, #0
    919e:	0312      	lsls	r2, r2, #12
    91a0:	4c14      	ldr	r4, [pc, #80]	; (91f4 <__aeabi_dsub+0x6a0>)
    91a2:	2500      	movs	r5, #0
    91a4:	e5a1      	b.n	8cea <__aeabi_dsub+0x196>
    91a6:	433d      	orrs	r5, r7
    91a8:	1e6f      	subs	r7, r5, #1
    91aa:	41bd      	sbcs	r5, r7
    91ac:	2700      	movs	r7, #0
    91ae:	b2ed      	uxtb	r5, r5
    91b0:	e760      	b.n	9074 <__aeabi_dsub+0x520>
    91b2:	0007      	movs	r7, r0
    91b4:	000d      	movs	r5, r1
    91b6:	4c0f      	ldr	r4, [pc, #60]	; (91f4 <__aeabi_dsub+0x6a0>)
    91b8:	e4f8      	b.n	8bac <__aeabi_dsub+0x58>
    91ba:	0007      	movs	r7, r0
    91bc:	000d      	movs	r5, r1
    91be:	e4f5      	b.n	8bac <__aeabi_dsub+0x58>
    91c0:	464e      	mov	r6, r9
    91c2:	003c      	movs	r4, r7
    91c4:	3e20      	subs	r6, #32
    91c6:	40f4      	lsrs	r4, r6
    91c8:	46a0      	mov	r8, r4
    91ca:	464c      	mov	r4, r9
    91cc:	2c20      	cmp	r4, #32
    91ce:	d00e      	beq.n	91ee <__aeabi_dsub+0x69a>
    91d0:	2440      	movs	r4, #64	; 0x40
    91d2:	464e      	mov	r6, r9
    91d4:	1ba4      	subs	r4, r4, r6
    91d6:	40a7      	lsls	r7, r4
    91d8:	433d      	orrs	r5, r7
    91da:	1e6f      	subs	r7, r5, #1
    91dc:	41bd      	sbcs	r5, r7
    91de:	4644      	mov	r4, r8
    91e0:	2700      	movs	r7, #0
    91e2:	4325      	orrs	r5, r4
    91e4:	e746      	b.n	9074 <__aeabi_dsub+0x520>
    91e6:	2700      	movs	r7, #0
    91e8:	e7cf      	b.n	918a <__aeabi_dsub+0x636>
    91ea:	000d      	movs	r5, r1
    91ec:	e573      	b.n	8cd6 <__aeabi_dsub+0x182>
    91ee:	2700      	movs	r7, #0
    91f0:	e7f2      	b.n	91d8 <__aeabi_dsub+0x684>
    91f2:	46c0      	nop			; (mov r8, r8)
    91f4:	000007ff 	.word	0x000007ff
    91f8:	ff7fffff 	.word	0xff7fffff

000091fc <__aeabi_dcmpun>:
    91fc:	b570      	push	{r4, r5, r6, lr}
    91fe:	4e0e      	ldr	r6, [pc, #56]	; (9238 <__aeabi_dcmpun+0x3c>)
    9200:	030c      	lsls	r4, r1, #12
    9202:	031d      	lsls	r5, r3, #12
    9204:	0049      	lsls	r1, r1, #1
    9206:	005b      	lsls	r3, r3, #1
    9208:	0b24      	lsrs	r4, r4, #12
    920a:	0d49      	lsrs	r1, r1, #21
    920c:	0b2d      	lsrs	r5, r5, #12
    920e:	0d5b      	lsrs	r3, r3, #21
    9210:	42b1      	cmp	r1, r6
    9212:	d004      	beq.n	921e <__aeabi_dcmpun+0x22>
    9214:	4908      	ldr	r1, [pc, #32]	; (9238 <__aeabi_dcmpun+0x3c>)
    9216:	2000      	movs	r0, #0
    9218:	428b      	cmp	r3, r1
    921a:	d008      	beq.n	922e <__aeabi_dcmpun+0x32>
    921c:	bd70      	pop	{r4, r5, r6, pc}
    921e:	4304      	orrs	r4, r0
    9220:	2001      	movs	r0, #1
    9222:	2c00      	cmp	r4, #0
    9224:	d1fa      	bne.n	921c <__aeabi_dcmpun+0x20>
    9226:	4904      	ldr	r1, [pc, #16]	; (9238 <__aeabi_dcmpun+0x3c>)
    9228:	2000      	movs	r0, #0
    922a:	428b      	cmp	r3, r1
    922c:	d1f6      	bne.n	921c <__aeabi_dcmpun+0x20>
    922e:	4315      	orrs	r5, r2
    9230:	0028      	movs	r0, r5
    9232:	1e45      	subs	r5, r0, #1
    9234:	41a8      	sbcs	r0, r5
    9236:	e7f1      	b.n	921c <__aeabi_dcmpun+0x20>
    9238:	000007ff 	.word	0x000007ff

0000923c <__aeabi_d2iz>:
    923c:	030b      	lsls	r3, r1, #12
    923e:	b530      	push	{r4, r5, lr}
    9240:	4d13      	ldr	r5, [pc, #76]	; (9290 <__aeabi_d2iz+0x54>)
    9242:	0b1a      	lsrs	r2, r3, #12
    9244:	004b      	lsls	r3, r1, #1
    9246:	0d5b      	lsrs	r3, r3, #21
    9248:	0fc9      	lsrs	r1, r1, #31
    924a:	2400      	movs	r4, #0
    924c:	42ab      	cmp	r3, r5
    924e:	dd11      	ble.n	9274 <__aeabi_d2iz+0x38>
    9250:	4c10      	ldr	r4, [pc, #64]	; (9294 <__aeabi_d2iz+0x58>)
    9252:	42a3      	cmp	r3, r4
    9254:	dc10      	bgt.n	9278 <__aeabi_d2iz+0x3c>
    9256:	2480      	movs	r4, #128	; 0x80
    9258:	0364      	lsls	r4, r4, #13
    925a:	4322      	orrs	r2, r4
    925c:	4c0e      	ldr	r4, [pc, #56]	; (9298 <__aeabi_d2iz+0x5c>)
    925e:	1ae4      	subs	r4, r4, r3
    9260:	2c1f      	cmp	r4, #31
    9262:	dd0c      	ble.n	927e <__aeabi_d2iz+0x42>
    9264:	480d      	ldr	r0, [pc, #52]	; (929c <__aeabi_d2iz+0x60>)
    9266:	1ac3      	subs	r3, r0, r3
    9268:	40da      	lsrs	r2, r3
    926a:	0013      	movs	r3, r2
    926c:	425c      	negs	r4, r3
    926e:	2900      	cmp	r1, #0
    9270:	d100      	bne.n	9274 <__aeabi_d2iz+0x38>
    9272:	001c      	movs	r4, r3
    9274:	0020      	movs	r0, r4
    9276:	bd30      	pop	{r4, r5, pc}
    9278:	4b09      	ldr	r3, [pc, #36]	; (92a0 <__aeabi_d2iz+0x64>)
    927a:	18cc      	adds	r4, r1, r3
    927c:	e7fa      	b.n	9274 <__aeabi_d2iz+0x38>
    927e:	40e0      	lsrs	r0, r4
    9280:	4c08      	ldr	r4, [pc, #32]	; (92a4 <__aeabi_d2iz+0x68>)
    9282:	46a4      	mov	ip, r4
    9284:	4463      	add	r3, ip
    9286:	409a      	lsls	r2, r3
    9288:	0013      	movs	r3, r2
    928a:	4303      	orrs	r3, r0
    928c:	e7ee      	b.n	926c <__aeabi_d2iz+0x30>
    928e:	46c0      	nop			; (mov r8, r8)
    9290:	000003fe 	.word	0x000003fe
    9294:	0000041d 	.word	0x0000041d
    9298:	00000433 	.word	0x00000433
    929c:	00000413 	.word	0x00000413
    92a0:	7fffffff 	.word	0x7fffffff
    92a4:	fffffbed 	.word	0xfffffbed

000092a8 <__aeabi_ui2d>:
    92a8:	b570      	push	{r4, r5, r6, lr}
    92aa:	1e05      	subs	r5, r0, #0
    92ac:	d028      	beq.n	9300 <__aeabi_ui2d+0x58>
    92ae:	f000 f913 	bl	94d8 <__clzsi2>
    92b2:	4b15      	ldr	r3, [pc, #84]	; (9308 <__aeabi_ui2d+0x60>)
    92b4:	4a15      	ldr	r2, [pc, #84]	; (930c <__aeabi_ui2d+0x64>)
    92b6:	1a1b      	subs	r3, r3, r0
    92b8:	1ad2      	subs	r2, r2, r3
    92ba:	2a1f      	cmp	r2, #31
    92bc:	dd16      	ble.n	92ec <__aeabi_ui2d+0x44>
    92be:	002c      	movs	r4, r5
    92c0:	4a13      	ldr	r2, [pc, #76]	; (9310 <__aeabi_ui2d+0x68>)
    92c2:	2500      	movs	r5, #0
    92c4:	1ad2      	subs	r2, r2, r3
    92c6:	4094      	lsls	r4, r2
    92c8:	055a      	lsls	r2, r3, #21
    92ca:	0324      	lsls	r4, r4, #12
    92cc:	0b24      	lsrs	r4, r4, #12
    92ce:	0d52      	lsrs	r2, r2, #21
    92d0:	2100      	movs	r1, #0
    92d2:	0324      	lsls	r4, r4, #12
    92d4:	0d0b      	lsrs	r3, r1, #20
    92d6:	0b24      	lsrs	r4, r4, #12
    92d8:	051b      	lsls	r3, r3, #20
    92da:	4323      	orrs	r3, r4
    92dc:	4c0d      	ldr	r4, [pc, #52]	; (9314 <__aeabi_ui2d+0x6c>)
    92de:	0512      	lsls	r2, r2, #20
    92e0:	4023      	ands	r3, r4
    92e2:	4313      	orrs	r3, r2
    92e4:	005b      	lsls	r3, r3, #1
    92e6:	0028      	movs	r0, r5
    92e8:	0859      	lsrs	r1, r3, #1
    92ea:	bd70      	pop	{r4, r5, r6, pc}
    92ec:	210b      	movs	r1, #11
    92ee:	002c      	movs	r4, r5
    92f0:	1a08      	subs	r0, r1, r0
    92f2:	40c4      	lsrs	r4, r0
    92f4:	4095      	lsls	r5, r2
    92f6:	0324      	lsls	r4, r4, #12
    92f8:	055a      	lsls	r2, r3, #21
    92fa:	0b24      	lsrs	r4, r4, #12
    92fc:	0d52      	lsrs	r2, r2, #21
    92fe:	e7e7      	b.n	92d0 <__aeabi_ui2d+0x28>
    9300:	2200      	movs	r2, #0
    9302:	2400      	movs	r4, #0
    9304:	e7e4      	b.n	92d0 <__aeabi_ui2d+0x28>
    9306:	46c0      	nop			; (mov r8, r8)
    9308:	0000041e 	.word	0x0000041e
    930c:	00000433 	.word	0x00000433
    9310:	00000413 	.word	0x00000413
    9314:	800fffff 	.word	0x800fffff

00009318 <__aeabi_f2d>:
    9318:	0042      	lsls	r2, r0, #1
    931a:	0e12      	lsrs	r2, r2, #24
    931c:	1c51      	adds	r1, r2, #1
    931e:	0243      	lsls	r3, r0, #9
    9320:	b2c9      	uxtb	r1, r1
    9322:	b570      	push	{r4, r5, r6, lr}
    9324:	0a5d      	lsrs	r5, r3, #9
    9326:	0fc4      	lsrs	r4, r0, #31
    9328:	2901      	cmp	r1, #1
    932a:	dd15      	ble.n	9358 <__aeabi_f2d+0x40>
    932c:	21e0      	movs	r1, #224	; 0xe0
    932e:	0089      	lsls	r1, r1, #2
    9330:	468c      	mov	ip, r1
    9332:	076d      	lsls	r5, r5, #29
    9334:	0b1b      	lsrs	r3, r3, #12
    9336:	4462      	add	r2, ip
    9338:	2100      	movs	r1, #0
    933a:	0028      	movs	r0, r5
    933c:	0d0d      	lsrs	r5, r1, #20
    933e:	052d      	lsls	r5, r5, #20
    9340:	432b      	orrs	r3, r5
    9342:	4d1c      	ldr	r5, [pc, #112]	; (93b4 <__aeabi_f2d+0x9c>)
    9344:	0552      	lsls	r2, r2, #21
    9346:	402b      	ands	r3, r5
    9348:	0852      	lsrs	r2, r2, #1
    934a:	4313      	orrs	r3, r2
    934c:	005b      	lsls	r3, r3, #1
    934e:	07e4      	lsls	r4, r4, #31
    9350:	085b      	lsrs	r3, r3, #1
    9352:	4323      	orrs	r3, r4
    9354:	0019      	movs	r1, r3
    9356:	bd70      	pop	{r4, r5, r6, pc}
    9358:	2a00      	cmp	r2, #0
    935a:	d115      	bne.n	9388 <__aeabi_f2d+0x70>
    935c:	2d00      	cmp	r5, #0
    935e:	d01f      	beq.n	93a0 <__aeabi_f2d+0x88>
    9360:	0028      	movs	r0, r5
    9362:	f000 f8b9 	bl	94d8 <__clzsi2>
    9366:	280a      	cmp	r0, #10
    9368:	dc1d      	bgt.n	93a6 <__aeabi_f2d+0x8e>
    936a:	230b      	movs	r3, #11
    936c:	002a      	movs	r2, r5
    936e:	1a1b      	subs	r3, r3, r0
    9370:	40da      	lsrs	r2, r3
    9372:	0013      	movs	r3, r2
    9374:	0002      	movs	r2, r0
    9376:	3215      	adds	r2, #21
    9378:	4095      	lsls	r5, r2
    937a:	4a0f      	ldr	r2, [pc, #60]	; (93b8 <__aeabi_f2d+0xa0>)
    937c:	031b      	lsls	r3, r3, #12
    937e:	1a12      	subs	r2, r2, r0
    9380:	0552      	lsls	r2, r2, #21
    9382:	0b1b      	lsrs	r3, r3, #12
    9384:	0d52      	lsrs	r2, r2, #21
    9386:	e7d7      	b.n	9338 <__aeabi_f2d+0x20>
    9388:	2d00      	cmp	r5, #0
    938a:	d006      	beq.n	939a <__aeabi_f2d+0x82>
    938c:	2280      	movs	r2, #128	; 0x80
    938e:	0b1b      	lsrs	r3, r3, #12
    9390:	0312      	lsls	r2, r2, #12
    9392:	4313      	orrs	r3, r2
    9394:	076d      	lsls	r5, r5, #29
    9396:	4a09      	ldr	r2, [pc, #36]	; (93bc <__aeabi_f2d+0xa4>)
    9398:	e7ce      	b.n	9338 <__aeabi_f2d+0x20>
    939a:	4a08      	ldr	r2, [pc, #32]	; (93bc <__aeabi_f2d+0xa4>)
    939c:	2300      	movs	r3, #0
    939e:	e7cb      	b.n	9338 <__aeabi_f2d+0x20>
    93a0:	2200      	movs	r2, #0
    93a2:	2300      	movs	r3, #0
    93a4:	e7c8      	b.n	9338 <__aeabi_f2d+0x20>
    93a6:	0003      	movs	r3, r0
    93a8:	3b0b      	subs	r3, #11
    93aa:	409d      	lsls	r5, r3
    93ac:	002b      	movs	r3, r5
    93ae:	2500      	movs	r5, #0
    93b0:	e7e3      	b.n	937a <__aeabi_f2d+0x62>
    93b2:	46c0      	nop			; (mov r8, r8)
    93b4:	800fffff 	.word	0x800fffff
    93b8:	00000389 	.word	0x00000389
    93bc:	000007ff 	.word	0x000007ff

000093c0 <__aeabi_d2f>:
    93c0:	004b      	lsls	r3, r1, #1
    93c2:	b570      	push	{r4, r5, r6, lr}
    93c4:	0d5e      	lsrs	r6, r3, #21
    93c6:	030c      	lsls	r4, r1, #12
    93c8:	1c75      	adds	r5, r6, #1
    93ca:	0a64      	lsrs	r4, r4, #9
    93cc:	0f42      	lsrs	r2, r0, #29
    93ce:	056d      	lsls	r5, r5, #21
    93d0:	4322      	orrs	r2, r4
    93d2:	0fc9      	lsrs	r1, r1, #31
    93d4:	00c4      	lsls	r4, r0, #3
    93d6:	0d6d      	lsrs	r5, r5, #21
    93d8:	2d01      	cmp	r5, #1
    93da:	dd2a      	ble.n	9432 <__aeabi_d2f+0x72>
    93dc:	4b3b      	ldr	r3, [pc, #236]	; (94cc <__aeabi_d2f+0x10c>)
    93de:	18f3      	adds	r3, r6, r3
    93e0:	2bfe      	cmp	r3, #254	; 0xfe
    93e2:	dc1a      	bgt.n	941a <__aeabi_d2f+0x5a>
    93e4:	2b00      	cmp	r3, #0
    93e6:	dd42      	ble.n	946e <__aeabi_d2f+0xae>
    93e8:	0180      	lsls	r0, r0, #6
    93ea:	1e45      	subs	r5, r0, #1
    93ec:	41a8      	sbcs	r0, r5
    93ee:	00d2      	lsls	r2, r2, #3
    93f0:	4310      	orrs	r0, r2
    93f2:	0f62      	lsrs	r2, r4, #29
    93f4:	4302      	orrs	r2, r0
    93f6:	0750      	lsls	r0, r2, #29
    93f8:	d004      	beq.n	9404 <__aeabi_d2f+0x44>
    93fa:	200f      	movs	r0, #15
    93fc:	4010      	ands	r0, r2
    93fe:	2804      	cmp	r0, #4
    9400:	d000      	beq.n	9404 <__aeabi_d2f+0x44>
    9402:	3204      	adds	r2, #4
    9404:	2080      	movs	r0, #128	; 0x80
    9406:	04c0      	lsls	r0, r0, #19
    9408:	4010      	ands	r0, r2
    940a:	d021      	beq.n	9450 <__aeabi_d2f+0x90>
    940c:	3301      	adds	r3, #1
    940e:	2bff      	cmp	r3, #255	; 0xff
    9410:	d003      	beq.n	941a <__aeabi_d2f+0x5a>
    9412:	0192      	lsls	r2, r2, #6
    9414:	0a52      	lsrs	r2, r2, #9
    9416:	b2db      	uxtb	r3, r3
    9418:	e001      	b.n	941e <__aeabi_d2f+0x5e>
    941a:	23ff      	movs	r3, #255	; 0xff
    941c:	2200      	movs	r2, #0
    941e:	0252      	lsls	r2, r2, #9
    9420:	0a52      	lsrs	r2, r2, #9
    9422:	05db      	lsls	r3, r3, #23
    9424:	4313      	orrs	r3, r2
    9426:	005b      	lsls	r3, r3, #1
    9428:	07c9      	lsls	r1, r1, #31
    942a:	085b      	lsrs	r3, r3, #1
    942c:	430b      	orrs	r3, r1
    942e:	0018      	movs	r0, r3
    9430:	bd70      	pop	{r4, r5, r6, pc}
    9432:	2e00      	cmp	r6, #0
    9434:	d007      	beq.n	9446 <__aeabi_d2f+0x86>
    9436:	4314      	orrs	r4, r2
    9438:	d0ef      	beq.n	941a <__aeabi_d2f+0x5a>
    943a:	2080      	movs	r0, #128	; 0x80
    943c:	00d2      	lsls	r2, r2, #3
    943e:	0480      	lsls	r0, r0, #18
    9440:	4302      	orrs	r2, r0
    9442:	23ff      	movs	r3, #255	; 0xff
    9444:	e7d7      	b.n	93f6 <__aeabi_d2f+0x36>
    9446:	4322      	orrs	r2, r4
    9448:	2300      	movs	r3, #0
    944a:	2a00      	cmp	r2, #0
    944c:	d003      	beq.n	9456 <__aeabi_d2f+0x96>
    944e:	2205      	movs	r2, #5
    9450:	08d2      	lsrs	r2, r2, #3
    9452:	2bff      	cmp	r3, #255	; 0xff
    9454:	d003      	beq.n	945e <__aeabi_d2f+0x9e>
    9456:	0252      	lsls	r2, r2, #9
    9458:	0a52      	lsrs	r2, r2, #9
    945a:	b2db      	uxtb	r3, r3
    945c:	e7df      	b.n	941e <__aeabi_d2f+0x5e>
    945e:	2a00      	cmp	r2, #0
    9460:	d032      	beq.n	94c8 <__aeabi_d2f+0x108>
    9462:	2080      	movs	r0, #128	; 0x80
    9464:	03c0      	lsls	r0, r0, #15
    9466:	4302      	orrs	r2, r0
    9468:	0252      	lsls	r2, r2, #9
    946a:	0a52      	lsrs	r2, r2, #9
    946c:	e7d7      	b.n	941e <__aeabi_d2f+0x5e>
    946e:	0018      	movs	r0, r3
    9470:	3017      	adds	r0, #23
    9472:	db14      	blt.n	949e <__aeabi_d2f+0xde>
    9474:	2080      	movs	r0, #128	; 0x80
    9476:	0400      	lsls	r0, r0, #16
    9478:	4302      	orrs	r2, r0
    947a:	201e      	movs	r0, #30
    947c:	1ac0      	subs	r0, r0, r3
    947e:	281f      	cmp	r0, #31
    9480:	dc0f      	bgt.n	94a2 <__aeabi_d2f+0xe2>
    9482:	0025      	movs	r5, r4
    9484:	4b12      	ldr	r3, [pc, #72]	; (94d0 <__aeabi_d2f+0x110>)
    9486:	18f3      	adds	r3, r6, r3
    9488:	409d      	lsls	r5, r3
    948a:	1e6e      	subs	r6, r5, #1
    948c:	41b5      	sbcs	r5, r6
    948e:	409a      	lsls	r2, r3
    9490:	002b      	movs	r3, r5
    9492:	4313      	orrs	r3, r2
    9494:	0022      	movs	r2, r4
    9496:	40c2      	lsrs	r2, r0
    9498:	431a      	orrs	r2, r3
    949a:	2300      	movs	r3, #0
    949c:	e7ab      	b.n	93f6 <__aeabi_d2f+0x36>
    949e:	2300      	movs	r3, #0
    94a0:	e7d5      	b.n	944e <__aeabi_d2f+0x8e>
    94a2:	2502      	movs	r5, #2
    94a4:	426d      	negs	r5, r5
    94a6:	1aeb      	subs	r3, r5, r3
    94a8:	0015      	movs	r5, r2
    94aa:	40dd      	lsrs	r5, r3
    94ac:	2820      	cmp	r0, #32
    94ae:	d009      	beq.n	94c4 <__aeabi_d2f+0x104>
    94b0:	4b08      	ldr	r3, [pc, #32]	; (94d4 <__aeabi_d2f+0x114>)
    94b2:	18f3      	adds	r3, r6, r3
    94b4:	409a      	lsls	r2, r3
    94b6:	4314      	orrs	r4, r2
    94b8:	1e62      	subs	r2, r4, #1
    94ba:	4194      	sbcs	r4, r2
    94bc:	0022      	movs	r2, r4
    94be:	2300      	movs	r3, #0
    94c0:	432a      	orrs	r2, r5
    94c2:	e798      	b.n	93f6 <__aeabi_d2f+0x36>
    94c4:	2200      	movs	r2, #0
    94c6:	e7f6      	b.n	94b6 <__aeabi_d2f+0xf6>
    94c8:	2200      	movs	r2, #0
    94ca:	e7a8      	b.n	941e <__aeabi_d2f+0x5e>
    94cc:	fffffc80 	.word	0xfffffc80
    94d0:	fffffc82 	.word	0xfffffc82
    94d4:	fffffca2 	.word	0xfffffca2

000094d8 <__clzsi2>:
    94d8:	211c      	movs	r1, #28
    94da:	2301      	movs	r3, #1
    94dc:	041b      	lsls	r3, r3, #16
    94de:	4298      	cmp	r0, r3
    94e0:	d301      	bcc.n	94e6 <__clzsi2+0xe>
    94e2:	0c00      	lsrs	r0, r0, #16
    94e4:	3910      	subs	r1, #16
    94e6:	0a1b      	lsrs	r3, r3, #8
    94e8:	4298      	cmp	r0, r3
    94ea:	d301      	bcc.n	94f0 <__clzsi2+0x18>
    94ec:	0a00      	lsrs	r0, r0, #8
    94ee:	3908      	subs	r1, #8
    94f0:	091b      	lsrs	r3, r3, #4
    94f2:	4298      	cmp	r0, r3
    94f4:	d301      	bcc.n	94fa <__clzsi2+0x22>
    94f6:	0900      	lsrs	r0, r0, #4
    94f8:	3904      	subs	r1, #4
    94fa:	a202      	add	r2, pc, #8	; (adr r2, 9504 <__clzsi2+0x2c>)
    94fc:	5c10      	ldrb	r0, [r2, r0]
    94fe:	1840      	adds	r0, r0, r1
    9500:	4770      	bx	lr
    9502:	46c0      	nop			; (mov r8, r8)
    9504:	02020304 	.word	0x02020304
    9508:	01010101 	.word	0x01010101
	...

00009514 <__assert_func>:
    9514:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    9516:	001d      	movs	r5, r3
    9518:	4b0a      	ldr	r3, [pc, #40]	; (9544 <__assert_func+0x30>)
    951a:	0006      	movs	r6, r0
    951c:	681b      	ldr	r3, [r3, #0]
    951e:	68d8      	ldr	r0, [r3, #12]
    9520:	2a00      	cmp	r2, #0
    9522:	d102      	bne.n	952a <__assert_func+0x16>
    9524:	4c08      	ldr	r4, [pc, #32]	; (9548 <__assert_func+0x34>)
    9526:	0023      	movs	r3, r4
    9528:	e001      	b.n	952e <__assert_func+0x1a>
    952a:	0013      	movs	r3, r2
    952c:	4c07      	ldr	r4, [pc, #28]	; (954c <__assert_func+0x38>)
    952e:	9302      	str	r3, [sp, #8]
    9530:	9100      	str	r1, [sp, #0]
    9532:	0033      	movs	r3, r6
    9534:	002a      	movs	r2, r5
    9536:	4906      	ldr	r1, [pc, #24]	; (9550 <__assert_func+0x3c>)
    9538:	9401      	str	r4, [sp, #4]
    953a:	f000 f82b 	bl	9594 <fiprintf>
    953e:	f001 ffd1 	bl	b4e4 <abort>
    9542:	46c0      	nop			; (mov r8, r8)
    9544:	200000fc 	.word	0x200000fc
    9548:	0000e202 	.word	0x0000e202
    954c:	0000ec00 	.word	0x0000ec00
    9550:	0000ec0d 	.word	0x0000ec0d

00009554 <atof>:
    9554:	b510      	push	{r4, lr}
    9556:	2100      	movs	r1, #0
    9558:	f001 fdec 	bl	b134 <strtod>
    955c:	bd10      	pop	{r4, pc}

0000955e <atoi>:
    955e:	b510      	push	{r4, lr}
    9560:	220a      	movs	r2, #10
    9562:	2100      	movs	r1, #0
    9564:	f001 fee4 	bl	b330 <strtol>
    9568:	bd10      	pop	{r4, pc}

0000956a <atol>:
    956a:	b510      	push	{r4, lr}
    956c:	220a      	movs	r2, #10
    956e:	2100      	movs	r1, #0
    9570:	f001 fede 	bl	b330 <strtol>
    9574:	bd10      	pop	{r4, pc}
	...

00009578 <__cxa_atexit>:
    9578:	b570      	push	{r4, r5, r6, lr}
    957a:	4c05      	ldr	r4, [pc, #20]	; (9590 <__cxa_atexit+0x18>)
    957c:	0005      	movs	r5, r0
    957e:	0013      	movs	r3, r2
    9580:	1e20      	subs	r0, r4, #0
    9582:	d004      	beq.n	958e <__cxa_atexit+0x16>
    9584:	000a      	movs	r2, r1
    9586:	2002      	movs	r0, #2
    9588:	0029      	movs	r1, r5
    958a:	e000      	b.n	958e <__cxa_atexit+0x16>
    958c:	bf00      	nop
    958e:	bd70      	pop	{r4, r5, r6, pc}
    9590:	00000000 	.word	0x00000000

00009594 <fiprintf>:
    9594:	b40e      	push	{r1, r2, r3}
    9596:	b503      	push	{r0, r1, lr}
    9598:	0001      	movs	r1, r0
    959a:	ab03      	add	r3, sp, #12
    959c:	4804      	ldr	r0, [pc, #16]	; (95b0 <fiprintf+0x1c>)
    959e:	cb04      	ldmia	r3!, {r2}
    95a0:	6800      	ldr	r0, [r0, #0]
    95a2:	9301      	str	r3, [sp, #4]
    95a4:	f000 f93a 	bl	981c <_vfiprintf_r>
    95a8:	b002      	add	sp, #8
    95aa:	bc08      	pop	{r3}
    95ac:	b003      	add	sp, #12
    95ae:	4718      	bx	r3
    95b0:	200000fc 	.word	0x200000fc

000095b4 <__libc_init_array>:
    95b4:	4b0e      	ldr	r3, [pc, #56]	; (95f0 <__libc_init_array+0x3c>)
    95b6:	b570      	push	{r4, r5, r6, lr}
    95b8:	2500      	movs	r5, #0
    95ba:	001e      	movs	r6, r3
    95bc:	4c0d      	ldr	r4, [pc, #52]	; (95f4 <__libc_init_array+0x40>)
    95be:	1ae4      	subs	r4, r4, r3
    95c0:	10a4      	asrs	r4, r4, #2
    95c2:	42a5      	cmp	r5, r4
    95c4:	d004      	beq.n	95d0 <__libc_init_array+0x1c>
    95c6:	00ab      	lsls	r3, r5, #2
    95c8:	58f3      	ldr	r3, [r6, r3]
    95ca:	4798      	blx	r3
    95cc:	3501      	adds	r5, #1
    95ce:	e7f8      	b.n	95c2 <__libc_init_array+0xe>
    95d0:	f004 fa3a 	bl	da48 <_init>
    95d4:	4b08      	ldr	r3, [pc, #32]	; (95f8 <__libc_init_array+0x44>)
    95d6:	2500      	movs	r5, #0
    95d8:	001e      	movs	r6, r3
    95da:	4c08      	ldr	r4, [pc, #32]	; (95fc <__libc_init_array+0x48>)
    95dc:	1ae4      	subs	r4, r4, r3
    95de:	10a4      	asrs	r4, r4, #2
    95e0:	42a5      	cmp	r5, r4
    95e2:	d004      	beq.n	95ee <__libc_init_array+0x3a>
    95e4:	00ab      	lsls	r3, r5, #2
    95e6:	58f3      	ldr	r3, [r6, r3]
    95e8:	4798      	blx	r3
    95ea:	3501      	adds	r5, #1
    95ec:	e7f8      	b.n	95e0 <__libc_init_array+0x2c>
    95ee:	bd70      	pop	{r4, r5, r6, pc}
    95f0:	2000013c 	.word	0x2000013c
    95f4:	2000013c 	.word	0x2000013c
    95f8:	2000013c 	.word	0x2000013c
    95fc:	2000015c 	.word	0x2000015c

00009600 <malloc>:
    9600:	b510      	push	{r4, lr}
    9602:	4b03      	ldr	r3, [pc, #12]	; (9610 <malloc+0x10>)
    9604:	0001      	movs	r1, r0
    9606:	6818      	ldr	r0, [r3, #0]
    9608:	f000 f88a 	bl	9720 <_malloc_r>
    960c:	bd10      	pop	{r4, pc}
    960e:	46c0      	nop			; (mov r8, r8)
    9610:	200000fc 	.word	0x200000fc

00009614 <free>:
    9614:	b510      	push	{r4, lr}
    9616:	4b03      	ldr	r3, [pc, #12]	; (9624 <free+0x10>)
    9618:	0001      	movs	r1, r0
    961a:	6818      	ldr	r0, [r3, #0]
    961c:	f000 f83a 	bl	9694 <_free_r>
    9620:	bd10      	pop	{r4, pc}
    9622:	46c0      	nop			; (mov r8, r8)
    9624:	200000fc 	.word	0x200000fc

00009628 <memcmp>:
    9628:	b530      	push	{r4, r5, lr}
    962a:	2400      	movs	r4, #0
    962c:	42a2      	cmp	r2, r4
    962e:	d008      	beq.n	9642 <memcmp+0x1a>
    9630:	5d03      	ldrb	r3, [r0, r4]
    9632:	1c65      	adds	r5, r4, #1
    9634:	5d0c      	ldrb	r4, [r1, r4]
    9636:	42a3      	cmp	r3, r4
    9638:	d001      	beq.n	963e <memcmp+0x16>
    963a:	1b18      	subs	r0, r3, r4
    963c:	e002      	b.n	9644 <memcmp+0x1c>
    963e:	002c      	movs	r4, r5
    9640:	e7f4      	b.n	962c <memcmp+0x4>
    9642:	2000      	movs	r0, #0
    9644:	bd30      	pop	{r4, r5, pc}

00009646 <memcpy>:
    9646:	2300      	movs	r3, #0
    9648:	b510      	push	{r4, lr}
    964a:	429a      	cmp	r2, r3
    964c:	d003      	beq.n	9656 <memcpy+0x10>
    964e:	5ccc      	ldrb	r4, [r1, r3]
    9650:	54c4      	strb	r4, [r0, r3]
    9652:	3301      	adds	r3, #1
    9654:	e7f9      	b.n	964a <memcpy+0x4>
    9656:	bd10      	pop	{r4, pc}

00009658 <memmove>:
    9658:	b510      	push	{r4, lr}
    965a:	4288      	cmp	r0, r1
    965c:	d902      	bls.n	9664 <memmove+0xc>
    965e:	188b      	adds	r3, r1, r2
    9660:	4298      	cmp	r0, r3
    9662:	d301      	bcc.n	9668 <memmove+0x10>
    9664:	2300      	movs	r3, #0
    9666:	e005      	b.n	9674 <memmove+0x1c>
    9668:	1a9b      	subs	r3, r3, r2
    966a:	3a01      	subs	r2, #1
    966c:	d308      	bcc.n	9680 <memmove+0x28>
    966e:	5c99      	ldrb	r1, [r3, r2]
    9670:	5481      	strb	r1, [r0, r2]
    9672:	e7fa      	b.n	966a <memmove+0x12>
    9674:	4293      	cmp	r3, r2
    9676:	d003      	beq.n	9680 <memmove+0x28>
    9678:	5ccc      	ldrb	r4, [r1, r3]
    967a:	54c4      	strb	r4, [r0, r3]
    967c:	3301      	adds	r3, #1
    967e:	e7f9      	b.n	9674 <memmove+0x1c>
    9680:	bd10      	pop	{r4, pc}

00009682 <memset>:
    9682:	0003      	movs	r3, r0
    9684:	1882      	adds	r2, r0, r2
    9686:	4293      	cmp	r3, r2
    9688:	d002      	beq.n	9690 <memset+0xe>
    968a:	7019      	strb	r1, [r3, #0]
    968c:	3301      	adds	r3, #1
    968e:	e7fa      	b.n	9686 <memset+0x4>
    9690:	4770      	bx	lr
	...

00009694 <_free_r>:
    9694:	b530      	push	{r4, r5, lr}
    9696:	2900      	cmp	r1, #0
    9698:	d03e      	beq.n	9718 <_free_r+0x84>
    969a:	3904      	subs	r1, #4
    969c:	680b      	ldr	r3, [r1, #0]
    969e:	2b00      	cmp	r3, #0
    96a0:	da00      	bge.n	96a4 <_free_r+0x10>
    96a2:	18c9      	adds	r1, r1, r3
    96a4:	4a1d      	ldr	r2, [pc, #116]	; (971c <_free_r+0x88>)
    96a6:	6813      	ldr	r3, [r2, #0]
    96a8:	0014      	movs	r4, r2
    96aa:	2b00      	cmp	r3, #0
    96ac:	d102      	bne.n	96b4 <_free_r+0x20>
    96ae:	604b      	str	r3, [r1, #4]
    96b0:	6011      	str	r1, [r2, #0]
    96b2:	e031      	b.n	9718 <_free_r+0x84>
    96b4:	428b      	cmp	r3, r1
    96b6:	d90d      	bls.n	96d4 <_free_r+0x40>
    96b8:	680a      	ldr	r2, [r1, #0]
    96ba:	1888      	adds	r0, r1, r2
    96bc:	4283      	cmp	r3, r0
    96be:	d103      	bne.n	96c8 <_free_r+0x34>
    96c0:	6818      	ldr	r0, [r3, #0]
    96c2:	685b      	ldr	r3, [r3, #4]
    96c4:	1882      	adds	r2, r0, r2
    96c6:	600a      	str	r2, [r1, #0]
    96c8:	604b      	str	r3, [r1, #4]
    96ca:	6021      	str	r1, [r4, #0]
    96cc:	e024      	b.n	9718 <_free_r+0x84>
    96ce:	428a      	cmp	r2, r1
    96d0:	d803      	bhi.n	96da <_free_r+0x46>
    96d2:	0013      	movs	r3, r2
    96d4:	685a      	ldr	r2, [r3, #4]
    96d6:	2a00      	cmp	r2, #0
    96d8:	d1f9      	bne.n	96ce <_free_r+0x3a>
    96da:	681d      	ldr	r5, [r3, #0]
    96dc:	195c      	adds	r4, r3, r5
    96de:	428c      	cmp	r4, r1
    96e0:	d10b      	bne.n	96fa <_free_r+0x66>
    96e2:	6809      	ldr	r1, [r1, #0]
    96e4:	1869      	adds	r1, r5, r1
    96e6:	1858      	adds	r0, r3, r1
    96e8:	6019      	str	r1, [r3, #0]
    96ea:	4282      	cmp	r2, r0
    96ec:	d114      	bne.n	9718 <_free_r+0x84>
    96ee:	6810      	ldr	r0, [r2, #0]
    96f0:	6852      	ldr	r2, [r2, #4]
    96f2:	1841      	adds	r1, r0, r1
    96f4:	6019      	str	r1, [r3, #0]
    96f6:	605a      	str	r2, [r3, #4]
    96f8:	e00e      	b.n	9718 <_free_r+0x84>
    96fa:	428c      	cmp	r4, r1
    96fc:	d902      	bls.n	9704 <_free_r+0x70>
    96fe:	230c      	movs	r3, #12
    9700:	6003      	str	r3, [r0, #0]
    9702:	e009      	b.n	9718 <_free_r+0x84>
    9704:	6808      	ldr	r0, [r1, #0]
    9706:	180c      	adds	r4, r1, r0
    9708:	42a2      	cmp	r2, r4
    970a:	d103      	bne.n	9714 <_free_r+0x80>
    970c:	6814      	ldr	r4, [r2, #0]
    970e:	6852      	ldr	r2, [r2, #4]
    9710:	1820      	adds	r0, r4, r0
    9712:	6008      	str	r0, [r1, #0]
    9714:	604a      	str	r2, [r1, #4]
    9716:	6059      	str	r1, [r3, #4]
    9718:	bd30      	pop	{r4, r5, pc}
    971a:	46c0      	nop			; (mov r8, r8)
    971c:	20000e6c 	.word	0x20000e6c

00009720 <_malloc_r>:
    9720:	2303      	movs	r3, #3
    9722:	b570      	push	{r4, r5, r6, lr}
    9724:	1ccd      	adds	r5, r1, #3
    9726:	439d      	bics	r5, r3
    9728:	3508      	adds	r5, #8
    972a:	0006      	movs	r6, r0
    972c:	2d0c      	cmp	r5, #12
    972e:	d201      	bcs.n	9734 <_malloc_r+0x14>
    9730:	250c      	movs	r5, #12
    9732:	e005      	b.n	9740 <_malloc_r+0x20>
    9734:	2d00      	cmp	r5, #0
    9736:	da03      	bge.n	9740 <_malloc_r+0x20>
    9738:	230c      	movs	r3, #12
    973a:	2000      	movs	r0, #0
    973c:	6033      	str	r3, [r6, #0]
    973e:	e040      	b.n	97c2 <_malloc_r+0xa2>
    9740:	42a9      	cmp	r1, r5
    9742:	d8f9      	bhi.n	9738 <_malloc_r+0x18>
    9744:	4b1f      	ldr	r3, [pc, #124]	; (97c4 <_malloc_r+0xa4>)
    9746:	681c      	ldr	r4, [r3, #0]
    9748:	001a      	movs	r2, r3
    974a:	0021      	movs	r1, r4
    974c:	2900      	cmp	r1, #0
    974e:	d013      	beq.n	9778 <_malloc_r+0x58>
    9750:	680b      	ldr	r3, [r1, #0]
    9752:	1b5b      	subs	r3, r3, r5
    9754:	d40d      	bmi.n	9772 <_malloc_r+0x52>
    9756:	2b0b      	cmp	r3, #11
    9758:	d902      	bls.n	9760 <_malloc_r+0x40>
    975a:	600b      	str	r3, [r1, #0]
    975c:	18cc      	adds	r4, r1, r3
    975e:	e01e      	b.n	979e <_malloc_r+0x7e>
    9760:	428c      	cmp	r4, r1
    9762:	d102      	bne.n	976a <_malloc_r+0x4a>
    9764:	6863      	ldr	r3, [r4, #4]
    9766:	6013      	str	r3, [r2, #0]
    9768:	e01a      	b.n	97a0 <_malloc_r+0x80>
    976a:	684b      	ldr	r3, [r1, #4]
    976c:	6063      	str	r3, [r4, #4]
    976e:	000c      	movs	r4, r1
    9770:	e016      	b.n	97a0 <_malloc_r+0x80>
    9772:	000c      	movs	r4, r1
    9774:	6849      	ldr	r1, [r1, #4]
    9776:	e7e9      	b.n	974c <_malloc_r+0x2c>
    9778:	4c13      	ldr	r4, [pc, #76]	; (97c8 <_malloc_r+0xa8>)
    977a:	6823      	ldr	r3, [r4, #0]
    977c:	2b00      	cmp	r3, #0
    977e:	d103      	bne.n	9788 <_malloc_r+0x68>
    9780:	0030      	movs	r0, r6
    9782:	f000 fde7 	bl	a354 <_sbrk_r>
    9786:	6020      	str	r0, [r4, #0]
    9788:	0029      	movs	r1, r5
    978a:	0030      	movs	r0, r6
    978c:	f000 fde2 	bl	a354 <_sbrk_r>
    9790:	1c43      	adds	r3, r0, #1
    9792:	d0d1      	beq.n	9738 <_malloc_r+0x18>
    9794:	2303      	movs	r3, #3
    9796:	1cc4      	adds	r4, r0, #3
    9798:	439c      	bics	r4, r3
    979a:	42a0      	cmp	r0, r4
    979c:	d10a      	bne.n	97b4 <_malloc_r+0x94>
    979e:	6025      	str	r5, [r4, #0]
    97a0:	0020      	movs	r0, r4
    97a2:	2207      	movs	r2, #7
    97a4:	300b      	adds	r0, #11
    97a6:	1d23      	adds	r3, r4, #4
    97a8:	4390      	bics	r0, r2
    97aa:	1ac3      	subs	r3, r0, r3
    97ac:	d009      	beq.n	97c2 <_malloc_r+0xa2>
    97ae:	425a      	negs	r2, r3
    97b0:	50e2      	str	r2, [r4, r3]
    97b2:	e006      	b.n	97c2 <_malloc_r+0xa2>
    97b4:	1a21      	subs	r1, r4, r0
    97b6:	0030      	movs	r0, r6
    97b8:	f000 fdcc 	bl	a354 <_sbrk_r>
    97bc:	1c43      	adds	r3, r0, #1
    97be:	d1ee      	bne.n	979e <_malloc_r+0x7e>
    97c0:	e7ba      	b.n	9738 <_malloc_r+0x18>
    97c2:	bd70      	pop	{r4, r5, r6, pc}
    97c4:	20000e6c 	.word	0x20000e6c
    97c8:	20000e68 	.word	0x20000e68

000097cc <__sfputc_r>:
    97cc:	6893      	ldr	r3, [r2, #8]
    97ce:	b510      	push	{r4, lr}
    97d0:	3b01      	subs	r3, #1
    97d2:	6093      	str	r3, [r2, #8]
    97d4:	2b00      	cmp	r3, #0
    97d6:	da05      	bge.n	97e4 <__sfputc_r+0x18>
    97d8:	6994      	ldr	r4, [r2, #24]
    97da:	42a3      	cmp	r3, r4
    97dc:	db08      	blt.n	97f0 <__sfputc_r+0x24>
    97de:	b2cb      	uxtb	r3, r1
    97e0:	2b0a      	cmp	r3, #10
    97e2:	d005      	beq.n	97f0 <__sfputc_r+0x24>
    97e4:	6813      	ldr	r3, [r2, #0]
    97e6:	1c58      	adds	r0, r3, #1
    97e8:	6010      	str	r0, [r2, #0]
    97ea:	7019      	strb	r1, [r3, #0]
    97ec:	b2c8      	uxtb	r0, r1
    97ee:	e001      	b.n	97f4 <__sfputc_r+0x28>
    97f0:	f001 fdaa 	bl	b348 <__swbuf_r>
    97f4:	bd10      	pop	{r4, pc}

000097f6 <__sfputs_r>:
    97f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    97f8:	0006      	movs	r6, r0
    97fa:	000f      	movs	r7, r1
    97fc:	0014      	movs	r4, r2
    97fe:	18d5      	adds	r5, r2, r3
    9800:	42ac      	cmp	r4, r5
    9802:	d008      	beq.n	9816 <__sfputs_r+0x20>
    9804:	7821      	ldrb	r1, [r4, #0]
    9806:	003a      	movs	r2, r7
    9808:	0030      	movs	r0, r6
    980a:	f7ff ffdf 	bl	97cc <__sfputc_r>
    980e:	3401      	adds	r4, #1
    9810:	1c43      	adds	r3, r0, #1
    9812:	d1f5      	bne.n	9800 <__sfputs_r+0xa>
    9814:	e000      	b.n	9818 <__sfputs_r+0x22>
    9816:	2000      	movs	r0, #0
    9818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000981c <_vfiprintf_r>:
    981c:	b5f0      	push	{r4, r5, r6, r7, lr}
    981e:	b09f      	sub	sp, #124	; 0x7c
    9820:	0006      	movs	r6, r0
    9822:	000f      	movs	r7, r1
    9824:	9202      	str	r2, [sp, #8]
    9826:	9305      	str	r3, [sp, #20]
    9828:	2800      	cmp	r0, #0
    982a:	d004      	beq.n	9836 <_vfiprintf_r+0x1a>
    982c:	6983      	ldr	r3, [r0, #24]
    982e:	2b00      	cmp	r3, #0
    9830:	d101      	bne.n	9836 <_vfiprintf_r+0x1a>
    9832:	f002 fd9f 	bl	c374 <__sinit>
    9836:	4b7f      	ldr	r3, [pc, #508]	; (9a34 <_vfiprintf_r+0x218>)
    9838:	429f      	cmp	r7, r3
    983a:	d101      	bne.n	9840 <_vfiprintf_r+0x24>
    983c:	6877      	ldr	r7, [r6, #4]
    983e:	e008      	b.n	9852 <_vfiprintf_r+0x36>
    9840:	4b7d      	ldr	r3, [pc, #500]	; (9a38 <_vfiprintf_r+0x21c>)
    9842:	429f      	cmp	r7, r3
    9844:	d101      	bne.n	984a <_vfiprintf_r+0x2e>
    9846:	68b7      	ldr	r7, [r6, #8]
    9848:	e003      	b.n	9852 <_vfiprintf_r+0x36>
    984a:	4b7c      	ldr	r3, [pc, #496]	; (9a3c <_vfiprintf_r+0x220>)
    984c:	429f      	cmp	r7, r3
    984e:	d100      	bne.n	9852 <_vfiprintf_r+0x36>
    9850:	68f7      	ldr	r7, [r6, #12]
    9852:	89bb      	ldrh	r3, [r7, #12]
    9854:	071b      	lsls	r3, r3, #28
    9856:	d50a      	bpl.n	986e <_vfiprintf_r+0x52>
    9858:	693b      	ldr	r3, [r7, #16]
    985a:	2b00      	cmp	r3, #0
    985c:	d007      	beq.n	986e <_vfiprintf_r+0x52>
    985e:	2300      	movs	r3, #0
    9860:	ad06      	add	r5, sp, #24
    9862:	616b      	str	r3, [r5, #20]
    9864:	3320      	adds	r3, #32
    9866:	766b      	strb	r3, [r5, #25]
    9868:	3310      	adds	r3, #16
    986a:	76ab      	strb	r3, [r5, #26]
    986c:	e03d      	b.n	98ea <_vfiprintf_r+0xce>
    986e:	0039      	movs	r1, r7
    9870:	0030      	movs	r0, r6
    9872:	f001 fdc1 	bl	b3f8 <__swsetup_r>
    9876:	2800      	cmp	r0, #0
    9878:	d0f1      	beq.n	985e <_vfiprintf_r+0x42>
    987a:	2001      	movs	r0, #1
    987c:	4240      	negs	r0, r0
    987e:	e0d6      	b.n	9a2e <_vfiprintf_r+0x212>
    9880:	9a05      	ldr	r2, [sp, #20]
    9882:	1d11      	adds	r1, r2, #4
    9884:	6812      	ldr	r2, [r2, #0]
    9886:	9105      	str	r1, [sp, #20]
    9888:	2a00      	cmp	r2, #0
    988a:	da00      	bge.n	988e <_vfiprintf_r+0x72>
    988c:	e07f      	b.n	998e <_vfiprintf_r+0x172>
    988e:	9209      	str	r2, [sp, #36]	; 0x24
    9890:	3401      	adds	r4, #1
    9892:	7823      	ldrb	r3, [r4, #0]
    9894:	2b2e      	cmp	r3, #46	; 0x2e
    9896:	d100      	bne.n	989a <_vfiprintf_r+0x7e>
    9898:	e08d      	b.n	99b6 <_vfiprintf_r+0x19a>
    989a:	7821      	ldrb	r1, [r4, #0]
    989c:	2203      	movs	r2, #3
    989e:	4868      	ldr	r0, [pc, #416]	; (9a40 <_vfiprintf_r+0x224>)
    98a0:	f003 f994 	bl	cbcc <memchr>
    98a4:	2800      	cmp	r0, #0
    98a6:	d007      	beq.n	98b8 <_vfiprintf_r+0x9c>
    98a8:	4b65      	ldr	r3, [pc, #404]	; (9a40 <_vfiprintf_r+0x224>)
    98aa:	682a      	ldr	r2, [r5, #0]
    98ac:	1ac0      	subs	r0, r0, r3
    98ae:	2340      	movs	r3, #64	; 0x40
    98b0:	4083      	lsls	r3, r0
    98b2:	4313      	orrs	r3, r2
    98b4:	602b      	str	r3, [r5, #0]
    98b6:	3401      	adds	r4, #1
    98b8:	7821      	ldrb	r1, [r4, #0]
    98ba:	1c63      	adds	r3, r4, #1
    98bc:	2206      	movs	r2, #6
    98be:	4861      	ldr	r0, [pc, #388]	; (9a44 <_vfiprintf_r+0x228>)
    98c0:	9302      	str	r3, [sp, #8]
    98c2:	7629      	strb	r1, [r5, #24]
    98c4:	f003 f982 	bl	cbcc <memchr>
    98c8:	2800      	cmp	r0, #0
    98ca:	d100      	bne.n	98ce <_vfiprintf_r+0xb2>
    98cc:	e09d      	b.n	9a0a <_vfiprintf_r+0x1ee>
    98ce:	4b5e      	ldr	r3, [pc, #376]	; (9a48 <_vfiprintf_r+0x22c>)
    98d0:	2b00      	cmp	r3, #0
    98d2:	d000      	beq.n	98d6 <_vfiprintf_r+0xba>
    98d4:	e090      	b.n	99f8 <_vfiprintf_r+0x1dc>
    98d6:	2207      	movs	r2, #7
    98d8:	9b05      	ldr	r3, [sp, #20]
    98da:	3307      	adds	r3, #7
    98dc:	4393      	bics	r3, r2
    98de:	3308      	adds	r3, #8
    98e0:	9305      	str	r3, [sp, #20]
    98e2:	696b      	ldr	r3, [r5, #20]
    98e4:	9a03      	ldr	r2, [sp, #12]
    98e6:	189b      	adds	r3, r3, r2
    98e8:	616b      	str	r3, [r5, #20]
    98ea:	9c02      	ldr	r4, [sp, #8]
    98ec:	7823      	ldrb	r3, [r4, #0]
    98ee:	2b00      	cmp	r3, #0
    98f0:	d104      	bne.n	98fc <_vfiprintf_r+0xe0>
    98f2:	9b02      	ldr	r3, [sp, #8]
    98f4:	1ae3      	subs	r3, r4, r3
    98f6:	9304      	str	r3, [sp, #16]
    98f8:	d012      	beq.n	9920 <_vfiprintf_r+0x104>
    98fa:	e003      	b.n	9904 <_vfiprintf_r+0xe8>
    98fc:	2b25      	cmp	r3, #37	; 0x25
    98fe:	d0f8      	beq.n	98f2 <_vfiprintf_r+0xd6>
    9900:	3401      	adds	r4, #1
    9902:	e7f3      	b.n	98ec <_vfiprintf_r+0xd0>
    9904:	9b04      	ldr	r3, [sp, #16]
    9906:	9a02      	ldr	r2, [sp, #8]
    9908:	0039      	movs	r1, r7
    990a:	0030      	movs	r0, r6
    990c:	f7ff ff73 	bl	97f6 <__sfputs_r>
    9910:	1c43      	adds	r3, r0, #1
    9912:	d100      	bne.n	9916 <_vfiprintf_r+0xfa>
    9914:	e086      	b.n	9a24 <_vfiprintf_r+0x208>
    9916:	696a      	ldr	r2, [r5, #20]
    9918:	9b04      	ldr	r3, [sp, #16]
    991a:	4694      	mov	ip, r2
    991c:	4463      	add	r3, ip
    991e:	616b      	str	r3, [r5, #20]
    9920:	7823      	ldrb	r3, [r4, #0]
    9922:	2b00      	cmp	r3, #0
    9924:	d07e      	beq.n	9a24 <_vfiprintf_r+0x208>
    9926:	2201      	movs	r2, #1
    9928:	2300      	movs	r3, #0
    992a:	4252      	negs	r2, r2
    992c:	606a      	str	r2, [r5, #4]
    992e:	a902      	add	r1, sp, #8
    9930:	3254      	adds	r2, #84	; 0x54
    9932:	1852      	adds	r2, r2, r1
    9934:	3401      	adds	r4, #1
    9936:	602b      	str	r3, [r5, #0]
    9938:	60eb      	str	r3, [r5, #12]
    993a:	60ab      	str	r3, [r5, #8]
    993c:	7013      	strb	r3, [r2, #0]
    993e:	65ab      	str	r3, [r5, #88]	; 0x58
    9940:	7821      	ldrb	r1, [r4, #0]
    9942:	2205      	movs	r2, #5
    9944:	4841      	ldr	r0, [pc, #260]	; (9a4c <_vfiprintf_r+0x230>)
    9946:	f003 f941 	bl	cbcc <memchr>
    994a:	2800      	cmp	r0, #0
    994c:	d008      	beq.n	9960 <_vfiprintf_r+0x144>
    994e:	4b3f      	ldr	r3, [pc, #252]	; (9a4c <_vfiprintf_r+0x230>)
    9950:	682a      	ldr	r2, [r5, #0]
    9952:	1ac0      	subs	r0, r0, r3
    9954:	2301      	movs	r3, #1
    9956:	4083      	lsls	r3, r0
    9958:	4313      	orrs	r3, r2
    995a:	602b      	str	r3, [r5, #0]
    995c:	3401      	adds	r4, #1
    995e:	e7ef      	b.n	9940 <_vfiprintf_r+0x124>
    9960:	682b      	ldr	r3, [r5, #0]
    9962:	06da      	lsls	r2, r3, #27
    9964:	d504      	bpl.n	9970 <_vfiprintf_r+0x154>
    9966:	2253      	movs	r2, #83	; 0x53
    9968:	2120      	movs	r1, #32
    996a:	a802      	add	r0, sp, #8
    996c:	1812      	adds	r2, r2, r0
    996e:	7011      	strb	r1, [r2, #0]
    9970:	071a      	lsls	r2, r3, #28
    9972:	d504      	bpl.n	997e <_vfiprintf_r+0x162>
    9974:	2253      	movs	r2, #83	; 0x53
    9976:	212b      	movs	r1, #43	; 0x2b
    9978:	a802      	add	r0, sp, #8
    997a:	1812      	adds	r2, r2, r0
    997c:	7011      	strb	r1, [r2, #0]
    997e:	7822      	ldrb	r2, [r4, #0]
    9980:	2a2a      	cmp	r2, #42	; 0x2a
    9982:	d100      	bne.n	9986 <_vfiprintf_r+0x16a>
    9984:	e77c      	b.n	9880 <_vfiprintf_r+0x64>
    9986:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9988:	2000      	movs	r0, #0
    998a:	210a      	movs	r1, #10
    998c:	e005      	b.n	999a <_vfiprintf_r+0x17e>
    998e:	4252      	negs	r2, r2
    9990:	60ea      	str	r2, [r5, #12]
    9992:	2202      	movs	r2, #2
    9994:	4313      	orrs	r3, r2
    9996:	602b      	str	r3, [r5, #0]
    9998:	e77a      	b.n	9890 <_vfiprintf_r+0x74>
    999a:	7822      	ldrb	r2, [r4, #0]
    999c:	3a30      	subs	r2, #48	; 0x30
    999e:	2a09      	cmp	r2, #9
    99a0:	d804      	bhi.n	99ac <_vfiprintf_r+0x190>
    99a2:	434b      	muls	r3, r1
    99a4:	3401      	adds	r4, #1
    99a6:	189b      	adds	r3, r3, r2
    99a8:	2001      	movs	r0, #1
    99aa:	e7f6      	b.n	999a <_vfiprintf_r+0x17e>
    99ac:	2800      	cmp	r0, #0
    99ae:	d100      	bne.n	99b2 <_vfiprintf_r+0x196>
    99b0:	e76f      	b.n	9892 <_vfiprintf_r+0x76>
    99b2:	9309      	str	r3, [sp, #36]	; 0x24
    99b4:	e76d      	b.n	9892 <_vfiprintf_r+0x76>
    99b6:	7863      	ldrb	r3, [r4, #1]
    99b8:	2b2a      	cmp	r3, #42	; 0x2a
    99ba:	d10a      	bne.n	99d2 <_vfiprintf_r+0x1b6>
    99bc:	9b05      	ldr	r3, [sp, #20]
    99be:	3402      	adds	r4, #2
    99c0:	1d1a      	adds	r2, r3, #4
    99c2:	681b      	ldr	r3, [r3, #0]
    99c4:	9205      	str	r2, [sp, #20]
    99c6:	2b00      	cmp	r3, #0
    99c8:	da01      	bge.n	99ce <_vfiprintf_r+0x1b2>
    99ca:	2301      	movs	r3, #1
    99cc:	425b      	negs	r3, r3
    99ce:	9307      	str	r3, [sp, #28]
    99d0:	e763      	b.n	989a <_vfiprintf_r+0x7e>
    99d2:	2300      	movs	r3, #0
    99d4:	200a      	movs	r0, #10
    99d6:	001a      	movs	r2, r3
    99d8:	3401      	adds	r4, #1
    99da:	606b      	str	r3, [r5, #4]
    99dc:	7821      	ldrb	r1, [r4, #0]
    99de:	3930      	subs	r1, #48	; 0x30
    99e0:	2909      	cmp	r1, #9
    99e2:	d804      	bhi.n	99ee <_vfiprintf_r+0x1d2>
    99e4:	4342      	muls	r2, r0
    99e6:	3401      	adds	r4, #1
    99e8:	1852      	adds	r2, r2, r1
    99ea:	2301      	movs	r3, #1
    99ec:	e7f6      	b.n	99dc <_vfiprintf_r+0x1c0>
    99ee:	2b00      	cmp	r3, #0
    99f0:	d100      	bne.n	99f4 <_vfiprintf_r+0x1d8>
    99f2:	e752      	b.n	989a <_vfiprintf_r+0x7e>
    99f4:	9207      	str	r2, [sp, #28]
    99f6:	e750      	b.n	989a <_vfiprintf_r+0x7e>
    99f8:	ab05      	add	r3, sp, #20
    99fa:	9300      	str	r3, [sp, #0]
    99fc:	003a      	movs	r2, r7
    99fe:	4b14      	ldr	r3, [pc, #80]	; (9a50 <_vfiprintf_r+0x234>)
    9a00:	0029      	movs	r1, r5
    9a02:	0030      	movs	r0, r6
    9a04:	f000 f8bc 	bl	9b80 <_printf_float>
    9a08:	e007      	b.n	9a1a <_vfiprintf_r+0x1fe>
    9a0a:	ab05      	add	r3, sp, #20
    9a0c:	9300      	str	r3, [sp, #0]
    9a0e:	003a      	movs	r2, r7
    9a10:	4b0f      	ldr	r3, [pc, #60]	; (9a50 <_vfiprintf_r+0x234>)
    9a12:	0029      	movs	r1, r5
    9a14:	0030      	movs	r0, r6
    9a16:	f000 fb71 	bl	a0fc <_printf_i>
    9a1a:	9003      	str	r0, [sp, #12]
    9a1c:	9b03      	ldr	r3, [sp, #12]
    9a1e:	3301      	adds	r3, #1
    9a20:	d000      	beq.n	9a24 <_vfiprintf_r+0x208>
    9a22:	e75e      	b.n	98e2 <_vfiprintf_r+0xc6>
    9a24:	89bb      	ldrh	r3, [r7, #12]
    9a26:	065b      	lsls	r3, r3, #25
    9a28:	d500      	bpl.n	9a2c <_vfiprintf_r+0x210>
    9a2a:	e726      	b.n	987a <_vfiprintf_r+0x5e>
    9a2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9a2e:	b01f      	add	sp, #124	; 0x7c
    9a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a32:	46c0      	nop			; (mov r8, r8)
    9a34:	0000edd8 	.word	0x0000edd8
    9a38:	0000edf8 	.word	0x0000edf8
    9a3c:	0000ee18 	.word	0x0000ee18
    9a40:	0000ec46 	.word	0x0000ec46
    9a44:	0000ec4a 	.word	0x0000ec4a
    9a48:	00009b81 	.word	0x00009b81
    9a4c:	0000ec40 	.word	0x0000ec40
    9a50:	000097f7 	.word	0x000097f7

00009a54 <__cvt>:
    9a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a56:	b08b      	sub	sp, #44	; 0x2c
    9a58:	0014      	movs	r4, r2
    9a5a:	1e1d      	subs	r5, r3, #0
    9a5c:	9912      	ldr	r1, [sp, #72]	; 0x48
    9a5e:	da06      	bge.n	9a6e <__cvt+0x1a>
    9a60:	2480      	movs	r4, #128	; 0x80
    9a62:	0624      	lsls	r4, r4, #24
    9a64:	191b      	adds	r3, r3, r4
    9a66:	001d      	movs	r5, r3
    9a68:	0014      	movs	r4, r2
    9a6a:	232d      	movs	r3, #45	; 0x2d
    9a6c:	e000      	b.n	9a70 <__cvt+0x1c>
    9a6e:	2300      	movs	r3, #0
    9a70:	700b      	strb	r3, [r1, #0]
    9a72:	2320      	movs	r3, #32
    9a74:	9e14      	ldr	r6, [sp, #80]	; 0x50
    9a76:	2203      	movs	r2, #3
    9a78:	439e      	bics	r6, r3
    9a7a:	2e46      	cmp	r6, #70	; 0x46
    9a7c:	d007      	beq.n	9a8e <__cvt+0x3a>
    9a7e:	0033      	movs	r3, r6
    9a80:	3b45      	subs	r3, #69	; 0x45
    9a82:	4259      	negs	r1, r3
    9a84:	414b      	adcs	r3, r1
    9a86:	9910      	ldr	r1, [sp, #64]	; 0x40
    9a88:	3a01      	subs	r2, #1
    9a8a:	18cb      	adds	r3, r1, r3
    9a8c:	9310      	str	r3, [sp, #64]	; 0x40
    9a8e:	ab09      	add	r3, sp, #36	; 0x24
    9a90:	9304      	str	r3, [sp, #16]
    9a92:	ab08      	add	r3, sp, #32
    9a94:	9303      	str	r3, [sp, #12]
    9a96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9a98:	9200      	str	r2, [sp, #0]
    9a9a:	9302      	str	r3, [sp, #8]
    9a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9a9e:	0022      	movs	r2, r4
    9aa0:	9301      	str	r3, [sp, #4]
    9aa2:	002b      	movs	r3, r5
    9aa4:	f001 fdac 	bl	b600 <_dtoa_r>
    9aa8:	0007      	movs	r7, r0
    9aaa:	2e47      	cmp	r6, #71	; 0x47
    9aac:	d102      	bne.n	9ab4 <__cvt+0x60>
    9aae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9ab0:	07db      	lsls	r3, r3, #31
    9ab2:	d52d      	bpl.n	9b10 <__cvt+0xbc>
    9ab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9ab6:	18fb      	adds	r3, r7, r3
    9ab8:	9307      	str	r3, [sp, #28]
    9aba:	2e46      	cmp	r6, #70	; 0x46
    9abc:	d114      	bne.n	9ae8 <__cvt+0x94>
    9abe:	783b      	ldrb	r3, [r7, #0]
    9ac0:	2b30      	cmp	r3, #48	; 0x30
    9ac2:	d10c      	bne.n	9ade <__cvt+0x8a>
    9ac4:	2200      	movs	r2, #0
    9ac6:	2300      	movs	r3, #0
    9ac8:	0020      	movs	r0, r4
    9aca:	0029      	movs	r1, r5
    9acc:	f7fd f8ea 	bl	6ca4 <__aeabi_dcmpeq>
    9ad0:	2800      	cmp	r0, #0
    9ad2:	d104      	bne.n	9ade <__cvt+0x8a>
    9ad4:	2301      	movs	r3, #1
    9ad6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9ad8:	1a9b      	subs	r3, r3, r2
    9ada:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9adc:	6013      	str	r3, [r2, #0]
    9ade:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9ae0:	9a07      	ldr	r2, [sp, #28]
    9ae2:	681b      	ldr	r3, [r3, #0]
    9ae4:	18d3      	adds	r3, r2, r3
    9ae6:	9307      	str	r3, [sp, #28]
    9ae8:	2200      	movs	r2, #0
    9aea:	2300      	movs	r3, #0
    9aec:	0020      	movs	r0, r4
    9aee:	0029      	movs	r1, r5
    9af0:	f7fd f8d8 	bl	6ca4 <__aeabi_dcmpeq>
    9af4:	2230      	movs	r2, #48	; 0x30
    9af6:	2800      	cmp	r0, #0
    9af8:	d002      	beq.n	9b00 <__cvt+0xac>
    9afa:	9b07      	ldr	r3, [sp, #28]
    9afc:	9309      	str	r3, [sp, #36]	; 0x24
    9afe:	e007      	b.n	9b10 <__cvt+0xbc>
    9b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9b02:	9907      	ldr	r1, [sp, #28]
    9b04:	4299      	cmp	r1, r3
    9b06:	d903      	bls.n	9b10 <__cvt+0xbc>
    9b08:	1c59      	adds	r1, r3, #1
    9b0a:	9109      	str	r1, [sp, #36]	; 0x24
    9b0c:	701a      	strb	r2, [r3, #0]
    9b0e:	e7f7      	b.n	9b00 <__cvt+0xac>
    9b10:	0038      	movs	r0, r7
    9b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9b14:	9a15      	ldr	r2, [sp, #84]	; 0x54
    9b16:	1bdb      	subs	r3, r3, r7
    9b18:	6013      	str	r3, [r2, #0]
    9b1a:	b00b      	add	sp, #44	; 0x2c
    9b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009b1e <__exponent>:
    9b1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9b20:	232b      	movs	r3, #43	; 0x2b
    9b22:	0007      	movs	r7, r0
    9b24:	000c      	movs	r4, r1
    9b26:	7002      	strb	r2, [r0, #0]
    9b28:	1c86      	adds	r6, r0, #2
    9b2a:	2900      	cmp	r1, #0
    9b2c:	da01      	bge.n	9b32 <__exponent+0x14>
    9b2e:	232d      	movs	r3, #45	; 0x2d
    9b30:	424c      	negs	r4, r1
    9b32:	707b      	strb	r3, [r7, #1]
    9b34:	2c09      	cmp	r4, #9
    9b36:	dd1c      	ble.n	9b72 <__exponent+0x54>
    9b38:	466b      	mov	r3, sp
    9b3a:	1ddd      	adds	r5, r3, #7
    9b3c:	0020      	movs	r0, r4
    9b3e:	210a      	movs	r1, #10
    9b40:	f7fd f89a 	bl	6c78 <__aeabi_idivmod>
    9b44:	3d01      	subs	r5, #1
    9b46:	3130      	adds	r1, #48	; 0x30
    9b48:	7029      	strb	r1, [r5, #0]
    9b4a:	0020      	movs	r0, r4
    9b4c:	210a      	movs	r1, #10
    9b4e:	f7fc ffad 	bl	6aac <__aeabi_idiv>
    9b52:	1e04      	subs	r4, r0, #0
    9b54:	2c09      	cmp	r4, #9
    9b56:	dcf1      	bgt.n	9b3c <__exponent+0x1e>
    9b58:	3d01      	subs	r5, #1
    9b5a:	3430      	adds	r4, #48	; 0x30
    9b5c:	702c      	strb	r4, [r5, #0]
    9b5e:	466b      	mov	r3, sp
    9b60:	3307      	adds	r3, #7
    9b62:	0030      	movs	r0, r6
    9b64:	42ab      	cmp	r3, r5
    9b66:	d909      	bls.n	9b7c <__exponent+0x5e>
    9b68:	782b      	ldrb	r3, [r5, #0]
    9b6a:	3501      	adds	r5, #1
    9b6c:	7033      	strb	r3, [r6, #0]
    9b6e:	3601      	adds	r6, #1
    9b70:	e7f5      	b.n	9b5e <__exponent+0x40>
    9b72:	2330      	movs	r3, #48	; 0x30
    9b74:	18e4      	adds	r4, r4, r3
    9b76:	7033      	strb	r3, [r6, #0]
    9b78:	1cb0      	adds	r0, r6, #2
    9b7a:	7074      	strb	r4, [r6, #1]
    9b7c:	1bc0      	subs	r0, r0, r7
    9b7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00009b80 <_printf_float>:
    9b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b82:	b095      	sub	sp, #84	; 0x54
    9b84:	000c      	movs	r4, r1
    9b86:	920a      	str	r2, [sp, #40]	; 0x28
    9b88:	930b      	str	r3, [sp, #44]	; 0x2c
    9b8a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    9b8c:	9009      	str	r0, [sp, #36]	; 0x24
    9b8e:	f002 ffb5 	bl	cafc <_localeconv_r>
    9b92:	6803      	ldr	r3, [r0, #0]
    9b94:	0018      	movs	r0, r3
    9b96:	930d      	str	r3, [sp, #52]	; 0x34
    9b98:	f000 fc3d 	bl	a416 <strlen>
    9b9c:	2300      	movs	r3, #0
    9b9e:	9312      	str	r3, [sp, #72]	; 0x48
    9ba0:	6823      	ldr	r3, [r4, #0]
    9ba2:	900e      	str	r0, [sp, #56]	; 0x38
    9ba4:	930c      	str	r3, [sp, #48]	; 0x30
    9ba6:	990c      	ldr	r1, [sp, #48]	; 0x30
    9ba8:	7e27      	ldrb	r7, [r4, #24]
    9baa:	682b      	ldr	r3, [r5, #0]
    9bac:	2207      	movs	r2, #7
    9bae:	05c9      	lsls	r1, r1, #23
    9bb0:	d501      	bpl.n	9bb6 <_printf_float+0x36>
    9bb2:	189b      	adds	r3, r3, r2
    9bb4:	e000      	b.n	9bb8 <_printf_float+0x38>
    9bb6:	3307      	adds	r3, #7
    9bb8:	4393      	bics	r3, r2
    9bba:	001a      	movs	r2, r3
    9bbc:	3208      	adds	r2, #8
    9bbe:	602a      	str	r2, [r5, #0]
    9bc0:	681a      	ldr	r2, [r3, #0]
    9bc2:	685b      	ldr	r3, [r3, #4]
    9bc4:	64a2      	str	r2, [r4, #72]	; 0x48
    9bc6:	64e3      	str	r3, [r4, #76]	; 0x4c
    9bc8:	2201      	movs	r2, #1
    9bca:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    9bcc:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    9bce:	006b      	lsls	r3, r5, #1
    9bd0:	085b      	lsrs	r3, r3, #1
    9bd2:	930f      	str	r3, [sp, #60]	; 0x3c
    9bd4:	4252      	negs	r2, r2
    9bd6:	4bc0      	ldr	r3, [pc, #768]	; (9ed8 <_printf_float+0x358>)
    9bd8:	0030      	movs	r0, r6
    9bda:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9bdc:	f7ff fb0e 	bl	91fc <__aeabi_dcmpun>
    9be0:	2800      	cmp	r0, #0
    9be2:	d119      	bne.n	9c18 <_printf_float+0x98>
    9be4:	2201      	movs	r2, #1
    9be6:	4bbc      	ldr	r3, [pc, #752]	; (9ed8 <_printf_float+0x358>)
    9be8:	4252      	negs	r2, r2
    9bea:	0030      	movs	r0, r6
    9bec:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9bee:	f7fd f869 	bl	6cc4 <__aeabi_dcmple>
    9bf2:	2800      	cmp	r0, #0
    9bf4:	d110      	bne.n	9c18 <_printf_float+0x98>
    9bf6:	2200      	movs	r2, #0
    9bf8:	2300      	movs	r3, #0
    9bfa:	0030      	movs	r0, r6
    9bfc:	0029      	movs	r1, r5
    9bfe:	f7fd f857 	bl	6cb0 <__aeabi_dcmplt>
    9c02:	2800      	cmp	r0, #0
    9c04:	d003      	beq.n	9c0e <_printf_float+0x8e>
    9c06:	0023      	movs	r3, r4
    9c08:	222d      	movs	r2, #45	; 0x2d
    9c0a:	3343      	adds	r3, #67	; 0x43
    9c0c:	701a      	strb	r2, [r3, #0]
    9c0e:	4db3      	ldr	r5, [pc, #716]	; (9edc <_printf_float+0x35c>)
    9c10:	2f47      	cmp	r7, #71	; 0x47
    9c12:	d80e      	bhi.n	9c32 <_printf_float+0xb2>
    9c14:	4db2      	ldr	r5, [pc, #712]	; (9ee0 <_printf_float+0x360>)
    9c16:	e00c      	b.n	9c32 <_printf_float+0xb2>
    9c18:	0032      	movs	r2, r6
    9c1a:	002b      	movs	r3, r5
    9c1c:	0030      	movs	r0, r6
    9c1e:	0029      	movs	r1, r5
    9c20:	f7ff faec 	bl	91fc <__aeabi_dcmpun>
    9c24:	2800      	cmp	r0, #0
    9c26:	d100      	bne.n	9c2a <_printf_float+0xaa>
    9c28:	e19a      	b.n	9f60 <_printf_float+0x3e0>
    9c2a:	4dae      	ldr	r5, [pc, #696]	; (9ee4 <_printf_float+0x364>)
    9c2c:	2f47      	cmp	r7, #71	; 0x47
    9c2e:	d800      	bhi.n	9c32 <_printf_float+0xb2>
    9c30:	4dad      	ldr	r5, [pc, #692]	; (9ee8 <_printf_float+0x368>)
    9c32:	2303      	movs	r3, #3
    9c34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9c36:	6123      	str	r3, [r4, #16]
    9c38:	3301      	adds	r3, #1
    9c3a:	439a      	bics	r2, r3
    9c3c:	6022      	str	r2, [r4, #0]
    9c3e:	2600      	movs	r6, #0
    9c40:	e042      	b.n	9cc8 <_printf_float+0x148>
    9c42:	2f67      	cmp	r7, #103	; 0x67
    9c44:	d100      	bne.n	9c48 <_printf_float+0xc8>
    9c46:	e193      	b.n	9f70 <_printf_float+0x3f0>
    9c48:	2f47      	cmp	r7, #71	; 0x47
    9c4a:	d100      	bne.n	9c4e <_printf_float+0xce>
    9c4c:	e190      	b.n	9f70 <_printf_float+0x3f0>
    9c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9c50:	2100      	movs	r1, #0
    9c52:	4313      	orrs	r3, r2
    9c54:	aa12      	add	r2, sp, #72	; 0x48
    9c56:	9205      	str	r2, [sp, #20]
    9c58:	aa11      	add	r2, sp, #68	; 0x44
    9c5a:	9203      	str	r2, [sp, #12]
    9c5c:	2223      	movs	r2, #35	; 0x23
    9c5e:	6023      	str	r3, [r4, #0]
    9c60:	9106      	str	r1, [sp, #24]
    9c62:	9301      	str	r3, [sp, #4]
    9c64:	a908      	add	r1, sp, #32
    9c66:	6863      	ldr	r3, [r4, #4]
    9c68:	1852      	adds	r2, r2, r1
    9c6a:	9202      	str	r2, [sp, #8]
    9c6c:	9300      	str	r3, [sp, #0]
    9c6e:	0032      	movs	r2, r6
    9c70:	002b      	movs	r3, r5
    9c72:	9704      	str	r7, [sp, #16]
    9c74:	9809      	ldr	r0, [sp, #36]	; 0x24
    9c76:	f7ff feed 	bl	9a54 <__cvt>
    9c7a:	2320      	movs	r3, #32
    9c7c:	003a      	movs	r2, r7
    9c7e:	0005      	movs	r5, r0
    9c80:	439a      	bics	r2, r3
    9c82:	2a47      	cmp	r2, #71	; 0x47
    9c84:	d100      	bne.n	9c88 <_printf_float+0x108>
    9c86:	e18e      	b.n	9fa6 <_printf_float+0x426>
    9c88:	9911      	ldr	r1, [sp, #68]	; 0x44
    9c8a:	2f65      	cmp	r7, #101	; 0x65
    9c8c:	d900      	bls.n	9c90 <_printf_float+0x110>
    9c8e:	e196      	b.n	9fbe <_printf_float+0x43e>
    9c90:	0020      	movs	r0, r4
    9c92:	3901      	subs	r1, #1
    9c94:	003a      	movs	r2, r7
    9c96:	3050      	adds	r0, #80	; 0x50
    9c98:	9111      	str	r1, [sp, #68]	; 0x44
    9c9a:	f7ff ff40 	bl	9b1e <__exponent>
    9c9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9ca0:	0006      	movs	r6, r0
    9ca2:	1883      	adds	r3, r0, r2
    9ca4:	6123      	str	r3, [r4, #16]
    9ca6:	2a01      	cmp	r2, #1
    9ca8:	dd00      	ble.n	9cac <_printf_float+0x12c>
    9caa:	e185      	b.n	9fb8 <_printf_float+0x438>
    9cac:	6822      	ldr	r2, [r4, #0]
    9cae:	07d2      	lsls	r2, r2, #31
    9cb0:	d500      	bpl.n	9cb4 <_printf_float+0x134>
    9cb2:	e181      	b.n	9fb8 <_printf_float+0x438>
    9cb4:	2323      	movs	r3, #35	; 0x23
    9cb6:	aa08      	add	r2, sp, #32
    9cb8:	189b      	adds	r3, r3, r2
    9cba:	781b      	ldrb	r3, [r3, #0]
    9cbc:	2b00      	cmp	r3, #0
    9cbe:	d003      	beq.n	9cc8 <_printf_float+0x148>
    9cc0:	0023      	movs	r3, r4
    9cc2:	222d      	movs	r2, #45	; 0x2d
    9cc4:	3343      	adds	r3, #67	; 0x43
    9cc6:	701a      	strb	r2, [r3, #0]
    9cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9cca:	aa13      	add	r2, sp, #76	; 0x4c
    9ccc:	9300      	str	r3, [sp, #0]
    9cce:	0021      	movs	r1, r4
    9cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9cd2:	9809      	ldr	r0, [sp, #36]	; 0x24
    9cd4:	f000 f9a4 	bl	a020 <_printf_common>
    9cd8:	1c43      	adds	r3, r0, #1
    9cda:	d102      	bne.n	9ce2 <_printf_float+0x162>
    9cdc:	2001      	movs	r0, #1
    9cde:	4240      	negs	r0, r0
    9ce0:	e19b      	b.n	a01a <_printf_float+0x49a>
    9ce2:	6822      	ldr	r2, [r4, #0]
    9ce4:	0553      	lsls	r3, r2, #21
    9ce6:	d401      	bmi.n	9cec <_printf_float+0x16c>
    9ce8:	6923      	ldr	r3, [r4, #16]
    9cea:	e064      	b.n	9db6 <_printf_float+0x236>
    9cec:	2f65      	cmp	r7, #101	; 0x65
    9cee:	d800      	bhi.n	9cf2 <_printf_float+0x172>
    9cf0:	e0cc      	b.n	9e8c <_printf_float+0x30c>
    9cf2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    9cf4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    9cf6:	2200      	movs	r2, #0
    9cf8:	2300      	movs	r3, #0
    9cfa:	f7fc ffd3 	bl	6ca4 <__aeabi_dcmpeq>
    9cfe:	2800      	cmp	r0, #0
    9d00:	d02c      	beq.n	9d5c <_printf_float+0x1dc>
    9d02:	2301      	movs	r3, #1
    9d04:	4a79      	ldr	r2, [pc, #484]	; (9eec <_printf_float+0x36c>)
    9d06:	990a      	ldr	r1, [sp, #40]	; 0x28
    9d08:	9809      	ldr	r0, [sp, #36]	; 0x24
    9d0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9d0c:	47a8      	blx	r5
    9d0e:	1c43      	adds	r3, r0, #1
    9d10:	d0e4      	beq.n	9cdc <_printf_float+0x15c>
    9d12:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9d14:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9d16:	4293      	cmp	r3, r2
    9d18:	db08      	blt.n	9d2c <_printf_float+0x1ac>
    9d1a:	6823      	ldr	r3, [r4, #0]
    9d1c:	07db      	lsls	r3, r3, #31
    9d1e:	d405      	bmi.n	9d2c <_printf_float+0x1ac>
    9d20:	6823      	ldr	r3, [r4, #0]
    9d22:	2500      	movs	r5, #0
    9d24:	079b      	lsls	r3, r3, #30
    9d26:	d500      	bpl.n	9d2a <_printf_float+0x1aa>
    9d28:	e10f      	b.n	9f4a <_printf_float+0x3ca>
    9d2a:	e113      	b.n	9f54 <_printf_float+0x3d4>
    9d2c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9d30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9d32:	990a      	ldr	r1, [sp, #40]	; 0x28
    9d34:	9809      	ldr	r0, [sp, #36]	; 0x24
    9d36:	47a8      	blx	r5
    9d38:	2500      	movs	r5, #0
    9d3a:	1c43      	adds	r3, r0, #1
    9d3c:	d0ce      	beq.n	9cdc <_printf_float+0x15c>
    9d3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9d40:	3b01      	subs	r3, #1
    9d42:	429d      	cmp	r5, r3
    9d44:	daec      	bge.n	9d20 <_printf_float+0x1a0>
    9d46:	0022      	movs	r2, r4
    9d48:	2301      	movs	r3, #1
    9d4a:	321a      	adds	r2, #26
    9d4c:	990a      	ldr	r1, [sp, #40]	; 0x28
    9d4e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9d50:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9d52:	47b0      	blx	r6
    9d54:	1c43      	adds	r3, r0, #1
    9d56:	d0c1      	beq.n	9cdc <_printf_float+0x15c>
    9d58:	3501      	adds	r5, #1
    9d5a:	e7f0      	b.n	9d3e <_printf_float+0x1be>
    9d5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9d5e:	2b00      	cmp	r3, #0
    9d60:	dc2b      	bgt.n	9dba <_printf_float+0x23a>
    9d62:	2301      	movs	r3, #1
    9d64:	4a61      	ldr	r2, [pc, #388]	; (9eec <_printf_float+0x36c>)
    9d66:	990a      	ldr	r1, [sp, #40]	; 0x28
    9d68:	9809      	ldr	r0, [sp, #36]	; 0x24
    9d6a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9d6c:	47b0      	blx	r6
    9d6e:	1c43      	adds	r3, r0, #1
    9d70:	d0b4      	beq.n	9cdc <_printf_float+0x15c>
    9d72:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9d74:	2b00      	cmp	r3, #0
    9d76:	d105      	bne.n	9d84 <_printf_float+0x204>
    9d78:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9d7a:	2b00      	cmp	r3, #0
    9d7c:	d102      	bne.n	9d84 <_printf_float+0x204>
    9d7e:	6823      	ldr	r3, [r4, #0]
    9d80:	07db      	lsls	r3, r3, #31
    9d82:	d5cd      	bpl.n	9d20 <_printf_float+0x1a0>
    9d84:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9d88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9d8a:	990a      	ldr	r1, [sp, #40]	; 0x28
    9d8c:	9809      	ldr	r0, [sp, #36]	; 0x24
    9d8e:	47b0      	blx	r6
    9d90:	2600      	movs	r6, #0
    9d92:	1c43      	adds	r3, r0, #1
    9d94:	d0a2      	beq.n	9cdc <_printf_float+0x15c>
    9d96:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9d98:	425b      	negs	r3, r3
    9d9a:	429e      	cmp	r6, r3
    9d9c:	da0a      	bge.n	9db4 <_printf_float+0x234>
    9d9e:	0022      	movs	r2, r4
    9da0:	2301      	movs	r3, #1
    9da2:	321a      	adds	r2, #26
    9da4:	990a      	ldr	r1, [sp, #40]	; 0x28
    9da6:	9809      	ldr	r0, [sp, #36]	; 0x24
    9da8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9daa:	47b8      	blx	r7
    9dac:	1c43      	adds	r3, r0, #1
    9dae:	d095      	beq.n	9cdc <_printf_float+0x15c>
    9db0:	3601      	adds	r6, #1
    9db2:	e7f0      	b.n	9d96 <_printf_float+0x216>
    9db4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9db6:	002a      	movs	r2, r5
    9db8:	e0ac      	b.n	9f14 <_printf_float+0x394>
    9dba:	6da3      	ldr	r3, [r4, #88]	; 0x58
    9dbc:	9e12      	ldr	r6, [sp, #72]	; 0x48
    9dbe:	429e      	cmp	r6, r3
    9dc0:	dd00      	ble.n	9dc4 <_printf_float+0x244>
    9dc2:	001e      	movs	r6, r3
    9dc4:	2e00      	cmp	r6, #0
    9dc6:	dc05      	bgt.n	9dd4 <_printf_float+0x254>
    9dc8:	2300      	movs	r3, #0
    9dca:	930c      	str	r3, [sp, #48]	; 0x30
    9dcc:	43f3      	mvns	r3, r6
    9dce:	17db      	asrs	r3, r3, #31
    9dd0:	930f      	str	r3, [sp, #60]	; 0x3c
    9dd2:	e015      	b.n	9e00 <_printf_float+0x280>
    9dd4:	0033      	movs	r3, r6
    9dd6:	002a      	movs	r2, r5
    9dd8:	990a      	ldr	r1, [sp, #40]	; 0x28
    9dda:	9809      	ldr	r0, [sp, #36]	; 0x24
    9ddc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9dde:	47b8      	blx	r7
    9de0:	1c43      	adds	r3, r0, #1
    9de2:	d1f1      	bne.n	9dc8 <_printf_float+0x248>
    9de4:	e77a      	b.n	9cdc <_printf_float+0x15c>
    9de6:	0022      	movs	r2, r4
    9de8:	2301      	movs	r3, #1
    9dea:	321a      	adds	r2, #26
    9dec:	990a      	ldr	r1, [sp, #40]	; 0x28
    9dee:	9809      	ldr	r0, [sp, #36]	; 0x24
    9df0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9df2:	47b8      	blx	r7
    9df4:	1c43      	adds	r3, r0, #1
    9df6:	d100      	bne.n	9dfa <_printf_float+0x27a>
    9df8:	e770      	b.n	9cdc <_printf_float+0x15c>
    9dfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9dfc:	3301      	adds	r3, #1
    9dfe:	930c      	str	r3, [sp, #48]	; 0x30
    9e00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9e02:	6da2      	ldr	r2, [r4, #88]	; 0x58
    9e04:	990c      	ldr	r1, [sp, #48]	; 0x30
    9e06:	4033      	ands	r3, r6
    9e08:	1ad3      	subs	r3, r2, r3
    9e0a:	4299      	cmp	r1, r3
    9e0c:	dbeb      	blt.n	9de6 <_printf_float+0x266>
    9e0e:	18ae      	adds	r6, r5, r2
    9e10:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9e12:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9e14:	4293      	cmp	r3, r2
    9e16:	db0d      	blt.n	9e34 <_printf_float+0x2b4>
    9e18:	6823      	ldr	r3, [r4, #0]
    9e1a:	07db      	lsls	r3, r3, #31
    9e1c:	d40a      	bmi.n	9e34 <_printf_float+0x2b4>
    9e1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9e20:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9e22:	18ed      	adds	r5, r5, r3
    9e24:	1bad      	subs	r5, r5, r6
    9e26:	1a9b      	subs	r3, r3, r2
    9e28:	429d      	cmp	r5, r3
    9e2a:	dd00      	ble.n	9e2e <_printf_float+0x2ae>
    9e2c:	001d      	movs	r5, r3
    9e2e:	2d00      	cmp	r5, #0
    9e30:	dc09      	bgt.n	9e46 <_printf_float+0x2c6>
    9e32:	e011      	b.n	9e58 <_printf_float+0x2d8>
    9e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9e36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9e38:	990a      	ldr	r1, [sp, #40]	; 0x28
    9e3a:	9809      	ldr	r0, [sp, #36]	; 0x24
    9e3c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9e3e:	47b8      	blx	r7
    9e40:	1c43      	adds	r3, r0, #1
    9e42:	d1ec      	bne.n	9e1e <_printf_float+0x29e>
    9e44:	e74a      	b.n	9cdc <_printf_float+0x15c>
    9e46:	002b      	movs	r3, r5
    9e48:	0032      	movs	r2, r6
    9e4a:	990a      	ldr	r1, [sp, #40]	; 0x28
    9e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
    9e4e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9e50:	47b0      	blx	r6
    9e52:	1c43      	adds	r3, r0, #1
    9e54:	d100      	bne.n	9e58 <_printf_float+0x2d8>
    9e56:	e741      	b.n	9cdc <_printf_float+0x15c>
    9e58:	43ef      	mvns	r7, r5
    9e5a:	17fb      	asrs	r3, r7, #31
    9e5c:	2600      	movs	r6, #0
    9e5e:	930c      	str	r3, [sp, #48]	; 0x30
    9e60:	e00a      	b.n	9e78 <_printf_float+0x2f8>
    9e62:	0022      	movs	r2, r4
    9e64:	2301      	movs	r3, #1
    9e66:	321a      	adds	r2, #26
    9e68:	990a      	ldr	r1, [sp, #40]	; 0x28
    9e6a:	9809      	ldr	r0, [sp, #36]	; 0x24
    9e6c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9e6e:	47b8      	blx	r7
    9e70:	1c43      	adds	r3, r0, #1
    9e72:	d100      	bne.n	9e76 <_printf_float+0x2f6>
    9e74:	e732      	b.n	9cdc <_printf_float+0x15c>
    9e76:	3601      	adds	r6, #1
    9e78:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9e7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9e7c:	990c      	ldr	r1, [sp, #48]	; 0x30
    9e7e:	1a9b      	subs	r3, r3, r2
    9e80:	002a      	movs	r2, r5
    9e82:	400a      	ands	r2, r1
    9e84:	1a9b      	subs	r3, r3, r2
    9e86:	429e      	cmp	r6, r3
    9e88:	dbeb      	blt.n	9e62 <_printf_float+0x2e2>
    9e8a:	e749      	b.n	9d20 <_printf_float+0x1a0>
    9e8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9e8e:	2b01      	cmp	r3, #1
    9e90:	dc02      	bgt.n	9e98 <_printf_float+0x318>
    9e92:	2301      	movs	r3, #1
    9e94:	421a      	tst	r2, r3
    9e96:	d045      	beq.n	9f24 <_printf_float+0x3a4>
    9e98:	2301      	movs	r3, #1
    9e9a:	002a      	movs	r2, r5
    9e9c:	990a      	ldr	r1, [sp, #40]	; 0x28
    9e9e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9ea0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9ea2:	47b8      	blx	r7
    9ea4:	1c43      	adds	r3, r0, #1
    9ea6:	d100      	bne.n	9eaa <_printf_float+0x32a>
    9ea8:	e718      	b.n	9cdc <_printf_float+0x15c>
    9eaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9eac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9eae:	990a      	ldr	r1, [sp, #40]	; 0x28
    9eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
    9eb2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9eb4:	47b8      	blx	r7
    9eb6:	1c43      	adds	r3, r0, #1
    9eb8:	d100      	bne.n	9ebc <_printf_float+0x33c>
    9eba:	e70f      	b.n	9cdc <_printf_float+0x15c>
    9ebc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    9ebe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    9ec0:	2200      	movs	r2, #0
    9ec2:	2300      	movs	r3, #0
    9ec4:	f7fc feee 	bl	6ca4 <__aeabi_dcmpeq>
    9ec8:	2800      	cmp	r0, #0
    9eca:	d001      	beq.n	9ed0 <_printf_float+0x350>
    9ecc:	2500      	movs	r5, #0
    9ece:	e01a      	b.n	9f06 <_printf_float+0x386>
    9ed0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9ed2:	1c6a      	adds	r2, r5, #1
    9ed4:	3b01      	subs	r3, #1
    9ed6:	e026      	b.n	9f26 <_printf_float+0x3a6>
    9ed8:	7fefffff 	.word	0x7fefffff
    9edc:	0000e686 	.word	0x0000e686
    9ee0:	0000dbae 	.word	0x0000dbae
    9ee4:	0000e67e 	.word	0x0000e67e
    9ee8:	0000ec51 	.word	0x0000ec51
    9eec:	0000dfa6 	.word	0x0000dfa6
    9ef0:	0022      	movs	r2, r4
    9ef2:	2301      	movs	r3, #1
    9ef4:	321a      	adds	r2, #26
    9ef6:	990a      	ldr	r1, [sp, #40]	; 0x28
    9ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
    9efa:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    9efc:	47b8      	blx	r7
    9efe:	1c43      	adds	r3, r0, #1
    9f00:	d100      	bne.n	9f04 <_printf_float+0x384>
    9f02:	e6eb      	b.n	9cdc <_printf_float+0x15c>
    9f04:	3501      	adds	r5, #1
    9f06:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9f08:	3b01      	subs	r3, #1
    9f0a:	429d      	cmp	r5, r3
    9f0c:	dbf0      	blt.n	9ef0 <_printf_float+0x370>
    9f0e:	0022      	movs	r2, r4
    9f10:	0033      	movs	r3, r6
    9f12:	3250      	adds	r2, #80	; 0x50
    9f14:	990a      	ldr	r1, [sp, #40]	; 0x28
    9f16:	9809      	ldr	r0, [sp, #36]	; 0x24
    9f18:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9f1a:	47a8      	blx	r5
    9f1c:	1c43      	adds	r3, r0, #1
    9f1e:	d000      	beq.n	9f22 <_printf_float+0x3a2>
    9f20:	e6fe      	b.n	9d20 <_printf_float+0x1a0>
    9f22:	e6db      	b.n	9cdc <_printf_float+0x15c>
    9f24:	002a      	movs	r2, r5
    9f26:	990a      	ldr	r1, [sp, #40]	; 0x28
    9f28:	9809      	ldr	r0, [sp, #36]	; 0x24
    9f2a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9f2c:	47a8      	blx	r5
    9f2e:	1c43      	adds	r3, r0, #1
    9f30:	d1ed      	bne.n	9f0e <_printf_float+0x38e>
    9f32:	e6d3      	b.n	9cdc <_printf_float+0x15c>
    9f34:	0022      	movs	r2, r4
    9f36:	2301      	movs	r3, #1
    9f38:	3219      	adds	r2, #25
    9f3a:	990a      	ldr	r1, [sp, #40]	; 0x28
    9f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
    9f3e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9f40:	47b0      	blx	r6
    9f42:	1c43      	adds	r3, r0, #1
    9f44:	d100      	bne.n	9f48 <_printf_float+0x3c8>
    9f46:	e6c9      	b.n	9cdc <_printf_float+0x15c>
    9f48:	3501      	adds	r5, #1
    9f4a:	68e3      	ldr	r3, [r4, #12]
    9f4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9f4e:	1a9b      	subs	r3, r3, r2
    9f50:	429d      	cmp	r5, r3
    9f52:	dbef      	blt.n	9f34 <_printf_float+0x3b4>
    9f54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9f56:	68e0      	ldr	r0, [r4, #12]
    9f58:	4298      	cmp	r0, r3
    9f5a:	da5e      	bge.n	a01a <_printf_float+0x49a>
    9f5c:	0018      	movs	r0, r3
    9f5e:	e05c      	b.n	a01a <_printf_float+0x49a>
    9f60:	2380      	movs	r3, #128	; 0x80
    9f62:	6862      	ldr	r2, [r4, #4]
    9f64:	00db      	lsls	r3, r3, #3
    9f66:	1c51      	adds	r1, r2, #1
    9f68:	d000      	beq.n	9f6c <_printf_float+0x3ec>
    9f6a:	e66a      	b.n	9c42 <_printf_float+0xc2>
    9f6c:	3207      	adds	r2, #7
    9f6e:	e002      	b.n	9f76 <_printf_float+0x3f6>
    9f70:	2a00      	cmp	r2, #0
    9f72:	d102      	bne.n	9f7a <_printf_float+0x3fa>
    9f74:	2201      	movs	r2, #1
    9f76:	6062      	str	r2, [r4, #4]
    9f78:	e669      	b.n	9c4e <_printf_float+0xce>
    9f7a:	990c      	ldr	r1, [sp, #48]	; 0x30
    9f7c:	a808      	add	r0, sp, #32
    9f7e:	430b      	orrs	r3, r1
    9f80:	2100      	movs	r1, #0
    9f82:	9106      	str	r1, [sp, #24]
    9f84:	a912      	add	r1, sp, #72	; 0x48
    9f86:	9105      	str	r1, [sp, #20]
    9f88:	a911      	add	r1, sp, #68	; 0x44
    9f8a:	9103      	str	r1, [sp, #12]
    9f8c:	2123      	movs	r1, #35	; 0x23
    9f8e:	1809      	adds	r1, r1, r0
    9f90:	6023      	str	r3, [r4, #0]
    9f92:	9301      	str	r3, [sp, #4]
    9f94:	9200      	str	r2, [sp, #0]
    9f96:	002b      	movs	r3, r5
    9f98:	9704      	str	r7, [sp, #16]
    9f9a:	9102      	str	r1, [sp, #8]
    9f9c:	0032      	movs	r2, r6
    9f9e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9fa0:	f7ff fd58 	bl	9a54 <__cvt>
    9fa4:	0005      	movs	r5, r0
    9fa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9fa8:	1cda      	adds	r2, r3, #3
    9faa:	db02      	blt.n	9fb2 <_printf_float+0x432>
    9fac:	6862      	ldr	r2, [r4, #4]
    9fae:	4293      	cmp	r3, r2
    9fb0:	dd1c      	ble.n	9fec <_printf_float+0x46c>
    9fb2:	3f02      	subs	r7, #2
    9fb4:	b2ff      	uxtb	r7, r7
    9fb6:	e667      	b.n	9c88 <_printf_float+0x108>
    9fb8:	3301      	adds	r3, #1
    9fba:	6123      	str	r3, [r4, #16]
    9fbc:	e67a      	b.n	9cb4 <_printf_float+0x134>
    9fbe:	2f66      	cmp	r7, #102	; 0x66
    9fc0:	d115      	bne.n	9fee <_printf_float+0x46e>
    9fc2:	6863      	ldr	r3, [r4, #4]
    9fc4:	2900      	cmp	r1, #0
    9fc6:	dd09      	ble.n	9fdc <_printf_float+0x45c>
    9fc8:	6121      	str	r1, [r4, #16]
    9fca:	2b00      	cmp	r3, #0
    9fcc:	d102      	bne.n	9fd4 <_printf_float+0x454>
    9fce:	6822      	ldr	r2, [r4, #0]
    9fd0:	07d2      	lsls	r2, r2, #31
    9fd2:	d51e      	bpl.n	a012 <_printf_float+0x492>
    9fd4:	3301      	adds	r3, #1
    9fd6:	1859      	adds	r1, r3, r1
    9fd8:	6121      	str	r1, [r4, #16]
    9fda:	e01a      	b.n	a012 <_printf_float+0x492>
    9fdc:	2b00      	cmp	r3, #0
    9fde:	d103      	bne.n	9fe8 <_printf_float+0x468>
    9fe0:	2201      	movs	r2, #1
    9fe2:	6821      	ldr	r1, [r4, #0]
    9fe4:	4211      	tst	r1, r2
    9fe6:	d013      	beq.n	a010 <_printf_float+0x490>
    9fe8:	1c9a      	adds	r2, r3, #2
    9fea:	e011      	b.n	a010 <_printf_float+0x490>
    9fec:	2767      	movs	r7, #103	; 0x67
    9fee:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9ff0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9ff2:	4293      	cmp	r3, r2
    9ff4:	db06      	blt.n	a004 <_printf_float+0x484>
    9ff6:	6822      	ldr	r2, [r4, #0]
    9ff8:	6123      	str	r3, [r4, #16]
    9ffa:	07d2      	lsls	r2, r2, #31
    9ffc:	d509      	bpl.n	a012 <_printf_float+0x492>
    9ffe:	3301      	adds	r3, #1
    a000:	6123      	str	r3, [r4, #16]
    a002:	e006      	b.n	a012 <_printf_float+0x492>
    a004:	2101      	movs	r1, #1
    a006:	2b00      	cmp	r3, #0
    a008:	dc01      	bgt.n	a00e <_printf_float+0x48e>
    a00a:	1849      	adds	r1, r1, r1
    a00c:	1ac9      	subs	r1, r1, r3
    a00e:	188a      	adds	r2, r1, r2
    a010:	6122      	str	r2, [r4, #16]
    a012:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a014:	2600      	movs	r6, #0
    a016:	65a3      	str	r3, [r4, #88]	; 0x58
    a018:	e64c      	b.n	9cb4 <_printf_float+0x134>
    a01a:	b015      	add	sp, #84	; 0x54
    a01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a01e:	46c0      	nop			; (mov r8, r8)

0000a020 <_printf_common>:
    a020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a022:	0017      	movs	r7, r2
    a024:	9301      	str	r3, [sp, #4]
    a026:	688a      	ldr	r2, [r1, #8]
    a028:	690b      	ldr	r3, [r1, #16]
    a02a:	9000      	str	r0, [sp, #0]
    a02c:	000c      	movs	r4, r1
    a02e:	4293      	cmp	r3, r2
    a030:	da00      	bge.n	a034 <_printf_common+0x14>
    a032:	0013      	movs	r3, r2
    a034:	0022      	movs	r2, r4
    a036:	603b      	str	r3, [r7, #0]
    a038:	3243      	adds	r2, #67	; 0x43
    a03a:	7812      	ldrb	r2, [r2, #0]
    a03c:	2a00      	cmp	r2, #0
    a03e:	d001      	beq.n	a044 <_printf_common+0x24>
    a040:	3301      	adds	r3, #1
    a042:	603b      	str	r3, [r7, #0]
    a044:	6823      	ldr	r3, [r4, #0]
    a046:	069b      	lsls	r3, r3, #26
    a048:	d502      	bpl.n	a050 <_printf_common+0x30>
    a04a:	683b      	ldr	r3, [r7, #0]
    a04c:	3302      	adds	r3, #2
    a04e:	603b      	str	r3, [r7, #0]
    a050:	2506      	movs	r5, #6
    a052:	6823      	ldr	r3, [r4, #0]
    a054:	401d      	ands	r5, r3
    a056:	d01e      	beq.n	a096 <_printf_common+0x76>
    a058:	0023      	movs	r3, r4
    a05a:	3343      	adds	r3, #67	; 0x43
    a05c:	781b      	ldrb	r3, [r3, #0]
    a05e:	1e5a      	subs	r2, r3, #1
    a060:	4193      	sbcs	r3, r2
    a062:	6822      	ldr	r2, [r4, #0]
    a064:	0692      	lsls	r2, r2, #26
    a066:	d51c      	bpl.n	a0a2 <_printf_common+0x82>
    a068:	2030      	movs	r0, #48	; 0x30
    a06a:	18e1      	adds	r1, r4, r3
    a06c:	3143      	adds	r1, #67	; 0x43
    a06e:	7008      	strb	r0, [r1, #0]
    a070:	0021      	movs	r1, r4
    a072:	1c5a      	adds	r2, r3, #1
    a074:	3145      	adds	r1, #69	; 0x45
    a076:	7809      	ldrb	r1, [r1, #0]
    a078:	18a2      	adds	r2, r4, r2
    a07a:	3243      	adds	r2, #67	; 0x43
    a07c:	3302      	adds	r3, #2
    a07e:	7011      	strb	r1, [r2, #0]
    a080:	e00f      	b.n	a0a2 <_printf_common+0x82>
    a082:	0022      	movs	r2, r4
    a084:	2301      	movs	r3, #1
    a086:	3219      	adds	r2, #25
    a088:	9901      	ldr	r1, [sp, #4]
    a08a:	9800      	ldr	r0, [sp, #0]
    a08c:	9e08      	ldr	r6, [sp, #32]
    a08e:	47b0      	blx	r6
    a090:	1c43      	adds	r3, r0, #1
    a092:	d00e      	beq.n	a0b2 <_printf_common+0x92>
    a094:	3501      	adds	r5, #1
    a096:	68e3      	ldr	r3, [r4, #12]
    a098:	683a      	ldr	r2, [r7, #0]
    a09a:	1a9b      	subs	r3, r3, r2
    a09c:	429d      	cmp	r5, r3
    a09e:	dbf0      	blt.n	a082 <_printf_common+0x62>
    a0a0:	e7da      	b.n	a058 <_printf_common+0x38>
    a0a2:	0022      	movs	r2, r4
    a0a4:	9901      	ldr	r1, [sp, #4]
    a0a6:	3243      	adds	r2, #67	; 0x43
    a0a8:	9800      	ldr	r0, [sp, #0]
    a0aa:	9d08      	ldr	r5, [sp, #32]
    a0ac:	47a8      	blx	r5
    a0ae:	1c43      	adds	r3, r0, #1
    a0b0:	d102      	bne.n	a0b8 <_printf_common+0x98>
    a0b2:	2001      	movs	r0, #1
    a0b4:	4240      	negs	r0, r0
    a0b6:	e020      	b.n	a0fa <_printf_common+0xda>
    a0b8:	2306      	movs	r3, #6
    a0ba:	6820      	ldr	r0, [r4, #0]
    a0bc:	68e1      	ldr	r1, [r4, #12]
    a0be:	683a      	ldr	r2, [r7, #0]
    a0c0:	4003      	ands	r3, r0
    a0c2:	2500      	movs	r5, #0
    a0c4:	2b04      	cmp	r3, #4
    a0c6:	d103      	bne.n	a0d0 <_printf_common+0xb0>
    a0c8:	1a8d      	subs	r5, r1, r2
    a0ca:	43eb      	mvns	r3, r5
    a0cc:	17db      	asrs	r3, r3, #31
    a0ce:	401d      	ands	r5, r3
    a0d0:	68a3      	ldr	r3, [r4, #8]
    a0d2:	6922      	ldr	r2, [r4, #16]
    a0d4:	4293      	cmp	r3, r2
    a0d6:	dd01      	ble.n	a0dc <_printf_common+0xbc>
    a0d8:	1a9b      	subs	r3, r3, r2
    a0da:	18ed      	adds	r5, r5, r3
    a0dc:	2700      	movs	r7, #0
    a0de:	42bd      	cmp	r5, r7
    a0e0:	d00a      	beq.n	a0f8 <_printf_common+0xd8>
    a0e2:	0022      	movs	r2, r4
    a0e4:	2301      	movs	r3, #1
    a0e6:	321a      	adds	r2, #26
    a0e8:	9901      	ldr	r1, [sp, #4]
    a0ea:	9800      	ldr	r0, [sp, #0]
    a0ec:	9e08      	ldr	r6, [sp, #32]
    a0ee:	47b0      	blx	r6
    a0f0:	1c43      	adds	r3, r0, #1
    a0f2:	d0de      	beq.n	a0b2 <_printf_common+0x92>
    a0f4:	3701      	adds	r7, #1
    a0f6:	e7f2      	b.n	a0de <_printf_common+0xbe>
    a0f8:	2000      	movs	r0, #0
    a0fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000a0fc <_printf_i>:
    a0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a0fe:	b08b      	sub	sp, #44	; 0x2c
    a100:	9206      	str	r2, [sp, #24]
    a102:	000a      	movs	r2, r1
    a104:	3243      	adds	r2, #67	; 0x43
    a106:	9307      	str	r3, [sp, #28]
    a108:	9005      	str	r0, [sp, #20]
    a10a:	9204      	str	r2, [sp, #16]
    a10c:	7e0a      	ldrb	r2, [r1, #24]
    a10e:	000c      	movs	r4, r1
    a110:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a112:	2a6e      	cmp	r2, #110	; 0x6e
    a114:	d100      	bne.n	a118 <_printf_i+0x1c>
    a116:	e0ab      	b.n	a270 <_printf_i+0x174>
    a118:	d811      	bhi.n	a13e <_printf_i+0x42>
    a11a:	2a63      	cmp	r2, #99	; 0x63
    a11c:	d022      	beq.n	a164 <_printf_i+0x68>
    a11e:	d809      	bhi.n	a134 <_printf_i+0x38>
    a120:	2a00      	cmp	r2, #0
    a122:	d100      	bne.n	a126 <_printf_i+0x2a>
    a124:	e0b5      	b.n	a292 <_printf_i+0x196>
    a126:	2a58      	cmp	r2, #88	; 0x58
    a128:	d000      	beq.n	a12c <_printf_i+0x30>
    a12a:	e0c5      	b.n	a2b8 <_printf_i+0x1bc>
    a12c:	3145      	adds	r1, #69	; 0x45
    a12e:	700a      	strb	r2, [r1, #0]
    a130:	4a81      	ldr	r2, [pc, #516]	; (a338 <_printf_i+0x23c>)
    a132:	e04f      	b.n	a1d4 <_printf_i+0xd8>
    a134:	2a64      	cmp	r2, #100	; 0x64
    a136:	d01d      	beq.n	a174 <_printf_i+0x78>
    a138:	2a69      	cmp	r2, #105	; 0x69
    a13a:	d01b      	beq.n	a174 <_printf_i+0x78>
    a13c:	e0bc      	b.n	a2b8 <_printf_i+0x1bc>
    a13e:	2a73      	cmp	r2, #115	; 0x73
    a140:	d100      	bne.n	a144 <_printf_i+0x48>
    a142:	e0aa      	b.n	a29a <_printf_i+0x19e>
    a144:	d809      	bhi.n	a15a <_printf_i+0x5e>
    a146:	2a6f      	cmp	r2, #111	; 0x6f
    a148:	d029      	beq.n	a19e <_printf_i+0xa2>
    a14a:	2a70      	cmp	r2, #112	; 0x70
    a14c:	d000      	beq.n	a150 <_printf_i+0x54>
    a14e:	e0b3      	b.n	a2b8 <_printf_i+0x1bc>
    a150:	2220      	movs	r2, #32
    a152:	6809      	ldr	r1, [r1, #0]
    a154:	430a      	orrs	r2, r1
    a156:	6022      	str	r2, [r4, #0]
    a158:	e037      	b.n	a1ca <_printf_i+0xce>
    a15a:	2a75      	cmp	r2, #117	; 0x75
    a15c:	d01f      	beq.n	a19e <_printf_i+0xa2>
    a15e:	2a78      	cmp	r2, #120	; 0x78
    a160:	d033      	beq.n	a1ca <_printf_i+0xce>
    a162:	e0a9      	b.n	a2b8 <_printf_i+0x1bc>
    a164:	000e      	movs	r6, r1
    a166:	681a      	ldr	r2, [r3, #0]
    a168:	3642      	adds	r6, #66	; 0x42
    a16a:	1d11      	adds	r1, r2, #4
    a16c:	6019      	str	r1, [r3, #0]
    a16e:	6813      	ldr	r3, [r2, #0]
    a170:	7033      	strb	r3, [r6, #0]
    a172:	e0a4      	b.n	a2be <_printf_i+0x1c2>
    a174:	6821      	ldr	r1, [r4, #0]
    a176:	681a      	ldr	r2, [r3, #0]
    a178:	0608      	lsls	r0, r1, #24
    a17a:	d406      	bmi.n	a18a <_printf_i+0x8e>
    a17c:	0649      	lsls	r1, r1, #25
    a17e:	d504      	bpl.n	a18a <_printf_i+0x8e>
    a180:	1d11      	adds	r1, r2, #4
    a182:	6019      	str	r1, [r3, #0]
    a184:	2300      	movs	r3, #0
    a186:	5ed5      	ldrsh	r5, [r2, r3]
    a188:	e002      	b.n	a190 <_printf_i+0x94>
    a18a:	1d11      	adds	r1, r2, #4
    a18c:	6019      	str	r1, [r3, #0]
    a18e:	6815      	ldr	r5, [r2, #0]
    a190:	2d00      	cmp	r5, #0
    a192:	da3b      	bge.n	a20c <_printf_i+0x110>
    a194:	232d      	movs	r3, #45	; 0x2d
    a196:	9a04      	ldr	r2, [sp, #16]
    a198:	426d      	negs	r5, r5
    a19a:	7013      	strb	r3, [r2, #0]
    a19c:	e036      	b.n	a20c <_printf_i+0x110>
    a19e:	6821      	ldr	r1, [r4, #0]
    a1a0:	681a      	ldr	r2, [r3, #0]
    a1a2:	0608      	lsls	r0, r1, #24
    a1a4:	d406      	bmi.n	a1b4 <_printf_i+0xb8>
    a1a6:	0649      	lsls	r1, r1, #25
    a1a8:	d504      	bpl.n	a1b4 <_printf_i+0xb8>
    a1aa:	6815      	ldr	r5, [r2, #0]
    a1ac:	1d11      	adds	r1, r2, #4
    a1ae:	6019      	str	r1, [r3, #0]
    a1b0:	b2ad      	uxth	r5, r5
    a1b2:	e002      	b.n	a1ba <_printf_i+0xbe>
    a1b4:	1d11      	adds	r1, r2, #4
    a1b6:	6019      	str	r1, [r3, #0]
    a1b8:	6815      	ldr	r5, [r2, #0]
    a1ba:	4b5f      	ldr	r3, [pc, #380]	; (a338 <_printf_i+0x23c>)
    a1bc:	7e22      	ldrb	r2, [r4, #24]
    a1be:	9303      	str	r3, [sp, #12]
    a1c0:	2708      	movs	r7, #8
    a1c2:	2a6f      	cmp	r2, #111	; 0x6f
    a1c4:	d01d      	beq.n	a202 <_printf_i+0x106>
    a1c6:	270a      	movs	r7, #10
    a1c8:	e01b      	b.n	a202 <_printf_i+0x106>
    a1ca:	0022      	movs	r2, r4
    a1cc:	2178      	movs	r1, #120	; 0x78
    a1ce:	3245      	adds	r2, #69	; 0x45
    a1d0:	7011      	strb	r1, [r2, #0]
    a1d2:	4a5a      	ldr	r2, [pc, #360]	; (a33c <_printf_i+0x240>)
    a1d4:	6819      	ldr	r1, [r3, #0]
    a1d6:	9203      	str	r2, [sp, #12]
    a1d8:	1d08      	adds	r0, r1, #4
    a1da:	6822      	ldr	r2, [r4, #0]
    a1dc:	6018      	str	r0, [r3, #0]
    a1de:	680d      	ldr	r5, [r1, #0]
    a1e0:	0610      	lsls	r0, r2, #24
    a1e2:	d402      	bmi.n	a1ea <_printf_i+0xee>
    a1e4:	0650      	lsls	r0, r2, #25
    a1e6:	d500      	bpl.n	a1ea <_printf_i+0xee>
    a1e8:	b2ad      	uxth	r5, r5
    a1ea:	07d3      	lsls	r3, r2, #31
    a1ec:	d502      	bpl.n	a1f4 <_printf_i+0xf8>
    a1ee:	2320      	movs	r3, #32
    a1f0:	431a      	orrs	r2, r3
    a1f2:	6022      	str	r2, [r4, #0]
    a1f4:	2710      	movs	r7, #16
    a1f6:	2d00      	cmp	r5, #0
    a1f8:	d103      	bne.n	a202 <_printf_i+0x106>
    a1fa:	2320      	movs	r3, #32
    a1fc:	6822      	ldr	r2, [r4, #0]
    a1fe:	439a      	bics	r2, r3
    a200:	6022      	str	r2, [r4, #0]
    a202:	0023      	movs	r3, r4
    a204:	2200      	movs	r2, #0
    a206:	3343      	adds	r3, #67	; 0x43
    a208:	701a      	strb	r2, [r3, #0]
    a20a:	e002      	b.n	a212 <_printf_i+0x116>
    a20c:	270a      	movs	r7, #10
    a20e:	4b4a      	ldr	r3, [pc, #296]	; (a338 <_printf_i+0x23c>)
    a210:	9303      	str	r3, [sp, #12]
    a212:	6863      	ldr	r3, [r4, #4]
    a214:	60a3      	str	r3, [r4, #8]
    a216:	2b00      	cmp	r3, #0
    a218:	db09      	blt.n	a22e <_printf_i+0x132>
    a21a:	2204      	movs	r2, #4
    a21c:	6821      	ldr	r1, [r4, #0]
    a21e:	4391      	bics	r1, r2
    a220:	6021      	str	r1, [r4, #0]
    a222:	2d00      	cmp	r5, #0
    a224:	d105      	bne.n	a232 <_printf_i+0x136>
    a226:	9e04      	ldr	r6, [sp, #16]
    a228:	2b00      	cmp	r3, #0
    a22a:	d011      	beq.n	a250 <_printf_i+0x154>
    a22c:	e07b      	b.n	a326 <_printf_i+0x22a>
    a22e:	2d00      	cmp	r5, #0
    a230:	d079      	beq.n	a326 <_printf_i+0x22a>
    a232:	9e04      	ldr	r6, [sp, #16]
    a234:	0028      	movs	r0, r5
    a236:	0039      	movs	r1, r7
    a238:	f7fc fc34 	bl	6aa4 <__aeabi_uidivmod>
    a23c:	9b03      	ldr	r3, [sp, #12]
    a23e:	3e01      	subs	r6, #1
    a240:	5c5b      	ldrb	r3, [r3, r1]
    a242:	0028      	movs	r0, r5
    a244:	7033      	strb	r3, [r6, #0]
    a246:	0039      	movs	r1, r7
    a248:	f7fc fba6 	bl	6998 <__aeabi_uidiv>
    a24c:	1e05      	subs	r5, r0, #0
    a24e:	d1f1      	bne.n	a234 <_printf_i+0x138>
    a250:	2f08      	cmp	r7, #8
    a252:	d109      	bne.n	a268 <_printf_i+0x16c>
    a254:	6823      	ldr	r3, [r4, #0]
    a256:	07db      	lsls	r3, r3, #31
    a258:	d506      	bpl.n	a268 <_printf_i+0x16c>
    a25a:	6863      	ldr	r3, [r4, #4]
    a25c:	6922      	ldr	r2, [r4, #16]
    a25e:	4293      	cmp	r3, r2
    a260:	dc02      	bgt.n	a268 <_printf_i+0x16c>
    a262:	2330      	movs	r3, #48	; 0x30
    a264:	3e01      	subs	r6, #1
    a266:	7033      	strb	r3, [r6, #0]
    a268:	9b04      	ldr	r3, [sp, #16]
    a26a:	1b9b      	subs	r3, r3, r6
    a26c:	6123      	str	r3, [r4, #16]
    a26e:	e02b      	b.n	a2c8 <_printf_i+0x1cc>
    a270:	6809      	ldr	r1, [r1, #0]
    a272:	681a      	ldr	r2, [r3, #0]
    a274:	0608      	lsls	r0, r1, #24
    a276:	d407      	bmi.n	a288 <_printf_i+0x18c>
    a278:	0649      	lsls	r1, r1, #25
    a27a:	d505      	bpl.n	a288 <_printf_i+0x18c>
    a27c:	1d11      	adds	r1, r2, #4
    a27e:	6019      	str	r1, [r3, #0]
    a280:	6813      	ldr	r3, [r2, #0]
    a282:	8aa2      	ldrh	r2, [r4, #20]
    a284:	801a      	strh	r2, [r3, #0]
    a286:	e004      	b.n	a292 <_printf_i+0x196>
    a288:	1d11      	adds	r1, r2, #4
    a28a:	6019      	str	r1, [r3, #0]
    a28c:	6813      	ldr	r3, [r2, #0]
    a28e:	6962      	ldr	r2, [r4, #20]
    a290:	601a      	str	r2, [r3, #0]
    a292:	2300      	movs	r3, #0
    a294:	9e04      	ldr	r6, [sp, #16]
    a296:	6123      	str	r3, [r4, #16]
    a298:	e016      	b.n	a2c8 <_printf_i+0x1cc>
    a29a:	681a      	ldr	r2, [r3, #0]
    a29c:	1d11      	adds	r1, r2, #4
    a29e:	6019      	str	r1, [r3, #0]
    a2a0:	6816      	ldr	r6, [r2, #0]
    a2a2:	2100      	movs	r1, #0
    a2a4:	6862      	ldr	r2, [r4, #4]
    a2a6:	0030      	movs	r0, r6
    a2a8:	f002 fc90 	bl	cbcc <memchr>
    a2ac:	2800      	cmp	r0, #0
    a2ae:	d001      	beq.n	a2b4 <_printf_i+0x1b8>
    a2b0:	1b80      	subs	r0, r0, r6
    a2b2:	6060      	str	r0, [r4, #4]
    a2b4:	6863      	ldr	r3, [r4, #4]
    a2b6:	e003      	b.n	a2c0 <_printf_i+0x1c4>
    a2b8:	0026      	movs	r6, r4
    a2ba:	3642      	adds	r6, #66	; 0x42
    a2bc:	7032      	strb	r2, [r6, #0]
    a2be:	2301      	movs	r3, #1
    a2c0:	6123      	str	r3, [r4, #16]
    a2c2:	2300      	movs	r3, #0
    a2c4:	9a04      	ldr	r2, [sp, #16]
    a2c6:	7013      	strb	r3, [r2, #0]
    a2c8:	9b07      	ldr	r3, [sp, #28]
    a2ca:	aa09      	add	r2, sp, #36	; 0x24
    a2cc:	9300      	str	r3, [sp, #0]
    a2ce:	0021      	movs	r1, r4
    a2d0:	9b06      	ldr	r3, [sp, #24]
    a2d2:	9805      	ldr	r0, [sp, #20]
    a2d4:	f7ff fea4 	bl	a020 <_printf_common>
    a2d8:	1c43      	adds	r3, r0, #1
    a2da:	d102      	bne.n	a2e2 <_printf_i+0x1e6>
    a2dc:	2001      	movs	r0, #1
    a2de:	4240      	negs	r0, r0
    a2e0:	e027      	b.n	a332 <_printf_i+0x236>
    a2e2:	6923      	ldr	r3, [r4, #16]
    a2e4:	0032      	movs	r2, r6
    a2e6:	9906      	ldr	r1, [sp, #24]
    a2e8:	9805      	ldr	r0, [sp, #20]
    a2ea:	9d07      	ldr	r5, [sp, #28]
    a2ec:	47a8      	blx	r5
    a2ee:	1c43      	adds	r3, r0, #1
    a2f0:	d0f4      	beq.n	a2dc <_printf_i+0x1e0>
    a2f2:	6823      	ldr	r3, [r4, #0]
    a2f4:	2500      	movs	r5, #0
    a2f6:	079b      	lsls	r3, r3, #30
    a2f8:	d40f      	bmi.n	a31a <_printf_i+0x21e>
    a2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a2fc:	68e0      	ldr	r0, [r4, #12]
    a2fe:	4298      	cmp	r0, r3
    a300:	da17      	bge.n	a332 <_printf_i+0x236>
    a302:	0018      	movs	r0, r3
    a304:	e015      	b.n	a332 <_printf_i+0x236>
    a306:	0022      	movs	r2, r4
    a308:	2301      	movs	r3, #1
    a30a:	3219      	adds	r2, #25
    a30c:	9906      	ldr	r1, [sp, #24]
    a30e:	9805      	ldr	r0, [sp, #20]
    a310:	9e07      	ldr	r6, [sp, #28]
    a312:	47b0      	blx	r6
    a314:	1c43      	adds	r3, r0, #1
    a316:	d0e1      	beq.n	a2dc <_printf_i+0x1e0>
    a318:	3501      	adds	r5, #1
    a31a:	68e3      	ldr	r3, [r4, #12]
    a31c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a31e:	1a9b      	subs	r3, r3, r2
    a320:	429d      	cmp	r5, r3
    a322:	dbf0      	blt.n	a306 <_printf_i+0x20a>
    a324:	e7e9      	b.n	a2fa <_printf_i+0x1fe>
    a326:	0026      	movs	r6, r4
    a328:	9b03      	ldr	r3, [sp, #12]
    a32a:	3642      	adds	r6, #66	; 0x42
    a32c:	781b      	ldrb	r3, [r3, #0]
    a32e:	7033      	strb	r3, [r6, #0]
    a330:	e78e      	b.n	a250 <_printf_i+0x154>
    a332:	b00b      	add	sp, #44	; 0x2c
    a334:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a336:	46c0      	nop			; (mov r8, r8)
    a338:	0000ec55 	.word	0x0000ec55
    a33c:	0000ec66 	.word	0x0000ec66

0000a340 <realloc>:
    a340:	b510      	push	{r4, lr}
    a342:	4b03      	ldr	r3, [pc, #12]	; (a350 <realloc+0x10>)
    a344:	000a      	movs	r2, r1
    a346:	0001      	movs	r1, r0
    a348:	6818      	ldr	r0, [r3, #0]
    a34a:	f003 f850 	bl	d3ee <_realloc_r>
    a34e:	bd10      	pop	{r4, pc}
    a350:	200000fc 	.word	0x200000fc

0000a354 <_sbrk_r>:
    a354:	2300      	movs	r3, #0
    a356:	b570      	push	{r4, r5, r6, lr}
    a358:	4c06      	ldr	r4, [pc, #24]	; (a374 <_sbrk_r+0x20>)
    a35a:	0005      	movs	r5, r0
    a35c:	0008      	movs	r0, r1
    a35e:	6023      	str	r3, [r4, #0]
    a360:	f003 fb5a 	bl	da18 <_sbrk>
    a364:	1c43      	adds	r3, r0, #1
    a366:	d103      	bne.n	a370 <_sbrk_r+0x1c>
    a368:	6823      	ldr	r3, [r4, #0]
    a36a:	2b00      	cmp	r3, #0
    a36c:	d000      	beq.n	a370 <_sbrk_r+0x1c>
    a36e:	602b      	str	r3, [r5, #0]
    a370:	bd70      	pop	{r4, r5, r6, pc}
    a372:	46c0      	nop			; (mov r8, r8)
    a374:	20000e74 	.word	0x20000e74

0000a378 <siprintf>:
    a378:	b40e      	push	{r1, r2, r3}
    a37a:	b510      	push	{r4, lr}
    a37c:	b09d      	sub	sp, #116	; 0x74
    a37e:	a902      	add	r1, sp, #8
    a380:	9002      	str	r0, [sp, #8]
    a382:	6108      	str	r0, [r1, #16]
    a384:	480b      	ldr	r0, [pc, #44]	; (a3b4 <siprintf+0x3c>)
    a386:	2482      	movs	r4, #130	; 0x82
    a388:	6088      	str	r0, [r1, #8]
    a38a:	6148      	str	r0, [r1, #20]
    a38c:	2001      	movs	r0, #1
    a38e:	4240      	negs	r0, r0
    a390:	ab1f      	add	r3, sp, #124	; 0x7c
    a392:	81c8      	strh	r0, [r1, #14]
    a394:	4808      	ldr	r0, [pc, #32]	; (a3b8 <siprintf+0x40>)
    a396:	cb04      	ldmia	r3!, {r2}
    a398:	00a4      	lsls	r4, r4, #2
    a39a:	6800      	ldr	r0, [r0, #0]
    a39c:	9301      	str	r3, [sp, #4]
    a39e:	818c      	strh	r4, [r1, #12]
    a3a0:	f003 f8ae 	bl	d500 <_svfiprintf_r>
    a3a4:	2300      	movs	r3, #0
    a3a6:	9a02      	ldr	r2, [sp, #8]
    a3a8:	7013      	strb	r3, [r2, #0]
    a3aa:	b01d      	add	sp, #116	; 0x74
    a3ac:	bc10      	pop	{r4}
    a3ae:	bc08      	pop	{r3}
    a3b0:	b003      	add	sp, #12
    a3b2:	4718      	bx	r3
    a3b4:	7fffffff 	.word	0x7fffffff
    a3b8:	200000fc 	.word	0x200000fc

0000a3bc <strcat>:
    a3bc:	0002      	movs	r2, r0
    a3be:	b510      	push	{r4, lr}
    a3c0:	7813      	ldrb	r3, [r2, #0]
    a3c2:	2b00      	cmp	r3, #0
    a3c4:	d001      	beq.n	a3ca <strcat+0xe>
    a3c6:	3201      	adds	r2, #1
    a3c8:	e7fa      	b.n	a3c0 <strcat+0x4>
    a3ca:	5ccc      	ldrb	r4, [r1, r3]
    a3cc:	54d4      	strb	r4, [r2, r3]
    a3ce:	3301      	adds	r3, #1
    a3d0:	2c00      	cmp	r4, #0
    a3d2:	d1fa      	bne.n	a3ca <strcat+0xe>
    a3d4:	bd10      	pop	{r4, pc}

0000a3d6 <strchr>:
    a3d6:	0002      	movs	r2, r0
    a3d8:	b2c9      	uxtb	r1, r1
    a3da:	7813      	ldrb	r3, [r2, #0]
    a3dc:	2b00      	cmp	r3, #0
    a3de:	d003      	beq.n	a3e8 <strchr+0x12>
    a3e0:	4299      	cmp	r1, r3
    a3e2:	d004      	beq.n	a3ee <strchr+0x18>
    a3e4:	3201      	adds	r2, #1
    a3e6:	e7f8      	b.n	a3da <strchr+0x4>
    a3e8:	0018      	movs	r0, r3
    a3ea:	2900      	cmp	r1, #0
    a3ec:	d100      	bne.n	a3f0 <strchr+0x1a>
    a3ee:	0010      	movs	r0, r2
    a3f0:	4770      	bx	lr

0000a3f2 <strcmp>:
    a3f2:	7802      	ldrb	r2, [r0, #0]
    a3f4:	780b      	ldrb	r3, [r1, #0]
    a3f6:	2a00      	cmp	r2, #0
    a3f8:	d003      	beq.n	a402 <strcmp+0x10>
    a3fa:	3001      	adds	r0, #1
    a3fc:	3101      	adds	r1, #1
    a3fe:	429a      	cmp	r2, r3
    a400:	d0f7      	beq.n	a3f2 <strcmp>
    a402:	1ad0      	subs	r0, r2, r3
    a404:	4770      	bx	lr

0000a406 <strcpy>:
    a406:	1c03      	adds	r3, r0, #0
    a408:	780a      	ldrb	r2, [r1, #0]
    a40a:	3101      	adds	r1, #1
    a40c:	701a      	strb	r2, [r3, #0]
    a40e:	3301      	adds	r3, #1
    a410:	2a00      	cmp	r2, #0
    a412:	d1f9      	bne.n	a408 <strcpy+0x2>
    a414:	4770      	bx	lr

0000a416 <strlen>:
    a416:	2300      	movs	r3, #0
    a418:	5cc2      	ldrb	r2, [r0, r3]
    a41a:	3301      	adds	r3, #1
    a41c:	2a00      	cmp	r2, #0
    a41e:	d1fb      	bne.n	a418 <strlen+0x2>
    a420:	1e58      	subs	r0, r3, #1
    a422:	4770      	bx	lr

0000a424 <strncmp>:
    a424:	2300      	movs	r3, #0
    a426:	b530      	push	{r4, r5, lr}
    a428:	429a      	cmp	r2, r3
    a42a:	d00b      	beq.n	a444 <strncmp+0x20>
    a42c:	3a01      	subs	r2, #1
    a42e:	5cc4      	ldrb	r4, [r0, r3]
    a430:	5ccd      	ldrb	r5, [r1, r3]
    a432:	42ac      	cmp	r4, r5
    a434:	d105      	bne.n	a442 <strncmp+0x1e>
    a436:	429a      	cmp	r2, r3
    a438:	d002      	beq.n	a440 <strncmp+0x1c>
    a43a:	3301      	adds	r3, #1
    a43c:	2c00      	cmp	r4, #0
    a43e:	d1f6      	bne.n	a42e <strncmp+0xa>
    a440:	0025      	movs	r5, r4
    a442:	1b63      	subs	r3, r4, r5
    a444:	0018      	movs	r0, r3
    a446:	bd30      	pop	{r4, r5, pc}

0000a448 <strncpy>:
    a448:	0003      	movs	r3, r0
    a44a:	b530      	push	{r4, r5, lr}
    a44c:	2a00      	cmp	r2, #0
    a44e:	d00d      	beq.n	a46c <strncpy+0x24>
    a450:	780c      	ldrb	r4, [r1, #0]
    a452:	3301      	adds	r3, #1
    a454:	1e5d      	subs	r5, r3, #1
    a456:	3a01      	subs	r2, #1
    a458:	702c      	strb	r4, [r5, #0]
    a45a:	3101      	adds	r1, #1
    a45c:	2c00      	cmp	r4, #0
    a45e:	d1f5      	bne.n	a44c <strncpy+0x4>
    a460:	189a      	adds	r2, r3, r2
    a462:	429a      	cmp	r2, r3
    a464:	d002      	beq.n	a46c <strncpy+0x24>
    a466:	701c      	strb	r4, [r3, #0]
    a468:	3301      	adds	r3, #1
    a46a:	e7fa      	b.n	a462 <strncpy+0x1a>
    a46c:	bd30      	pop	{r4, r5, pc}

0000a46e <strstr>:
    a46e:	b510      	push	{r4, lr}
    a470:	7803      	ldrb	r3, [r0, #0]
    a472:	0002      	movs	r2, r0
    a474:	2b00      	cmp	r3, #0
    a476:	d105      	bne.n	a484 <strstr+0x16>
    a478:	7809      	ldrb	r1, [r1, #0]
    a47a:	0018      	movs	r0, r3
    a47c:	2900      	cmp	r1, #0
    a47e:	d00d      	beq.n	a49c <strstr+0x2e>
    a480:	e00f      	b.n	a4a2 <strstr+0x34>
    a482:	3201      	adds	r2, #1
    a484:	7813      	ldrb	r3, [r2, #0]
    a486:	2b00      	cmp	r3, #0
    a488:	d00a      	beq.n	a4a0 <strstr+0x32>
    a48a:	2300      	movs	r3, #0
    a48c:	5cc8      	ldrb	r0, [r1, r3]
    a48e:	2800      	cmp	r0, #0
    a490:	d004      	beq.n	a49c <strstr+0x2e>
    a492:	5cd4      	ldrb	r4, [r2, r3]
    a494:	4284      	cmp	r4, r0
    a496:	d1f4      	bne.n	a482 <strstr+0x14>
    a498:	3301      	adds	r3, #1
    a49a:	e7f7      	b.n	a48c <strstr+0x1e>
    a49c:	0010      	movs	r0, r2
    a49e:	e000      	b.n	a4a2 <strstr+0x34>
    a4a0:	0018      	movs	r0, r3
    a4a2:	bd10      	pop	{r4, pc}

0000a4a4 <sulp>:
    a4a4:	b570      	push	{r4, r5, r6, lr}
    a4a6:	0016      	movs	r6, r2
    a4a8:	000d      	movs	r5, r1
    a4aa:	f002 fe6f 	bl	d18c <__ulp>
    a4ae:	2e00      	cmp	r6, #0
    a4b0:	d00d      	beq.n	a4ce <sulp+0x2a>
    a4b2:	226b      	movs	r2, #107	; 0x6b
    a4b4:	006b      	lsls	r3, r5, #1
    a4b6:	0d5b      	lsrs	r3, r3, #21
    a4b8:	1ad3      	subs	r3, r2, r3
    a4ba:	2b00      	cmp	r3, #0
    a4bc:	dd07      	ble.n	a4ce <sulp+0x2a>
    a4be:	2400      	movs	r4, #0
    a4c0:	4a03      	ldr	r2, [pc, #12]	; (a4d0 <sulp+0x2c>)
    a4c2:	051b      	lsls	r3, r3, #20
    a4c4:	189d      	adds	r5, r3, r2
    a4c6:	002b      	movs	r3, r5
    a4c8:	0022      	movs	r2, r4
    a4ca:	f7fe f8c9 	bl	8660 <__aeabi_dmul>
    a4ce:	bd70      	pop	{r4, r5, r6, pc}
    a4d0:	3ff00000 	.word	0x3ff00000

0000a4d4 <_strtod_r>:
    a4d4:	2300      	movs	r3, #0
    a4d6:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4d8:	b0a3      	sub	sp, #140	; 0x8c
    a4da:	931e      	str	r3, [sp, #120]	; 0x78
    a4dc:	2600      	movs	r6, #0
    a4de:	2700      	movs	r7, #0
    a4e0:	000b      	movs	r3, r1
    a4e2:	9002      	str	r0, [sp, #8]
    a4e4:	9104      	str	r1, [sp, #16]
    a4e6:	9218      	str	r2, [sp, #96]	; 0x60
    a4e8:	931d      	str	r3, [sp, #116]	; 0x74
    a4ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a4ec:	781a      	ldrb	r2, [r3, #0]
    a4ee:	2a0d      	cmp	r2, #13
    a4f0:	d805      	bhi.n	a4fe <_strtod_r+0x2a>
    a4f2:	2a09      	cmp	r2, #9
    a4f4:	d214      	bcs.n	a520 <_strtod_r+0x4c>
    a4f6:	2a00      	cmp	r2, #0
    a4f8:	d100      	bne.n	a4fc <_strtod_r+0x28>
    a4fa:	e1bd      	b.n	a878 <_strtod_r+0x3a4>
    a4fc:	e012      	b.n	a524 <_strtod_r+0x50>
    a4fe:	2a2b      	cmp	r2, #43	; 0x2b
    a500:	d004      	beq.n	a50c <_strtod_r+0x38>
    a502:	2a2d      	cmp	r2, #45	; 0x2d
    a504:	d004      	beq.n	a510 <_strtod_r+0x3c>
    a506:	2a20      	cmp	r2, #32
    a508:	d10c      	bne.n	a524 <_strtod_r+0x50>
    a50a:	e009      	b.n	a520 <_strtod_r+0x4c>
    a50c:	2200      	movs	r2, #0
    a50e:	e000      	b.n	a512 <_strtod_r+0x3e>
    a510:	2201      	movs	r2, #1
    a512:	9210      	str	r2, [sp, #64]	; 0x40
    a514:	1c5a      	adds	r2, r3, #1
    a516:	921d      	str	r2, [sp, #116]	; 0x74
    a518:	785b      	ldrb	r3, [r3, #1]
    a51a:	2b00      	cmp	r3, #0
    a51c:	d104      	bne.n	a528 <_strtod_r+0x54>
    a51e:	e1ab      	b.n	a878 <_strtod_r+0x3a4>
    a520:	3301      	adds	r3, #1
    a522:	e7e1      	b.n	a4e8 <_strtod_r+0x14>
    a524:	2300      	movs	r3, #0
    a526:	9310      	str	r3, [sp, #64]	; 0x40
    a528:	2200      	movs	r2, #0
    a52a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    a52c:	9209      	str	r2, [sp, #36]	; 0x24
    a52e:	782b      	ldrb	r3, [r5, #0]
    a530:	2b30      	cmp	r3, #48	; 0x30
    a532:	d15d      	bne.n	a5f0 <_strtod_r+0x11c>
    a534:	786b      	ldrb	r3, [r5, #1]
    a536:	2b58      	cmp	r3, #88	; 0x58
    a538:	d001      	beq.n	a53e <_strtod_r+0x6a>
    a53a:	2b78      	cmp	r3, #120	; 0x78
    a53c:	d14c      	bne.n	a5d8 <_strtod_r+0x104>
    a53e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a540:	4ac2      	ldr	r2, [pc, #776]	; (a84c <_strtod_r+0x378>)
    a542:	9301      	str	r3, [sp, #4]
    a544:	ab1e      	add	r3, sp, #120	; 0x78
    a546:	9300      	str	r3, [sp, #0]
    a548:	a91d      	add	r1, sp, #116	; 0x74
    a54a:	ab1f      	add	r3, sp, #124	; 0x7c
    a54c:	9802      	ldr	r0, [sp, #8]
    a54e:	f001 ffed 	bl	c52c <__gethex>
    a552:	2407      	movs	r4, #7
    a554:	9003      	str	r0, [sp, #12]
    a556:	4004      	ands	r4, r0
    a558:	d101      	bne.n	a55e <_strtod_r+0x8a>
    a55a:	f000 fdbc 	bl	b0d6 <_strtod_r+0xc02>
    a55e:	2c06      	cmp	r4, #6
    a560:	d105      	bne.n	a56e <_strtod_r+0x9a>
    a562:	2300      	movs	r3, #0
    a564:	3501      	adds	r5, #1
    a566:	951d      	str	r5, [sp, #116]	; 0x74
    a568:	9310      	str	r3, [sp, #64]	; 0x40
    a56a:	f000 fdb4 	bl	b0d6 <_strtod_r+0xc02>
    a56e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    a570:	2a00      	cmp	r2, #0
    a572:	d007      	beq.n	a584 <_strtod_r+0xb0>
    a574:	2135      	movs	r1, #53	; 0x35
    a576:	a820      	add	r0, sp, #128	; 0x80
    a578:	f002 fef4 	bl	d364 <__copybits>
    a57c:	991e      	ldr	r1, [sp, #120]	; 0x78
    a57e:	9802      	ldr	r0, [sp, #8]
    a580:	f002 fb67 	bl	cc52 <_Bfree>
    a584:	2c06      	cmp	r4, #6
    a586:	d81d      	bhi.n	a5c4 <_strtod_r+0xf0>
    a588:	0020      	movs	r0, r4
    a58a:	f7fc f9fb 	bl	6984 <__gnu_thumb1_case_uqi>
    a58e:	0a04      	.short	0x0a04
    a590:	0a181507 	.word	0x0a181507
    a594:	04          	.byte	0x04
    a595:	00          	.byte	0x00
    a596:	2700      	movs	r7, #0
    a598:	003e      	movs	r6, r7
    a59a:	e013      	b.n	a5c4 <_strtod_r+0xf0>
    a59c:	9e20      	ldr	r6, [sp, #128]	; 0x80
    a59e:	9f21      	ldr	r7, [sp, #132]	; 0x84
    a5a0:	e010      	b.n	a5c4 <_strtod_r+0xf0>
    a5a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a5a4:	4aaa      	ldr	r2, [pc, #680]	; (a850 <_strtod_r+0x37c>)
    a5a6:	49ab      	ldr	r1, [pc, #684]	; (a854 <_strtod_r+0x380>)
    a5a8:	401a      	ands	r2, r3
    a5aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a5ac:	9e20      	ldr	r6, [sp, #128]	; 0x80
    a5ae:	185b      	adds	r3, r3, r1
    a5b0:	051b      	lsls	r3, r3, #20
    a5b2:	431a      	orrs	r2, r3
    a5b4:	0017      	movs	r7, r2
    a5b6:	e005      	b.n	a5c4 <_strtod_r+0xf0>
    a5b8:	4fa7      	ldr	r7, [pc, #668]	; (a858 <_strtod_r+0x384>)
    a5ba:	2600      	movs	r6, #0
    a5bc:	e002      	b.n	a5c4 <_strtod_r+0xf0>
    a5be:	2601      	movs	r6, #1
    a5c0:	4fa6      	ldr	r7, [pc, #664]	; (a85c <_strtod_r+0x388>)
    a5c2:	4276      	negs	r6, r6
    a5c4:	9b03      	ldr	r3, [sp, #12]
    a5c6:	071b      	lsls	r3, r3, #28
    a5c8:	d401      	bmi.n	a5ce <_strtod_r+0xfa>
    a5ca:	f000 fd84 	bl	b0d6 <_strtod_r+0xc02>
    a5ce:	2380      	movs	r3, #128	; 0x80
    a5d0:	061b      	lsls	r3, r3, #24
    a5d2:	431f      	orrs	r7, r3
    a5d4:	f000 fd7f 	bl	b0d6 <_strtod_r+0xc02>
    a5d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a5da:	1c5a      	adds	r2, r3, #1
    a5dc:	921d      	str	r2, [sp, #116]	; 0x74
    a5de:	785b      	ldrb	r3, [r3, #1]
    a5e0:	2b30      	cmp	r3, #48	; 0x30
    a5e2:	d0f9      	beq.n	a5d8 <_strtod_r+0x104>
    a5e4:	2b00      	cmp	r3, #0
    a5e6:	d101      	bne.n	a5ec <_strtod_r+0x118>
    a5e8:	f000 fd75 	bl	b0d6 <_strtod_r+0xc02>
    a5ec:	2301      	movs	r3, #1
    a5ee:	9309      	str	r3, [sp, #36]	; 0x24
    a5f0:	2500      	movs	r5, #0
    a5f2:	220a      	movs	r2, #10
    a5f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a5f6:	9508      	str	r5, [sp, #32]
    a5f8:	930c      	str	r3, [sp, #48]	; 0x30
    a5fa:	9506      	str	r5, [sp, #24]
    a5fc:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    a5fe:	7823      	ldrb	r3, [r4, #0]
    a600:	9303      	str	r3, [sp, #12]
    a602:	3b30      	subs	r3, #48	; 0x30
    a604:	b2d9      	uxtb	r1, r3
    a606:	2909      	cmp	r1, #9
    a608:	d810      	bhi.n	a62c <_strtod_r+0x158>
    a60a:	9906      	ldr	r1, [sp, #24]
    a60c:	2908      	cmp	r1, #8
    a60e:	dc04      	bgt.n	a61a <_strtod_r+0x146>
    a610:	9908      	ldr	r1, [sp, #32]
    a612:	4351      	muls	r1, r2
    a614:	185b      	adds	r3, r3, r1
    a616:	9308      	str	r3, [sp, #32]
    a618:	e002      	b.n	a620 <_strtod_r+0x14c>
    a61a:	0029      	movs	r1, r5
    a61c:	4351      	muls	r1, r2
    a61e:	185d      	adds	r5, r3, r1
    a620:	9b06      	ldr	r3, [sp, #24]
    a622:	3401      	adds	r4, #1
    a624:	3301      	adds	r3, #1
    a626:	9306      	str	r3, [sp, #24]
    a628:	941d      	str	r4, [sp, #116]	; 0x74
    a62a:	e7e7      	b.n	a5fc <_strtod_r+0x128>
    a62c:	9802      	ldr	r0, [sp, #8]
    a62e:	f002 fa65 	bl	cafc <_localeconv_r>
    a632:	6803      	ldr	r3, [r0, #0]
    a634:	9802      	ldr	r0, [sp, #8]
    a636:	9305      	str	r3, [sp, #20]
    a638:	f002 fa60 	bl	cafc <_localeconv_r>
    a63c:	6800      	ldr	r0, [r0, #0]
    a63e:	f7ff feea 	bl	a416 <strlen>
    a642:	9905      	ldr	r1, [sp, #20]
    a644:	0002      	movs	r2, r0
    a646:	0020      	movs	r0, r4
    a648:	f7ff feec 	bl	a424 <strncmp>
    a64c:	1e04      	subs	r4, r0, #0
    a64e:	d006      	beq.n	a65e <_strtod_r+0x18a>
    a650:	2000      	movs	r0, #0
    a652:	9a06      	ldr	r2, [sp, #24]
    a654:	9b03      	ldr	r3, [sp, #12]
    a656:	4684      	mov	ip, r0
    a658:	9203      	str	r2, [sp, #12]
    a65a:	9005      	str	r0, [sp, #20]
    a65c:	e05a      	b.n	a714 <_strtod_r+0x240>
    a65e:	9802      	ldr	r0, [sp, #8]
    a660:	f002 fa4c 	bl	cafc <_localeconv_r>
    a664:	6800      	ldr	r0, [r0, #0]
    a666:	f7ff fed6 	bl	a416 <strlen>
    a66a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a66c:	9a06      	ldr	r2, [sp, #24]
    a66e:	1818      	adds	r0, r3, r0
    a670:	901d      	str	r0, [sp, #116]	; 0x74
    a672:	7803      	ldrb	r3, [r0, #0]
    a674:	1e10      	subs	r0, r2, #0
    a676:	d13e      	bne.n	a6f6 <_strtod_r+0x222>
    a678:	2b30      	cmp	r3, #48	; 0x30
    a67a:	d105      	bne.n	a688 <_strtod_r+0x1b4>
    a67c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a67e:	3001      	adds	r0, #1
    a680:	1c5a      	adds	r2, r3, #1
    a682:	921d      	str	r2, [sp, #116]	; 0x74
    a684:	785b      	ldrb	r3, [r3, #1]
    a686:	e7f7      	b.n	a678 <_strtod_r+0x1a4>
    a688:	001a      	movs	r2, r3
    a68a:	3a31      	subs	r2, #49	; 0x31
    a68c:	2a08      	cmp	r2, #8
    a68e:	d83c      	bhi.n	a70a <_strtod_r+0x236>
    a690:	4684      	mov	ip, r0
    a692:	2000      	movs	r0, #0
    a694:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    a696:	9003      	str	r0, [sp, #12]
    a698:	920c      	str	r2, [sp, #48]	; 0x30
    a69a:	3b30      	subs	r3, #48	; 0x30
    a69c:	1c42      	adds	r2, r0, #1
    a69e:	2b00      	cmp	r3, #0
    a6a0:	d023      	beq.n	a6ea <_strtod_r+0x216>
    a6a2:	210a      	movs	r1, #10
    a6a4:	4494      	add	ip, r2
    a6a6:	9a03      	ldr	r2, [sp, #12]
    a6a8:	1810      	adds	r0, r2, r0
    a6aa:	4282      	cmp	r2, r0
    a6ac:	d00b      	beq.n	a6c6 <_strtod_r+0x1f2>
    a6ae:	3201      	adds	r2, #1
    a6b0:	1e54      	subs	r4, r2, #1
    a6b2:	2c08      	cmp	r4, #8
    a6b4:	d803      	bhi.n	a6be <_strtod_r+0x1ea>
    a6b6:	9c08      	ldr	r4, [sp, #32]
    a6b8:	434c      	muls	r4, r1
    a6ba:	9408      	str	r4, [sp, #32]
    a6bc:	e7f5      	b.n	a6aa <_strtod_r+0x1d6>
    a6be:	2a10      	cmp	r2, #16
    a6c0:	dcf3      	bgt.n	a6aa <_strtod_r+0x1d6>
    a6c2:	434d      	muls	r5, r1
    a6c4:	e7f1      	b.n	a6aa <_strtod_r+0x1d6>
    a6c6:	1c51      	adds	r1, r2, #1
    a6c8:	9103      	str	r1, [sp, #12]
    a6ca:	2a08      	cmp	r2, #8
    a6cc:	dc06      	bgt.n	a6dc <_strtod_r+0x208>
    a6ce:	220a      	movs	r2, #10
    a6d0:	9908      	ldr	r1, [sp, #32]
    a6d2:	434a      	muls	r2, r1
    a6d4:	189b      	adds	r3, r3, r2
    a6d6:	9308      	str	r3, [sp, #32]
    a6d8:	2200      	movs	r2, #0
    a6da:	e006      	b.n	a6ea <_strtod_r+0x216>
    a6dc:	9903      	ldr	r1, [sp, #12]
    a6de:	2200      	movs	r2, #0
    a6e0:	2910      	cmp	r1, #16
    a6e2:	dc02      	bgt.n	a6ea <_strtod_r+0x216>
    a6e4:	210a      	movs	r1, #10
    a6e6:	4369      	muls	r1, r5
    a6e8:	185d      	adds	r5, r3, r1
    a6ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a6ec:	0010      	movs	r0, r2
    a6ee:	1c59      	adds	r1, r3, #1
    a6f0:	911d      	str	r1, [sp, #116]	; 0x74
    a6f2:	785b      	ldrb	r3, [r3, #1]
    a6f4:	e003      	b.n	a6fe <_strtod_r+0x22a>
    a6f6:	0020      	movs	r0, r4
    a6f8:	46a4      	mov	ip, r4
    a6fa:	9a06      	ldr	r2, [sp, #24]
    a6fc:	9203      	str	r2, [sp, #12]
    a6fe:	001a      	movs	r2, r3
    a700:	3a30      	subs	r2, #48	; 0x30
    a702:	2a09      	cmp	r2, #9
    a704:	d9c9      	bls.n	a69a <_strtod_r+0x1c6>
    a706:	2201      	movs	r2, #1
    a708:	e003      	b.n	a712 <_strtod_r+0x23e>
    a70a:	2200      	movs	r2, #0
    a70c:	9203      	str	r2, [sp, #12]
    a70e:	4694      	mov	ip, r2
    a710:	3201      	adds	r2, #1
    a712:	9205      	str	r2, [sp, #20]
    a714:	2220      	movs	r2, #32
    a716:	0019      	movs	r1, r3
    a718:	4391      	bics	r1, r2
    a71a:	000a      	movs	r2, r1
    a71c:	2100      	movs	r1, #0
    a71e:	2a45      	cmp	r2, #69	; 0x45
    a720:	d14d      	bne.n	a7be <_strtod_r+0x2ea>
    a722:	9b03      	ldr	r3, [sp, #12]
    a724:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a726:	4303      	orrs	r3, r0
    a728:	4313      	orrs	r3, r2
    a72a:	428b      	cmp	r3, r1
    a72c:	d100      	bne.n	a730 <_strtod_r+0x25c>
    a72e:	e0a3      	b.n	a878 <_strtod_r+0x3a4>
    a730:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a732:	9304      	str	r3, [sp, #16]
    a734:	3301      	adds	r3, #1
    a736:	931d      	str	r3, [sp, #116]	; 0x74
    a738:	9b04      	ldr	r3, [sp, #16]
    a73a:	785b      	ldrb	r3, [r3, #1]
    a73c:	2b2b      	cmp	r3, #43	; 0x2b
    a73e:	d004      	beq.n	a74a <_strtod_r+0x276>
    a740:	000c      	movs	r4, r1
    a742:	2b2d      	cmp	r3, #45	; 0x2d
    a744:	d107      	bne.n	a756 <_strtod_r+0x282>
    a746:	2401      	movs	r4, #1
    a748:	e000      	b.n	a74c <_strtod_r+0x278>
    a74a:	000c      	movs	r4, r1
    a74c:	9b04      	ldr	r3, [sp, #16]
    a74e:	3302      	adds	r3, #2
    a750:	931d      	str	r3, [sp, #116]	; 0x74
    a752:	9b04      	ldr	r3, [sp, #16]
    a754:	789b      	ldrb	r3, [r3, #2]
    a756:	001a      	movs	r2, r3
    a758:	3a30      	subs	r2, #48	; 0x30
    a75a:	2a09      	cmp	r2, #9
    a75c:	d82c      	bhi.n	a7b8 <_strtod_r+0x2e4>
    a75e:	2b30      	cmp	r3, #48	; 0x30
    a760:	d104      	bne.n	a76c <_strtod_r+0x298>
    a762:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a764:	1c5a      	adds	r2, r3, #1
    a766:	921d      	str	r2, [sp, #116]	; 0x74
    a768:	785b      	ldrb	r3, [r3, #1]
    a76a:	e7f8      	b.n	a75e <_strtod_r+0x28a>
    a76c:	001a      	movs	r2, r3
    a76e:	3a31      	subs	r2, #49	; 0x31
    a770:	2100      	movs	r1, #0
    a772:	2a08      	cmp	r2, #8
    a774:	d823      	bhi.n	a7be <_strtod_r+0x2ea>
    a776:	3b30      	subs	r3, #48	; 0x30
    a778:	930a      	str	r3, [sp, #40]	; 0x28
    a77a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a77c:	9311      	str	r3, [sp, #68]	; 0x44
    a77e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a780:	1c59      	adds	r1, r3, #1
    a782:	911d      	str	r1, [sp, #116]	; 0x74
    a784:	785b      	ldrb	r3, [r3, #1]
    a786:	001a      	movs	r2, r3
    a788:	3a30      	subs	r2, #48	; 0x30
    a78a:	2a09      	cmp	r2, #9
    a78c:	d806      	bhi.n	a79c <_strtod_r+0x2c8>
    a78e:	220a      	movs	r2, #10
    a790:	990a      	ldr	r1, [sp, #40]	; 0x28
    a792:	434a      	muls	r2, r1
    a794:	18d2      	adds	r2, r2, r3
    a796:	3a30      	subs	r2, #48	; 0x30
    a798:	920a      	str	r2, [sp, #40]	; 0x28
    a79a:	e7f0      	b.n	a77e <_strtod_r+0x2aa>
    a79c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a79e:	1a8a      	subs	r2, r1, r2
    a7a0:	492f      	ldr	r1, [pc, #188]	; (a860 <_strtod_r+0x38c>)
    a7a2:	2a08      	cmp	r2, #8
    a7a4:	dc04      	bgt.n	a7b0 <_strtod_r+0x2dc>
    a7a6:	990a      	ldr	r1, [sp, #40]	; 0x28
    a7a8:	4a2d      	ldr	r2, [pc, #180]	; (a860 <_strtod_r+0x38c>)
    a7aa:	4291      	cmp	r1, r2
    a7ac:	dd00      	ble.n	a7b0 <_strtod_r+0x2dc>
    a7ae:	0011      	movs	r1, r2
    a7b0:	2c00      	cmp	r4, #0
    a7b2:	d004      	beq.n	a7be <_strtod_r+0x2ea>
    a7b4:	4249      	negs	r1, r1
    a7b6:	e002      	b.n	a7be <_strtod_r+0x2ea>
    a7b8:	2100      	movs	r1, #0
    a7ba:	9a04      	ldr	r2, [sp, #16]
    a7bc:	921d      	str	r2, [sp, #116]	; 0x74
    a7be:	9a03      	ldr	r2, [sp, #12]
    a7c0:	2a00      	cmp	r2, #0
    a7c2:	d164      	bne.n	a88e <_strtod_r+0x3ba>
    a7c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a7c6:	4310      	orrs	r0, r2
    a7c8:	d001      	beq.n	a7ce <_strtod_r+0x2fa>
    a7ca:	f000 fc84 	bl	b0d6 <_strtod_r+0xc02>
    a7ce:	9a05      	ldr	r2, [sp, #20]
    a7d0:	2a00      	cmp	r2, #0
    a7d2:	d151      	bne.n	a878 <_strtod_r+0x3a4>
    a7d4:	2b4e      	cmp	r3, #78	; 0x4e
    a7d6:	d01c      	beq.n	a812 <_strtod_r+0x33e>
    a7d8:	dc02      	bgt.n	a7e0 <_strtod_r+0x30c>
    a7da:	2b49      	cmp	r3, #73	; 0x49
    a7dc:	d005      	beq.n	a7ea <_strtod_r+0x316>
    a7de:	e04b      	b.n	a878 <_strtod_r+0x3a4>
    a7e0:	2b69      	cmp	r3, #105	; 0x69
    a7e2:	d002      	beq.n	a7ea <_strtod_r+0x316>
    a7e4:	2b6e      	cmp	r3, #110	; 0x6e
    a7e6:	d014      	beq.n	a812 <_strtod_r+0x33e>
    a7e8:	e046      	b.n	a878 <_strtod_r+0x3a4>
    a7ea:	491e      	ldr	r1, [pc, #120]	; (a864 <_strtod_r+0x390>)
    a7ec:	a81d      	add	r0, sp, #116	; 0x74
    a7ee:	f002 f8d9 	bl	c9a4 <__match>
    a7f2:	2800      	cmp	r0, #0
    a7f4:	d040      	beq.n	a878 <_strtod_r+0x3a4>
    a7f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a7f8:	491b      	ldr	r1, [pc, #108]	; (a868 <_strtod_r+0x394>)
    a7fa:	3b01      	subs	r3, #1
    a7fc:	a81d      	add	r0, sp, #116	; 0x74
    a7fe:	931d      	str	r3, [sp, #116]	; 0x74
    a800:	f002 f8d0 	bl	c9a4 <__match>
    a804:	2800      	cmp	r0, #0
    a806:	d102      	bne.n	a80e <_strtod_r+0x33a>
    a808:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a80a:	3301      	adds	r3, #1
    a80c:	931d      	str	r3, [sp, #116]	; 0x74
    a80e:	4f12      	ldr	r7, [pc, #72]	; (a858 <_strtod_r+0x384>)
    a810:	e018      	b.n	a844 <_strtod_r+0x370>
    a812:	4916      	ldr	r1, [pc, #88]	; (a86c <_strtod_r+0x398>)
    a814:	a81d      	add	r0, sp, #116	; 0x74
    a816:	f002 f8c5 	bl	c9a4 <__match>
    a81a:	2800      	cmp	r0, #0
    a81c:	d02c      	beq.n	a878 <_strtod_r+0x3a4>
    a81e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a820:	781b      	ldrb	r3, [r3, #0]
    a822:	2b28      	cmp	r3, #40	; 0x28
    a824:	d10d      	bne.n	a842 <_strtod_r+0x36e>
    a826:	aa20      	add	r2, sp, #128	; 0x80
    a828:	4911      	ldr	r1, [pc, #68]	; (a870 <_strtod_r+0x39c>)
    a82a:	a81d      	add	r0, sp, #116	; 0x74
    a82c:	f002 f8ce 	bl	c9cc <__hexnan>
    a830:	2805      	cmp	r0, #5
    a832:	d106      	bne.n	a842 <_strtod_r+0x36e>
    a834:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a836:	4a08      	ldr	r2, [pc, #32]	; (a858 <_strtod_r+0x384>)
    a838:	9e20      	ldr	r6, [sp, #128]	; 0x80
    a83a:	431a      	orrs	r2, r3
    a83c:	0017      	movs	r7, r2
    a83e:	f000 fc4a 	bl	b0d6 <_strtod_r+0xc02>
    a842:	4f0c      	ldr	r7, [pc, #48]	; (a874 <_strtod_r+0x3a0>)
    a844:	2600      	movs	r6, #0
    a846:	f000 fc46 	bl	b0d6 <_strtod_r+0xc02>
    a84a:	46c0      	nop			; (mov r8, r8)
    a84c:	0000ec78 	.word	0x0000ec78
    a850:	ffefffff 	.word	0xffefffff
    a854:	00000433 	.word	0x00000433
    a858:	7ff00000 	.word	0x7ff00000
    a85c:	7fffffff 	.word	0x7fffffff
    a860:	00004e1f 	.word	0x00004e1f
    a864:	0000e687 	.word	0x0000e687
    a868:	0000edcc 	.word	0x0000edcc
    a86c:	0000e67f 	.word	0x0000e67f
    a870:	0000ec8c 	.word	0x0000ec8c
    a874:	fff80000 	.word	0xfff80000
    a878:	9b04      	ldr	r3, [sp, #16]
    a87a:	931d      	str	r3, [sp, #116]	; 0x74
    a87c:	2300      	movs	r3, #0
    a87e:	9310      	str	r3, [sp, #64]	; 0x40
    a880:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a882:	2b00      	cmp	r3, #0
    a884:	d001      	beq.n	a88a <_strtod_r+0x3b6>
    a886:	f000 fc29 	bl	b0dc <_strtod_r+0xc08>
    a88a:	f000 fc32 	bl	b0f2 <_strtod_r+0xc1e>
    a88e:	4663      	mov	r3, ip
    a890:	1acb      	subs	r3, r1, r3
    a892:	9305      	str	r3, [sp, #20]
    a894:	9b06      	ldr	r3, [sp, #24]
    a896:	2b00      	cmp	r3, #0
    a898:	d101      	bne.n	a89e <_strtod_r+0x3ca>
    a89a:	9b03      	ldr	r3, [sp, #12]
    a89c:	9306      	str	r3, [sp, #24]
    a89e:	9c03      	ldr	r4, [sp, #12]
    a8a0:	2c10      	cmp	r4, #16
    a8a2:	dd00      	ble.n	a8a6 <_strtod_r+0x3d2>
    a8a4:	2410      	movs	r4, #16
    a8a6:	9808      	ldr	r0, [sp, #32]
    a8a8:	f7fe fcfe 	bl	92a8 <__aeabi_ui2d>
    a8ac:	0006      	movs	r6, r0
    a8ae:	000f      	movs	r7, r1
    a8b0:	2c09      	cmp	r4, #9
    a8b2:	dd15      	ble.n	a8e0 <_strtod_r+0x40c>
    a8b4:	0023      	movs	r3, r4
    a8b6:	4a87      	ldr	r2, [pc, #540]	; (aad4 <_strtod_r+0x600>)
    a8b8:	3b09      	subs	r3, #9
    a8ba:	00db      	lsls	r3, r3, #3
    a8bc:	18d3      	adds	r3, r2, r3
    a8be:	681a      	ldr	r2, [r3, #0]
    a8c0:	685b      	ldr	r3, [r3, #4]
    a8c2:	f7fd fecd 	bl	8660 <__aeabi_dmul>
    a8c6:	0006      	movs	r6, r0
    a8c8:	0028      	movs	r0, r5
    a8ca:	000f      	movs	r7, r1
    a8cc:	f7fe fcec 	bl	92a8 <__aeabi_ui2d>
    a8d0:	0002      	movs	r2, r0
    a8d2:	000b      	movs	r3, r1
    a8d4:	0030      	movs	r0, r6
    a8d6:	0039      	movs	r1, r7
    a8d8:	f7fc ff72 	bl	77c0 <__aeabi_dadd>
    a8dc:	0006      	movs	r6, r0
    a8de:	000f      	movs	r7, r1
    a8e0:	9b03      	ldr	r3, [sp, #12]
    a8e2:	2b0f      	cmp	r3, #15
    a8e4:	dc3a      	bgt.n	a95c <_strtod_r+0x488>
    a8e6:	9b05      	ldr	r3, [sp, #20]
    a8e8:	2b00      	cmp	r3, #0
    a8ea:	d101      	bne.n	a8f0 <_strtod_r+0x41c>
    a8ec:	f000 fbf3 	bl	b0d6 <_strtod_r+0xc02>
    a8f0:	dd26      	ble.n	a940 <_strtod_r+0x46c>
    a8f2:	2b16      	cmp	r3, #22
    a8f4:	dc07      	bgt.n	a906 <_strtod_r+0x432>
    a8f6:	4977      	ldr	r1, [pc, #476]	; (aad4 <_strtod_r+0x600>)
    a8f8:	00db      	lsls	r3, r3, #3
    a8fa:	18c9      	adds	r1, r1, r3
    a8fc:	0032      	movs	r2, r6
    a8fe:	6808      	ldr	r0, [r1, #0]
    a900:	6849      	ldr	r1, [r1, #4]
    a902:	003b      	movs	r3, r7
    a904:	e017      	b.n	a936 <_strtod_r+0x462>
    a906:	2325      	movs	r3, #37	; 0x25
    a908:	9a03      	ldr	r2, [sp, #12]
    a90a:	1a9b      	subs	r3, r3, r2
    a90c:	9a05      	ldr	r2, [sp, #20]
    a90e:	429a      	cmp	r2, r3
    a910:	dc24      	bgt.n	a95c <_strtod_r+0x488>
    a912:	240f      	movs	r4, #15
    a914:	9b03      	ldr	r3, [sp, #12]
    a916:	4d6f      	ldr	r5, [pc, #444]	; (aad4 <_strtod_r+0x600>)
    a918:	1ae4      	subs	r4, r4, r3
    a91a:	00e1      	lsls	r1, r4, #3
    a91c:	1869      	adds	r1, r5, r1
    a91e:	0032      	movs	r2, r6
    a920:	6808      	ldr	r0, [r1, #0]
    a922:	6849      	ldr	r1, [r1, #4]
    a924:	003b      	movs	r3, r7
    a926:	f7fd fe9b 	bl	8660 <__aeabi_dmul>
    a92a:	9b05      	ldr	r3, [sp, #20]
    a92c:	1b1c      	subs	r4, r3, r4
    a92e:	00e4      	lsls	r4, r4, #3
    a930:	192d      	adds	r5, r5, r4
    a932:	682a      	ldr	r2, [r5, #0]
    a934:	686b      	ldr	r3, [r5, #4]
    a936:	f7fd fe93 	bl	8660 <__aeabi_dmul>
    a93a:	0006      	movs	r6, r0
    a93c:	000f      	movs	r7, r1
    a93e:	e3ca      	b.n	b0d6 <_strtod_r+0xc02>
    a940:	9b05      	ldr	r3, [sp, #20]
    a942:	3316      	adds	r3, #22
    a944:	db0a      	blt.n	a95c <_strtod_r+0x488>
    a946:	9b05      	ldr	r3, [sp, #20]
    a948:	0030      	movs	r0, r6
    a94a:	00da      	lsls	r2, r3, #3
    a94c:	4b61      	ldr	r3, [pc, #388]	; (aad4 <_strtod_r+0x600>)
    a94e:	0039      	movs	r1, r7
    a950:	1a9b      	subs	r3, r3, r2
    a952:	681a      	ldr	r2, [r3, #0]
    a954:	685b      	ldr	r3, [r3, #4]
    a956:	f7fd fa5f 	bl	7e18 <__aeabi_ddiv>
    a95a:	e7ee      	b.n	a93a <_strtod_r+0x466>
    a95c:	9b03      	ldr	r3, [sp, #12]
    a95e:	1b1c      	subs	r4, r3, r4
    a960:	9b05      	ldr	r3, [sp, #20]
    a962:	18e4      	adds	r4, r4, r3
    a964:	2c00      	cmp	r4, #0
    a966:	dd59      	ble.n	aa1c <_strtod_r+0x548>
    a968:	230f      	movs	r3, #15
    a96a:	4023      	ands	r3, r4
    a96c:	d00a      	beq.n	a984 <_strtod_r+0x4b0>
    a96e:	4959      	ldr	r1, [pc, #356]	; (aad4 <_strtod_r+0x600>)
    a970:	00db      	lsls	r3, r3, #3
    a972:	18c9      	adds	r1, r1, r3
    a974:	0032      	movs	r2, r6
    a976:	6808      	ldr	r0, [r1, #0]
    a978:	6849      	ldr	r1, [r1, #4]
    a97a:	003b      	movs	r3, r7
    a97c:	f7fd fe70 	bl	8660 <__aeabi_dmul>
    a980:	0006      	movs	r6, r0
    a982:	000f      	movs	r7, r1
    a984:	230f      	movs	r3, #15
    a986:	439c      	bics	r4, r3
    a988:	d100      	bne.n	a98c <_strtod_r+0x4b8>
    a98a:	e0b3      	b.n	aaf4 <_strtod_r+0x620>
    a98c:	3326      	adds	r3, #38	; 0x26
    a98e:	33ff      	adds	r3, #255	; 0xff
    a990:	429c      	cmp	r4, r3
    a992:	dd0d      	ble.n	a9b0 <_strtod_r+0x4dc>
    a994:	2400      	movs	r4, #0
    a996:	9403      	str	r4, [sp, #12]
    a998:	9408      	str	r4, [sp, #32]
    a99a:	9405      	str	r4, [sp, #20]
    a99c:	2322      	movs	r3, #34	; 0x22
    a99e:	2600      	movs	r6, #0
    a9a0:	9a02      	ldr	r2, [sp, #8]
    a9a2:	4f4d      	ldr	r7, [pc, #308]	; (aad8 <_strtod_r+0x604>)
    a9a4:	6013      	str	r3, [r2, #0]
    a9a6:	9b08      	ldr	r3, [sp, #32]
    a9a8:	42b3      	cmp	r3, r6
    a9aa:	d000      	beq.n	a9ae <_strtod_r+0x4da>
    a9ac:	e37f      	b.n	b0ae <_strtod_r+0xbda>
    a9ae:	e392      	b.n	b0d6 <_strtod_r+0xc02>
    a9b0:	2300      	movs	r3, #0
    a9b2:	0030      	movs	r0, r6
    a9b4:	0039      	movs	r1, r7
    a9b6:	001d      	movs	r5, r3
    a9b8:	1124      	asrs	r4, r4, #4
    a9ba:	2c01      	cmp	r4, #1
    a9bc:	dd0d      	ble.n	a9da <_strtod_r+0x506>
    a9be:	2201      	movs	r2, #1
    a9c0:	4214      	tst	r4, r2
    a9c2:	d007      	beq.n	a9d4 <_strtod_r+0x500>
    a9c4:	4a45      	ldr	r2, [pc, #276]	; (aadc <_strtod_r+0x608>)
    a9c6:	00eb      	lsls	r3, r5, #3
    a9c8:	189b      	adds	r3, r3, r2
    a9ca:	681a      	ldr	r2, [r3, #0]
    a9cc:	685b      	ldr	r3, [r3, #4]
    a9ce:	f7fd fe47 	bl	8660 <__aeabi_dmul>
    a9d2:	2301      	movs	r3, #1
    a9d4:	3501      	adds	r5, #1
    a9d6:	1064      	asrs	r4, r4, #1
    a9d8:	e7ef      	b.n	a9ba <_strtod_r+0x4e6>
    a9da:	2b00      	cmp	r3, #0
    a9dc:	d001      	beq.n	a9e2 <_strtod_r+0x50e>
    a9de:	0006      	movs	r6, r0
    a9e0:	000f      	movs	r7, r1
    a9e2:	4b3f      	ldr	r3, [pc, #252]	; (aae0 <_strtod_r+0x60c>)
    a9e4:	00ed      	lsls	r5, r5, #3
    a9e6:	18ff      	adds	r7, r7, r3
    a9e8:	4b3c      	ldr	r3, [pc, #240]	; (aadc <_strtod_r+0x608>)
    a9ea:	0032      	movs	r2, r6
    a9ec:	195d      	adds	r5, r3, r5
    a9ee:	6828      	ldr	r0, [r5, #0]
    a9f0:	6869      	ldr	r1, [r5, #4]
    a9f2:	003b      	movs	r3, r7
    a9f4:	f7fd fe34 	bl	8660 <__aeabi_dmul>
    a9f8:	4b37      	ldr	r3, [pc, #220]	; (aad8 <_strtod_r+0x604>)
    a9fa:	000f      	movs	r7, r1
    a9fc:	400b      	ands	r3, r1
    a9fe:	4939      	ldr	r1, [pc, #228]	; (aae4 <_strtod_r+0x610>)
    aa00:	0006      	movs	r6, r0
    aa02:	428b      	cmp	r3, r1
    aa04:	d8c6      	bhi.n	a994 <_strtod_r+0x4c0>
    aa06:	4938      	ldr	r1, [pc, #224]	; (aae8 <_strtod_r+0x614>)
    aa08:	428b      	cmp	r3, r1
    aa0a:	d903      	bls.n	aa14 <_strtod_r+0x540>
    aa0c:	2601      	movs	r6, #1
    aa0e:	4f37      	ldr	r7, [pc, #220]	; (aaec <_strtod_r+0x618>)
    aa10:	4276      	negs	r6, r6
    aa12:	e06f      	b.n	aaf4 <_strtod_r+0x620>
    aa14:	23d4      	movs	r3, #212	; 0xd4
    aa16:	049b      	lsls	r3, r3, #18
    aa18:	18ff      	adds	r7, r7, r3
    aa1a:	e06b      	b.n	aaf4 <_strtod_r+0x620>
    aa1c:	2c00      	cmp	r4, #0
    aa1e:	d069      	beq.n	aaf4 <_strtod_r+0x620>
    aa20:	230f      	movs	r3, #15
    aa22:	4264      	negs	r4, r4
    aa24:	4023      	ands	r3, r4
    aa26:	d00a      	beq.n	aa3e <_strtod_r+0x56a>
    aa28:	4a2a      	ldr	r2, [pc, #168]	; (aad4 <_strtod_r+0x600>)
    aa2a:	00db      	lsls	r3, r3, #3
    aa2c:	18d3      	adds	r3, r2, r3
    aa2e:	0030      	movs	r0, r6
    aa30:	681a      	ldr	r2, [r3, #0]
    aa32:	685b      	ldr	r3, [r3, #4]
    aa34:	0039      	movs	r1, r7
    aa36:	f7fd f9ef 	bl	7e18 <__aeabi_ddiv>
    aa3a:	0006      	movs	r6, r0
    aa3c:	000f      	movs	r7, r1
    aa3e:	1124      	asrs	r4, r4, #4
    aa40:	d058      	beq.n	aaf4 <_strtod_r+0x620>
    aa42:	2c1f      	cmp	r4, #31
    aa44:	dd04      	ble.n	aa50 <_strtod_r+0x57c>
    aa46:	2400      	movs	r4, #0
    aa48:	9403      	str	r4, [sp, #12]
    aa4a:	9408      	str	r4, [sp, #32]
    aa4c:	9405      	str	r4, [sp, #20]
    aa4e:	e126      	b.n	ac9e <_strtod_r+0x7ca>
    aa50:	2300      	movs	r3, #0
    aa52:	9304      	str	r3, [sp, #16]
    aa54:	06e3      	lsls	r3, r4, #27
    aa56:	d501      	bpl.n	aa5c <_strtod_r+0x588>
    aa58:	236a      	movs	r3, #106	; 0x6a
    aa5a:	9304      	str	r3, [sp, #16]
    aa5c:	0030      	movs	r0, r6
    aa5e:	0039      	movs	r1, r7
    aa60:	2300      	movs	r3, #0
    aa62:	4d23      	ldr	r5, [pc, #140]	; (aaf0 <_strtod_r+0x61c>)
    aa64:	2c00      	cmp	r4, #0
    aa66:	dd0a      	ble.n	aa7e <_strtod_r+0x5aa>
    aa68:	2201      	movs	r2, #1
    aa6a:	4214      	tst	r4, r2
    aa6c:	d004      	beq.n	aa78 <_strtod_r+0x5a4>
    aa6e:	682a      	ldr	r2, [r5, #0]
    aa70:	686b      	ldr	r3, [r5, #4]
    aa72:	f7fd fdf5 	bl	8660 <__aeabi_dmul>
    aa76:	2301      	movs	r3, #1
    aa78:	1064      	asrs	r4, r4, #1
    aa7a:	3508      	adds	r5, #8
    aa7c:	e7f2      	b.n	aa64 <_strtod_r+0x590>
    aa7e:	2b00      	cmp	r3, #0
    aa80:	d001      	beq.n	aa86 <_strtod_r+0x5b2>
    aa82:	0006      	movs	r6, r0
    aa84:	000f      	movs	r7, r1
    aa86:	9b04      	ldr	r3, [sp, #16]
    aa88:	2b00      	cmp	r3, #0
    aa8a:	d019      	beq.n	aac0 <_strtod_r+0x5ec>
    aa8c:	226b      	movs	r2, #107	; 0x6b
    aa8e:	007b      	lsls	r3, r7, #1
    aa90:	0d5b      	lsrs	r3, r3, #21
    aa92:	0039      	movs	r1, r7
    aa94:	1ad3      	subs	r3, r2, r3
    aa96:	2b00      	cmp	r3, #0
    aa98:	dd12      	ble.n	aac0 <_strtod_r+0x5ec>
    aa9a:	2b1f      	cmp	r3, #31
    aa9c:	dd0c      	ble.n	aab8 <_strtod_r+0x5e4>
    aa9e:	2600      	movs	r6, #0
    aaa0:	2b34      	cmp	r3, #52	; 0x34
    aaa2:	dd02      	ble.n	aaaa <_strtod_r+0x5d6>
    aaa4:	27dc      	movs	r7, #220	; 0xdc
    aaa6:	04bf      	lsls	r7, r7, #18
    aaa8:	e00a      	b.n	aac0 <_strtod_r+0x5ec>
    aaaa:	2201      	movs	r2, #1
    aaac:	3b20      	subs	r3, #32
    aaae:	4252      	negs	r2, r2
    aab0:	409a      	lsls	r2, r3
    aab2:	4011      	ands	r1, r2
    aab4:	000f      	movs	r7, r1
    aab6:	e003      	b.n	aac0 <_strtod_r+0x5ec>
    aab8:	2201      	movs	r2, #1
    aaba:	4252      	negs	r2, r2
    aabc:	409a      	lsls	r2, r3
    aabe:	4016      	ands	r6, r2
    aac0:	2200      	movs	r2, #0
    aac2:	2300      	movs	r3, #0
    aac4:	0030      	movs	r0, r6
    aac6:	0039      	movs	r1, r7
    aac8:	f7fc f8ec 	bl	6ca4 <__aeabi_dcmpeq>
    aacc:	2800      	cmp	r0, #0
    aace:	d1ba      	bne.n	aa46 <_strtod_r+0x572>
    aad0:	e012      	b.n	aaf8 <_strtod_r+0x624>
    aad2:	46c0      	nop			; (mov r8, r8)
    aad4:	0000ee40 	.word	0x0000ee40
    aad8:	7ff00000 	.word	0x7ff00000
    aadc:	0000ef08 	.word	0x0000ef08
    aae0:	fcb00000 	.word	0xfcb00000
    aae4:	7ca00000 	.word	0x7ca00000
    aae8:	7c900000 	.word	0x7c900000
    aaec:	7fefffff 	.word	0x7fefffff
    aaf0:	0000eca0 	.word	0x0000eca0
    aaf4:	2300      	movs	r3, #0
    aaf6:	9304      	str	r3, [sp, #16]
    aaf8:	9b08      	ldr	r3, [sp, #32]
    aafa:	9a06      	ldr	r2, [sp, #24]
    aafc:	9300      	str	r3, [sp, #0]
    aafe:	990c      	ldr	r1, [sp, #48]	; 0x30
    ab00:	9b03      	ldr	r3, [sp, #12]
    ab02:	9802      	ldr	r0, [sp, #8]
    ab04:	f002 f8fb 	bl	ccfe <__s2b>
    ab08:	9008      	str	r0, [sp, #32]
    ab0a:	2800      	cmp	r0, #0
    ab0c:	d100      	bne.n	ab10 <_strtod_r+0x63c>
    ab0e:	e741      	b.n	a994 <_strtod_r+0x4c0>
    ab10:	9b05      	ldr	r3, [sp, #20]
    ab12:	2400      	movs	r4, #0
    ab14:	425a      	negs	r2, r3
    ab16:	17db      	asrs	r3, r3, #31
    ab18:	401a      	ands	r2, r3
    ab1a:	9b05      	ldr	r3, [sp, #20]
    ab1c:	9213      	str	r2, [sp, #76]	; 0x4c
    ab1e:	43db      	mvns	r3, r3
    ab20:	9a05      	ldr	r2, [sp, #20]
    ab22:	17db      	asrs	r3, r3, #31
    ab24:	401a      	ands	r2, r3
    ab26:	9211      	str	r2, [sp, #68]	; 0x44
    ab28:	9403      	str	r4, [sp, #12]
    ab2a:	9b08      	ldr	r3, [sp, #32]
    ab2c:	9802      	ldr	r0, [sp, #8]
    ab2e:	6859      	ldr	r1, [r3, #4]
    ab30:	f002 f857 	bl	cbe2 <_Balloc>
    ab34:	9005      	str	r0, [sp, #20]
    ab36:	2800      	cmp	r0, #0
    ab38:	d100      	bne.n	ab3c <_strtod_r+0x668>
    ab3a:	e72f      	b.n	a99c <_strtod_r+0x4c8>
    ab3c:	9b08      	ldr	r3, [sp, #32]
    ab3e:	9908      	ldr	r1, [sp, #32]
    ab40:	691b      	ldr	r3, [r3, #16]
    ab42:	310c      	adds	r1, #12
    ab44:	1c9a      	adds	r2, r3, #2
    ab46:	0092      	lsls	r2, r2, #2
    ab48:	300c      	adds	r0, #12
    ab4a:	9306      	str	r3, [sp, #24]
    ab4c:	f7fe fd7b 	bl	9646 <memcpy>
    ab50:	ab20      	add	r3, sp, #128	; 0x80
    ab52:	9301      	str	r3, [sp, #4]
    ab54:	ab1f      	add	r3, sp, #124	; 0x7c
    ab56:	9300      	str	r3, [sp, #0]
    ab58:	0032      	movs	r2, r6
    ab5a:	003b      	movs	r3, r7
    ab5c:	9802      	ldr	r0, [sp, #8]
    ab5e:	960c      	str	r6, [sp, #48]	; 0x30
    ab60:	970d      	str	r7, [sp, #52]	; 0x34
    ab62:	f002 fb83 	bl	d26c <__d2b>
    ab66:	901e      	str	r0, [sp, #120]	; 0x78
    ab68:	2800      	cmp	r0, #0
    ab6a:	d100      	bne.n	ab6e <_strtod_r+0x69a>
    ab6c:	e716      	b.n	a99c <_strtod_r+0x4c8>
    ab6e:	2101      	movs	r1, #1
    ab70:	9802      	ldr	r0, [sp, #8]
    ab72:	f002 f94c 	bl	ce0e <__i2b>
    ab76:	9003      	str	r0, [sp, #12]
    ab78:	2800      	cmp	r0, #0
    ab7a:	d100      	bne.n	ab7e <_strtod_r+0x6aa>
    ab7c:	e70e      	b.n	a99c <_strtod_r+0x4c8>
    ab7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    ab80:	2b00      	cmp	r3, #0
    ab82:	da00      	bge.n	ab86 <_strtod_r+0x6b2>
    ab84:	e095      	b.n	acb2 <_strtod_r+0x7de>
    ab86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ab88:	18d5      	adds	r5, r2, r3
    ab8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ab8c:	9209      	str	r2, [sp, #36]	; 0x24
    ab8e:	9904      	ldr	r1, [sp, #16]
    ab90:	9820      	ldr	r0, [sp, #128]	; 0x80
    ab92:	1a5b      	subs	r3, r3, r1
    ab94:	2136      	movs	r1, #54	; 0x36
    ab96:	1a09      	subs	r1, r1, r0
    ab98:	181b      	adds	r3, r3, r0
    ab9a:	468c      	mov	ip, r1
    ab9c:	49c5      	ldr	r1, [pc, #788]	; (aeb4 <_strtod_r+0x9e0>)
    ab9e:	3b01      	subs	r3, #1
    aba0:	2001      	movs	r0, #1
    aba2:	428b      	cmp	r3, r1
    aba4:	db00      	blt.n	aba8 <_strtod_r+0x6d4>
    aba6:	e08f      	b.n	acc8 <_strtod_r+0x7f4>
    aba8:	4662      	mov	r2, ip
    abaa:	1ac9      	subs	r1, r1, r3
    abac:	1a52      	subs	r2, r2, r1
    abae:	4694      	mov	ip, r2
    abb0:	291f      	cmp	r1, #31
    abb2:	dd00      	ble.n	abb6 <_strtod_r+0x6e2>
    abb4:	e082      	b.n	acbc <_strtod_r+0x7e8>
    abb6:	4088      	lsls	r0, r1
    abb8:	2300      	movs	r3, #0
    abba:	9012      	str	r0, [sp, #72]	; 0x48
    abbc:	930a      	str	r3, [sp, #40]	; 0x28
    abbe:	002b      	movs	r3, r5
    abc0:	4463      	add	r3, ip
    abc2:	9306      	str	r3, [sp, #24]
    abc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    abc6:	9a04      	ldr	r2, [sp, #16]
    abc8:	4463      	add	r3, ip
    abca:	18d3      	adds	r3, r2, r3
    abcc:	9309      	str	r3, [sp, #36]	; 0x24
    abce:	9b06      	ldr	r3, [sp, #24]
    abd0:	1e2a      	subs	r2, r5, #0
    abd2:	429a      	cmp	r2, r3
    abd4:	dd00      	ble.n	abd8 <_strtod_r+0x704>
    abd6:	001a      	movs	r2, r3
    abd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    abda:	4293      	cmp	r3, r2
    abdc:	dd00      	ble.n	abe0 <_strtod_r+0x70c>
    abde:	0013      	movs	r3, r2
    abe0:	2b00      	cmp	r3, #0
    abe2:	dd06      	ble.n	abf2 <_strtod_r+0x71e>
    abe4:	9a06      	ldr	r2, [sp, #24]
    abe6:	1aed      	subs	r5, r5, r3
    abe8:	1ad2      	subs	r2, r2, r3
    abea:	9206      	str	r2, [sp, #24]
    abec:	9a09      	ldr	r2, [sp, #36]	; 0x24
    abee:	1ad2      	subs	r2, r2, r3
    abf0:	9209      	str	r2, [sp, #36]	; 0x24
    abf2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    abf4:	2b00      	cmp	r3, #0
    abf6:	d16b      	bne.n	acd0 <_strtod_r+0x7fc>
    abf8:	9b06      	ldr	r3, [sp, #24]
    abfa:	2b00      	cmp	r3, #0
    abfc:	dd00      	ble.n	ac00 <_strtod_r+0x72c>
    abfe:	e080      	b.n	ad02 <_strtod_r+0x82e>
    ac00:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ac02:	2b00      	cmp	r3, #0
    ac04:	d000      	beq.n	ac08 <_strtod_r+0x734>
    ac06:	e086      	b.n	ad16 <_strtod_r+0x842>
    ac08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ac0a:	2b00      	cmp	r3, #0
    ac0c:	dd00      	ble.n	ac10 <_strtod_r+0x73c>
    ac0e:	e08c      	b.n	ad2a <_strtod_r+0x856>
    ac10:	2d00      	cmp	r5, #0
    ac12:	dd00      	ble.n	ac16 <_strtod_r+0x742>
    ac14:	e093      	b.n	ad3e <_strtod_r+0x86a>
    ac16:	9a05      	ldr	r2, [sp, #20]
    ac18:	991e      	ldr	r1, [sp, #120]	; 0x78
    ac1a:	9802      	ldr	r0, [sp, #8]
    ac1c:	f002 fa4b 	bl	d0b6 <__mdiff>
    ac20:	1e04      	subs	r4, r0, #0
    ac22:	d100      	bne.n	ac26 <_strtod_r+0x752>
    ac24:	e6ba      	b.n	a99c <_strtod_r+0x4c8>
    ac26:	2500      	movs	r5, #0
    ac28:	68c3      	ldr	r3, [r0, #12]
    ac2a:	9903      	ldr	r1, [sp, #12]
    ac2c:	60c5      	str	r5, [r0, #12]
    ac2e:	9309      	str	r3, [sp, #36]	; 0x24
    ac30:	f002 fa26 	bl	d080 <__mcmp>
    ac34:	42a8      	cmp	r0, r5
    ac36:	db00      	blt.n	ac3a <_strtod_r+0x766>
    ac38:	e08f      	b.n	ad5a <_strtod_r+0x886>
    ac3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ac3c:	42ab      	cmp	r3, r5
    ac3e:	d000      	beq.n	ac42 <_strtod_r+0x76e>
    ac40:	e220      	b.n	b084 <_strtod_r+0xbb0>
    ac42:	42ae      	cmp	r6, r5
    ac44:	d000      	beq.n	ac48 <_strtod_r+0x774>
    ac46:	e21d      	b.n	b084 <_strtod_r+0xbb0>
    ac48:	033b      	lsls	r3, r7, #12
    ac4a:	42ab      	cmp	r3, r5
    ac4c:	d000      	beq.n	ac50 <_strtod_r+0x77c>
    ac4e:	e219      	b.n	b084 <_strtod_r+0xbb0>
    ac50:	22d6      	movs	r2, #214	; 0xd6
    ac52:	4b99      	ldr	r3, [pc, #612]	; (aeb8 <_strtod_r+0x9e4>)
    ac54:	04d2      	lsls	r2, r2, #19
    ac56:	403b      	ands	r3, r7
    ac58:	4293      	cmp	r3, r2
    ac5a:	d800      	bhi.n	ac5e <_strtod_r+0x78a>
    ac5c:	e212      	b.n	b084 <_strtod_r+0xbb0>
    ac5e:	6963      	ldr	r3, [r4, #20]
    ac60:	42ab      	cmp	r3, r5
    ac62:	d076      	beq.n	ad52 <_strtod_r+0x87e>
    ac64:	0021      	movs	r1, r4
    ac66:	2201      	movs	r2, #1
    ac68:	9802      	ldr	r0, [sp, #8]
    ac6a:	f002 f9b7 	bl	cfdc <__lshift>
    ac6e:	9903      	ldr	r1, [sp, #12]
    ac70:	0004      	movs	r4, r0
    ac72:	f002 fa05 	bl	d080 <__mcmp>
    ac76:	2800      	cmp	r0, #0
    ac78:	dc00      	bgt.n	ac7c <_strtod_r+0x7a8>
    ac7a:	e203      	b.n	b084 <_strtod_r+0xbb0>
    ac7c:	9a04      	ldr	r2, [sp, #16]
    ac7e:	4b8e      	ldr	r3, [pc, #568]	; (aeb8 <_strtod_r+0x9e4>)
    ac80:	2a00      	cmp	r2, #0
    ac82:	d100      	bne.n	ac86 <_strtod_r+0x7b2>
    ac84:	e099      	b.n	adba <_strtod_r+0x8e6>
    ac86:	001a      	movs	r2, r3
    ac88:	21d6      	movs	r1, #214	; 0xd6
    ac8a:	403a      	ands	r2, r7
    ac8c:	04c9      	lsls	r1, r1, #19
    ac8e:	428a      	cmp	r2, r1
    ac90:	dd00      	ble.n	ac94 <_strtod_r+0x7c0>
    ac92:	e092      	b.n	adba <_strtod_r+0x8e6>
    ac94:	23dc      	movs	r3, #220	; 0xdc
    ac96:	049b      	lsls	r3, r3, #18
    ac98:	429a      	cmp	r2, r3
    ac9a:	dd00      	ble.n	ac9e <_strtod_r+0x7ca>
    ac9c:	e1f5      	b.n	b08a <_strtod_r+0xbb6>
    ac9e:	2322      	movs	r3, #34	; 0x22
    aca0:	9a02      	ldr	r2, [sp, #8]
    aca2:	2600      	movs	r6, #0
    aca4:	6013      	str	r3, [r2, #0]
    aca6:	9b08      	ldr	r3, [sp, #32]
    aca8:	2700      	movs	r7, #0
    acaa:	2b00      	cmp	r3, #0
    acac:	d000      	beq.n	acb0 <_strtod_r+0x7dc>
    acae:	e1fe      	b.n	b0ae <_strtod_r+0xbda>
    acb0:	e211      	b.n	b0d6 <_strtod_r+0xc02>
    acb2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    acb4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    acb6:	1ad2      	subs	r2, r2, r3
    acb8:	9209      	str	r2, [sp, #36]	; 0x24
    acba:	e768      	b.n	ab8e <_strtod_r+0x6ba>
    acbc:	497f      	ldr	r1, [pc, #508]	; (aebc <_strtod_r+0x9e8>)
    acbe:	1acb      	subs	r3, r1, r3
    acc0:	0001      	movs	r1, r0
    acc2:	4099      	lsls	r1, r3
    acc4:	910a      	str	r1, [sp, #40]	; 0x28
    acc6:	e001      	b.n	accc <_strtod_r+0x7f8>
    acc8:	2300      	movs	r3, #0
    acca:	930a      	str	r3, [sp, #40]	; 0x28
    accc:	9012      	str	r0, [sp, #72]	; 0x48
    acce:	e776      	b.n	abbe <_strtod_r+0x6ea>
    acd0:	001a      	movs	r2, r3
    acd2:	9903      	ldr	r1, [sp, #12]
    acd4:	9802      	ldr	r0, [sp, #8]
    acd6:	f002 f92d 	bl	cf34 <__pow5mult>
    acda:	9003      	str	r0, [sp, #12]
    acdc:	2800      	cmp	r0, #0
    acde:	d100      	bne.n	ace2 <_strtod_r+0x80e>
    ace0:	e65c      	b.n	a99c <_strtod_r+0x4c8>
    ace2:	0001      	movs	r1, r0
    ace4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    ace6:	9802      	ldr	r0, [sp, #8]
    ace8:	f002 f89a 	bl	ce20 <__multiply>
    acec:	9019      	str	r0, [sp, #100]	; 0x64
    acee:	2800      	cmp	r0, #0
    acf0:	d100      	bne.n	acf4 <_strtod_r+0x820>
    acf2:	e653      	b.n	a99c <_strtod_r+0x4c8>
    acf4:	991e      	ldr	r1, [sp, #120]	; 0x78
    acf6:	9802      	ldr	r0, [sp, #8]
    acf8:	f001 ffab 	bl	cc52 <_Bfree>
    acfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    acfe:	931e      	str	r3, [sp, #120]	; 0x78
    ad00:	e77a      	b.n	abf8 <_strtod_r+0x724>
    ad02:	9a06      	ldr	r2, [sp, #24]
    ad04:	991e      	ldr	r1, [sp, #120]	; 0x78
    ad06:	9802      	ldr	r0, [sp, #8]
    ad08:	f002 f968 	bl	cfdc <__lshift>
    ad0c:	901e      	str	r0, [sp, #120]	; 0x78
    ad0e:	2800      	cmp	r0, #0
    ad10:	d000      	beq.n	ad14 <_strtod_r+0x840>
    ad12:	e775      	b.n	ac00 <_strtod_r+0x72c>
    ad14:	e642      	b.n	a99c <_strtod_r+0x4c8>
    ad16:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ad18:	9905      	ldr	r1, [sp, #20]
    ad1a:	9802      	ldr	r0, [sp, #8]
    ad1c:	f002 f90a 	bl	cf34 <__pow5mult>
    ad20:	9005      	str	r0, [sp, #20]
    ad22:	2800      	cmp	r0, #0
    ad24:	d000      	beq.n	ad28 <_strtod_r+0x854>
    ad26:	e76f      	b.n	ac08 <_strtod_r+0x734>
    ad28:	e638      	b.n	a99c <_strtod_r+0x4c8>
    ad2a:	001a      	movs	r2, r3
    ad2c:	9905      	ldr	r1, [sp, #20]
    ad2e:	9802      	ldr	r0, [sp, #8]
    ad30:	f002 f954 	bl	cfdc <__lshift>
    ad34:	9005      	str	r0, [sp, #20]
    ad36:	2800      	cmp	r0, #0
    ad38:	d000      	beq.n	ad3c <_strtod_r+0x868>
    ad3a:	e769      	b.n	ac10 <_strtod_r+0x73c>
    ad3c:	e62e      	b.n	a99c <_strtod_r+0x4c8>
    ad3e:	002a      	movs	r2, r5
    ad40:	9903      	ldr	r1, [sp, #12]
    ad42:	9802      	ldr	r0, [sp, #8]
    ad44:	f002 f94a 	bl	cfdc <__lshift>
    ad48:	9003      	str	r0, [sp, #12]
    ad4a:	2800      	cmp	r0, #0
    ad4c:	d000      	beq.n	ad50 <_strtod_r+0x87c>
    ad4e:	e762      	b.n	ac16 <_strtod_r+0x742>
    ad50:	e624      	b.n	a99c <_strtod_r+0x4c8>
    ad52:	6923      	ldr	r3, [r4, #16]
    ad54:	2b01      	cmp	r3, #1
    ad56:	dc85      	bgt.n	ac64 <_strtod_r+0x790>
    ad58:	e194      	b.n	b084 <_strtod_r+0xbb0>
    ad5a:	2800      	cmp	r0, #0
    ad5c:	d164      	bne.n	ae28 <_strtod_r+0x954>
    ad5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ad60:	033b      	lsls	r3, r7, #12
    ad62:	2a00      	cmp	r2, #0
    ad64:	d024      	beq.n	adb0 <_strtod_r+0x8dc>
    ad66:	4a56      	ldr	r2, [pc, #344]	; (aec0 <_strtod_r+0x9ec>)
    ad68:	0039      	movs	r1, r7
    ad6a:	0b1b      	lsrs	r3, r3, #12
    ad6c:	4293      	cmp	r3, r2
    ad6e:	d12d      	bne.n	adcc <_strtod_r+0x8f8>
    ad70:	9b04      	ldr	r3, [sp, #16]
    ad72:	3801      	subs	r0, #1
    ad74:	46b4      	mov	ip, r6
    ad76:	0002      	movs	r2, r0
    ad78:	2b00      	cmp	r3, #0
    ad7a:	d00a      	beq.n	ad92 <_strtod_r+0x8be>
    ad7c:	25d4      	movs	r5, #212	; 0xd4
    ad7e:	4b4e      	ldr	r3, [pc, #312]	; (aeb8 <_strtod_r+0x9e4>)
    ad80:	04ed      	lsls	r5, r5, #19
    ad82:	403b      	ands	r3, r7
    ad84:	42ab      	cmp	r3, r5
    ad86:	d804      	bhi.n	ad92 <_strtod_r+0x8be>
    ad88:	326c      	adds	r2, #108	; 0x6c
    ad8a:	0d1b      	lsrs	r3, r3, #20
    ad8c:	1ad3      	subs	r3, r2, r3
    ad8e:	0002      	movs	r2, r0
    ad90:	409a      	lsls	r2, r3
    ad92:	4562      	cmp	r2, ip
    ad94:	d11a      	bne.n	adcc <_strtod_r+0x8f8>
    ad96:	4b4b      	ldr	r3, [pc, #300]	; (aec4 <_strtod_r+0x9f0>)
    ad98:	4299      	cmp	r1, r3
    ad9a:	d102      	bne.n	ada2 <_strtod_r+0x8ce>
    ad9c:	1c53      	adds	r3, r2, #1
    ad9e:	d100      	bne.n	ada2 <_strtod_r+0x8ce>
    ada0:	e5fc      	b.n	a99c <_strtod_r+0x4c8>
    ada2:	4b45      	ldr	r3, [pc, #276]	; (aeb8 <_strtod_r+0x9e4>)
    ada4:	2600      	movs	r6, #0
    ada6:	4019      	ands	r1, r3
    ada8:	2380      	movs	r3, #128	; 0x80
    adaa:	035b      	lsls	r3, r3, #13
    adac:	18cf      	adds	r7, r1, r3
    adae:	e169      	b.n	b084 <_strtod_r+0xbb0>
    adb0:	2b00      	cmp	r3, #0
    adb2:	d10b      	bne.n	adcc <_strtod_r+0x8f8>
    adb4:	2e00      	cmp	r6, #0
    adb6:	d109      	bne.n	adcc <_strtod_r+0x8f8>
    adb8:	e760      	b.n	ac7c <_strtod_r+0x7a8>
    adba:	2601      	movs	r6, #1
    adbc:	4a42      	ldr	r2, [pc, #264]	; (aec8 <_strtod_r+0x9f4>)
    adbe:	403b      	ands	r3, r7
    adc0:	189b      	adds	r3, r3, r2
    adc2:	4a3f      	ldr	r2, [pc, #252]	; (aec0 <_strtod_r+0x9ec>)
    adc4:	4276      	negs	r6, r6
    adc6:	431a      	orrs	r2, r3
    adc8:	0017      	movs	r7, r2
    adca:	e15b      	b.n	b084 <_strtod_r+0xbb0>
    adcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    adce:	2b00      	cmp	r3, #0
    add0:	d003      	beq.n	adda <_strtod_r+0x906>
    add2:	423b      	tst	r3, r7
    add4:	d100      	bne.n	add8 <_strtod_r+0x904>
    add6:	e155      	b.n	b084 <_strtod_r+0xbb0>
    add8:	e003      	b.n	ade2 <_strtod_r+0x90e>
    adda:	9b12      	ldr	r3, [sp, #72]	; 0x48
    addc:	4233      	tst	r3, r6
    adde:	d100      	bne.n	ade2 <_strtod_r+0x90e>
    ade0:	e150      	b.n	b084 <_strtod_r+0xbb0>
    ade2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ade4:	9a04      	ldr	r2, [sp, #16]
    ade6:	0030      	movs	r0, r6
    ade8:	0039      	movs	r1, r7
    adea:	2b00      	cmp	r3, #0
    adec:	d00a      	beq.n	ae04 <_strtod_r+0x930>
    adee:	f7ff fb59 	bl	a4a4 <sulp>
    adf2:	0002      	movs	r2, r0
    adf4:	000b      	movs	r3, r1
    adf6:	980c      	ldr	r0, [sp, #48]	; 0x30
    adf8:	990d      	ldr	r1, [sp, #52]	; 0x34
    adfa:	f7fc fce1 	bl	77c0 <__aeabi_dadd>
    adfe:	0006      	movs	r6, r0
    ae00:	000f      	movs	r7, r1
    ae02:	e13f      	b.n	b084 <_strtod_r+0xbb0>
    ae04:	f7ff fb4e 	bl	a4a4 <sulp>
    ae08:	0002      	movs	r2, r0
    ae0a:	000b      	movs	r3, r1
    ae0c:	980c      	ldr	r0, [sp, #48]	; 0x30
    ae0e:	990d      	ldr	r1, [sp, #52]	; 0x34
    ae10:	f7fd fea0 	bl	8b54 <__aeabi_dsub>
    ae14:	2200      	movs	r2, #0
    ae16:	2300      	movs	r3, #0
    ae18:	0006      	movs	r6, r0
    ae1a:	000f      	movs	r7, r1
    ae1c:	f7fb ff42 	bl	6ca4 <__aeabi_dcmpeq>
    ae20:	2800      	cmp	r0, #0
    ae22:	d000      	beq.n	ae26 <_strtod_r+0x952>
    ae24:	e73b      	b.n	ac9e <_strtod_r+0x7ca>
    ae26:	e12d      	b.n	b084 <_strtod_r+0xbb0>
    ae28:	9903      	ldr	r1, [sp, #12]
    ae2a:	0020      	movs	r0, r4
    ae2c:	f002 fa72 	bl	d314 <__ratio>
    ae30:	2380      	movs	r3, #128	; 0x80
    ae32:	2200      	movs	r2, #0
    ae34:	05db      	lsls	r3, r3, #23
    ae36:	9006      	str	r0, [sp, #24]
    ae38:	9107      	str	r1, [sp, #28]
    ae3a:	f7fb ff43 	bl	6cc4 <__aeabi_dcmple>
    ae3e:	2800      	cmp	r0, #0
    ae40:	d04a      	beq.n	aed8 <_strtod_r+0xa04>
    ae42:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae44:	2b00      	cmp	r3, #0
    ae46:	d004      	beq.n	ae52 <_strtod_r+0x97e>
    ae48:	2200      	movs	r2, #0
    ae4a:	4b20      	ldr	r3, [pc, #128]	; (aecc <_strtod_r+0x9f8>)
    ae4c:	920a      	str	r2, [sp, #40]	; 0x28
    ae4e:	930b      	str	r3, [sp, #44]	; 0x2c
    ae50:	e00e      	b.n	ae70 <_strtod_r+0x99c>
    ae52:	2e00      	cmp	r6, #0
    ae54:	d102      	bne.n	ae5c <_strtod_r+0x988>
    ae56:	033b      	lsls	r3, r7, #12
    ae58:	d105      	bne.n	ae66 <_strtod_r+0x992>
    ae5a:	e00c      	b.n	ae76 <_strtod_r+0x9a2>
    ae5c:	2e01      	cmp	r6, #1
    ae5e:	d102      	bne.n	ae66 <_strtod_r+0x992>
    ae60:	2f00      	cmp	r7, #0
    ae62:	d100      	bne.n	ae66 <_strtod_r+0x992>
    ae64:	e71b      	b.n	ac9e <_strtod_r+0x7ca>
    ae66:	2200      	movs	r2, #0
    ae68:	2500      	movs	r5, #0
    ae6a:	4b19      	ldr	r3, [pc, #100]	; (aed0 <_strtod_r+0x9fc>)
    ae6c:	920a      	str	r2, [sp, #40]	; 0x28
    ae6e:	930b      	str	r3, [sp, #44]	; 0x2c
    ae70:	4b16      	ldr	r3, [pc, #88]	; (aecc <_strtod_r+0x9f8>)
    ae72:	9306      	str	r3, [sp, #24]
    ae74:	e049      	b.n	af0a <_strtod_r+0xa36>
    ae76:	2200      	movs	r2, #0
    ae78:	9806      	ldr	r0, [sp, #24]
    ae7a:	9907      	ldr	r1, [sp, #28]
    ae7c:	4b13      	ldr	r3, [pc, #76]	; (aecc <_strtod_r+0x9f8>)
    ae7e:	f7fb ff17 	bl	6cb0 <__aeabi_dcmplt>
    ae82:	2800      	cmp	r0, #0
    ae84:	d108      	bne.n	ae98 <_strtod_r+0x9c4>
    ae86:	9806      	ldr	r0, [sp, #24]
    ae88:	9907      	ldr	r1, [sp, #28]
    ae8a:	2200      	movs	r2, #0
    ae8c:	4b11      	ldr	r3, [pc, #68]	; (aed4 <_strtod_r+0xa00>)
    ae8e:	f7fd fbe7 	bl	8660 <__aeabi_dmul>
    ae92:	0005      	movs	r5, r0
    ae94:	9106      	str	r1, [sp, #24]
    ae96:	e002      	b.n	ae9e <_strtod_r+0x9ca>
    ae98:	4b0e      	ldr	r3, [pc, #56]	; (aed4 <_strtod_r+0xa00>)
    ae9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    ae9c:	9306      	str	r3, [sp, #24]
    ae9e:	2280      	movs	r2, #128	; 0x80
    aea0:	0612      	lsls	r2, r2, #24
    aea2:	4694      	mov	ip, r2
    aea4:	9b06      	ldr	r3, [sp, #24]
    aea6:	951a      	str	r5, [sp, #104]	; 0x68
    aea8:	4463      	add	r3, ip
    aeaa:	931b      	str	r3, [sp, #108]	; 0x6c
    aeac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    aeae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    aeb0:	e029      	b.n	af06 <_strtod_r+0xa32>
    aeb2:	46c0      	nop			; (mov r8, r8)
    aeb4:	fffffc02 	.word	0xfffffc02
    aeb8:	7ff00000 	.word	0x7ff00000
    aebc:	fffffbe2 	.word	0xfffffbe2
    aec0:	000fffff 	.word	0x000fffff
    aec4:	7fefffff 	.word	0x7fefffff
    aec8:	fff00000 	.word	0xfff00000
    aecc:	3ff00000 	.word	0x3ff00000
    aed0:	bff00000 	.word	0xbff00000
    aed4:	3fe00000 	.word	0x3fe00000
    aed8:	4b89      	ldr	r3, [pc, #548]	; (b100 <_strtod_r+0xc2c>)
    aeda:	9806      	ldr	r0, [sp, #24]
    aedc:	9907      	ldr	r1, [sp, #28]
    aede:	2200      	movs	r2, #0
    aee0:	f7fd fbbe 	bl	8660 <__aeabi_dmul>
    aee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aee6:	0005      	movs	r5, r0
    aee8:	9106      	str	r1, [sp, #24]
    aeea:	2b00      	cmp	r3, #0
    aeec:	d105      	bne.n	aefa <_strtod_r+0xa26>
    aeee:	2380      	movs	r3, #128	; 0x80
    aef0:	061b      	lsls	r3, r3, #24
    aef2:	18cb      	adds	r3, r1, r3
    aef4:	9014      	str	r0, [sp, #80]	; 0x50
    aef6:	9315      	str	r3, [sp, #84]	; 0x54
    aef8:	e003      	b.n	af02 <_strtod_r+0xa2e>
    aefa:	0002      	movs	r2, r0
    aefc:	9b06      	ldr	r3, [sp, #24]
    aefe:	9214      	str	r2, [sp, #80]	; 0x50
    af00:	9315      	str	r3, [sp, #84]	; 0x54
    af02:	9a14      	ldr	r2, [sp, #80]	; 0x50
    af04:	9b15      	ldr	r3, [sp, #84]	; 0x54
    af06:	920a      	str	r2, [sp, #40]	; 0x28
    af08:	930b      	str	r3, [sp, #44]	; 0x2c
    af0a:	4b7e      	ldr	r3, [pc, #504]	; (b104 <_strtod_r+0xc30>)
    af0c:	403b      	ands	r3, r7
    af0e:	9312      	str	r3, [sp, #72]	; 0x48
    af10:	9a12      	ldr	r2, [sp, #72]	; 0x48
    af12:	4b7d      	ldr	r3, [pc, #500]	; (b108 <_strtod_r+0xc34>)
    af14:	429a      	cmp	r2, r3
    af16:	d129      	bne.n	af6c <_strtod_r+0xa98>
    af18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    af1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    af1c:	920e      	str	r2, [sp, #56]	; 0x38
    af1e:	930f      	str	r3, [sp, #60]	; 0x3c
    af20:	4b7a      	ldr	r3, [pc, #488]	; (b10c <_strtod_r+0xc38>)
    af22:	0030      	movs	r0, r6
    af24:	18ff      	adds	r7, r7, r3
    af26:	0039      	movs	r1, r7
    af28:	f002 f930 	bl	d18c <__ulp>
    af2c:	0002      	movs	r2, r0
    af2e:	000b      	movs	r3, r1
    af30:	980a      	ldr	r0, [sp, #40]	; 0x28
    af32:	990b      	ldr	r1, [sp, #44]	; 0x2c
    af34:	f7fd fb94 	bl	8660 <__aeabi_dmul>
    af38:	0032      	movs	r2, r6
    af3a:	003b      	movs	r3, r7
    af3c:	f7fc fc40 	bl	77c0 <__aeabi_dadd>
    af40:	4a70      	ldr	r2, [pc, #448]	; (b104 <_strtod_r+0xc30>)
    af42:	4b73      	ldr	r3, [pc, #460]	; (b110 <_strtod_r+0xc3c>)
    af44:	0006      	movs	r6, r0
    af46:	400a      	ands	r2, r1
    af48:	429a      	cmp	r2, r3
    af4a:	d90b      	bls.n	af64 <_strtod_r+0xa90>
    af4c:	4b71      	ldr	r3, [pc, #452]	; (b114 <_strtod_r+0xc40>)
    af4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    af50:	429a      	cmp	r2, r3
    af52:	d103      	bne.n	af5c <_strtod_r+0xa88>
    af54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    af56:	3301      	adds	r3, #1
    af58:	d100      	bne.n	af5c <_strtod_r+0xa88>
    af5a:	e51f      	b.n	a99c <_strtod_r+0x4c8>
    af5c:	2601      	movs	r6, #1
    af5e:	4f6d      	ldr	r7, [pc, #436]	; (b114 <_strtod_r+0xc40>)
    af60:	4276      	negs	r6, r6
    af62:	e07e      	b.n	b062 <_strtod_r+0xb8e>
    af64:	23d4      	movs	r3, #212	; 0xd4
    af66:	049b      	lsls	r3, r3, #18
    af68:	18cf      	adds	r7, r1, r3
    af6a:	e044      	b.n	aff6 <_strtod_r+0xb22>
    af6c:	9b04      	ldr	r3, [sp, #16]
    af6e:	2b00      	cmp	r3, #0
    af70:	d02f      	beq.n	afd2 <_strtod_r+0xafe>
    af72:	23d4      	movs	r3, #212	; 0xd4
    af74:	9a12      	ldr	r2, [sp, #72]	; 0x48
    af76:	04db      	lsls	r3, r3, #19
    af78:	429a      	cmp	r2, r3
    af7a:	d82a      	bhi.n	afd2 <_strtod_r+0xafe>
    af7c:	4a66      	ldr	r2, [pc, #408]	; (b118 <_strtod_r+0xc44>)
    af7e:	4b67      	ldr	r3, [pc, #412]	; (b11c <_strtod_r+0xc48>)
    af80:	0028      	movs	r0, r5
    af82:	9906      	ldr	r1, [sp, #24]
    af84:	f7fb fe9e 	bl	6cc4 <__aeabi_dcmple>
    af88:	2800      	cmp	r0, #0
    af8a:	d01b      	beq.n	afc4 <_strtod_r+0xaf0>
    af8c:	0028      	movs	r0, r5
    af8e:	9906      	ldr	r1, [sp, #24]
    af90:	f7fb fef0 	bl	6d74 <__aeabi_d2uiz>
    af94:	2800      	cmp	r0, #0
    af96:	d100      	bne.n	af9a <_strtod_r+0xac6>
    af98:	3001      	adds	r0, #1
    af9a:	f7fe f985 	bl	92a8 <__aeabi_ui2d>
    af9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    afa0:	0005      	movs	r5, r0
    afa2:	9106      	str	r1, [sp, #24]
    afa4:	2b00      	cmp	r3, #0
    afa6:	d105      	bne.n	afb4 <_strtod_r+0xae0>
    afa8:	2380      	movs	r3, #128	; 0x80
    afaa:	061b      	lsls	r3, r3, #24
    afac:	18cb      	adds	r3, r1, r3
    afae:	9016      	str	r0, [sp, #88]	; 0x58
    afb0:	9317      	str	r3, [sp, #92]	; 0x5c
    afb2:	e003      	b.n	afbc <_strtod_r+0xae8>
    afb4:	0002      	movs	r2, r0
    afb6:	9b06      	ldr	r3, [sp, #24]
    afb8:	9216      	str	r2, [sp, #88]	; 0x58
    afba:	9317      	str	r3, [sp, #92]	; 0x5c
    afbc:	9a16      	ldr	r2, [sp, #88]	; 0x58
    afbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    afc0:	920a      	str	r2, [sp, #40]	; 0x28
    afc2:	930b      	str	r3, [sp, #44]	; 0x2c
    afc4:	22d6      	movs	r2, #214	; 0xd6
    afc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    afc8:	04d2      	lsls	r2, r2, #19
    afca:	189b      	adds	r3, r3, r2
    afcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    afce:	1a9b      	subs	r3, r3, r2
    afd0:	930b      	str	r3, [sp, #44]	; 0x2c
    afd2:	980c      	ldr	r0, [sp, #48]	; 0x30
    afd4:	990d      	ldr	r1, [sp, #52]	; 0x34
    afd6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    afd8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    afda:	f002 f8d7 	bl	d18c <__ulp>
    afde:	0002      	movs	r2, r0
    afe0:	000b      	movs	r3, r1
    afe2:	0030      	movs	r0, r6
    afe4:	0039      	movs	r1, r7
    afe6:	f7fd fb3b 	bl	8660 <__aeabi_dmul>
    afea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    afec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    afee:	f7fc fbe7 	bl	77c0 <__aeabi_dadd>
    aff2:	0006      	movs	r6, r0
    aff4:	000f      	movs	r7, r1
    aff6:	9b04      	ldr	r3, [sp, #16]
    aff8:	2b00      	cmp	r3, #0
    affa:	d132      	bne.n	b062 <_strtod_r+0xb8e>
    affc:	4b41      	ldr	r3, [pc, #260]	; (b104 <_strtod_r+0xc30>)
    affe:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b000:	970a      	str	r7, [sp, #40]	; 0x28
    b002:	403b      	ands	r3, r7
    b004:	429a      	cmp	r2, r3
    b006:	d12c      	bne.n	b062 <_strtod_r+0xb8e>
    b008:	9906      	ldr	r1, [sp, #24]
    b00a:	0028      	movs	r0, r5
    b00c:	f7fe f916 	bl	923c <__aeabi_d2iz>
    b010:	f002 fc88 	bl	d924 <__aeabi_i2d>
    b014:	000b      	movs	r3, r1
    b016:	0002      	movs	r2, r0
    b018:	9906      	ldr	r1, [sp, #24]
    b01a:	0028      	movs	r0, r5
    b01c:	f7fd fd9a 	bl	8b54 <__aeabi_dsub>
    b020:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b022:	9006      	str	r0, [sp, #24]
    b024:	9107      	str	r1, [sp, #28]
    b026:	2b00      	cmp	r3, #0
    b028:	d104      	bne.n	b034 <_strtod_r+0xb60>
    b02a:	2e00      	cmp	r6, #0
    b02c:	d102      	bne.n	b034 <_strtod_r+0xb60>
    b02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b030:	031b      	lsls	r3, r3, #12
    b032:	d00e      	beq.n	b052 <_strtod_r+0xb7e>
    b034:	9806      	ldr	r0, [sp, #24]
    b036:	9907      	ldr	r1, [sp, #28]
    b038:	4a39      	ldr	r2, [pc, #228]	; (b120 <_strtod_r+0xc4c>)
    b03a:	4b3a      	ldr	r3, [pc, #232]	; (b124 <_strtod_r+0xc50>)
    b03c:	f7fb fe38 	bl	6cb0 <__aeabi_dcmplt>
    b040:	2800      	cmp	r0, #0
    b042:	d134      	bne.n	b0ae <_strtod_r+0xbda>
    b044:	9806      	ldr	r0, [sp, #24]
    b046:	9907      	ldr	r1, [sp, #28]
    b048:	4a37      	ldr	r2, [pc, #220]	; (b128 <_strtod_r+0xc54>)
    b04a:	4b2d      	ldr	r3, [pc, #180]	; (b100 <_strtod_r+0xc2c>)
    b04c:	f7fb fe44 	bl	6cd8 <__aeabi_dcmpgt>
    b050:	e005      	b.n	b05e <_strtod_r+0xb8a>
    b052:	4a33      	ldr	r2, [pc, #204]	; (b120 <_strtod_r+0xc4c>)
    b054:	4b35      	ldr	r3, [pc, #212]	; (b12c <_strtod_r+0xc58>)
    b056:	9806      	ldr	r0, [sp, #24]
    b058:	9907      	ldr	r1, [sp, #28]
    b05a:	f7fb fe29 	bl	6cb0 <__aeabi_dcmplt>
    b05e:	2800      	cmp	r0, #0
    b060:	d125      	bne.n	b0ae <_strtod_r+0xbda>
    b062:	991e      	ldr	r1, [sp, #120]	; 0x78
    b064:	9802      	ldr	r0, [sp, #8]
    b066:	f001 fdf4 	bl	cc52 <_Bfree>
    b06a:	9905      	ldr	r1, [sp, #20]
    b06c:	9802      	ldr	r0, [sp, #8]
    b06e:	f001 fdf0 	bl	cc52 <_Bfree>
    b072:	9903      	ldr	r1, [sp, #12]
    b074:	9802      	ldr	r0, [sp, #8]
    b076:	f001 fdec 	bl	cc52 <_Bfree>
    b07a:	0021      	movs	r1, r4
    b07c:	9802      	ldr	r0, [sp, #8]
    b07e:	f001 fde8 	bl	cc52 <_Bfree>
    b082:	e552      	b.n	ab2a <_strtod_r+0x656>
    b084:	9b04      	ldr	r3, [sp, #16]
    b086:	2b00      	cmp	r3, #0
    b088:	d011      	beq.n	b0ae <_strtod_r+0xbda>
    b08a:	4b29      	ldr	r3, [pc, #164]	; (b130 <_strtod_r+0xc5c>)
    b08c:	0030      	movs	r0, r6
    b08e:	930f      	str	r3, [sp, #60]	; 0x3c
    b090:	2300      	movs	r3, #0
    b092:	930e      	str	r3, [sp, #56]	; 0x38
    b094:	0039      	movs	r1, r7
    b096:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b098:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b09a:	f7fd fae1 	bl	8660 <__aeabi_dmul>
    b09e:	0006      	movs	r6, r0
    b0a0:	1e0f      	subs	r7, r1, #0
    b0a2:	d104      	bne.n	b0ae <_strtod_r+0xbda>
    b0a4:	2800      	cmp	r0, #0
    b0a6:	d102      	bne.n	b0ae <_strtod_r+0xbda>
    b0a8:	2322      	movs	r3, #34	; 0x22
    b0aa:	9a02      	ldr	r2, [sp, #8]
    b0ac:	6013      	str	r3, [r2, #0]
    b0ae:	991e      	ldr	r1, [sp, #120]	; 0x78
    b0b0:	9802      	ldr	r0, [sp, #8]
    b0b2:	f001 fdce 	bl	cc52 <_Bfree>
    b0b6:	9905      	ldr	r1, [sp, #20]
    b0b8:	9802      	ldr	r0, [sp, #8]
    b0ba:	f001 fdca 	bl	cc52 <_Bfree>
    b0be:	9903      	ldr	r1, [sp, #12]
    b0c0:	9802      	ldr	r0, [sp, #8]
    b0c2:	f001 fdc6 	bl	cc52 <_Bfree>
    b0c6:	9908      	ldr	r1, [sp, #32]
    b0c8:	9802      	ldr	r0, [sp, #8]
    b0ca:	f001 fdc2 	bl	cc52 <_Bfree>
    b0ce:	0021      	movs	r1, r4
    b0d0:	9802      	ldr	r0, [sp, #8]
    b0d2:	f001 fdbe 	bl	cc52 <_Bfree>
    b0d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b0d8:	2b00      	cmp	r3, #0
    b0da:	d002      	beq.n	b0e2 <_strtod_r+0xc0e>
    b0dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b0de:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    b0e0:	601a      	str	r2, [r3, #0]
    b0e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b0e4:	2b00      	cmp	r3, #0
    b0e6:	d004      	beq.n	b0f2 <_strtod_r+0xc1e>
    b0e8:	2380      	movs	r3, #128	; 0x80
    b0ea:	061b      	lsls	r3, r3, #24
    b0ec:	0032      	movs	r2, r6
    b0ee:	18fb      	adds	r3, r7, r3
    b0f0:	e001      	b.n	b0f6 <_strtod_r+0xc22>
    b0f2:	0032      	movs	r2, r6
    b0f4:	003b      	movs	r3, r7
    b0f6:	0010      	movs	r0, r2
    b0f8:	0019      	movs	r1, r3
    b0fa:	b023      	add	sp, #140	; 0x8c
    b0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0fe:	46c0      	nop			; (mov r8, r8)
    b100:	3fe00000 	.word	0x3fe00000
    b104:	7ff00000 	.word	0x7ff00000
    b108:	7fe00000 	.word	0x7fe00000
    b10c:	fcb00000 	.word	0xfcb00000
    b110:	7c9fffff 	.word	0x7c9fffff
    b114:	7fefffff 	.word	0x7fefffff
    b118:	ffc00000 	.word	0xffc00000
    b11c:	41dfffff 	.word	0x41dfffff
    b120:	94a03595 	.word	0x94a03595
    b124:	3fdfffff 	.word	0x3fdfffff
    b128:	35afe535 	.word	0x35afe535
    b12c:	3fcfffff 	.word	0x3fcfffff
    b130:	39500000 	.word	0x39500000

0000b134 <strtod>:
    b134:	b510      	push	{r4, lr}
    b136:	4b03      	ldr	r3, [pc, #12]	; (b144 <strtod+0x10>)
    b138:	000a      	movs	r2, r1
    b13a:	0001      	movs	r1, r0
    b13c:	6818      	ldr	r0, [r3, #0]
    b13e:	f7ff f9c9 	bl	a4d4 <_strtod_r>
    b142:	bd10      	pop	{r4, pc}
    b144:	200000fc 	.word	0x200000fc

0000b148 <strtok>:
    b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b14a:	4b17      	ldr	r3, [pc, #92]	; (b1a8 <strtok+0x60>)
    b14c:	0006      	movs	r6, r0
    b14e:	681d      	ldr	r5, [r3, #0]
    b150:	000f      	movs	r7, r1
    b152:	6dac      	ldr	r4, [r5, #88]	; 0x58
    b154:	2c00      	cmp	r4, #0
    b156:	d11f      	bne.n	b198 <strtok+0x50>
    b158:	2050      	movs	r0, #80	; 0x50
    b15a:	f7fe fa51 	bl	9600 <malloc>
    b15e:	65a8      	str	r0, [r5, #88]	; 0x58
    b160:	6084      	str	r4, [r0, #8]
    b162:	6dab      	ldr	r3, [r5, #88]	; 0x58
    b164:	6004      	str	r4, [r0, #0]
    b166:	6044      	str	r4, [r0, #4]
    b168:	611c      	str	r4, [r3, #16]
    b16a:	60dc      	str	r4, [r3, #12]
    b16c:	6dab      	ldr	r3, [r5, #88]	; 0x58
    b16e:	619c      	str	r4, [r3, #24]
    b170:	615c      	str	r4, [r3, #20]
    b172:	6dab      	ldr	r3, [r5, #88]	; 0x58
    b174:	62dc      	str	r4, [r3, #44]	; 0x2c
    b176:	629c      	str	r4, [r3, #40]	; 0x28
    b178:	6dab      	ldr	r3, [r5, #88]	; 0x58
    b17a:	635c      	str	r4, [r3, #52]	; 0x34
    b17c:	631c      	str	r4, [r3, #48]	; 0x30
    b17e:	6dab      	ldr	r3, [r5, #88]	; 0x58
    b180:	63dc      	str	r4, [r3, #60]	; 0x3c
    b182:	639c      	str	r4, [r3, #56]	; 0x38
    b184:	6dab      	ldr	r3, [r5, #88]	; 0x58
    b186:	645c      	str	r4, [r3, #68]	; 0x44
    b188:	641c      	str	r4, [r3, #64]	; 0x40
    b18a:	6dab      	ldr	r3, [r5, #88]	; 0x58
    b18c:	64dc      	str	r4, [r3, #76]	; 0x4c
    b18e:	649c      	str	r4, [r3, #72]	; 0x48
    b190:	6dab      	ldr	r3, [r5, #88]	; 0x58
    b192:	771c      	strb	r4, [r3, #28]
    b194:	6dab      	ldr	r3, [r5, #88]	; 0x58
    b196:	625c      	str	r4, [r3, #36]	; 0x24
    b198:	6daa      	ldr	r2, [r5, #88]	; 0x58
    b19a:	0039      	movs	r1, r7
    b19c:	0030      	movs	r0, r6
    b19e:	2301      	movs	r3, #1
    b1a0:	f000 f804 	bl	b1ac <__strtok_r>
    b1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b1a6:	46c0      	nop			; (mov r8, r8)
    b1a8:	200000fc 	.word	0x200000fc

0000b1ac <__strtok_r>:
    b1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1ae:	1e04      	subs	r4, r0, #0
    b1b0:	d10c      	bne.n	b1cc <__strtok_r+0x20>
    b1b2:	6814      	ldr	r4, [r2, #0]
    b1b4:	1e20      	subs	r0, r4, #0
    b1b6:	d109      	bne.n	b1cc <__strtok_r+0x20>
    b1b8:	e026      	b.n	b208 <__strtok_r+0x5c>
    b1ba:	7837      	ldrb	r7, [r6, #0]
    b1bc:	2f00      	cmp	r7, #0
    b1be:	d00c      	beq.n	b1da <__strtok_r+0x2e>
    b1c0:	3601      	adds	r6, #1
    b1c2:	42b8      	cmp	r0, r7
    b1c4:	d1f9      	bne.n	b1ba <__strtok_r+0xe>
    b1c6:	2b00      	cmp	r3, #0
    b1c8:	d004      	beq.n	b1d4 <__strtok_r+0x28>
    b1ca:	002c      	movs	r4, r5
    b1cc:	1c65      	adds	r5, r4, #1
    b1ce:	7820      	ldrb	r0, [r4, #0]
    b1d0:	000e      	movs	r6, r1
    b1d2:	e7f2      	b.n	b1ba <__strtok_r+0xe>
    b1d4:	6015      	str	r5, [r2, #0]
    b1d6:	7023      	strb	r3, [r4, #0]
    b1d8:	e015      	b.n	b206 <__strtok_r+0x5a>
    b1da:	2800      	cmp	r0, #0
    b1dc:	d108      	bne.n	b1f0 <__strtok_r+0x44>
    b1de:	6010      	str	r0, [r2, #0]
    b1e0:	e012      	b.n	b208 <__strtok_r+0x5c>
    b1e2:	7807      	ldrb	r7, [r0, #0]
    b1e4:	42be      	cmp	r6, r7
    b1e6:	d007      	beq.n	b1f8 <__strtok_r+0x4c>
    b1e8:	3001      	adds	r0, #1
    b1ea:	2f00      	cmp	r7, #0
    b1ec:	d1f9      	bne.n	b1e2 <__strtok_r+0x36>
    b1ee:	001d      	movs	r5, r3
    b1f0:	1c6b      	adds	r3, r5, #1
    b1f2:	782e      	ldrb	r6, [r5, #0]
    b1f4:	0008      	movs	r0, r1
    b1f6:	e7f4      	b.n	b1e2 <__strtok_r+0x36>
    b1f8:	2e00      	cmp	r6, #0
    b1fa:	d002      	beq.n	b202 <__strtok_r+0x56>
    b1fc:	2100      	movs	r1, #0
    b1fe:	7029      	strb	r1, [r5, #0]
    b200:	e000      	b.n	b204 <__strtok_r+0x58>
    b202:	0033      	movs	r3, r6
    b204:	6013      	str	r3, [r2, #0]
    b206:	0020      	movs	r0, r4
    b208:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000b20c <_strtol_r>:
    b20c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b20e:	001e      	movs	r6, r3
    b210:	4b45      	ldr	r3, [pc, #276]	; (b328 <_strtol_r+0x11c>)
    b212:	b087      	sub	sp, #28
    b214:	681b      	ldr	r3, [r3, #0]
    b216:	9201      	str	r2, [sp, #4]
    b218:	9302      	str	r3, [sp, #8]
    b21a:	2208      	movs	r2, #8
    b21c:	000b      	movs	r3, r1
    b21e:	9005      	str	r0, [sp, #20]
    b220:	9103      	str	r1, [sp, #12]
    b222:	781c      	ldrb	r4, [r3, #0]
    b224:	9902      	ldr	r1, [sp, #8]
    b226:	1c5d      	adds	r5, r3, #1
    b228:	1909      	adds	r1, r1, r4
    b22a:	7848      	ldrb	r0, [r1, #1]
    b22c:	4010      	ands	r0, r2
    b22e:	d001      	beq.n	b234 <_strtol_r+0x28>
    b230:	002b      	movs	r3, r5
    b232:	e7f6      	b.n	b222 <_strtol_r+0x16>
    b234:	2c2d      	cmp	r4, #45	; 0x2d
    b236:	d104      	bne.n	b242 <_strtol_r+0x36>
    b238:	1c9d      	adds	r5, r3, #2
    b23a:	785c      	ldrb	r4, [r3, #1]
    b23c:	2301      	movs	r3, #1
    b23e:	9300      	str	r3, [sp, #0]
    b240:	e004      	b.n	b24c <_strtol_r+0x40>
    b242:	9000      	str	r0, [sp, #0]
    b244:	2c2b      	cmp	r4, #43	; 0x2b
    b246:	d101      	bne.n	b24c <_strtol_r+0x40>
    b248:	785c      	ldrb	r4, [r3, #1]
    b24a:	1c9d      	adds	r5, r3, #2
    b24c:	2e00      	cmp	r6, #0
    b24e:	d002      	beq.n	b256 <_strtol_r+0x4a>
    b250:	2e10      	cmp	r6, #16
    b252:	d10a      	bne.n	b26a <_strtol_r+0x5e>
    b254:	e062      	b.n	b31c <_strtol_r+0x110>
    b256:	2c30      	cmp	r4, #48	; 0x30
    b258:	d15e      	bne.n	b318 <_strtol_r+0x10c>
    b25a:	2220      	movs	r2, #32
    b25c:	782b      	ldrb	r3, [r5, #0]
    b25e:	4393      	bics	r3, r2
    b260:	2b58      	cmp	r3, #88	; 0x58
    b262:	d154      	bne.n	b30e <_strtol_r+0x102>
    b264:	2610      	movs	r6, #16
    b266:	786c      	ldrb	r4, [r5, #1]
    b268:	3502      	adds	r5, #2
    b26a:	9f00      	ldr	r7, [sp, #0]
    b26c:	0031      	movs	r1, r6
    b26e:	1e7b      	subs	r3, r7, #1
    b270:	419f      	sbcs	r7, r3
    b272:	4b2e      	ldr	r3, [pc, #184]	; (b32c <_strtol_r+0x120>)
    b274:	18ff      	adds	r7, r7, r3
    b276:	0038      	movs	r0, r7
    b278:	f7fb fc14 	bl	6aa4 <__aeabi_uidivmod>
    b27c:	0038      	movs	r0, r7
    b27e:	9104      	str	r1, [sp, #16]
    b280:	0031      	movs	r1, r6
    b282:	f7fb fb89 	bl	6998 <__aeabi_uidiv>
    b286:	2300      	movs	r3, #0
    b288:	2203      	movs	r2, #3
    b28a:	0007      	movs	r7, r0
    b28c:	4694      	mov	ip, r2
    b28e:	0018      	movs	r0, r3
    b290:	9a02      	ldr	r2, [sp, #8]
    b292:	1912      	adds	r2, r2, r4
    b294:	7851      	ldrb	r1, [r2, #1]
    b296:	2204      	movs	r2, #4
    b298:	4211      	tst	r1, r2
    b29a:	d001      	beq.n	b2a0 <_strtol_r+0x94>
    b29c:	3c30      	subs	r4, #48	; 0x30
    b29e:	e007      	b.n	b2b0 <_strtol_r+0xa4>
    b2a0:	4662      	mov	r2, ip
    b2a2:	4011      	ands	r1, r2
    b2a4:	d017      	beq.n	b2d6 <_strtol_r+0xca>
    b2a6:	2237      	movs	r2, #55	; 0x37
    b2a8:	2901      	cmp	r1, #1
    b2aa:	d000      	beq.n	b2ae <_strtol_r+0xa2>
    b2ac:	3220      	adds	r2, #32
    b2ae:	1aa4      	subs	r4, r4, r2
    b2b0:	42a6      	cmp	r6, r4
    b2b2:	dd10      	ble.n	b2d6 <_strtol_r+0xca>
    b2b4:	1c5a      	adds	r2, r3, #1
    b2b6:	d00b      	beq.n	b2d0 <_strtol_r+0xc4>
    b2b8:	42b8      	cmp	r0, r7
    b2ba:	d807      	bhi.n	b2cc <_strtol_r+0xc0>
    b2bc:	d102      	bne.n	b2c4 <_strtol_r+0xb8>
    b2be:	9b04      	ldr	r3, [sp, #16]
    b2c0:	429c      	cmp	r4, r3
    b2c2:	dc03      	bgt.n	b2cc <_strtol_r+0xc0>
    b2c4:	4370      	muls	r0, r6
    b2c6:	2301      	movs	r3, #1
    b2c8:	1820      	adds	r0, r4, r0
    b2ca:	e001      	b.n	b2d0 <_strtol_r+0xc4>
    b2cc:	2301      	movs	r3, #1
    b2ce:	425b      	negs	r3, r3
    b2d0:	782c      	ldrb	r4, [r5, #0]
    b2d2:	3501      	adds	r5, #1
    b2d4:	e7dc      	b.n	b290 <_strtol_r+0x84>
    b2d6:	1c5a      	adds	r2, r3, #1
    b2d8:	d10b      	bne.n	b2f2 <_strtol_r+0xe6>
    b2da:	9800      	ldr	r0, [sp, #0]
    b2dc:	9a05      	ldr	r2, [sp, #20]
    b2de:	1e43      	subs	r3, r0, #1
    b2e0:	4198      	sbcs	r0, r3
    b2e2:	4b12      	ldr	r3, [pc, #72]	; (b32c <_strtol_r+0x120>)
    b2e4:	18c0      	adds	r0, r0, r3
    b2e6:	2322      	movs	r3, #34	; 0x22
    b2e8:	6013      	str	r3, [r2, #0]
    b2ea:	9b01      	ldr	r3, [sp, #4]
    b2ec:	2b00      	cmp	r3, #0
    b2ee:	d10a      	bne.n	b306 <_strtol_r+0xfa>
    b2f0:	e017      	b.n	b322 <_strtol_r+0x116>
    b2f2:	9a00      	ldr	r2, [sp, #0]
    b2f4:	2a00      	cmp	r2, #0
    b2f6:	d000      	beq.n	b2fa <_strtol_r+0xee>
    b2f8:	4240      	negs	r0, r0
    b2fa:	9a01      	ldr	r2, [sp, #4]
    b2fc:	2a00      	cmp	r2, #0
    b2fe:	d010      	beq.n	b322 <_strtol_r+0x116>
    b300:	9a03      	ldr	r2, [sp, #12]
    b302:	2b00      	cmp	r3, #0
    b304:	d000      	beq.n	b308 <_strtol_r+0xfc>
    b306:	1e6a      	subs	r2, r5, #1
    b308:	9b01      	ldr	r3, [sp, #4]
    b30a:	601a      	str	r2, [r3, #0]
    b30c:	e009      	b.n	b322 <_strtol_r+0x116>
    b30e:	2430      	movs	r4, #48	; 0x30
    b310:	2e00      	cmp	r6, #0
    b312:	d1aa      	bne.n	b26a <_strtol_r+0x5e>
    b314:	2608      	movs	r6, #8
    b316:	e7a8      	b.n	b26a <_strtol_r+0x5e>
    b318:	260a      	movs	r6, #10
    b31a:	e7a6      	b.n	b26a <_strtol_r+0x5e>
    b31c:	2c30      	cmp	r4, #48	; 0x30
    b31e:	d09c      	beq.n	b25a <_strtol_r+0x4e>
    b320:	e7a3      	b.n	b26a <_strtol_r+0x5e>
    b322:	b007      	add	sp, #28
    b324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b326:	46c0      	nop			; (mov r8, r8)
    b328:	20000100 	.word	0x20000100
    b32c:	7fffffff 	.word	0x7fffffff

0000b330 <strtol>:
    b330:	b510      	push	{r4, lr}
    b332:	0013      	movs	r3, r2
    b334:	000a      	movs	r2, r1
    b336:	0001      	movs	r1, r0
    b338:	4802      	ldr	r0, [pc, #8]	; (b344 <strtol+0x14>)
    b33a:	6800      	ldr	r0, [r0, #0]
    b33c:	f7ff ff66 	bl	b20c <_strtol_r>
    b340:	bd10      	pop	{r4, pc}
    b342:	46c0      	nop			; (mov r8, r8)
    b344:	200000fc 	.word	0x200000fc

0000b348 <__swbuf_r>:
    b348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b34a:	0005      	movs	r5, r0
    b34c:	000f      	movs	r7, r1
    b34e:	0014      	movs	r4, r2
    b350:	2800      	cmp	r0, #0
    b352:	d004      	beq.n	b35e <__swbuf_r+0x16>
    b354:	6983      	ldr	r3, [r0, #24]
    b356:	2b00      	cmp	r3, #0
    b358:	d101      	bne.n	b35e <__swbuf_r+0x16>
    b35a:	f001 f80b 	bl	c374 <__sinit>
    b35e:	4b23      	ldr	r3, [pc, #140]	; (b3ec <__swbuf_r+0xa4>)
    b360:	429c      	cmp	r4, r3
    b362:	d101      	bne.n	b368 <__swbuf_r+0x20>
    b364:	686c      	ldr	r4, [r5, #4]
    b366:	e008      	b.n	b37a <__swbuf_r+0x32>
    b368:	4b21      	ldr	r3, [pc, #132]	; (b3f0 <__swbuf_r+0xa8>)
    b36a:	429c      	cmp	r4, r3
    b36c:	d101      	bne.n	b372 <__swbuf_r+0x2a>
    b36e:	68ac      	ldr	r4, [r5, #8]
    b370:	e003      	b.n	b37a <__swbuf_r+0x32>
    b372:	4b20      	ldr	r3, [pc, #128]	; (b3f4 <__swbuf_r+0xac>)
    b374:	429c      	cmp	r4, r3
    b376:	d100      	bne.n	b37a <__swbuf_r+0x32>
    b378:	68ec      	ldr	r4, [r5, #12]
    b37a:	69a3      	ldr	r3, [r4, #24]
    b37c:	60a3      	str	r3, [r4, #8]
    b37e:	89a3      	ldrh	r3, [r4, #12]
    b380:	071b      	lsls	r3, r3, #28
    b382:	d50a      	bpl.n	b39a <__swbuf_r+0x52>
    b384:	6923      	ldr	r3, [r4, #16]
    b386:	2b00      	cmp	r3, #0
    b388:	d007      	beq.n	b39a <__swbuf_r+0x52>
    b38a:	6823      	ldr	r3, [r4, #0]
    b38c:	6922      	ldr	r2, [r4, #16]
    b38e:	b2fe      	uxtb	r6, r7
    b390:	1a98      	subs	r0, r3, r2
    b392:	6963      	ldr	r3, [r4, #20]
    b394:	4298      	cmp	r0, r3
    b396:	db0f      	blt.n	b3b8 <__swbuf_r+0x70>
    b398:	e008      	b.n	b3ac <__swbuf_r+0x64>
    b39a:	0021      	movs	r1, r4
    b39c:	0028      	movs	r0, r5
    b39e:	f000 f82b 	bl	b3f8 <__swsetup_r>
    b3a2:	2800      	cmp	r0, #0
    b3a4:	d0f1      	beq.n	b38a <__swbuf_r+0x42>
    b3a6:	2001      	movs	r0, #1
    b3a8:	4240      	negs	r0, r0
    b3aa:	e01d      	b.n	b3e8 <__swbuf_r+0xa0>
    b3ac:	0021      	movs	r1, r4
    b3ae:	0028      	movs	r0, r5
    b3b0:	f000 ff72 	bl	c298 <_fflush_r>
    b3b4:	2800      	cmp	r0, #0
    b3b6:	d1f6      	bne.n	b3a6 <__swbuf_r+0x5e>
    b3b8:	68a3      	ldr	r3, [r4, #8]
    b3ba:	3001      	adds	r0, #1
    b3bc:	3b01      	subs	r3, #1
    b3be:	60a3      	str	r3, [r4, #8]
    b3c0:	6823      	ldr	r3, [r4, #0]
    b3c2:	1c5a      	adds	r2, r3, #1
    b3c4:	6022      	str	r2, [r4, #0]
    b3c6:	701f      	strb	r7, [r3, #0]
    b3c8:	6963      	ldr	r3, [r4, #20]
    b3ca:	4298      	cmp	r0, r3
    b3cc:	d005      	beq.n	b3da <__swbuf_r+0x92>
    b3ce:	89a3      	ldrh	r3, [r4, #12]
    b3d0:	0030      	movs	r0, r6
    b3d2:	07db      	lsls	r3, r3, #31
    b3d4:	d508      	bpl.n	b3e8 <__swbuf_r+0xa0>
    b3d6:	2e0a      	cmp	r6, #10
    b3d8:	d106      	bne.n	b3e8 <__swbuf_r+0xa0>
    b3da:	0021      	movs	r1, r4
    b3dc:	0028      	movs	r0, r5
    b3de:	f000 ff5b 	bl	c298 <_fflush_r>
    b3e2:	2800      	cmp	r0, #0
    b3e4:	d1df      	bne.n	b3a6 <__swbuf_r+0x5e>
    b3e6:	0030      	movs	r0, r6
    b3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b3ea:	46c0      	nop			; (mov r8, r8)
    b3ec:	0000edd8 	.word	0x0000edd8
    b3f0:	0000edf8 	.word	0x0000edf8
    b3f4:	0000ee18 	.word	0x0000ee18

0000b3f8 <__swsetup_r>:
    b3f8:	4b36      	ldr	r3, [pc, #216]	; (b4d4 <__swsetup_r+0xdc>)
    b3fa:	b570      	push	{r4, r5, r6, lr}
    b3fc:	681d      	ldr	r5, [r3, #0]
    b3fe:	0006      	movs	r6, r0
    b400:	000c      	movs	r4, r1
    b402:	2d00      	cmp	r5, #0
    b404:	d005      	beq.n	b412 <__swsetup_r+0x1a>
    b406:	69ab      	ldr	r3, [r5, #24]
    b408:	2b00      	cmp	r3, #0
    b40a:	d102      	bne.n	b412 <__swsetup_r+0x1a>
    b40c:	0028      	movs	r0, r5
    b40e:	f000 ffb1 	bl	c374 <__sinit>
    b412:	4b31      	ldr	r3, [pc, #196]	; (b4d8 <__swsetup_r+0xe0>)
    b414:	429c      	cmp	r4, r3
    b416:	d101      	bne.n	b41c <__swsetup_r+0x24>
    b418:	686c      	ldr	r4, [r5, #4]
    b41a:	e008      	b.n	b42e <__swsetup_r+0x36>
    b41c:	4b2f      	ldr	r3, [pc, #188]	; (b4dc <__swsetup_r+0xe4>)
    b41e:	429c      	cmp	r4, r3
    b420:	d101      	bne.n	b426 <__swsetup_r+0x2e>
    b422:	68ac      	ldr	r4, [r5, #8]
    b424:	e003      	b.n	b42e <__swsetup_r+0x36>
    b426:	4b2e      	ldr	r3, [pc, #184]	; (b4e0 <__swsetup_r+0xe8>)
    b428:	429c      	cmp	r4, r3
    b42a:	d100      	bne.n	b42e <__swsetup_r+0x36>
    b42c:	68ec      	ldr	r4, [r5, #12]
    b42e:	220c      	movs	r2, #12
    b430:	5ea3      	ldrsh	r3, [r4, r2]
    b432:	b29a      	uxth	r2, r3
    b434:	0711      	lsls	r1, r2, #28
    b436:	d423      	bmi.n	b480 <__swsetup_r+0x88>
    b438:	06d1      	lsls	r1, r2, #27
    b43a:	d407      	bmi.n	b44c <__swsetup_r+0x54>
    b43c:	2209      	movs	r2, #9
    b43e:	2001      	movs	r0, #1
    b440:	6032      	str	r2, [r6, #0]
    b442:	3237      	adds	r2, #55	; 0x37
    b444:	4313      	orrs	r3, r2
    b446:	81a3      	strh	r3, [r4, #12]
    b448:	4240      	negs	r0, r0
    b44a:	e042      	b.n	b4d2 <__swsetup_r+0xda>
    b44c:	0753      	lsls	r3, r2, #29
    b44e:	d513      	bpl.n	b478 <__swsetup_r+0x80>
    b450:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b452:	2900      	cmp	r1, #0
    b454:	d008      	beq.n	b468 <__swsetup_r+0x70>
    b456:	0023      	movs	r3, r4
    b458:	3344      	adds	r3, #68	; 0x44
    b45a:	4299      	cmp	r1, r3
    b45c:	d002      	beq.n	b464 <__swsetup_r+0x6c>
    b45e:	0030      	movs	r0, r6
    b460:	f7fe f918 	bl	9694 <_free_r>
    b464:	2300      	movs	r3, #0
    b466:	6363      	str	r3, [r4, #52]	; 0x34
    b468:	2224      	movs	r2, #36	; 0x24
    b46a:	89a3      	ldrh	r3, [r4, #12]
    b46c:	4393      	bics	r3, r2
    b46e:	81a3      	strh	r3, [r4, #12]
    b470:	2300      	movs	r3, #0
    b472:	6063      	str	r3, [r4, #4]
    b474:	6923      	ldr	r3, [r4, #16]
    b476:	6023      	str	r3, [r4, #0]
    b478:	2208      	movs	r2, #8
    b47a:	89a3      	ldrh	r3, [r4, #12]
    b47c:	4313      	orrs	r3, r2
    b47e:	81a3      	strh	r3, [r4, #12]
    b480:	6923      	ldr	r3, [r4, #16]
    b482:	2b00      	cmp	r3, #0
    b484:	d10b      	bne.n	b49e <__swsetup_r+0xa6>
    b486:	23a0      	movs	r3, #160	; 0xa0
    b488:	89a2      	ldrh	r2, [r4, #12]
    b48a:	009b      	lsls	r3, r3, #2
    b48c:	4013      	ands	r3, r2
    b48e:	2280      	movs	r2, #128	; 0x80
    b490:	0092      	lsls	r2, r2, #2
    b492:	4293      	cmp	r3, r2
    b494:	d003      	beq.n	b49e <__swsetup_r+0xa6>
    b496:	0021      	movs	r1, r4
    b498:	0030      	movs	r0, r6
    b49a:	f001 fb59 	bl	cb50 <__smakebuf_r>
    b49e:	2301      	movs	r3, #1
    b4a0:	89a2      	ldrh	r2, [r4, #12]
    b4a2:	4013      	ands	r3, r2
    b4a4:	d005      	beq.n	b4b2 <__swsetup_r+0xba>
    b4a6:	2300      	movs	r3, #0
    b4a8:	60a3      	str	r3, [r4, #8]
    b4aa:	6963      	ldr	r3, [r4, #20]
    b4ac:	425b      	negs	r3, r3
    b4ae:	61a3      	str	r3, [r4, #24]
    b4b0:	e003      	b.n	b4ba <__swsetup_r+0xc2>
    b4b2:	0792      	lsls	r2, r2, #30
    b4b4:	d400      	bmi.n	b4b8 <__swsetup_r+0xc0>
    b4b6:	6963      	ldr	r3, [r4, #20]
    b4b8:	60a3      	str	r3, [r4, #8]
    b4ba:	2000      	movs	r0, #0
    b4bc:	6923      	ldr	r3, [r4, #16]
    b4be:	4283      	cmp	r3, r0
    b4c0:	d107      	bne.n	b4d2 <__swsetup_r+0xda>
    b4c2:	220c      	movs	r2, #12
    b4c4:	5ea3      	ldrsh	r3, [r4, r2]
    b4c6:	061a      	lsls	r2, r3, #24
    b4c8:	d503      	bpl.n	b4d2 <__swsetup_r+0xda>
    b4ca:	2240      	movs	r2, #64	; 0x40
    b4cc:	4313      	orrs	r3, r2
    b4ce:	81a3      	strh	r3, [r4, #12]
    b4d0:	3801      	subs	r0, #1
    b4d2:	bd70      	pop	{r4, r5, r6, pc}
    b4d4:	200000fc 	.word	0x200000fc
    b4d8:	0000edd8 	.word	0x0000edd8
    b4dc:	0000edf8 	.word	0x0000edf8
    b4e0:	0000ee18 	.word	0x0000ee18

0000b4e4 <abort>:
    b4e4:	b510      	push	{r4, lr}
    b4e6:	2006      	movs	r0, #6
    b4e8:	f002 f932 	bl	d750 <raise>
    b4ec:	2001      	movs	r0, #1
    b4ee:	f002 faa9 	bl	da44 <_exit>

0000b4f2 <quorem>:
    b4f2:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4f4:	6903      	ldr	r3, [r0, #16]
    b4f6:	690c      	ldr	r4, [r1, #16]
    b4f8:	b089      	sub	sp, #36	; 0x24
    b4fa:	0007      	movs	r7, r0
    b4fc:	9105      	str	r1, [sp, #20]
    b4fe:	2600      	movs	r6, #0
    b500:	429c      	cmp	r4, r3
    b502:	dc79      	bgt.n	b5f8 <quorem+0x106>
    b504:	000b      	movs	r3, r1
    b506:	3c01      	subs	r4, #1
    b508:	3314      	adds	r3, #20
    b50a:	00a5      	lsls	r5, r4, #2
    b50c:	9303      	str	r3, [sp, #12]
    b50e:	195b      	adds	r3, r3, r5
    b510:	9304      	str	r3, [sp, #16]
    b512:	0003      	movs	r3, r0
    b514:	3314      	adds	r3, #20
    b516:	9302      	str	r3, [sp, #8]
    b518:	195d      	adds	r5, r3, r5
    b51a:	9b04      	ldr	r3, [sp, #16]
    b51c:	6828      	ldr	r0, [r5, #0]
    b51e:	681b      	ldr	r3, [r3, #0]
    b520:	1c59      	adds	r1, r3, #1
    b522:	9301      	str	r3, [sp, #4]
    b524:	f7fb fa38 	bl	6998 <__aeabi_uidiv>
    b528:	9001      	str	r0, [sp, #4]
    b52a:	42b0      	cmp	r0, r6
    b52c:	d033      	beq.n	b596 <quorem+0xa4>
    b52e:	9b03      	ldr	r3, [sp, #12]
    b530:	9802      	ldr	r0, [sp, #8]
    b532:	469c      	mov	ip, r3
    b534:	9606      	str	r6, [sp, #24]
    b536:	4663      	mov	r3, ip
    b538:	cb04      	ldmia	r3!, {r2}
    b53a:	469c      	mov	ip, r3
    b53c:	9b01      	ldr	r3, [sp, #4]
    b53e:	b291      	uxth	r1, r2
    b540:	4359      	muls	r1, r3
    b542:	0c12      	lsrs	r2, r2, #16
    b544:	435a      	muls	r2, r3
    b546:	1989      	adds	r1, r1, r6
    b548:	0c0b      	lsrs	r3, r1, #16
    b54a:	18d3      	adds	r3, r2, r3
    b54c:	9307      	str	r3, [sp, #28]
    b54e:	9a06      	ldr	r2, [sp, #24]
    b550:	0c1e      	lsrs	r6, r3, #16
    b552:	8803      	ldrh	r3, [r0, #0]
    b554:	b289      	uxth	r1, r1
    b556:	189b      	adds	r3, r3, r2
    b558:	6802      	ldr	r2, [r0, #0]
    b55a:	1a5b      	subs	r3, r3, r1
    b55c:	0c11      	lsrs	r1, r2, #16
    b55e:	466a      	mov	r2, sp
    b560:	8b92      	ldrh	r2, [r2, #28]
    b562:	1a8a      	subs	r2, r1, r2
    b564:	1419      	asrs	r1, r3, #16
    b566:	1852      	adds	r2, r2, r1
    b568:	1411      	asrs	r1, r2, #16
    b56a:	b29b      	uxth	r3, r3
    b56c:	0412      	lsls	r2, r2, #16
    b56e:	4313      	orrs	r3, r2
    b570:	c008      	stmia	r0!, {r3}
    b572:	9b04      	ldr	r3, [sp, #16]
    b574:	9106      	str	r1, [sp, #24]
    b576:	4563      	cmp	r3, ip
    b578:	d2dd      	bcs.n	b536 <quorem+0x44>
    b57a:	682b      	ldr	r3, [r5, #0]
    b57c:	2b00      	cmp	r3, #0
    b57e:	d10a      	bne.n	b596 <quorem+0xa4>
    b580:	9b02      	ldr	r3, [sp, #8]
    b582:	3d04      	subs	r5, #4
    b584:	42ab      	cmp	r3, r5
    b586:	d301      	bcc.n	b58c <quorem+0x9a>
    b588:	613c      	str	r4, [r7, #16]
    b58a:	e004      	b.n	b596 <quorem+0xa4>
    b58c:	682b      	ldr	r3, [r5, #0]
    b58e:	2b00      	cmp	r3, #0
    b590:	d1fa      	bne.n	b588 <quorem+0x96>
    b592:	3c01      	subs	r4, #1
    b594:	e7f4      	b.n	b580 <quorem+0x8e>
    b596:	9905      	ldr	r1, [sp, #20]
    b598:	0038      	movs	r0, r7
    b59a:	f001 fd71 	bl	d080 <__mcmp>
    b59e:	2800      	cmp	r0, #0
    b5a0:	db29      	blt.n	b5f6 <quorem+0x104>
    b5a2:	2000      	movs	r0, #0
    b5a4:	9b01      	ldr	r3, [sp, #4]
    b5a6:	9902      	ldr	r1, [sp, #8]
    b5a8:	3301      	adds	r3, #1
    b5aa:	9a03      	ldr	r2, [sp, #12]
    b5ac:	9301      	str	r3, [sp, #4]
    b5ae:	ca40      	ldmia	r2!, {r6}
    b5b0:	880b      	ldrh	r3, [r1, #0]
    b5b2:	1818      	adds	r0, r3, r0
    b5b4:	b2b3      	uxth	r3, r6
    b5b6:	1ac3      	subs	r3, r0, r3
    b5b8:	6808      	ldr	r0, [r1, #0]
    b5ba:	0c36      	lsrs	r6, r6, #16
    b5bc:	0c00      	lsrs	r0, r0, #16
    b5be:	1b80      	subs	r0, r0, r6
    b5c0:	141d      	asrs	r5, r3, #16
    b5c2:	1945      	adds	r5, r0, r5
    b5c4:	1428      	asrs	r0, r5, #16
    b5c6:	b29b      	uxth	r3, r3
    b5c8:	042d      	lsls	r5, r5, #16
    b5ca:	432b      	orrs	r3, r5
    b5cc:	c108      	stmia	r1!, {r3}
    b5ce:	9b04      	ldr	r3, [sp, #16]
    b5d0:	4293      	cmp	r3, r2
    b5d2:	d2ec      	bcs.n	b5ae <quorem+0xbc>
    b5d4:	9a02      	ldr	r2, [sp, #8]
    b5d6:	00a3      	lsls	r3, r4, #2
    b5d8:	18d3      	adds	r3, r2, r3
    b5da:	681a      	ldr	r2, [r3, #0]
    b5dc:	2a00      	cmp	r2, #0
    b5de:	d10a      	bne.n	b5f6 <quorem+0x104>
    b5e0:	9a02      	ldr	r2, [sp, #8]
    b5e2:	3b04      	subs	r3, #4
    b5e4:	429a      	cmp	r2, r3
    b5e6:	d301      	bcc.n	b5ec <quorem+0xfa>
    b5e8:	613c      	str	r4, [r7, #16]
    b5ea:	e004      	b.n	b5f6 <quorem+0x104>
    b5ec:	681a      	ldr	r2, [r3, #0]
    b5ee:	2a00      	cmp	r2, #0
    b5f0:	d1fa      	bne.n	b5e8 <quorem+0xf6>
    b5f2:	3c01      	subs	r4, #1
    b5f4:	e7f4      	b.n	b5e0 <quorem+0xee>
    b5f6:	9e01      	ldr	r6, [sp, #4]
    b5f8:	0030      	movs	r0, r6
    b5fa:	b009      	add	sp, #36	; 0x24
    b5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000b600 <_dtoa_r>:
    b600:	b5f0      	push	{r4, r5, r6, r7, lr}
    b602:	0016      	movs	r6, r2
    b604:	001f      	movs	r7, r3
    b606:	6a44      	ldr	r4, [r0, #36]	; 0x24
    b608:	b09d      	sub	sp, #116	; 0x74
    b60a:	9004      	str	r0, [sp, #16]
    b60c:	9d25      	ldr	r5, [sp, #148]	; 0x94
    b60e:	9606      	str	r6, [sp, #24]
    b610:	9707      	str	r7, [sp, #28]
    b612:	2c00      	cmp	r4, #0
    b614:	d108      	bne.n	b628 <_dtoa_r+0x28>
    b616:	2010      	movs	r0, #16
    b618:	f7fd fff2 	bl	9600 <malloc>
    b61c:	9b04      	ldr	r3, [sp, #16]
    b61e:	6258      	str	r0, [r3, #36]	; 0x24
    b620:	6044      	str	r4, [r0, #4]
    b622:	6084      	str	r4, [r0, #8]
    b624:	6004      	str	r4, [r0, #0]
    b626:	60c4      	str	r4, [r0, #12]
    b628:	9b04      	ldr	r3, [sp, #16]
    b62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b62c:	6819      	ldr	r1, [r3, #0]
    b62e:	2900      	cmp	r1, #0
    b630:	d00b      	beq.n	b64a <_dtoa_r+0x4a>
    b632:	685a      	ldr	r2, [r3, #4]
    b634:	2301      	movs	r3, #1
    b636:	4093      	lsls	r3, r2
    b638:	604a      	str	r2, [r1, #4]
    b63a:	608b      	str	r3, [r1, #8]
    b63c:	9804      	ldr	r0, [sp, #16]
    b63e:	f001 fb08 	bl	cc52 <_Bfree>
    b642:	2200      	movs	r2, #0
    b644:	9b04      	ldr	r3, [sp, #16]
    b646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b648:	601a      	str	r2, [r3, #0]
    b64a:	9b07      	ldr	r3, [sp, #28]
    b64c:	2b00      	cmp	r3, #0
    b64e:	da05      	bge.n	b65c <_dtoa_r+0x5c>
    b650:	2301      	movs	r3, #1
    b652:	602b      	str	r3, [r5, #0]
    b654:	007b      	lsls	r3, r7, #1
    b656:	085b      	lsrs	r3, r3, #1
    b658:	9307      	str	r3, [sp, #28]
    b65a:	e001      	b.n	b660 <_dtoa_r+0x60>
    b65c:	2300      	movs	r3, #0
    b65e:	602b      	str	r3, [r5, #0]
    b660:	9c07      	ldr	r4, [sp, #28]
    b662:	4bc8      	ldr	r3, [pc, #800]	; (b984 <_dtoa_r+0x384>)
    b664:	0022      	movs	r2, r4
    b666:	9319      	str	r3, [sp, #100]	; 0x64
    b668:	401a      	ands	r2, r3
    b66a:	429a      	cmp	r2, r3
    b66c:	d119      	bne.n	b6a2 <_dtoa_r+0xa2>
    b66e:	4bc6      	ldr	r3, [pc, #792]	; (b988 <_dtoa_r+0x388>)
    b670:	9a24      	ldr	r2, [sp, #144]	; 0x90
    b672:	6013      	str	r3, [r2, #0]
    b674:	9a06      	ldr	r2, [sp, #24]
    b676:	4bc5      	ldr	r3, [pc, #788]	; (b98c <_dtoa_r+0x38c>)
    b678:	2a00      	cmp	r2, #0
    b67a:	d102      	bne.n	b682 <_dtoa_r+0x82>
    b67c:	0324      	lsls	r4, r4, #12
    b67e:	d100      	bne.n	b682 <_dtoa_r+0x82>
    b680:	4bc3      	ldr	r3, [pc, #780]	; (b990 <_dtoa_r+0x390>)
    b682:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b684:	0018      	movs	r0, r3
    b686:	2a00      	cmp	r2, #0
    b688:	d101      	bne.n	b68e <_dtoa_r+0x8e>
    b68a:	f000 fd7d 	bl	c188 <_dtoa_r+0xb88>
    b68e:	78d9      	ldrb	r1, [r3, #3]
    b690:	1cda      	adds	r2, r3, #3
    b692:	2900      	cmp	r1, #0
    b694:	d000      	beq.n	b698 <_dtoa_r+0x98>
    b696:	3205      	adds	r2, #5
    b698:	9926      	ldr	r1, [sp, #152]	; 0x98
    b69a:	0018      	movs	r0, r3
    b69c:	600a      	str	r2, [r1, #0]
    b69e:	f000 fd73 	bl	c188 <_dtoa_r+0xb88>
    b6a2:	9e06      	ldr	r6, [sp, #24]
    b6a4:	9f07      	ldr	r7, [sp, #28]
    b6a6:	2200      	movs	r2, #0
    b6a8:	2300      	movs	r3, #0
    b6aa:	0030      	movs	r0, r6
    b6ac:	0039      	movs	r1, r7
    b6ae:	f7fb faf9 	bl	6ca4 <__aeabi_dcmpeq>
    b6b2:	1e05      	subs	r5, r0, #0
    b6b4:	d00e      	beq.n	b6d4 <_dtoa_r+0xd4>
    b6b6:	2301      	movs	r3, #1
    b6b8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    b6ba:	6013      	str	r3, [r2, #0]
    b6bc:	4bb5      	ldr	r3, [pc, #724]	; (b994 <_dtoa_r+0x394>)
    b6be:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b6c0:	0018      	movs	r0, r3
    b6c2:	2a00      	cmp	r2, #0
    b6c4:	d101      	bne.n	b6ca <_dtoa_r+0xca>
    b6c6:	f000 fd5f 	bl	c188 <_dtoa_r+0xb88>
    b6ca:	4ab3      	ldr	r2, [pc, #716]	; (b998 <_dtoa_r+0x398>)
    b6cc:	9926      	ldr	r1, [sp, #152]	; 0x98
    b6ce:	600a      	str	r2, [r1, #0]
    b6d0:	f000 fd5a 	bl	c188 <_dtoa_r+0xb88>
    b6d4:	ab1a      	add	r3, sp, #104	; 0x68
    b6d6:	9301      	str	r3, [sp, #4]
    b6d8:	ab1b      	add	r3, sp, #108	; 0x6c
    b6da:	9300      	str	r3, [sp, #0]
    b6dc:	0032      	movs	r2, r6
    b6de:	003b      	movs	r3, r7
    b6e0:	9804      	ldr	r0, [sp, #16]
    b6e2:	f001 fdc3 	bl	d26c <__d2b>
    b6e6:	0063      	lsls	r3, r4, #1
    b6e8:	9005      	str	r0, [sp, #20]
    b6ea:	0d5b      	lsrs	r3, r3, #21
    b6ec:	d009      	beq.n	b702 <_dtoa_r+0x102>
    b6ee:	033a      	lsls	r2, r7, #12
    b6f0:	4caa      	ldr	r4, [pc, #680]	; (b99c <_dtoa_r+0x39c>)
    b6f2:	0b12      	lsrs	r2, r2, #12
    b6f4:	4314      	orrs	r4, r2
    b6f6:	4aaa      	ldr	r2, [pc, #680]	; (b9a0 <_dtoa_r+0x3a0>)
    b6f8:	0030      	movs	r0, r6
    b6fa:	0021      	movs	r1, r4
    b6fc:	189e      	adds	r6, r3, r2
    b6fe:	9517      	str	r5, [sp, #92]	; 0x5c
    b700:	e01a      	b.n	b738 <_dtoa_r+0x138>
    b702:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b704:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    b706:	189e      	adds	r6, r3, r2
    b708:	4ba6      	ldr	r3, [pc, #664]	; (b9a4 <_dtoa_r+0x3a4>)
    b70a:	18f3      	adds	r3, r6, r3
    b70c:	2b20      	cmp	r3, #32
    b70e:	dd08      	ble.n	b722 <_dtoa_r+0x122>
    b710:	4aa5      	ldr	r2, [pc, #660]	; (b9a8 <_dtoa_r+0x3a8>)
    b712:	9806      	ldr	r0, [sp, #24]
    b714:	18b2      	adds	r2, r6, r2
    b716:	40d0      	lsrs	r0, r2
    b718:	2240      	movs	r2, #64	; 0x40
    b71a:	1ad3      	subs	r3, r2, r3
    b71c:	409c      	lsls	r4, r3
    b71e:	4320      	orrs	r0, r4
    b720:	e003      	b.n	b72a <_dtoa_r+0x12a>
    b722:	2220      	movs	r2, #32
    b724:	9806      	ldr	r0, [sp, #24]
    b726:	1ad3      	subs	r3, r2, r3
    b728:	4098      	lsls	r0, r3
    b72a:	f7fd fdbd 	bl	92a8 <__aeabi_ui2d>
    b72e:	2301      	movs	r3, #1
    b730:	4c9e      	ldr	r4, [pc, #632]	; (b9ac <_dtoa_r+0x3ac>)
    b732:	3e01      	subs	r6, #1
    b734:	1909      	adds	r1, r1, r4
    b736:	9317      	str	r3, [sp, #92]	; 0x5c
    b738:	2200      	movs	r2, #0
    b73a:	4b9d      	ldr	r3, [pc, #628]	; (b9b0 <_dtoa_r+0x3b0>)
    b73c:	f7fd fa0a 	bl	8b54 <__aeabi_dsub>
    b740:	4a9c      	ldr	r2, [pc, #624]	; (b9b4 <_dtoa_r+0x3b4>)
    b742:	4b9d      	ldr	r3, [pc, #628]	; (b9b8 <_dtoa_r+0x3b8>)
    b744:	f7fc ff8c 	bl	8660 <__aeabi_dmul>
    b748:	4a9c      	ldr	r2, [pc, #624]	; (b9bc <_dtoa_r+0x3bc>)
    b74a:	4b9d      	ldr	r3, [pc, #628]	; (b9c0 <_dtoa_r+0x3c0>)
    b74c:	f7fc f838 	bl	77c0 <__aeabi_dadd>
    b750:	0004      	movs	r4, r0
    b752:	0030      	movs	r0, r6
    b754:	000d      	movs	r5, r1
    b756:	f002 f8e5 	bl	d924 <__aeabi_i2d>
    b75a:	4a9a      	ldr	r2, [pc, #616]	; (b9c4 <_dtoa_r+0x3c4>)
    b75c:	4b9a      	ldr	r3, [pc, #616]	; (b9c8 <_dtoa_r+0x3c8>)
    b75e:	f7fc ff7f 	bl	8660 <__aeabi_dmul>
    b762:	0002      	movs	r2, r0
    b764:	000b      	movs	r3, r1
    b766:	0020      	movs	r0, r4
    b768:	0029      	movs	r1, r5
    b76a:	f7fc f829 	bl	77c0 <__aeabi_dadd>
    b76e:	0004      	movs	r4, r0
    b770:	000d      	movs	r5, r1
    b772:	f7fd fd63 	bl	923c <__aeabi_d2iz>
    b776:	2200      	movs	r2, #0
    b778:	9003      	str	r0, [sp, #12]
    b77a:	2300      	movs	r3, #0
    b77c:	0020      	movs	r0, r4
    b77e:	0029      	movs	r1, r5
    b780:	f7fb fa96 	bl	6cb0 <__aeabi_dcmplt>
    b784:	2800      	cmp	r0, #0
    b786:	d00d      	beq.n	b7a4 <_dtoa_r+0x1a4>
    b788:	9803      	ldr	r0, [sp, #12]
    b78a:	f002 f8cb 	bl	d924 <__aeabi_i2d>
    b78e:	0002      	movs	r2, r0
    b790:	000b      	movs	r3, r1
    b792:	0020      	movs	r0, r4
    b794:	0029      	movs	r1, r5
    b796:	f7fb fa85 	bl	6ca4 <__aeabi_dcmpeq>
    b79a:	4243      	negs	r3, r0
    b79c:	4143      	adcs	r3, r0
    b79e:	9a03      	ldr	r2, [sp, #12]
    b7a0:	1ad3      	subs	r3, r2, r3
    b7a2:	9303      	str	r3, [sp, #12]
    b7a4:	2301      	movs	r3, #1
    b7a6:	9316      	str	r3, [sp, #88]	; 0x58
    b7a8:	9b03      	ldr	r3, [sp, #12]
    b7aa:	2b16      	cmp	r3, #22
    b7ac:	d811      	bhi.n	b7d2 <_dtoa_r+0x1d2>
    b7ae:	4987      	ldr	r1, [pc, #540]	; (b9cc <_dtoa_r+0x3cc>)
    b7b0:	00db      	lsls	r3, r3, #3
    b7b2:	18c9      	adds	r1, r1, r3
    b7b4:	6808      	ldr	r0, [r1, #0]
    b7b6:	6849      	ldr	r1, [r1, #4]
    b7b8:	9a06      	ldr	r2, [sp, #24]
    b7ba:	9b07      	ldr	r3, [sp, #28]
    b7bc:	f7fb fa8c 	bl	6cd8 <__aeabi_dcmpgt>
    b7c0:	2800      	cmp	r0, #0
    b7c2:	d005      	beq.n	b7d0 <_dtoa_r+0x1d0>
    b7c4:	9b03      	ldr	r3, [sp, #12]
    b7c6:	3b01      	subs	r3, #1
    b7c8:	9303      	str	r3, [sp, #12]
    b7ca:	2300      	movs	r3, #0
    b7cc:	9316      	str	r3, [sp, #88]	; 0x58
    b7ce:	e000      	b.n	b7d2 <_dtoa_r+0x1d2>
    b7d0:	9016      	str	r0, [sp, #88]	; 0x58
    b7d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b7d4:	1b9e      	subs	r6, r3, r6
    b7d6:	2300      	movs	r3, #0
    b7d8:	930b      	str	r3, [sp, #44]	; 0x2c
    b7da:	3e01      	subs	r6, #1
    b7dc:	960c      	str	r6, [sp, #48]	; 0x30
    b7de:	d504      	bpl.n	b7ea <_dtoa_r+0x1ea>
    b7e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b7e2:	425b      	negs	r3, r3
    b7e4:	930b      	str	r3, [sp, #44]	; 0x2c
    b7e6:	2300      	movs	r3, #0
    b7e8:	930c      	str	r3, [sp, #48]	; 0x30
    b7ea:	9b03      	ldr	r3, [sp, #12]
    b7ec:	2b00      	cmp	r3, #0
    b7ee:	db08      	blt.n	b802 <_dtoa_r+0x202>
    b7f0:	9a03      	ldr	r2, [sp, #12]
    b7f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b7f4:	4694      	mov	ip, r2
    b7f6:	4463      	add	r3, ip
    b7f8:	930c      	str	r3, [sp, #48]	; 0x30
    b7fa:	2300      	movs	r3, #0
    b7fc:	9211      	str	r2, [sp, #68]	; 0x44
    b7fe:	9308      	str	r3, [sp, #32]
    b800:	e007      	b.n	b812 <_dtoa_r+0x212>
    b802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b804:	9a03      	ldr	r2, [sp, #12]
    b806:	1a9b      	subs	r3, r3, r2
    b808:	930b      	str	r3, [sp, #44]	; 0x2c
    b80a:	4253      	negs	r3, r2
    b80c:	9308      	str	r3, [sp, #32]
    b80e:	2300      	movs	r3, #0
    b810:	9311      	str	r3, [sp, #68]	; 0x44
    b812:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b814:	2501      	movs	r5, #1
    b816:	2b09      	cmp	r3, #9
    b818:	d825      	bhi.n	b866 <_dtoa_r+0x266>
    b81a:	2b05      	cmp	r3, #5
    b81c:	dd02      	ble.n	b824 <_dtoa_r+0x224>
    b81e:	2500      	movs	r5, #0
    b820:	3b04      	subs	r3, #4
    b822:	9322      	str	r3, [sp, #136]	; 0x88
    b824:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b826:	1e98      	subs	r0, r3, #2
    b828:	2803      	cmp	r0, #3
    b82a:	d824      	bhi.n	b876 <_dtoa_r+0x276>
    b82c:	f7fb f8aa 	bl	6984 <__gnu_thumb1_case_uqi>
    b830:	04020e06 	.word	0x04020e06
    b834:	2301      	movs	r3, #1
    b836:	e002      	b.n	b83e <_dtoa_r+0x23e>
    b838:	2301      	movs	r3, #1
    b83a:	e008      	b.n	b84e <_dtoa_r+0x24e>
    b83c:	2300      	movs	r3, #0
    b83e:	9310      	str	r3, [sp, #64]	; 0x40
    b840:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    b842:	2b00      	cmp	r3, #0
    b844:	dd20      	ble.n	b888 <_dtoa_r+0x288>
    b846:	001f      	movs	r7, r3
    b848:	930a      	str	r3, [sp, #40]	; 0x28
    b84a:	e021      	b.n	b890 <_dtoa_r+0x290>
    b84c:	2300      	movs	r3, #0
    b84e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    b850:	9310      	str	r3, [sp, #64]	; 0x40
    b852:	9b03      	ldr	r3, [sp, #12]
    b854:	189f      	adds	r7, r3, r2
    b856:	1c7b      	adds	r3, r7, #1
    b858:	930a      	str	r3, [sp, #40]	; 0x28
    b85a:	2301      	movs	r3, #1
    b85c:	18fa      	adds	r2, r7, r3
    b85e:	2a00      	cmp	r2, #0
    b860:	dd16      	ble.n	b890 <_dtoa_r+0x290>
    b862:	0013      	movs	r3, r2
    b864:	e014      	b.n	b890 <_dtoa_r+0x290>
    b866:	2701      	movs	r7, #1
    b868:	2300      	movs	r3, #0
    b86a:	427f      	negs	r7, r7
    b86c:	9322      	str	r3, [sp, #136]	; 0x88
    b86e:	9510      	str	r5, [sp, #64]	; 0x40
    b870:	970a      	str	r7, [sp, #40]	; 0x28
    b872:	3312      	adds	r3, #18
    b874:	e005      	b.n	b882 <_dtoa_r+0x282>
    b876:	2701      	movs	r7, #1
    b878:	2301      	movs	r3, #1
    b87a:	427f      	negs	r7, r7
    b87c:	9310      	str	r3, [sp, #64]	; 0x40
    b87e:	970a      	str	r7, [sp, #40]	; 0x28
    b880:	3311      	adds	r3, #17
    b882:	2200      	movs	r2, #0
    b884:	9223      	str	r2, [sp, #140]	; 0x8c
    b886:	e003      	b.n	b890 <_dtoa_r+0x290>
    b888:	2701      	movs	r7, #1
    b88a:	003b      	movs	r3, r7
    b88c:	970a      	str	r7, [sp, #40]	; 0x28
    b88e:	9723      	str	r7, [sp, #140]	; 0x8c
    b890:	9a04      	ldr	r2, [sp, #16]
    b892:	6a54      	ldr	r4, [r2, #36]	; 0x24
    b894:	2200      	movs	r2, #0
    b896:	6062      	str	r2, [r4, #4]
    b898:	3204      	adds	r2, #4
    b89a:	0011      	movs	r1, r2
    b89c:	3114      	adds	r1, #20
    b89e:	4299      	cmp	r1, r3
    b8a0:	d804      	bhi.n	b8ac <_dtoa_r+0x2ac>
    b8a2:	6861      	ldr	r1, [r4, #4]
    b8a4:	0052      	lsls	r2, r2, #1
    b8a6:	3101      	adds	r1, #1
    b8a8:	6061      	str	r1, [r4, #4]
    b8aa:	e7f6      	b.n	b89a <_dtoa_r+0x29a>
    b8ac:	6861      	ldr	r1, [r4, #4]
    b8ae:	9804      	ldr	r0, [sp, #16]
    b8b0:	f001 f997 	bl	cbe2 <_Balloc>
    b8b4:	9b04      	ldr	r3, [sp, #16]
    b8b6:	6020      	str	r0, [r4, #0]
    b8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b8ba:	681b      	ldr	r3, [r3, #0]
    b8bc:	930d      	str	r3, [sp, #52]	; 0x34
    b8be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b8c0:	2b0e      	cmp	r3, #14
    b8c2:	d900      	bls.n	b8c6 <_dtoa_r+0x2c6>
    b8c4:	e181      	b.n	bbca <_dtoa_r+0x5ca>
    b8c6:	2d00      	cmp	r5, #0
    b8c8:	d100      	bne.n	b8cc <_dtoa_r+0x2cc>
    b8ca:	e17e      	b.n	bbca <_dtoa_r+0x5ca>
    b8cc:	9b06      	ldr	r3, [sp, #24]
    b8ce:	9c07      	ldr	r4, [sp, #28]
    b8d0:	9314      	str	r3, [sp, #80]	; 0x50
    b8d2:	9415      	str	r4, [sp, #84]	; 0x54
    b8d4:	9b03      	ldr	r3, [sp, #12]
    b8d6:	2b00      	cmp	r3, #0
    b8d8:	dd31      	ble.n	b93e <_dtoa_r+0x33e>
    b8da:	220f      	movs	r2, #15
    b8dc:	493b      	ldr	r1, [pc, #236]	; (b9cc <_dtoa_r+0x3cc>)
    b8de:	4013      	ands	r3, r2
    b8e0:	00db      	lsls	r3, r3, #3
    b8e2:	18cb      	adds	r3, r1, r3
    b8e4:	685c      	ldr	r4, [r3, #4]
    b8e6:	681b      	ldr	r3, [r3, #0]
    b8e8:	930e      	str	r3, [sp, #56]	; 0x38
    b8ea:	940f      	str	r4, [sp, #60]	; 0x3c
    b8ec:	9b03      	ldr	r3, [sp, #12]
    b8ee:	2402      	movs	r4, #2
    b8f0:	111d      	asrs	r5, r3, #4
    b8f2:	06eb      	lsls	r3, r5, #27
    b8f4:	d50a      	bpl.n	b90c <_dtoa_r+0x30c>
    b8f6:	9814      	ldr	r0, [sp, #80]	; 0x50
    b8f8:	9915      	ldr	r1, [sp, #84]	; 0x54
    b8fa:	4b35      	ldr	r3, [pc, #212]	; (b9d0 <_dtoa_r+0x3d0>)
    b8fc:	4015      	ands	r5, r2
    b8fe:	6a1a      	ldr	r2, [r3, #32]
    b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b902:	f7fc fa89 	bl	7e18 <__aeabi_ddiv>
    b906:	9006      	str	r0, [sp, #24]
    b908:	9107      	str	r1, [sp, #28]
    b90a:	3401      	adds	r4, #1
    b90c:	4e30      	ldr	r6, [pc, #192]	; (b9d0 <_dtoa_r+0x3d0>)
    b90e:	2d00      	cmp	r5, #0
    b910:	d00e      	beq.n	b930 <_dtoa_r+0x330>
    b912:	2301      	movs	r3, #1
    b914:	421d      	tst	r5, r3
    b916:	d008      	beq.n	b92a <_dtoa_r+0x32a>
    b918:	980e      	ldr	r0, [sp, #56]	; 0x38
    b91a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b91c:	18e4      	adds	r4, r4, r3
    b91e:	6832      	ldr	r2, [r6, #0]
    b920:	6873      	ldr	r3, [r6, #4]
    b922:	f7fc fe9d 	bl	8660 <__aeabi_dmul>
    b926:	900e      	str	r0, [sp, #56]	; 0x38
    b928:	910f      	str	r1, [sp, #60]	; 0x3c
    b92a:	106d      	asrs	r5, r5, #1
    b92c:	3608      	adds	r6, #8
    b92e:	e7ee      	b.n	b90e <_dtoa_r+0x30e>
    b930:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b932:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b934:	9806      	ldr	r0, [sp, #24]
    b936:	9907      	ldr	r1, [sp, #28]
    b938:	f7fc fa6e 	bl	7e18 <__aeabi_ddiv>
    b93c:	e04c      	b.n	b9d8 <_dtoa_r+0x3d8>
    b93e:	9b03      	ldr	r3, [sp, #12]
    b940:	2402      	movs	r4, #2
    b942:	425d      	negs	r5, r3
    b944:	2d00      	cmp	r5, #0
    b946:	d049      	beq.n	b9dc <_dtoa_r+0x3dc>
    b948:	9814      	ldr	r0, [sp, #80]	; 0x50
    b94a:	9915      	ldr	r1, [sp, #84]	; 0x54
    b94c:	230f      	movs	r3, #15
    b94e:	4a1f      	ldr	r2, [pc, #124]	; (b9cc <_dtoa_r+0x3cc>)
    b950:	402b      	ands	r3, r5
    b952:	00db      	lsls	r3, r3, #3
    b954:	18d3      	adds	r3, r2, r3
    b956:	681a      	ldr	r2, [r3, #0]
    b958:	685b      	ldr	r3, [r3, #4]
    b95a:	f7fc fe81 	bl	8660 <__aeabi_dmul>
    b95e:	2300      	movs	r3, #0
    b960:	9006      	str	r0, [sp, #24]
    b962:	9107      	str	r1, [sp, #28]
    b964:	4e1a      	ldr	r6, [pc, #104]	; (b9d0 <_dtoa_r+0x3d0>)
    b966:	112d      	asrs	r5, r5, #4
    b968:	2d00      	cmp	r5, #0
    b96a:	d033      	beq.n	b9d4 <_dtoa_r+0x3d4>
    b96c:	2201      	movs	r2, #1
    b96e:	4215      	tst	r5, r2
    b970:	d005      	beq.n	b97e <_dtoa_r+0x37e>
    b972:	18a4      	adds	r4, r4, r2
    b974:	6832      	ldr	r2, [r6, #0]
    b976:	6873      	ldr	r3, [r6, #4]
    b978:	f7fc fe72 	bl	8660 <__aeabi_dmul>
    b97c:	2301      	movs	r3, #1
    b97e:	106d      	asrs	r5, r5, #1
    b980:	3608      	adds	r6, #8
    b982:	e7f1      	b.n	b968 <_dtoa_r+0x368>
    b984:	7ff00000 	.word	0x7ff00000
    b988:	0000270f 	.word	0x0000270f
    b98c:	0000edd2 	.word	0x0000edd2
    b990:	0000edc9 	.word	0x0000edc9
    b994:	0000dfa6 	.word	0x0000dfa6
    b998:	0000dfa7 	.word	0x0000dfa7
    b99c:	3ff00000 	.word	0x3ff00000
    b9a0:	fffffc01 	.word	0xfffffc01
    b9a4:	00000432 	.word	0x00000432
    b9a8:	00000412 	.word	0x00000412
    b9ac:	fe100000 	.word	0xfe100000
    b9b0:	3ff80000 	.word	0x3ff80000
    b9b4:	636f4361 	.word	0x636f4361
    b9b8:	3fd287a7 	.word	0x3fd287a7
    b9bc:	8b60c8b3 	.word	0x8b60c8b3
    b9c0:	3fc68a28 	.word	0x3fc68a28
    b9c4:	509f79fb 	.word	0x509f79fb
    b9c8:	3fd34413 	.word	0x3fd34413
    b9cc:	0000ee40 	.word	0x0000ee40
    b9d0:	0000ef08 	.word	0x0000ef08
    b9d4:	2b00      	cmp	r3, #0
    b9d6:	d001      	beq.n	b9dc <_dtoa_r+0x3dc>
    b9d8:	9006      	str	r0, [sp, #24]
    b9da:	9107      	str	r1, [sp, #28]
    b9dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    b9de:	2b00      	cmp	r3, #0
    b9e0:	d01d      	beq.n	ba1e <_dtoa_r+0x41e>
    b9e2:	9d06      	ldr	r5, [sp, #24]
    b9e4:	9e07      	ldr	r6, [sp, #28]
    b9e6:	2200      	movs	r2, #0
    b9e8:	4bc7      	ldr	r3, [pc, #796]	; (bd08 <_dtoa_r+0x708>)
    b9ea:	0028      	movs	r0, r5
    b9ec:	0031      	movs	r1, r6
    b9ee:	f7fb f95f 	bl	6cb0 <__aeabi_dcmplt>
    b9f2:	2800      	cmp	r0, #0
    b9f4:	d013      	beq.n	ba1e <_dtoa_r+0x41e>
    b9f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b9f8:	2b00      	cmp	r3, #0
    b9fa:	d010      	beq.n	ba1e <_dtoa_r+0x41e>
    b9fc:	2f00      	cmp	r7, #0
    b9fe:	dc00      	bgt.n	ba02 <_dtoa_r+0x402>
    ba00:	e0df      	b.n	bbc2 <_dtoa_r+0x5c2>
    ba02:	9b03      	ldr	r3, [sp, #12]
    ba04:	0031      	movs	r1, r6
    ba06:	3b01      	subs	r3, #1
    ba08:	930e      	str	r3, [sp, #56]	; 0x38
    ba0a:	2200      	movs	r2, #0
    ba0c:	4bbf      	ldr	r3, [pc, #764]	; (bd0c <_dtoa_r+0x70c>)
    ba0e:	0028      	movs	r0, r5
    ba10:	f7fc fe26 	bl	8660 <__aeabi_dmul>
    ba14:	3401      	adds	r4, #1
    ba16:	9006      	str	r0, [sp, #24]
    ba18:	9107      	str	r1, [sp, #28]
    ba1a:	003e      	movs	r6, r7
    ba1c:	e002      	b.n	ba24 <_dtoa_r+0x424>
    ba1e:	9b03      	ldr	r3, [sp, #12]
    ba20:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    ba22:	930e      	str	r3, [sp, #56]	; 0x38
    ba24:	0020      	movs	r0, r4
    ba26:	f001 ff7d 	bl	d924 <__aeabi_i2d>
    ba2a:	9a06      	ldr	r2, [sp, #24]
    ba2c:	9b07      	ldr	r3, [sp, #28]
    ba2e:	f7fc fe17 	bl	8660 <__aeabi_dmul>
    ba32:	2200      	movs	r2, #0
    ba34:	4bb6      	ldr	r3, [pc, #728]	; (bd10 <_dtoa_r+0x710>)
    ba36:	f7fb fec3 	bl	77c0 <__aeabi_dadd>
    ba3a:	4ab6      	ldr	r2, [pc, #728]	; (bd14 <_dtoa_r+0x714>)
    ba3c:	9012      	str	r0, [sp, #72]	; 0x48
    ba3e:	9113      	str	r1, [sp, #76]	; 0x4c
    ba40:	9c12      	ldr	r4, [sp, #72]	; 0x48
    ba42:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    ba44:	4694      	mov	ip, r2
    ba46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ba48:	4463      	add	r3, ip
    ba4a:	9318      	str	r3, [sp, #96]	; 0x60
    ba4c:	001d      	movs	r5, r3
    ba4e:	2e00      	cmp	r6, #0
    ba50:	d11c      	bne.n	ba8c <_dtoa_r+0x48c>
    ba52:	9806      	ldr	r0, [sp, #24]
    ba54:	9907      	ldr	r1, [sp, #28]
    ba56:	2200      	movs	r2, #0
    ba58:	4baf      	ldr	r3, [pc, #700]	; (bd18 <_dtoa_r+0x718>)
    ba5a:	f7fd f87b 	bl	8b54 <__aeabi_dsub>
    ba5e:	0022      	movs	r2, r4
    ba60:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ba62:	9006      	str	r0, [sp, #24]
    ba64:	9107      	str	r1, [sp, #28]
    ba66:	f7fb f937 	bl	6cd8 <__aeabi_dcmpgt>
    ba6a:	2800      	cmp	r0, #0
    ba6c:	d000      	beq.n	ba70 <_dtoa_r+0x470>
    ba6e:	e254      	b.n	bf1a <_dtoa_r+0x91a>
    ba70:	48aa      	ldr	r0, [pc, #680]	; (bd1c <_dtoa_r+0x71c>)
    ba72:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ba74:	4684      	mov	ip, r0
    ba76:	4461      	add	r1, ip
    ba78:	000b      	movs	r3, r1
    ba7a:	9806      	ldr	r0, [sp, #24]
    ba7c:	9907      	ldr	r1, [sp, #28]
    ba7e:	0022      	movs	r2, r4
    ba80:	f7fb f916 	bl	6cb0 <__aeabi_dcmplt>
    ba84:	2800      	cmp	r0, #0
    ba86:	d000      	beq.n	ba8a <_dtoa_r+0x48a>
    ba88:	e23d      	b.n	bf06 <_dtoa_r+0x906>
    ba8a:	e09a      	b.n	bbc2 <_dtoa_r+0x5c2>
    ba8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ba8e:	1e73      	subs	r3, r6, #1
    ba90:	49a3      	ldr	r1, [pc, #652]	; (bd20 <_dtoa_r+0x720>)
    ba92:	00db      	lsls	r3, r3, #3
    ba94:	2a00      	cmp	r2, #0
    ba96:	d049      	beq.n	bb2c <_dtoa_r+0x52c>
    ba98:	18cb      	adds	r3, r1, r3
    ba9a:	681a      	ldr	r2, [r3, #0]
    ba9c:	685b      	ldr	r3, [r3, #4]
    ba9e:	2000      	movs	r0, #0
    baa0:	49a0      	ldr	r1, [pc, #640]	; (bd24 <_dtoa_r+0x724>)
    baa2:	f7fc f9b9 	bl	7e18 <__aeabi_ddiv>
    baa6:	002b      	movs	r3, r5
    baa8:	0022      	movs	r2, r4
    baaa:	f7fd f853 	bl	8b54 <__aeabi_dsub>
    baae:	9012      	str	r0, [sp, #72]	; 0x48
    bab0:	9113      	str	r1, [sp, #76]	; 0x4c
    bab2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    bab4:	9806      	ldr	r0, [sp, #24]
    bab6:	9907      	ldr	r1, [sp, #28]
    bab8:	f7fd fbc0 	bl	923c <__aeabi_d2iz>
    babc:	0004      	movs	r4, r0
    babe:	f001 ff31 	bl	d924 <__aeabi_i2d>
    bac2:	0002      	movs	r2, r0
    bac4:	000b      	movs	r3, r1
    bac6:	9806      	ldr	r0, [sp, #24]
    bac8:	9907      	ldr	r1, [sp, #28]
    baca:	f7fd f843 	bl	8b54 <__aeabi_dsub>
    bace:	3501      	adds	r5, #1
    bad0:	1e6b      	subs	r3, r5, #1
    bad2:	3430      	adds	r4, #48	; 0x30
    bad4:	701c      	strb	r4, [r3, #0]
    bad6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    bad8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bada:	9006      	str	r0, [sp, #24]
    badc:	9107      	str	r1, [sp, #28]
    bade:	f7fb f8e7 	bl	6cb0 <__aeabi_dcmplt>
    bae2:	2800      	cmp	r0, #0
    bae4:	d000      	beq.n	bae8 <_dtoa_r+0x4e8>
    bae6:	e32e      	b.n	c146 <_dtoa_r+0xb46>
    bae8:	9a06      	ldr	r2, [sp, #24]
    baea:	9b07      	ldr	r3, [sp, #28]
    baec:	2000      	movs	r0, #0
    baee:	4986      	ldr	r1, [pc, #536]	; (bd08 <_dtoa_r+0x708>)
    baf0:	f7fd f830 	bl	8b54 <__aeabi_dsub>
    baf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    baf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    baf8:	f7fb f8da 	bl	6cb0 <__aeabi_dcmplt>
    bafc:	2800      	cmp	r0, #0
    bafe:	d000      	beq.n	bb02 <_dtoa_r+0x502>
    bb00:	e0c7      	b.n	bc92 <_dtoa_r+0x692>
    bb02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bb04:	1aeb      	subs	r3, r5, r3
    bb06:	42b3      	cmp	r3, r6
    bb08:	da5b      	bge.n	bbc2 <_dtoa_r+0x5c2>
    bb0a:	9812      	ldr	r0, [sp, #72]	; 0x48
    bb0c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    bb0e:	2200      	movs	r2, #0
    bb10:	4b7e      	ldr	r3, [pc, #504]	; (bd0c <_dtoa_r+0x70c>)
    bb12:	f7fc fda5 	bl	8660 <__aeabi_dmul>
    bb16:	2200      	movs	r2, #0
    bb18:	9012      	str	r0, [sp, #72]	; 0x48
    bb1a:	9113      	str	r1, [sp, #76]	; 0x4c
    bb1c:	9806      	ldr	r0, [sp, #24]
    bb1e:	9907      	ldr	r1, [sp, #28]
    bb20:	4b7a      	ldr	r3, [pc, #488]	; (bd0c <_dtoa_r+0x70c>)
    bb22:	f7fc fd9d 	bl	8660 <__aeabi_dmul>
    bb26:	9006      	str	r0, [sp, #24]
    bb28:	9107      	str	r1, [sp, #28]
    bb2a:	e7c3      	b.n	bab4 <_dtoa_r+0x4b4>
    bb2c:	18c9      	adds	r1, r1, r3
    bb2e:	0022      	movs	r2, r4
    bb30:	6808      	ldr	r0, [r1, #0]
    bb32:	6849      	ldr	r1, [r1, #4]
    bb34:	002b      	movs	r3, r5
    bb36:	f7fc fd93 	bl	8660 <__aeabi_dmul>
    bb3a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    bb3c:	9012      	str	r0, [sp, #72]	; 0x48
    bb3e:	9113      	str	r1, [sp, #76]	; 0x4c
    bb40:	19a5      	adds	r5, r4, r6
    bb42:	9806      	ldr	r0, [sp, #24]
    bb44:	9907      	ldr	r1, [sp, #28]
    bb46:	f7fd fb79 	bl	923c <__aeabi_d2iz>
    bb4a:	0006      	movs	r6, r0
    bb4c:	f001 feea 	bl	d924 <__aeabi_i2d>
    bb50:	0002      	movs	r2, r0
    bb52:	000b      	movs	r3, r1
    bb54:	9806      	ldr	r0, [sp, #24]
    bb56:	9907      	ldr	r1, [sp, #28]
    bb58:	f7fc fffc 	bl	8b54 <__aeabi_dsub>
    bb5c:	3630      	adds	r6, #48	; 0x30
    bb5e:	7026      	strb	r6, [r4, #0]
    bb60:	3401      	adds	r4, #1
    bb62:	9006      	str	r0, [sp, #24]
    bb64:	9107      	str	r1, [sp, #28]
    bb66:	2200      	movs	r2, #0
    bb68:	42a5      	cmp	r5, r4
    bb6a:	d122      	bne.n	bbb2 <_dtoa_r+0x5b2>
    bb6c:	4b6d      	ldr	r3, [pc, #436]	; (bd24 <_dtoa_r+0x724>)
    bb6e:	9812      	ldr	r0, [sp, #72]	; 0x48
    bb70:	9913      	ldr	r1, [sp, #76]	; 0x4c
    bb72:	f7fb fe25 	bl	77c0 <__aeabi_dadd>
    bb76:	0002      	movs	r2, r0
    bb78:	000b      	movs	r3, r1
    bb7a:	9806      	ldr	r0, [sp, #24]
    bb7c:	9907      	ldr	r1, [sp, #28]
    bb7e:	f7fb f8ab 	bl	6cd8 <__aeabi_dcmpgt>
    bb82:	2800      	cmp	r0, #0
    bb84:	d000      	beq.n	bb88 <_dtoa_r+0x588>
    bb86:	e084      	b.n	bc92 <_dtoa_r+0x692>
    bb88:	9a12      	ldr	r2, [sp, #72]	; 0x48
    bb8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bb8c:	2000      	movs	r0, #0
    bb8e:	4965      	ldr	r1, [pc, #404]	; (bd24 <_dtoa_r+0x724>)
    bb90:	f7fc ffe0 	bl	8b54 <__aeabi_dsub>
    bb94:	0002      	movs	r2, r0
    bb96:	000b      	movs	r3, r1
    bb98:	9806      	ldr	r0, [sp, #24]
    bb9a:	9907      	ldr	r1, [sp, #28]
    bb9c:	f7fb f888 	bl	6cb0 <__aeabi_dcmplt>
    bba0:	2800      	cmp	r0, #0
    bba2:	d00e      	beq.n	bbc2 <_dtoa_r+0x5c2>
    bba4:	1e6b      	subs	r3, r5, #1
    bba6:	781a      	ldrb	r2, [r3, #0]
    bba8:	2a30      	cmp	r2, #48	; 0x30
    bbaa:	d000      	beq.n	bbae <_dtoa_r+0x5ae>
    bbac:	e2cb      	b.n	c146 <_dtoa_r+0xb46>
    bbae:	001d      	movs	r5, r3
    bbb0:	e7f8      	b.n	bba4 <_dtoa_r+0x5a4>
    bbb2:	9806      	ldr	r0, [sp, #24]
    bbb4:	9907      	ldr	r1, [sp, #28]
    bbb6:	4b55      	ldr	r3, [pc, #340]	; (bd0c <_dtoa_r+0x70c>)
    bbb8:	f7fc fd52 	bl	8660 <__aeabi_dmul>
    bbbc:	9006      	str	r0, [sp, #24]
    bbbe:	9107      	str	r1, [sp, #28]
    bbc0:	e7bf      	b.n	bb42 <_dtoa_r+0x542>
    bbc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    bbc4:	9c15      	ldr	r4, [sp, #84]	; 0x54
    bbc6:	9306      	str	r3, [sp, #24]
    bbc8:	9407      	str	r4, [sp, #28]
    bbca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    bbcc:	2b00      	cmp	r3, #0
    bbce:	da00      	bge.n	bbd2 <_dtoa_r+0x5d2>
    bbd0:	e081      	b.n	bcd6 <_dtoa_r+0x6d6>
    bbd2:	9a03      	ldr	r2, [sp, #12]
    bbd4:	2a0e      	cmp	r2, #14
    bbd6:	dd00      	ble.n	bbda <_dtoa_r+0x5da>
    bbd8:	e07d      	b.n	bcd6 <_dtoa_r+0x6d6>
    bbda:	00d3      	lsls	r3, r2, #3
    bbdc:	4a50      	ldr	r2, [pc, #320]	; (bd20 <_dtoa_r+0x720>)
    bbde:	18d3      	adds	r3, r2, r3
    bbe0:	685c      	ldr	r4, [r3, #4]
    bbe2:	681b      	ldr	r3, [r3, #0]
    bbe4:	9308      	str	r3, [sp, #32]
    bbe6:	9409      	str	r4, [sp, #36]	; 0x24
    bbe8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    bbea:	2b00      	cmp	r3, #0
    bbec:	da15      	bge.n	bc1a <_dtoa_r+0x61a>
    bbee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bbf0:	2b00      	cmp	r3, #0
    bbf2:	dc12      	bgt.n	bc1a <_dtoa_r+0x61a>
    bbf4:	d000      	beq.n	bbf8 <_dtoa_r+0x5f8>
    bbf6:	e188      	b.n	bf0a <_dtoa_r+0x90a>
    bbf8:	9808      	ldr	r0, [sp, #32]
    bbfa:	9909      	ldr	r1, [sp, #36]	; 0x24
    bbfc:	2200      	movs	r2, #0
    bbfe:	4b46      	ldr	r3, [pc, #280]	; (bd18 <_dtoa_r+0x718>)
    bc00:	f7fc fd2e 	bl	8660 <__aeabi_dmul>
    bc04:	9a06      	ldr	r2, [sp, #24]
    bc06:	9b07      	ldr	r3, [sp, #28]
    bc08:	f7fb f870 	bl	6cec <__aeabi_dcmpge>
    bc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bc0e:	9308      	str	r3, [sp, #32]
    bc10:	001e      	movs	r6, r3
    bc12:	2800      	cmp	r0, #0
    bc14:	d000      	beq.n	bc18 <_dtoa_r+0x618>
    bc16:	e17b      	b.n	bf10 <_dtoa_r+0x910>
    bc18:	e182      	b.n	bf20 <_dtoa_r+0x920>
    bc1a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    bc1c:	9e06      	ldr	r6, [sp, #24]
    bc1e:	9f07      	ldr	r7, [sp, #28]
    bc20:	9a08      	ldr	r2, [sp, #32]
    bc22:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bc24:	0030      	movs	r0, r6
    bc26:	0039      	movs	r1, r7
    bc28:	f7fc f8f6 	bl	7e18 <__aeabi_ddiv>
    bc2c:	f7fd fb06 	bl	923c <__aeabi_d2iz>
    bc30:	0004      	movs	r4, r0
    bc32:	f001 fe77 	bl	d924 <__aeabi_i2d>
    bc36:	9a08      	ldr	r2, [sp, #32]
    bc38:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bc3a:	f7fc fd11 	bl	8660 <__aeabi_dmul>
    bc3e:	0002      	movs	r2, r0
    bc40:	000b      	movs	r3, r1
    bc42:	0030      	movs	r0, r6
    bc44:	0039      	movs	r1, r7
    bc46:	f7fc ff85 	bl	8b54 <__aeabi_dsub>
    bc4a:	0022      	movs	r2, r4
    bc4c:	3501      	adds	r5, #1
    bc4e:	1e6b      	subs	r3, r5, #1
    bc50:	3230      	adds	r2, #48	; 0x30
    bc52:	701a      	strb	r2, [r3, #0]
    bc54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bc56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bc58:	1aeb      	subs	r3, r5, r3
    bc5a:	429a      	cmp	r2, r3
    bc5c:	d12e      	bne.n	bcbc <_dtoa_r+0x6bc>
    bc5e:	0002      	movs	r2, r0
    bc60:	000b      	movs	r3, r1
    bc62:	f7fb fdad 	bl	77c0 <__aeabi_dadd>
    bc66:	0006      	movs	r6, r0
    bc68:	000f      	movs	r7, r1
    bc6a:	0002      	movs	r2, r0
    bc6c:	000b      	movs	r3, r1
    bc6e:	9808      	ldr	r0, [sp, #32]
    bc70:	9909      	ldr	r1, [sp, #36]	; 0x24
    bc72:	f7fb f81d 	bl	6cb0 <__aeabi_dcmplt>
    bc76:	2800      	cmp	r0, #0
    bc78:	d10f      	bne.n	bc9a <_dtoa_r+0x69a>
    bc7a:	9808      	ldr	r0, [sp, #32]
    bc7c:	9909      	ldr	r1, [sp, #36]	; 0x24
    bc7e:	0032      	movs	r2, r6
    bc80:	003b      	movs	r3, r7
    bc82:	f7fb f80f 	bl	6ca4 <__aeabi_dcmpeq>
    bc86:	2800      	cmp	r0, #0
    bc88:	d100      	bne.n	bc8c <_dtoa_r+0x68c>
    bc8a:	e25e      	b.n	c14a <_dtoa_r+0xb4a>
    bc8c:	07e3      	lsls	r3, r4, #31
    bc8e:	d404      	bmi.n	bc9a <_dtoa_r+0x69a>
    bc90:	e25b      	b.n	c14a <_dtoa_r+0xb4a>
    bc92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bc94:	9303      	str	r3, [sp, #12]
    bc96:	e000      	b.n	bc9a <_dtoa_r+0x69a>
    bc98:	001d      	movs	r5, r3
    bc9a:	1e6b      	subs	r3, r5, #1
    bc9c:	781a      	ldrb	r2, [r3, #0]
    bc9e:	2a39      	cmp	r2, #57	; 0x39
    bca0:	d108      	bne.n	bcb4 <_dtoa_r+0x6b4>
    bca2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bca4:	429a      	cmp	r2, r3
    bca6:	d1f7      	bne.n	bc98 <_dtoa_r+0x698>
    bca8:	9a03      	ldr	r2, [sp, #12]
    bcaa:	990d      	ldr	r1, [sp, #52]	; 0x34
    bcac:	3201      	adds	r2, #1
    bcae:	9203      	str	r2, [sp, #12]
    bcb0:	2230      	movs	r2, #48	; 0x30
    bcb2:	700a      	strb	r2, [r1, #0]
    bcb4:	781a      	ldrb	r2, [r3, #0]
    bcb6:	3201      	adds	r2, #1
    bcb8:	701a      	strb	r2, [r3, #0]
    bcba:	e246      	b.n	c14a <_dtoa_r+0xb4a>
    bcbc:	2200      	movs	r2, #0
    bcbe:	4b13      	ldr	r3, [pc, #76]	; (bd0c <_dtoa_r+0x70c>)
    bcc0:	f7fc fcce 	bl	8660 <__aeabi_dmul>
    bcc4:	2200      	movs	r2, #0
    bcc6:	2300      	movs	r3, #0
    bcc8:	0006      	movs	r6, r0
    bcca:	000f      	movs	r7, r1
    bccc:	f7fa ffea 	bl	6ca4 <__aeabi_dcmpeq>
    bcd0:	2800      	cmp	r0, #0
    bcd2:	d0a5      	beq.n	bc20 <_dtoa_r+0x620>
    bcd4:	e239      	b.n	c14a <_dtoa_r+0xb4a>
    bcd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    bcd8:	2a00      	cmp	r2, #0
    bcda:	d044      	beq.n	bd66 <_dtoa_r+0x766>
    bcdc:	9a22      	ldr	r2, [sp, #136]	; 0x88
    bcde:	2a01      	cmp	r2, #1
    bce0:	dc0b      	bgt.n	bcfa <_dtoa_r+0x6fa>
    bce2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    bce4:	2a00      	cmp	r2, #0
    bce6:	d002      	beq.n	bcee <_dtoa_r+0x6ee>
    bce8:	4a0f      	ldr	r2, [pc, #60]	; (bd28 <_dtoa_r+0x728>)
    bcea:	189b      	adds	r3, r3, r2
    bcec:	e002      	b.n	bcf4 <_dtoa_r+0x6f4>
    bcee:	2336      	movs	r3, #54	; 0x36
    bcf0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    bcf2:	1a9b      	subs	r3, r3, r2
    bcf4:	9d08      	ldr	r5, [sp, #32]
    bcf6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    bcf8:	e029      	b.n	bd4e <_dtoa_r+0x74e>
    bcfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bcfc:	1e5d      	subs	r5, r3, #1
    bcfe:	9b08      	ldr	r3, [sp, #32]
    bd00:	42ab      	cmp	r3, r5
    bd02:	db13      	blt.n	bd2c <_dtoa_r+0x72c>
    bd04:	1b5d      	subs	r5, r3, r5
    bd06:	e018      	b.n	bd3a <_dtoa_r+0x73a>
    bd08:	3ff00000 	.word	0x3ff00000
    bd0c:	40240000 	.word	0x40240000
    bd10:	401c0000 	.word	0x401c0000
    bd14:	fcc00000 	.word	0xfcc00000
    bd18:	40140000 	.word	0x40140000
    bd1c:	7cc00000 	.word	0x7cc00000
    bd20:	0000ee40 	.word	0x0000ee40
    bd24:	3fe00000 	.word	0x3fe00000
    bd28:	00000433 	.word	0x00000433
    bd2c:	9b08      	ldr	r3, [sp, #32]
    bd2e:	9508      	str	r5, [sp, #32]
    bd30:	1aea      	subs	r2, r5, r3
    bd32:	2500      	movs	r5, #0
    bd34:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bd36:	189b      	adds	r3, r3, r2
    bd38:	9311      	str	r3, [sp, #68]	; 0x44
    bd3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bd3c:	2b00      	cmp	r3, #0
    bd3e:	da04      	bge.n	bd4a <_dtoa_r+0x74a>
    bd40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bd42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bd44:	1a9c      	subs	r4, r3, r2
    bd46:	2300      	movs	r3, #0
    bd48:	e001      	b.n	bd4e <_dtoa_r+0x74e>
    bd4a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    bd4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bd4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bd50:	2101      	movs	r1, #1
    bd52:	18d2      	adds	r2, r2, r3
    bd54:	920b      	str	r2, [sp, #44]	; 0x2c
    bd56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bd58:	9804      	ldr	r0, [sp, #16]
    bd5a:	18d3      	adds	r3, r2, r3
    bd5c:	930c      	str	r3, [sp, #48]	; 0x30
    bd5e:	f001 f856 	bl	ce0e <__i2b>
    bd62:	0006      	movs	r6, r0
    bd64:	e002      	b.n	bd6c <_dtoa_r+0x76c>
    bd66:	9d08      	ldr	r5, [sp, #32]
    bd68:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    bd6a:	9e10      	ldr	r6, [sp, #64]	; 0x40
    bd6c:	2c00      	cmp	r4, #0
    bd6e:	d00e      	beq.n	bd8e <_dtoa_r+0x78e>
    bd70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bd72:	2b00      	cmp	r3, #0
    bd74:	dd0b      	ble.n	bd8e <_dtoa_r+0x78e>
    bd76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bd78:	1e23      	subs	r3, r4, #0
    bd7a:	4293      	cmp	r3, r2
    bd7c:	dd00      	ble.n	bd80 <_dtoa_r+0x780>
    bd7e:	0013      	movs	r3, r2
    bd80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bd82:	1ae4      	subs	r4, r4, r3
    bd84:	1ad2      	subs	r2, r2, r3
    bd86:	920b      	str	r2, [sp, #44]	; 0x2c
    bd88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bd8a:	1ad3      	subs	r3, r2, r3
    bd8c:	930c      	str	r3, [sp, #48]	; 0x30
    bd8e:	9b08      	ldr	r3, [sp, #32]
    bd90:	2b00      	cmp	r3, #0
    bd92:	dd20      	ble.n	bdd6 <_dtoa_r+0x7d6>
    bd94:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bd96:	2b00      	cmp	r3, #0
    bd98:	d017      	beq.n	bdca <_dtoa_r+0x7ca>
    bd9a:	2d00      	cmp	r5, #0
    bd9c:	d011      	beq.n	bdc2 <_dtoa_r+0x7c2>
    bd9e:	0031      	movs	r1, r6
    bda0:	002a      	movs	r2, r5
    bda2:	9804      	ldr	r0, [sp, #16]
    bda4:	f001 f8c6 	bl	cf34 <__pow5mult>
    bda8:	9a05      	ldr	r2, [sp, #20]
    bdaa:	0001      	movs	r1, r0
    bdac:	0006      	movs	r6, r0
    bdae:	9804      	ldr	r0, [sp, #16]
    bdb0:	f001 f836 	bl	ce20 <__multiply>
    bdb4:	9905      	ldr	r1, [sp, #20]
    bdb6:	900e      	str	r0, [sp, #56]	; 0x38
    bdb8:	9804      	ldr	r0, [sp, #16]
    bdba:	f000 ff4a 	bl	cc52 <_Bfree>
    bdbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bdc0:	9305      	str	r3, [sp, #20]
    bdc2:	9b08      	ldr	r3, [sp, #32]
    bdc4:	1b5a      	subs	r2, r3, r5
    bdc6:	d006      	beq.n	bdd6 <_dtoa_r+0x7d6>
    bdc8:	e000      	b.n	bdcc <_dtoa_r+0x7cc>
    bdca:	9a08      	ldr	r2, [sp, #32]
    bdcc:	9905      	ldr	r1, [sp, #20]
    bdce:	9804      	ldr	r0, [sp, #16]
    bdd0:	f001 f8b0 	bl	cf34 <__pow5mult>
    bdd4:	9005      	str	r0, [sp, #20]
    bdd6:	2101      	movs	r1, #1
    bdd8:	9804      	ldr	r0, [sp, #16]
    bdda:	f001 f818 	bl	ce0e <__i2b>
    bdde:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bde0:	9008      	str	r0, [sp, #32]
    bde2:	2b00      	cmp	r3, #0
    bde4:	d100      	bne.n	bde8 <_dtoa_r+0x7e8>
    bde6:	e1c0      	b.n	c16a <_dtoa_r+0xb6a>
    bde8:	001a      	movs	r2, r3
    bdea:	0001      	movs	r1, r0
    bdec:	9804      	ldr	r0, [sp, #16]
    bdee:	f001 f8a1 	bl	cf34 <__pow5mult>
    bdf2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    bdf4:	9008      	str	r0, [sp, #32]
    bdf6:	2b01      	cmp	r3, #1
    bdf8:	dc17      	bgt.n	be2a <_dtoa_r+0x82a>
    bdfa:	2500      	movs	r5, #0
    bdfc:	9b06      	ldr	r3, [sp, #24]
    bdfe:	42ab      	cmp	r3, r5
    be00:	d10e      	bne.n	be20 <_dtoa_r+0x820>
    be02:	9b07      	ldr	r3, [sp, #28]
    be04:	031b      	lsls	r3, r3, #12
    be06:	42ab      	cmp	r3, r5
    be08:	d10a      	bne.n	be20 <_dtoa_r+0x820>
    be0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    be0c:	9a07      	ldr	r2, [sp, #28]
    be0e:	4213      	tst	r3, r2
    be10:	d006      	beq.n	be20 <_dtoa_r+0x820>
    be12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    be14:	3501      	adds	r5, #1
    be16:	3301      	adds	r3, #1
    be18:	930b      	str	r3, [sp, #44]	; 0x2c
    be1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    be1c:	3301      	adds	r3, #1
    be1e:	930c      	str	r3, [sp, #48]	; 0x30
    be20:	9b11      	ldr	r3, [sp, #68]	; 0x44
    be22:	2001      	movs	r0, #1
    be24:	2b00      	cmp	r3, #0
    be26:	d00d      	beq.n	be44 <_dtoa_r+0x844>
    be28:	e000      	b.n	be2c <_dtoa_r+0x82c>
    be2a:	2500      	movs	r5, #0
    be2c:	9b08      	ldr	r3, [sp, #32]
    be2e:	9a08      	ldr	r2, [sp, #32]
    be30:	691b      	ldr	r3, [r3, #16]
    be32:	930e      	str	r3, [sp, #56]	; 0x38
    be34:	3303      	adds	r3, #3
    be36:	009b      	lsls	r3, r3, #2
    be38:	18d3      	adds	r3, r2, r3
    be3a:	6858      	ldr	r0, [r3, #4]
    be3c:	f000 ff9d 	bl	cd7a <__hi0bits>
    be40:	2320      	movs	r3, #32
    be42:	1a18      	subs	r0, r3, r0
    be44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    be46:	18c0      	adds	r0, r0, r3
    be48:	231f      	movs	r3, #31
    be4a:	4018      	ands	r0, r3
    be4c:	d009      	beq.n	be62 <_dtoa_r+0x862>
    be4e:	3301      	adds	r3, #1
    be50:	1a1b      	subs	r3, r3, r0
    be52:	2b04      	cmp	r3, #4
    be54:	dd02      	ble.n	be5c <_dtoa_r+0x85c>
    be56:	231c      	movs	r3, #28
    be58:	1a18      	subs	r0, r3, r0
    be5a:	e003      	b.n	be64 <_dtoa_r+0x864>
    be5c:	2b04      	cmp	r3, #4
    be5e:	d008      	beq.n	be72 <_dtoa_r+0x872>
    be60:	0018      	movs	r0, r3
    be62:	301c      	adds	r0, #28
    be64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    be66:	1824      	adds	r4, r4, r0
    be68:	181b      	adds	r3, r3, r0
    be6a:	930b      	str	r3, [sp, #44]	; 0x2c
    be6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    be6e:	181b      	adds	r3, r3, r0
    be70:	930c      	str	r3, [sp, #48]	; 0x30
    be72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    be74:	2b00      	cmp	r3, #0
    be76:	dd05      	ble.n	be84 <_dtoa_r+0x884>
    be78:	001a      	movs	r2, r3
    be7a:	9905      	ldr	r1, [sp, #20]
    be7c:	9804      	ldr	r0, [sp, #16]
    be7e:	f001 f8ad 	bl	cfdc <__lshift>
    be82:	9005      	str	r0, [sp, #20]
    be84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    be86:	2b00      	cmp	r3, #0
    be88:	dd05      	ble.n	be96 <_dtoa_r+0x896>
    be8a:	001a      	movs	r2, r3
    be8c:	9908      	ldr	r1, [sp, #32]
    be8e:	9804      	ldr	r0, [sp, #16]
    be90:	f001 f8a4 	bl	cfdc <__lshift>
    be94:	9008      	str	r0, [sp, #32]
    be96:	9b16      	ldr	r3, [sp, #88]	; 0x58
    be98:	2b00      	cmp	r3, #0
    be9a:	d01d      	beq.n	bed8 <_dtoa_r+0x8d8>
    be9c:	9908      	ldr	r1, [sp, #32]
    be9e:	9805      	ldr	r0, [sp, #20]
    bea0:	f001 f8ee 	bl	d080 <__mcmp>
    bea4:	2800      	cmp	r0, #0
    bea6:	da17      	bge.n	bed8 <_dtoa_r+0x8d8>
    bea8:	9b03      	ldr	r3, [sp, #12]
    beaa:	220a      	movs	r2, #10
    beac:	3b01      	subs	r3, #1
    beae:	9303      	str	r3, [sp, #12]
    beb0:	9905      	ldr	r1, [sp, #20]
    beb2:	2300      	movs	r3, #0
    beb4:	9804      	ldr	r0, [sp, #16]
    beb6:	f000 fee5 	bl	cc84 <__multadd>
    beba:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bebc:	9005      	str	r0, [sp, #20]
    bebe:	2b00      	cmp	r3, #0
    bec0:	d100      	bne.n	bec4 <_dtoa_r+0x8c4>
    bec2:	e159      	b.n	c178 <_dtoa_r+0xb78>
    bec4:	0031      	movs	r1, r6
    bec6:	2300      	movs	r3, #0
    bec8:	220a      	movs	r2, #10
    beca:	9804      	ldr	r0, [sp, #16]
    becc:	f000 feda 	bl	cc84 <__multadd>
    bed0:	0006      	movs	r6, r0
    bed2:	2f00      	cmp	r7, #0
    bed4:	dc37      	bgt.n	bf46 <_dtoa_r+0x946>
    bed6:	e033      	b.n	bf40 <_dtoa_r+0x940>
    bed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    beda:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    bedc:	2b00      	cmp	r3, #0
    bede:	dc2a      	bgt.n	bf36 <_dtoa_r+0x936>
    bee0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    bee2:	2b02      	cmp	r3, #2
    bee4:	dd27      	ble.n	bf36 <_dtoa_r+0x936>
    bee6:	2f00      	cmp	r7, #0
    bee8:	d112      	bne.n	bf10 <_dtoa_r+0x910>
    beea:	9908      	ldr	r1, [sp, #32]
    beec:	003b      	movs	r3, r7
    beee:	2205      	movs	r2, #5
    bef0:	9804      	ldr	r0, [sp, #16]
    bef2:	f000 fec7 	bl	cc84 <__multadd>
    bef6:	9008      	str	r0, [sp, #32]
    bef8:	0001      	movs	r1, r0
    befa:	9805      	ldr	r0, [sp, #20]
    befc:	f001 f8c0 	bl	d080 <__mcmp>
    bf00:	2800      	cmp	r0, #0
    bf02:	dc0d      	bgt.n	bf20 <_dtoa_r+0x920>
    bf04:	e004      	b.n	bf10 <_dtoa_r+0x910>
    bf06:	9608      	str	r6, [sp, #32]
    bf08:	e002      	b.n	bf10 <_dtoa_r+0x910>
    bf0a:	2300      	movs	r3, #0
    bf0c:	001e      	movs	r6, r3
    bf0e:	9308      	str	r3, [sp, #32]
    bf10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    bf12:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    bf14:	43db      	mvns	r3, r3
    bf16:	9303      	str	r3, [sp, #12]
    bf18:	e00a      	b.n	bf30 <_dtoa_r+0x930>
    bf1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bf1c:	9608      	str	r6, [sp, #32]
    bf1e:	9303      	str	r3, [sp, #12]
    bf20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bf22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bf24:	1c5d      	adds	r5, r3, #1
    bf26:	2331      	movs	r3, #49	; 0x31
    bf28:	7013      	strb	r3, [r2, #0]
    bf2a:	9b03      	ldr	r3, [sp, #12]
    bf2c:	3301      	adds	r3, #1
    bf2e:	9303      	str	r3, [sp, #12]
    bf30:	960a      	str	r6, [sp, #40]	; 0x28
    bf32:	2600      	movs	r6, #0
    bf34:	e0f3      	b.n	c11e <_dtoa_r+0xb1e>
    bf36:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bf38:	2b00      	cmp	r3, #0
    bf3a:	d104      	bne.n	bf46 <_dtoa_r+0x946>
    bf3c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    bf3e:	e0b5      	b.n	c0ac <_dtoa_r+0xaac>
    bf40:	9b22      	ldr	r3, [sp, #136]	; 0x88
    bf42:	2b02      	cmp	r3, #2
    bf44:	dccf      	bgt.n	bee6 <_dtoa_r+0x8e6>
    bf46:	2c00      	cmp	r4, #0
    bf48:	dd05      	ble.n	bf56 <_dtoa_r+0x956>
    bf4a:	0031      	movs	r1, r6
    bf4c:	0022      	movs	r2, r4
    bf4e:	9804      	ldr	r0, [sp, #16]
    bf50:	f001 f844 	bl	cfdc <__lshift>
    bf54:	0006      	movs	r6, r0
    bf56:	960a      	str	r6, [sp, #40]	; 0x28
    bf58:	2d00      	cmp	r5, #0
    bf5a:	d012      	beq.n	bf82 <_dtoa_r+0x982>
    bf5c:	6871      	ldr	r1, [r6, #4]
    bf5e:	9804      	ldr	r0, [sp, #16]
    bf60:	f000 fe3f 	bl	cbe2 <_Balloc>
    bf64:	0031      	movs	r1, r6
    bf66:	0004      	movs	r4, r0
    bf68:	6933      	ldr	r3, [r6, #16]
    bf6a:	310c      	adds	r1, #12
    bf6c:	1c9a      	adds	r2, r3, #2
    bf6e:	0092      	lsls	r2, r2, #2
    bf70:	300c      	adds	r0, #12
    bf72:	f7fd fb68 	bl	9646 <memcpy>
    bf76:	2201      	movs	r2, #1
    bf78:	0021      	movs	r1, r4
    bf7a:	9804      	ldr	r0, [sp, #16]
    bf7c:	f001 f82e 	bl	cfdc <__lshift>
    bf80:	900a      	str	r0, [sp, #40]	; 0x28
    bf82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bf84:	1e7d      	subs	r5, r7, #1
    bf86:	930b      	str	r3, [sp, #44]	; 0x2c
    bf88:	195b      	adds	r3, r3, r5
    bf8a:	930e      	str	r3, [sp, #56]	; 0x38
    bf8c:	9908      	ldr	r1, [sp, #32]
    bf8e:	9805      	ldr	r0, [sp, #20]
    bf90:	f7ff faaf 	bl	b4f2 <quorem>
    bf94:	0031      	movs	r1, r6
    bf96:	9010      	str	r0, [sp, #64]	; 0x40
    bf98:	0004      	movs	r4, r0
    bf9a:	9805      	ldr	r0, [sp, #20]
    bf9c:	f001 f870 	bl	d080 <__mcmp>
    bfa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bfa2:	0005      	movs	r5, r0
    bfa4:	9908      	ldr	r1, [sp, #32]
    bfa6:	9804      	ldr	r0, [sp, #16]
    bfa8:	f001 f885 	bl	d0b6 <__mdiff>
    bfac:	2301      	movs	r3, #1
    bfae:	930c      	str	r3, [sp, #48]	; 0x30
    bfb0:	68c3      	ldr	r3, [r0, #12]
    bfb2:	3430      	adds	r4, #48	; 0x30
    bfb4:	0007      	movs	r7, r0
    bfb6:	2b00      	cmp	r3, #0
    bfb8:	d104      	bne.n	bfc4 <_dtoa_r+0x9c4>
    bfba:	0001      	movs	r1, r0
    bfbc:	9805      	ldr	r0, [sp, #20]
    bfbe:	f001 f85f 	bl	d080 <__mcmp>
    bfc2:	900c      	str	r0, [sp, #48]	; 0x30
    bfc4:	0039      	movs	r1, r7
    bfc6:	9804      	ldr	r0, [sp, #16]
    bfc8:	f000 fe43 	bl	cc52 <_Bfree>
    bfcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bfce:	9a22      	ldr	r2, [sp, #136]	; 0x88
    bfd0:	4313      	orrs	r3, r2
    bfd2:	d108      	bne.n	bfe6 <_dtoa_r+0x9e6>
    bfd4:	9a06      	ldr	r2, [sp, #24]
    bfd6:	3301      	adds	r3, #1
    bfd8:	4213      	tst	r3, r2
    bfda:	d104      	bne.n	bfe6 <_dtoa_r+0x9e6>
    bfdc:	2c39      	cmp	r4, #57	; 0x39
    bfde:	d02a      	beq.n	c036 <_dtoa_r+0xa36>
    bfe0:	2d00      	cmp	r5, #0
    bfe2:	dc1c      	bgt.n	c01e <_dtoa_r+0xa1e>
    bfe4:	e01d      	b.n	c022 <_dtoa_r+0xa22>
    bfe6:	2d00      	cmp	r5, #0
    bfe8:	db06      	blt.n	bff8 <_dtoa_r+0x9f8>
    bfea:	9b22      	ldr	r3, [sp, #136]	; 0x88
    bfec:	431d      	orrs	r5, r3
    bfee:	d11b      	bne.n	c028 <_dtoa_r+0xa28>
    bff0:	2301      	movs	r3, #1
    bff2:	9a06      	ldr	r2, [sp, #24]
    bff4:	4213      	tst	r3, r2
    bff6:	d117      	bne.n	c028 <_dtoa_r+0xa28>
    bff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bffa:	2b00      	cmp	r3, #0
    bffc:	dd11      	ble.n	c022 <_dtoa_r+0xa22>
    bffe:	9905      	ldr	r1, [sp, #20]
    c000:	2201      	movs	r2, #1
    c002:	9804      	ldr	r0, [sp, #16]
    c004:	f000 ffea 	bl	cfdc <__lshift>
    c008:	9908      	ldr	r1, [sp, #32]
    c00a:	9005      	str	r0, [sp, #20]
    c00c:	f001 f838 	bl	d080 <__mcmp>
    c010:	2800      	cmp	r0, #0
    c012:	dc02      	bgt.n	c01a <_dtoa_r+0xa1a>
    c014:	d105      	bne.n	c022 <_dtoa_r+0xa22>
    c016:	07e3      	lsls	r3, r4, #31
    c018:	d503      	bpl.n	c022 <_dtoa_r+0xa22>
    c01a:	2c39      	cmp	r4, #57	; 0x39
    c01c:	d00b      	beq.n	c036 <_dtoa_r+0xa36>
    c01e:	9c10      	ldr	r4, [sp, #64]	; 0x40
    c020:	3431      	adds	r4, #49	; 0x31
    c022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c024:	1c5d      	adds	r5, r3, #1
    c026:	e00f      	b.n	c048 <_dtoa_r+0xa48>
    c028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c02a:	1c5f      	adds	r7, r3, #1
    c02c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c02e:	2b00      	cmp	r3, #0
    c030:	dd0c      	ble.n	c04c <_dtoa_r+0xa4c>
    c032:	2c39      	cmp	r4, #57	; 0x39
    c034:	d105      	bne.n	c042 <_dtoa_r+0xa42>
    c036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c03a:	1c5d      	adds	r5, r3, #1
    c03c:	2339      	movs	r3, #57	; 0x39
    c03e:	7013      	strb	r3, [r2, #0]
    c040:	e057      	b.n	c0f2 <_dtoa_r+0xaf2>
    c042:	003d      	movs	r5, r7
    c044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c046:	3401      	adds	r4, #1
    c048:	701c      	strb	r4, [r3, #0]
    c04a:	e068      	b.n	c11e <_dtoa_r+0xb1e>
    c04c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c04e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c050:	003d      	movs	r5, r7
    c052:	701c      	strb	r4, [r3, #0]
    c054:	4293      	cmp	r3, r2
    c056:	d03c      	beq.n	c0d2 <_dtoa_r+0xad2>
    c058:	2300      	movs	r3, #0
    c05a:	220a      	movs	r2, #10
    c05c:	9905      	ldr	r1, [sp, #20]
    c05e:	9804      	ldr	r0, [sp, #16]
    c060:	f000 fe10 	bl	cc84 <__multadd>
    c064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c066:	9005      	str	r0, [sp, #20]
    c068:	429e      	cmp	r6, r3
    c06a:	d108      	bne.n	c07e <_dtoa_r+0xa7e>
    c06c:	0031      	movs	r1, r6
    c06e:	2300      	movs	r3, #0
    c070:	220a      	movs	r2, #10
    c072:	9804      	ldr	r0, [sp, #16]
    c074:	f000 fe06 	bl	cc84 <__multadd>
    c078:	0006      	movs	r6, r0
    c07a:	900a      	str	r0, [sp, #40]	; 0x28
    c07c:	e00d      	b.n	c09a <_dtoa_r+0xa9a>
    c07e:	0031      	movs	r1, r6
    c080:	2300      	movs	r3, #0
    c082:	220a      	movs	r2, #10
    c084:	9804      	ldr	r0, [sp, #16]
    c086:	f000 fdfd 	bl	cc84 <__multadd>
    c08a:	2300      	movs	r3, #0
    c08c:	0006      	movs	r6, r0
    c08e:	220a      	movs	r2, #10
    c090:	990a      	ldr	r1, [sp, #40]	; 0x28
    c092:	9804      	ldr	r0, [sp, #16]
    c094:	f000 fdf6 	bl	cc84 <__multadd>
    c098:	900a      	str	r0, [sp, #40]	; 0x28
    c09a:	970b      	str	r7, [sp, #44]	; 0x2c
    c09c:	e776      	b.n	bf8c <_dtoa_r+0x98c>
    c09e:	2300      	movs	r3, #0
    c0a0:	220a      	movs	r2, #10
    c0a2:	9905      	ldr	r1, [sp, #20]
    c0a4:	9804      	ldr	r0, [sp, #16]
    c0a6:	f000 fded 	bl	cc84 <__multadd>
    c0aa:	9005      	str	r0, [sp, #20]
    c0ac:	9908      	ldr	r1, [sp, #32]
    c0ae:	9805      	ldr	r0, [sp, #20]
    c0b0:	f7ff fa1f 	bl	b4f2 <quorem>
    c0b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c0b6:	3030      	adds	r0, #48	; 0x30
    c0b8:	7028      	strb	r0, [r5, #0]
    c0ba:	3501      	adds	r5, #1
    c0bc:	0004      	movs	r4, r0
    c0be:	1aeb      	subs	r3, r5, r3
    c0c0:	42bb      	cmp	r3, r7
    c0c2:	dbec      	blt.n	c09e <_dtoa_r+0xa9e>
    c0c4:	1e3d      	subs	r5, r7, #0
    c0c6:	dc00      	bgt.n	c0ca <_dtoa_r+0xaca>
    c0c8:	2501      	movs	r5, #1
    c0ca:	960a      	str	r6, [sp, #40]	; 0x28
    c0cc:	2600      	movs	r6, #0
    c0ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c0d0:	195d      	adds	r5, r3, r5
    c0d2:	9905      	ldr	r1, [sp, #20]
    c0d4:	2201      	movs	r2, #1
    c0d6:	9804      	ldr	r0, [sp, #16]
    c0d8:	f000 ff80 	bl	cfdc <__lshift>
    c0dc:	9908      	ldr	r1, [sp, #32]
    c0de:	9005      	str	r0, [sp, #20]
    c0e0:	f000 ffce 	bl	d080 <__mcmp>
    c0e4:	2800      	cmp	r0, #0
    c0e6:	dc04      	bgt.n	c0f2 <_dtoa_r+0xaf2>
    c0e8:	d113      	bne.n	c112 <_dtoa_r+0xb12>
    c0ea:	07e3      	lsls	r3, r4, #31
    c0ec:	d401      	bmi.n	c0f2 <_dtoa_r+0xaf2>
    c0ee:	e010      	b.n	c112 <_dtoa_r+0xb12>
    c0f0:	001d      	movs	r5, r3
    c0f2:	1e6b      	subs	r3, r5, #1
    c0f4:	781a      	ldrb	r2, [r3, #0]
    c0f6:	2a39      	cmp	r2, #57	; 0x39
    c0f8:	d108      	bne.n	c10c <_dtoa_r+0xb0c>
    c0fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c0fc:	429a      	cmp	r2, r3
    c0fe:	d1f7      	bne.n	c0f0 <_dtoa_r+0xaf0>
    c100:	9b03      	ldr	r3, [sp, #12]
    c102:	3301      	adds	r3, #1
    c104:	9303      	str	r3, [sp, #12]
    c106:	2331      	movs	r3, #49	; 0x31
    c108:	7013      	strb	r3, [r2, #0]
    c10a:	e008      	b.n	c11e <_dtoa_r+0xb1e>
    c10c:	3201      	adds	r2, #1
    c10e:	701a      	strb	r2, [r3, #0]
    c110:	e005      	b.n	c11e <_dtoa_r+0xb1e>
    c112:	1e6b      	subs	r3, r5, #1
    c114:	781a      	ldrb	r2, [r3, #0]
    c116:	2a30      	cmp	r2, #48	; 0x30
    c118:	d101      	bne.n	c11e <_dtoa_r+0xb1e>
    c11a:	001d      	movs	r5, r3
    c11c:	e7f9      	b.n	c112 <_dtoa_r+0xb12>
    c11e:	9908      	ldr	r1, [sp, #32]
    c120:	9804      	ldr	r0, [sp, #16]
    c122:	f000 fd96 	bl	cc52 <_Bfree>
    c126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c128:	2b00      	cmp	r3, #0
    c12a:	d00e      	beq.n	c14a <_dtoa_r+0xb4a>
    c12c:	2e00      	cmp	r6, #0
    c12e:	d005      	beq.n	c13c <_dtoa_r+0xb3c>
    c130:	429e      	cmp	r6, r3
    c132:	d003      	beq.n	c13c <_dtoa_r+0xb3c>
    c134:	0031      	movs	r1, r6
    c136:	9804      	ldr	r0, [sp, #16]
    c138:	f000 fd8b 	bl	cc52 <_Bfree>
    c13c:	990a      	ldr	r1, [sp, #40]	; 0x28
    c13e:	9804      	ldr	r0, [sp, #16]
    c140:	f000 fd87 	bl	cc52 <_Bfree>
    c144:	e001      	b.n	c14a <_dtoa_r+0xb4a>
    c146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c148:	9303      	str	r3, [sp, #12]
    c14a:	9804      	ldr	r0, [sp, #16]
    c14c:	9905      	ldr	r1, [sp, #20]
    c14e:	f000 fd80 	bl	cc52 <_Bfree>
    c152:	2300      	movs	r3, #0
    c154:	702b      	strb	r3, [r5, #0]
    c156:	9b03      	ldr	r3, [sp, #12]
    c158:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c15a:	3301      	adds	r3, #1
    c15c:	6013      	str	r3, [r2, #0]
    c15e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    c160:	980d      	ldr	r0, [sp, #52]	; 0x34
    c162:	2b00      	cmp	r3, #0
    c164:	d010      	beq.n	c188 <_dtoa_r+0xb88>
    c166:	601d      	str	r5, [r3, #0]
    c168:	e00e      	b.n	c188 <_dtoa_r+0xb88>
    c16a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c16c:	2b01      	cmp	r3, #1
    c16e:	dc00      	bgt.n	c172 <_dtoa_r+0xb72>
    c170:	e643      	b.n	bdfa <_dtoa_r+0x7fa>
    c172:	9d11      	ldr	r5, [sp, #68]	; 0x44
    c174:	2001      	movs	r0, #1
    c176:	e665      	b.n	be44 <_dtoa_r+0x844>
    c178:	2f00      	cmp	r7, #0
    c17a:	dd00      	ble.n	c17e <_dtoa_r+0xb7e>
    c17c:	e6de      	b.n	bf3c <_dtoa_r+0x93c>
    c17e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c180:	2b02      	cmp	r3, #2
    c182:	dc00      	bgt.n	c186 <_dtoa_r+0xb86>
    c184:	e6da      	b.n	bf3c <_dtoa_r+0x93c>
    c186:	e6ae      	b.n	bee6 <_dtoa_r+0x8e6>
    c188:	b01d      	add	sp, #116	; 0x74
    c18a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c18c <__sflush_r>:
    c18c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c18e:	898a      	ldrh	r2, [r1, #12]
    c190:	0005      	movs	r5, r0
    c192:	000c      	movs	r4, r1
    c194:	0713      	lsls	r3, r2, #28
    c196:	d45a      	bmi.n	c24e <__sflush_r+0xc2>
    c198:	684b      	ldr	r3, [r1, #4]
    c19a:	2b00      	cmp	r3, #0
    c19c:	dc02      	bgt.n	c1a4 <__sflush_r+0x18>
    c19e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    c1a0:	2b00      	cmp	r3, #0
    c1a2:	dd19      	ble.n	c1d8 <__sflush_r+0x4c>
    c1a4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c1a6:	2f00      	cmp	r7, #0
    c1a8:	d016      	beq.n	c1d8 <__sflush_r+0x4c>
    c1aa:	2300      	movs	r3, #0
    c1ac:	682e      	ldr	r6, [r5, #0]
    c1ae:	602b      	str	r3, [r5, #0]
    c1b0:	2380      	movs	r3, #128	; 0x80
    c1b2:	015b      	lsls	r3, r3, #5
    c1b4:	401a      	ands	r2, r3
    c1b6:	d001      	beq.n	c1bc <__sflush_r+0x30>
    c1b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c1ba:	e014      	b.n	c1e6 <__sflush_r+0x5a>
    c1bc:	2301      	movs	r3, #1
    c1be:	6a21      	ldr	r1, [r4, #32]
    c1c0:	0028      	movs	r0, r5
    c1c2:	47b8      	blx	r7
    c1c4:	1c43      	adds	r3, r0, #1
    c1c6:	d10e      	bne.n	c1e6 <__sflush_r+0x5a>
    c1c8:	682b      	ldr	r3, [r5, #0]
    c1ca:	2b00      	cmp	r3, #0
    c1cc:	d00b      	beq.n	c1e6 <__sflush_r+0x5a>
    c1ce:	2b1d      	cmp	r3, #29
    c1d0:	d001      	beq.n	c1d6 <__sflush_r+0x4a>
    c1d2:	2b16      	cmp	r3, #22
    c1d4:	d102      	bne.n	c1dc <__sflush_r+0x50>
    c1d6:	602e      	str	r6, [r5, #0]
    c1d8:	2000      	movs	r0, #0
    c1da:	e05a      	b.n	c292 <__sflush_r+0x106>
    c1dc:	2240      	movs	r2, #64	; 0x40
    c1de:	89a3      	ldrh	r3, [r4, #12]
    c1e0:	4313      	orrs	r3, r2
    c1e2:	81a3      	strh	r3, [r4, #12]
    c1e4:	e055      	b.n	c292 <__sflush_r+0x106>
    c1e6:	89a3      	ldrh	r3, [r4, #12]
    c1e8:	075b      	lsls	r3, r3, #29
    c1ea:	d506      	bpl.n	c1fa <__sflush_r+0x6e>
    c1ec:	6863      	ldr	r3, [r4, #4]
    c1ee:	1ac0      	subs	r0, r0, r3
    c1f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c1f2:	2b00      	cmp	r3, #0
    c1f4:	d001      	beq.n	c1fa <__sflush_r+0x6e>
    c1f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c1f8:	1ac0      	subs	r0, r0, r3
    c1fa:	2300      	movs	r3, #0
    c1fc:	0002      	movs	r2, r0
    c1fe:	6a21      	ldr	r1, [r4, #32]
    c200:	0028      	movs	r0, r5
    c202:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c204:	47b8      	blx	r7
    c206:	89a3      	ldrh	r3, [r4, #12]
    c208:	1c42      	adds	r2, r0, #1
    c20a:	d106      	bne.n	c21a <__sflush_r+0x8e>
    c20c:	6829      	ldr	r1, [r5, #0]
    c20e:	291d      	cmp	r1, #29
    c210:	d83a      	bhi.n	c288 <__sflush_r+0xfc>
    c212:	4a20      	ldr	r2, [pc, #128]	; (c294 <__sflush_r+0x108>)
    c214:	40ca      	lsrs	r2, r1
    c216:	07d2      	lsls	r2, r2, #31
    c218:	d536      	bpl.n	c288 <__sflush_r+0xfc>
    c21a:	2200      	movs	r2, #0
    c21c:	6062      	str	r2, [r4, #4]
    c21e:	6922      	ldr	r2, [r4, #16]
    c220:	6022      	str	r2, [r4, #0]
    c222:	04db      	lsls	r3, r3, #19
    c224:	d505      	bpl.n	c232 <__sflush_r+0xa6>
    c226:	1c43      	adds	r3, r0, #1
    c228:	d102      	bne.n	c230 <__sflush_r+0xa4>
    c22a:	682b      	ldr	r3, [r5, #0]
    c22c:	2b00      	cmp	r3, #0
    c22e:	d100      	bne.n	c232 <__sflush_r+0xa6>
    c230:	6560      	str	r0, [r4, #84]	; 0x54
    c232:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c234:	602e      	str	r6, [r5, #0]
    c236:	2900      	cmp	r1, #0
    c238:	d0ce      	beq.n	c1d8 <__sflush_r+0x4c>
    c23a:	0023      	movs	r3, r4
    c23c:	3344      	adds	r3, #68	; 0x44
    c23e:	4299      	cmp	r1, r3
    c240:	d002      	beq.n	c248 <__sflush_r+0xbc>
    c242:	0028      	movs	r0, r5
    c244:	f7fd fa26 	bl	9694 <_free_r>
    c248:	2000      	movs	r0, #0
    c24a:	6360      	str	r0, [r4, #52]	; 0x34
    c24c:	e021      	b.n	c292 <__sflush_r+0x106>
    c24e:	690f      	ldr	r7, [r1, #16]
    c250:	2f00      	cmp	r7, #0
    c252:	d0c1      	beq.n	c1d8 <__sflush_r+0x4c>
    c254:	680b      	ldr	r3, [r1, #0]
    c256:	600f      	str	r7, [r1, #0]
    c258:	1bdb      	subs	r3, r3, r7
    c25a:	9301      	str	r3, [sp, #4]
    c25c:	2300      	movs	r3, #0
    c25e:	0792      	lsls	r2, r2, #30
    c260:	d100      	bne.n	c264 <__sflush_r+0xd8>
    c262:	694b      	ldr	r3, [r1, #20]
    c264:	60a3      	str	r3, [r4, #8]
    c266:	e003      	b.n	c270 <__sflush_r+0xe4>
    c268:	9b01      	ldr	r3, [sp, #4]
    c26a:	183f      	adds	r7, r7, r0
    c26c:	1a1b      	subs	r3, r3, r0
    c26e:	9301      	str	r3, [sp, #4]
    c270:	9b01      	ldr	r3, [sp, #4]
    c272:	2b00      	cmp	r3, #0
    c274:	ddb0      	ble.n	c1d8 <__sflush_r+0x4c>
    c276:	9b01      	ldr	r3, [sp, #4]
    c278:	003a      	movs	r2, r7
    c27a:	6a21      	ldr	r1, [r4, #32]
    c27c:	0028      	movs	r0, r5
    c27e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    c280:	47b0      	blx	r6
    c282:	2800      	cmp	r0, #0
    c284:	dcf0      	bgt.n	c268 <__sflush_r+0xdc>
    c286:	89a3      	ldrh	r3, [r4, #12]
    c288:	2240      	movs	r2, #64	; 0x40
    c28a:	2001      	movs	r0, #1
    c28c:	4313      	orrs	r3, r2
    c28e:	81a3      	strh	r3, [r4, #12]
    c290:	4240      	negs	r0, r0
    c292:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c294:	20400001 	.word	0x20400001

0000c298 <_fflush_r>:
    c298:	690b      	ldr	r3, [r1, #16]
    c29a:	b570      	push	{r4, r5, r6, lr}
    c29c:	0005      	movs	r5, r0
    c29e:	000c      	movs	r4, r1
    c2a0:	2b00      	cmp	r3, #0
    c2a2:	d101      	bne.n	c2a8 <_fflush_r+0x10>
    c2a4:	2000      	movs	r0, #0
    c2a6:	e01c      	b.n	c2e2 <_fflush_r+0x4a>
    c2a8:	2800      	cmp	r0, #0
    c2aa:	d004      	beq.n	c2b6 <_fflush_r+0x1e>
    c2ac:	6983      	ldr	r3, [r0, #24]
    c2ae:	2b00      	cmp	r3, #0
    c2b0:	d101      	bne.n	c2b6 <_fflush_r+0x1e>
    c2b2:	f000 f85f 	bl	c374 <__sinit>
    c2b6:	4b0b      	ldr	r3, [pc, #44]	; (c2e4 <_fflush_r+0x4c>)
    c2b8:	429c      	cmp	r4, r3
    c2ba:	d101      	bne.n	c2c0 <_fflush_r+0x28>
    c2bc:	686c      	ldr	r4, [r5, #4]
    c2be:	e008      	b.n	c2d2 <_fflush_r+0x3a>
    c2c0:	4b09      	ldr	r3, [pc, #36]	; (c2e8 <_fflush_r+0x50>)
    c2c2:	429c      	cmp	r4, r3
    c2c4:	d101      	bne.n	c2ca <_fflush_r+0x32>
    c2c6:	68ac      	ldr	r4, [r5, #8]
    c2c8:	e003      	b.n	c2d2 <_fflush_r+0x3a>
    c2ca:	4b08      	ldr	r3, [pc, #32]	; (c2ec <_fflush_r+0x54>)
    c2cc:	429c      	cmp	r4, r3
    c2ce:	d100      	bne.n	c2d2 <_fflush_r+0x3a>
    c2d0:	68ec      	ldr	r4, [r5, #12]
    c2d2:	220c      	movs	r2, #12
    c2d4:	5ea3      	ldrsh	r3, [r4, r2]
    c2d6:	2b00      	cmp	r3, #0
    c2d8:	d0e4      	beq.n	c2a4 <_fflush_r+0xc>
    c2da:	0021      	movs	r1, r4
    c2dc:	0028      	movs	r0, r5
    c2de:	f7ff ff55 	bl	c18c <__sflush_r>
    c2e2:	bd70      	pop	{r4, r5, r6, pc}
    c2e4:	0000edd8 	.word	0x0000edd8
    c2e8:	0000edf8 	.word	0x0000edf8
    c2ec:	0000ee18 	.word	0x0000ee18

0000c2f0 <_cleanup_r>:
    c2f0:	b510      	push	{r4, lr}
    c2f2:	4902      	ldr	r1, [pc, #8]	; (c2fc <_cleanup_r+0xc>)
    c2f4:	f000 f8b0 	bl	c458 <_fwalk_reent>
    c2f8:	bd10      	pop	{r4, pc}
    c2fa:	46c0      	nop			; (mov r8, r8)
    c2fc:	0000c299 	.word	0x0000c299

0000c300 <std.isra.0>:
    c300:	2300      	movs	r3, #0
    c302:	b510      	push	{r4, lr}
    c304:	0004      	movs	r4, r0
    c306:	6003      	str	r3, [r0, #0]
    c308:	6043      	str	r3, [r0, #4]
    c30a:	6083      	str	r3, [r0, #8]
    c30c:	8181      	strh	r1, [r0, #12]
    c30e:	6643      	str	r3, [r0, #100]	; 0x64
    c310:	81c2      	strh	r2, [r0, #14]
    c312:	6103      	str	r3, [r0, #16]
    c314:	6143      	str	r3, [r0, #20]
    c316:	6183      	str	r3, [r0, #24]
    c318:	0019      	movs	r1, r3
    c31a:	2208      	movs	r2, #8
    c31c:	305c      	adds	r0, #92	; 0x5c
    c31e:	f7fd f9b0 	bl	9682 <memset>
    c322:	4b05      	ldr	r3, [pc, #20]	; (c338 <std.isra.0+0x38>)
    c324:	6224      	str	r4, [r4, #32]
    c326:	6263      	str	r3, [r4, #36]	; 0x24
    c328:	4b04      	ldr	r3, [pc, #16]	; (c33c <std.isra.0+0x3c>)
    c32a:	62a3      	str	r3, [r4, #40]	; 0x28
    c32c:	4b04      	ldr	r3, [pc, #16]	; (c340 <std.isra.0+0x40>)
    c32e:	62e3      	str	r3, [r4, #44]	; 0x2c
    c330:	4b04      	ldr	r3, [pc, #16]	; (c344 <std.isra.0+0x44>)
    c332:	6323      	str	r3, [r4, #48]	; 0x30
    c334:	bd10      	pop	{r4, pc}
    c336:	46c0      	nop			; (mov r8, r8)
    c338:	0000d791 	.word	0x0000d791
    c33c:	0000d7b9 	.word	0x0000d7b9
    c340:	0000d7f1 	.word	0x0000d7f1
    c344:	0000d81d 	.word	0x0000d81d

0000c348 <__sfmoreglue>:
    c348:	b570      	push	{r4, r5, r6, lr}
    c34a:	2568      	movs	r5, #104	; 0x68
    c34c:	1e4b      	subs	r3, r1, #1
    c34e:	435d      	muls	r5, r3
    c350:	000e      	movs	r6, r1
    c352:	0029      	movs	r1, r5
    c354:	3174      	adds	r1, #116	; 0x74
    c356:	f7fd f9e3 	bl	9720 <_malloc_r>
    c35a:	1e04      	subs	r4, r0, #0
    c35c:	d008      	beq.n	c370 <__sfmoreglue+0x28>
    c35e:	2100      	movs	r1, #0
    c360:	002a      	movs	r2, r5
    c362:	6001      	str	r1, [r0, #0]
    c364:	6046      	str	r6, [r0, #4]
    c366:	300c      	adds	r0, #12
    c368:	60a0      	str	r0, [r4, #8]
    c36a:	3268      	adds	r2, #104	; 0x68
    c36c:	f7fd f989 	bl	9682 <memset>
    c370:	0020      	movs	r0, r4
    c372:	bd70      	pop	{r4, r5, r6, pc}

0000c374 <__sinit>:
    c374:	6983      	ldr	r3, [r0, #24]
    c376:	b513      	push	{r0, r1, r4, lr}
    c378:	0004      	movs	r4, r0
    c37a:	2b00      	cmp	r3, #0
    c37c:	d128      	bne.n	c3d0 <__sinit+0x5c>
    c37e:	6483      	str	r3, [r0, #72]	; 0x48
    c380:	64c3      	str	r3, [r0, #76]	; 0x4c
    c382:	6503      	str	r3, [r0, #80]	; 0x50
    c384:	4b13      	ldr	r3, [pc, #76]	; (c3d4 <__sinit+0x60>)
    c386:	4a14      	ldr	r2, [pc, #80]	; (c3d8 <__sinit+0x64>)
    c388:	681b      	ldr	r3, [r3, #0]
    c38a:	6282      	str	r2, [r0, #40]	; 0x28
    c38c:	9301      	str	r3, [sp, #4]
    c38e:	4298      	cmp	r0, r3
    c390:	d101      	bne.n	c396 <__sinit+0x22>
    c392:	2301      	movs	r3, #1
    c394:	6183      	str	r3, [r0, #24]
    c396:	0020      	movs	r0, r4
    c398:	f000 f820 	bl	c3dc <__sfp>
    c39c:	6060      	str	r0, [r4, #4]
    c39e:	0020      	movs	r0, r4
    c3a0:	f000 f81c 	bl	c3dc <__sfp>
    c3a4:	60a0      	str	r0, [r4, #8]
    c3a6:	0020      	movs	r0, r4
    c3a8:	f000 f818 	bl	c3dc <__sfp>
    c3ac:	2200      	movs	r2, #0
    c3ae:	60e0      	str	r0, [r4, #12]
    c3b0:	2104      	movs	r1, #4
    c3b2:	6860      	ldr	r0, [r4, #4]
    c3b4:	f7ff ffa4 	bl	c300 <std.isra.0>
    c3b8:	2201      	movs	r2, #1
    c3ba:	2109      	movs	r1, #9
    c3bc:	68a0      	ldr	r0, [r4, #8]
    c3be:	f7ff ff9f 	bl	c300 <std.isra.0>
    c3c2:	2202      	movs	r2, #2
    c3c4:	2112      	movs	r1, #18
    c3c6:	68e0      	ldr	r0, [r4, #12]
    c3c8:	f7ff ff9a 	bl	c300 <std.isra.0>
    c3cc:	2301      	movs	r3, #1
    c3ce:	61a3      	str	r3, [r4, #24]
    c3d0:	bd13      	pop	{r0, r1, r4, pc}
    c3d2:	46c0      	nop			; (mov r8, r8)
    c3d4:	0000ec3c 	.word	0x0000ec3c
    c3d8:	0000c2f1 	.word	0x0000c2f1

0000c3dc <__sfp>:
    c3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3de:	4b1d      	ldr	r3, [pc, #116]	; (c454 <__sfp+0x78>)
    c3e0:	0006      	movs	r6, r0
    c3e2:	681d      	ldr	r5, [r3, #0]
    c3e4:	69ab      	ldr	r3, [r5, #24]
    c3e6:	2b00      	cmp	r3, #0
    c3e8:	d102      	bne.n	c3f0 <__sfp+0x14>
    c3ea:	0028      	movs	r0, r5
    c3ec:	f7ff ffc2 	bl	c374 <__sinit>
    c3f0:	3548      	adds	r5, #72	; 0x48
    c3f2:	68ac      	ldr	r4, [r5, #8]
    c3f4:	686b      	ldr	r3, [r5, #4]
    c3f6:	3b01      	subs	r3, #1
    c3f8:	d405      	bmi.n	c406 <__sfp+0x2a>
    c3fa:	220c      	movs	r2, #12
    c3fc:	5ea7      	ldrsh	r7, [r4, r2]
    c3fe:	2f00      	cmp	r7, #0
    c400:	d010      	beq.n	c424 <__sfp+0x48>
    c402:	3468      	adds	r4, #104	; 0x68
    c404:	e7f7      	b.n	c3f6 <__sfp+0x1a>
    c406:	682b      	ldr	r3, [r5, #0]
    c408:	2b00      	cmp	r3, #0
    c40a:	d001      	beq.n	c410 <__sfp+0x34>
    c40c:	682d      	ldr	r5, [r5, #0]
    c40e:	e7f0      	b.n	c3f2 <__sfp+0x16>
    c410:	2104      	movs	r1, #4
    c412:	0030      	movs	r0, r6
    c414:	f7ff ff98 	bl	c348 <__sfmoreglue>
    c418:	6028      	str	r0, [r5, #0]
    c41a:	2800      	cmp	r0, #0
    c41c:	d1f6      	bne.n	c40c <__sfp+0x30>
    c41e:	230c      	movs	r3, #12
    c420:	6033      	str	r3, [r6, #0]
    c422:	e016      	b.n	c452 <__sfp+0x76>
    c424:	2301      	movs	r3, #1
    c426:	0020      	movs	r0, r4
    c428:	425b      	negs	r3, r3
    c42a:	81e3      	strh	r3, [r4, #14]
    c42c:	3302      	adds	r3, #2
    c42e:	81a3      	strh	r3, [r4, #12]
    c430:	6667      	str	r7, [r4, #100]	; 0x64
    c432:	6027      	str	r7, [r4, #0]
    c434:	60a7      	str	r7, [r4, #8]
    c436:	6067      	str	r7, [r4, #4]
    c438:	6127      	str	r7, [r4, #16]
    c43a:	6167      	str	r7, [r4, #20]
    c43c:	61a7      	str	r7, [r4, #24]
    c43e:	305c      	adds	r0, #92	; 0x5c
    c440:	2208      	movs	r2, #8
    c442:	0039      	movs	r1, r7
    c444:	f7fd f91d 	bl	9682 <memset>
    c448:	0020      	movs	r0, r4
    c44a:	6367      	str	r7, [r4, #52]	; 0x34
    c44c:	63a7      	str	r7, [r4, #56]	; 0x38
    c44e:	64a7      	str	r7, [r4, #72]	; 0x48
    c450:	64e7      	str	r7, [r4, #76]	; 0x4c
    c452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c454:	0000ec3c 	.word	0x0000ec3c

0000c458 <_fwalk_reent>:
    c458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c45a:	0004      	movs	r4, r0
    c45c:	0007      	movs	r7, r0
    c45e:	2600      	movs	r6, #0
    c460:	9101      	str	r1, [sp, #4]
    c462:	3448      	adds	r4, #72	; 0x48
    c464:	2c00      	cmp	r4, #0
    c466:	d016      	beq.n	c496 <_fwalk_reent+0x3e>
    c468:	6863      	ldr	r3, [r4, #4]
    c46a:	68a5      	ldr	r5, [r4, #8]
    c46c:	9300      	str	r3, [sp, #0]
    c46e:	9b00      	ldr	r3, [sp, #0]
    c470:	3b01      	subs	r3, #1
    c472:	9300      	str	r3, [sp, #0]
    c474:	d40d      	bmi.n	c492 <_fwalk_reent+0x3a>
    c476:	89ab      	ldrh	r3, [r5, #12]
    c478:	2b01      	cmp	r3, #1
    c47a:	d908      	bls.n	c48e <_fwalk_reent+0x36>
    c47c:	220e      	movs	r2, #14
    c47e:	5eab      	ldrsh	r3, [r5, r2]
    c480:	3301      	adds	r3, #1
    c482:	d004      	beq.n	c48e <_fwalk_reent+0x36>
    c484:	0029      	movs	r1, r5
    c486:	0038      	movs	r0, r7
    c488:	9b01      	ldr	r3, [sp, #4]
    c48a:	4798      	blx	r3
    c48c:	4306      	orrs	r6, r0
    c48e:	3568      	adds	r5, #104	; 0x68
    c490:	e7ed      	b.n	c46e <_fwalk_reent+0x16>
    c492:	6824      	ldr	r4, [r4, #0]
    c494:	e7e6      	b.n	c464 <_fwalk_reent+0xc>
    c496:	0030      	movs	r0, r6
    c498:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000c49a <rshift>:
    c49a:	b5f0      	push	{r4, r5, r6, r7, lr}
    c49c:	0006      	movs	r6, r0
    c49e:	6905      	ldr	r5, [r0, #16]
    c4a0:	3614      	adds	r6, #20
    c4a2:	114a      	asrs	r2, r1, #5
    c4a4:	0034      	movs	r4, r6
    c4a6:	42aa      	cmp	r2, r5
    c4a8:	da25      	bge.n	c4f6 <rshift+0x5c>
    c4aa:	231f      	movs	r3, #31
    c4ac:	00ad      	lsls	r5, r5, #2
    c4ae:	0092      	lsls	r2, r2, #2
    c4b0:	4019      	ands	r1, r3
    c4b2:	1975      	adds	r5, r6, r5
    c4b4:	18b2      	adds	r2, r6, r2
    c4b6:	0033      	movs	r3, r6
    c4b8:	2900      	cmp	r1, #0
    c4ba:	d016      	beq.n	c4ea <rshift+0x50>
    c4bc:	0013      	movs	r3, r2
    c4be:	cb04      	ldmia	r3!, {r2}
    c4c0:	2720      	movs	r7, #32
    c4c2:	40ca      	lsrs	r2, r1
    c4c4:	46b4      	mov	ip, r6
    c4c6:	1a7f      	subs	r7, r7, r1
    c4c8:	4664      	mov	r4, ip
    c4ca:	429d      	cmp	r5, r3
    c4cc:	d908      	bls.n	c4e0 <rshift+0x46>
    c4ce:	681c      	ldr	r4, [r3, #0]
    c4d0:	40bc      	lsls	r4, r7
    c4d2:	4322      	orrs	r2, r4
    c4d4:	4664      	mov	r4, ip
    c4d6:	c404      	stmia	r4!, {r2}
    c4d8:	cb04      	ldmia	r3!, {r2}
    c4da:	46a4      	mov	ip, r4
    c4dc:	40ca      	lsrs	r2, r1
    c4de:	e7f3      	b.n	c4c8 <rshift+0x2e>
    c4e0:	6022      	str	r2, [r4, #0]
    c4e2:	2a00      	cmp	r2, #0
    c4e4:	d007      	beq.n	c4f6 <rshift+0x5c>
    c4e6:	3404      	adds	r4, #4
    c4e8:	e005      	b.n	c4f6 <rshift+0x5c>
    c4ea:	001c      	movs	r4, r3
    c4ec:	4295      	cmp	r5, r2
    c4ee:	d902      	bls.n	c4f6 <rshift+0x5c>
    c4f0:	ca02      	ldmia	r2!, {r1}
    c4f2:	c302      	stmia	r3!, {r1}
    c4f4:	e7f9      	b.n	c4ea <rshift+0x50>
    c4f6:	1ba3      	subs	r3, r4, r6
    c4f8:	109b      	asrs	r3, r3, #2
    c4fa:	6103      	str	r3, [r0, #16]
    c4fc:	d100      	bne.n	c500 <rshift+0x66>
    c4fe:	6143      	str	r3, [r0, #20]
    c500:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c502 <__hexdig_fun>:
    c502:	0003      	movs	r3, r0
    c504:	3b30      	subs	r3, #48	; 0x30
    c506:	2b09      	cmp	r3, #9
    c508:	d801      	bhi.n	c50e <__hexdig_fun+0xc>
    c50a:	3820      	subs	r0, #32
    c50c:	e00b      	b.n	c526 <__hexdig_fun+0x24>
    c50e:	0003      	movs	r3, r0
    c510:	3b61      	subs	r3, #97	; 0x61
    c512:	2b05      	cmp	r3, #5
    c514:	d801      	bhi.n	c51a <__hexdig_fun+0x18>
    c516:	3847      	subs	r0, #71	; 0x47
    c518:	e005      	b.n	c526 <__hexdig_fun+0x24>
    c51a:	0002      	movs	r2, r0
    c51c:	3a41      	subs	r2, #65	; 0x41
    c51e:	2300      	movs	r3, #0
    c520:	2a05      	cmp	r2, #5
    c522:	d801      	bhi.n	c528 <__hexdig_fun+0x26>
    c524:	3827      	subs	r0, #39	; 0x27
    c526:	b2c3      	uxtb	r3, r0
    c528:	0018      	movs	r0, r3
    c52a:	4770      	bx	lr

0000c52c <__gethex>:
    c52c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c52e:	b08d      	sub	sp, #52	; 0x34
    c530:	9109      	str	r1, [sp, #36]	; 0x24
    c532:	9202      	str	r2, [sp, #8]
    c534:	930a      	str	r3, [sp, #40]	; 0x28
    c536:	9005      	str	r0, [sp, #20]
    c538:	f000 fae0 	bl	cafc <_localeconv_r>
    c53c:	6803      	ldr	r3, [r0, #0]
    c53e:	0018      	movs	r0, r3
    c540:	9307      	str	r3, [sp, #28]
    c542:	f7fd ff68 	bl	a416 <strlen>
    c546:	2202      	movs	r2, #2
    c548:	9b07      	ldr	r3, [sp, #28]
    c54a:	4252      	negs	r2, r2
    c54c:	181b      	adds	r3, r3, r0
    c54e:	3b01      	subs	r3, #1
    c550:	781b      	ldrb	r3, [r3, #0]
    c552:	9004      	str	r0, [sp, #16]
    c554:	930b      	str	r3, [sp, #44]	; 0x2c
    c556:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c558:	6819      	ldr	r1, [r3, #0]
    c55a:	1c8b      	adds	r3, r1, #2
    c55c:	1a52      	subs	r2, r2, r1
    c55e:	18d1      	adds	r1, r2, r3
    c560:	9301      	str	r3, [sp, #4]
    c562:	9108      	str	r1, [sp, #32]
    c564:	9901      	ldr	r1, [sp, #4]
    c566:	3301      	adds	r3, #1
    c568:	7808      	ldrb	r0, [r1, #0]
    c56a:	2830      	cmp	r0, #48	; 0x30
    c56c:	d0f7      	beq.n	c55e <__gethex+0x32>
    c56e:	f7ff ffc8 	bl	c502 <__hexdig_fun>
    c572:	1e06      	subs	r6, r0, #0
    c574:	d120      	bne.n	c5b8 <__gethex+0x8c>
    c576:	9a04      	ldr	r2, [sp, #16]
    c578:	9907      	ldr	r1, [sp, #28]
    c57a:	9801      	ldr	r0, [sp, #4]
    c57c:	f7fd ff52 	bl	a424 <strncmp>
    c580:	2800      	cmp	r0, #0
    c582:	d13c      	bne.n	c5fe <__gethex+0xd2>
    c584:	9b01      	ldr	r3, [sp, #4]
    c586:	9a04      	ldr	r2, [sp, #16]
    c588:	189c      	adds	r4, r3, r2
    c58a:	7820      	ldrb	r0, [r4, #0]
    c58c:	f7ff ffb9 	bl	c502 <__hexdig_fun>
    c590:	2800      	cmp	r0, #0
    c592:	d037      	beq.n	c604 <__gethex+0xd8>
    c594:	9401      	str	r4, [sp, #4]
    c596:	9b01      	ldr	r3, [sp, #4]
    c598:	7818      	ldrb	r0, [r3, #0]
    c59a:	2830      	cmp	r0, #48	; 0x30
    c59c:	d103      	bne.n	c5a6 <__gethex+0x7a>
    c59e:	9b01      	ldr	r3, [sp, #4]
    c5a0:	3301      	adds	r3, #1
    c5a2:	9301      	str	r3, [sp, #4]
    c5a4:	e7f7      	b.n	c596 <__gethex+0x6a>
    c5a6:	f7ff ffac 	bl	c502 <__hexdig_fun>
    c5aa:	4243      	negs	r3, r0
    c5ac:	4143      	adcs	r3, r0
    c5ae:	9303      	str	r3, [sp, #12]
    c5b0:	2301      	movs	r3, #1
    c5b2:	0026      	movs	r6, r4
    c5b4:	9308      	str	r3, [sp, #32]
    c5b6:	e002      	b.n	c5be <__gethex+0x92>
    c5b8:	2300      	movs	r3, #0
    c5ba:	001e      	movs	r6, r3
    c5bc:	9303      	str	r3, [sp, #12]
    c5be:	9c01      	ldr	r4, [sp, #4]
    c5c0:	7820      	ldrb	r0, [r4, #0]
    c5c2:	f7ff ff9e 	bl	c502 <__hexdig_fun>
    c5c6:	2800      	cmp	r0, #0
    c5c8:	d001      	beq.n	c5ce <__gethex+0xa2>
    c5ca:	3401      	adds	r4, #1
    c5cc:	e7f8      	b.n	c5c0 <__gethex+0x94>
    c5ce:	9a04      	ldr	r2, [sp, #16]
    c5d0:	9907      	ldr	r1, [sp, #28]
    c5d2:	0020      	movs	r0, r4
    c5d4:	f7fd ff26 	bl	a424 <strncmp>
    c5d8:	2800      	cmp	r0, #0
    c5da:	d10b      	bne.n	c5f4 <__gethex+0xc8>
    c5dc:	2e00      	cmp	r6, #0
    c5de:	d10b      	bne.n	c5f8 <__gethex+0xcc>
    c5e0:	9b04      	ldr	r3, [sp, #16]
    c5e2:	18e4      	adds	r4, r4, r3
    c5e4:	0026      	movs	r6, r4
    c5e6:	7820      	ldrb	r0, [r4, #0]
    c5e8:	f7ff ff8b 	bl	c502 <__hexdig_fun>
    c5ec:	2800      	cmp	r0, #0
    c5ee:	d001      	beq.n	c5f4 <__gethex+0xc8>
    c5f0:	3401      	adds	r4, #1
    c5f2:	e7f8      	b.n	c5e6 <__gethex+0xba>
    c5f4:	1e37      	subs	r7, r6, #0
    c5f6:	d008      	beq.n	c60a <__gethex+0xde>
    c5f8:	1b36      	subs	r6, r6, r4
    c5fa:	00b7      	lsls	r7, r6, #2
    c5fc:	e005      	b.n	c60a <__gethex+0xde>
    c5fe:	9c01      	ldr	r4, [sp, #4]
    c600:	0037      	movs	r7, r6
    c602:	e000      	b.n	c606 <__gethex+0xda>
    c604:	0007      	movs	r7, r0
    c606:	2301      	movs	r3, #1
    c608:	9303      	str	r3, [sp, #12]
    c60a:	7823      	ldrb	r3, [r4, #0]
    c60c:	2b50      	cmp	r3, #80	; 0x50
    c60e:	d001      	beq.n	c614 <__gethex+0xe8>
    c610:	2b70      	cmp	r3, #112	; 0x70
    c612:	d128      	bne.n	c666 <__gethex+0x13a>
    c614:	7863      	ldrb	r3, [r4, #1]
    c616:	2b2b      	cmp	r3, #43	; 0x2b
    c618:	d007      	beq.n	c62a <__gethex+0xfe>
    c61a:	2b2d      	cmp	r3, #45	; 0x2d
    c61c:	d003      	beq.n	c626 <__gethex+0xfa>
    c61e:	2300      	movs	r3, #0
    c620:	1c66      	adds	r6, r4, #1
    c622:	9306      	str	r3, [sp, #24]
    c624:	e004      	b.n	c630 <__gethex+0x104>
    c626:	2301      	movs	r3, #1
    c628:	e000      	b.n	c62c <__gethex+0x100>
    c62a:	2300      	movs	r3, #0
    c62c:	9306      	str	r3, [sp, #24]
    c62e:	1ca6      	adds	r6, r4, #2
    c630:	7830      	ldrb	r0, [r6, #0]
    c632:	f7ff ff66 	bl	c502 <__hexdig_fun>
    c636:	1e43      	subs	r3, r0, #1
    c638:	b2db      	uxtb	r3, r3
    c63a:	2b18      	cmp	r3, #24
    c63c:	d813      	bhi.n	c666 <__gethex+0x13a>
    c63e:	3810      	subs	r0, #16
    c640:	3601      	adds	r6, #1
    c642:	0005      	movs	r5, r0
    c644:	7830      	ldrb	r0, [r6, #0]
    c646:	f7ff ff5c 	bl	c502 <__hexdig_fun>
    c64a:	1e43      	subs	r3, r0, #1
    c64c:	b2db      	uxtb	r3, r3
    c64e:	2b18      	cmp	r3, #24
    c650:	d803      	bhi.n	c65a <__gethex+0x12e>
    c652:	230a      	movs	r3, #10
    c654:	435d      	muls	r5, r3
    c656:	1828      	adds	r0, r5, r0
    c658:	e7f1      	b.n	c63e <__gethex+0x112>
    c65a:	9b06      	ldr	r3, [sp, #24]
    c65c:	2b00      	cmp	r3, #0
    c65e:	d000      	beq.n	c662 <__gethex+0x136>
    c660:	426d      	negs	r5, r5
    c662:	197f      	adds	r7, r7, r5
    c664:	e000      	b.n	c668 <__gethex+0x13c>
    c666:	0026      	movs	r6, r4
    c668:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c66a:	601e      	str	r6, [r3, #0]
    c66c:	9b03      	ldr	r3, [sp, #12]
    c66e:	2b00      	cmp	r3, #0
    c670:	d006      	beq.n	c680 <__gethex+0x154>
    c672:	2000      	movs	r0, #0
    c674:	9b08      	ldr	r3, [sp, #32]
    c676:	4283      	cmp	r3, r0
    c678:	d000      	beq.n	c67c <__gethex+0x150>
    c67a:	e17f      	b.n	c97c <__gethex+0x450>
    c67c:	3006      	adds	r0, #6
    c67e:	e17d      	b.n	c97c <__gethex+0x450>
    c680:	9b01      	ldr	r3, [sp, #4]
    c682:	9903      	ldr	r1, [sp, #12]
    c684:	1ae3      	subs	r3, r4, r3
    c686:	3b01      	subs	r3, #1
    c688:	2b07      	cmp	r3, #7
    c68a:	dd02      	ble.n	c692 <__gethex+0x166>
    c68c:	3101      	adds	r1, #1
    c68e:	105b      	asrs	r3, r3, #1
    c690:	e7fa      	b.n	c688 <__gethex+0x15c>
    c692:	9805      	ldr	r0, [sp, #20]
    c694:	f000 faa5 	bl	cbe2 <_Balloc>
    c698:	0003      	movs	r3, r0
    c69a:	2600      	movs	r6, #0
    c69c:	0005      	movs	r5, r0
    c69e:	3314      	adds	r3, #20
    c6a0:	9303      	str	r3, [sp, #12]
    c6a2:	9308      	str	r3, [sp, #32]
    c6a4:	9606      	str	r6, [sp, #24]
    c6a6:	9b01      	ldr	r3, [sp, #4]
    c6a8:	42a3      	cmp	r3, r4
    c6aa:	d22b      	bcs.n	c704 <__gethex+0x1d8>
    c6ac:	1e63      	subs	r3, r4, #1
    c6ae:	9309      	str	r3, [sp, #36]	; 0x24
    c6b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c6b2:	781b      	ldrb	r3, [r3, #0]
    c6b4:	4293      	cmp	r3, r2
    c6b6:	d009      	beq.n	c6cc <__gethex+0x1a0>
    c6b8:	9b06      	ldr	r3, [sp, #24]
    c6ba:	2b20      	cmp	r3, #32
    c6bc:	d115      	bne.n	c6ea <__gethex+0x1be>
    c6be:	9b08      	ldr	r3, [sp, #32]
    c6c0:	601e      	str	r6, [r3, #0]
    c6c2:	2600      	movs	r6, #0
    c6c4:	3304      	adds	r3, #4
    c6c6:	9308      	str	r3, [sp, #32]
    c6c8:	9606      	str	r6, [sp, #24]
    c6ca:	e00e      	b.n	c6ea <__gethex+0x1be>
    c6cc:	2301      	movs	r3, #1
    c6ce:	9a04      	ldr	r2, [sp, #16]
    c6d0:	1a9c      	subs	r4, r3, r2
    c6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c6d4:	191c      	adds	r4, r3, r4
    c6d6:	9b01      	ldr	r3, [sp, #4]
    c6d8:	42a3      	cmp	r3, r4
    c6da:	d8ed      	bhi.n	c6b8 <__gethex+0x18c>
    c6dc:	9907      	ldr	r1, [sp, #28]
    c6de:	0020      	movs	r0, r4
    c6e0:	f7fd fea0 	bl	a424 <strncmp>
    c6e4:	2800      	cmp	r0, #0
    c6e6:	d0de      	beq.n	c6a6 <__gethex+0x17a>
    c6e8:	e7e6      	b.n	c6b8 <__gethex+0x18c>
    c6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c6ec:	7818      	ldrb	r0, [r3, #0]
    c6ee:	f7ff ff08 	bl	c502 <__hexdig_fun>
    c6f2:	230f      	movs	r3, #15
    c6f4:	4018      	ands	r0, r3
    c6f6:	9b06      	ldr	r3, [sp, #24]
    c6f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c6fa:	4098      	lsls	r0, r3
    c6fc:	3304      	adds	r3, #4
    c6fe:	4306      	orrs	r6, r0
    c700:	9306      	str	r3, [sp, #24]
    c702:	e7d0      	b.n	c6a6 <__gethex+0x17a>
    c704:	9c08      	ldr	r4, [sp, #32]
    c706:	9b03      	ldr	r3, [sp, #12]
    c708:	c440      	stmia	r4!, {r6}
    c70a:	1ae4      	subs	r4, r4, r3
    c70c:	10a4      	asrs	r4, r4, #2
    c70e:	612c      	str	r4, [r5, #16]
    c710:	0030      	movs	r0, r6
    c712:	f000 fb32 	bl	cd7a <__hi0bits>
    c716:	9b02      	ldr	r3, [sp, #8]
    c718:	0164      	lsls	r4, r4, #5
    c71a:	681b      	ldr	r3, [r3, #0]
    c71c:	1a26      	subs	r6, r4, r0
    c71e:	9301      	str	r3, [sp, #4]
    c720:	429e      	cmp	r6, r3
    c722:	dd25      	ble.n	c770 <__gethex+0x244>
    c724:	1af6      	subs	r6, r6, r3
    c726:	0031      	movs	r1, r6
    c728:	0028      	movs	r0, r5
    c72a:	f000 fe31 	bl	d390 <__any_on>
    c72e:	2400      	movs	r4, #0
    c730:	42a0      	cmp	r0, r4
    c732:	d017      	beq.n	c764 <__gethex+0x238>
    c734:	211f      	movs	r1, #31
    c736:	3401      	adds	r4, #1
    c738:	0020      	movs	r0, r4
    c73a:	1e73      	subs	r3, r6, #1
    c73c:	4019      	ands	r1, r3
    c73e:	4088      	lsls	r0, r1
    c740:	0001      	movs	r1, r0
    c742:	115a      	asrs	r2, r3, #5
    c744:	9803      	ldr	r0, [sp, #12]
    c746:	0092      	lsls	r2, r2, #2
    c748:	5812      	ldr	r2, [r2, r0]
    c74a:	420a      	tst	r2, r1
    c74c:	d00a      	beq.n	c764 <__gethex+0x238>
    c74e:	42a3      	cmp	r3, r4
    c750:	dc01      	bgt.n	c756 <__gethex+0x22a>
    c752:	2402      	movs	r4, #2
    c754:	e006      	b.n	c764 <__gethex+0x238>
    c756:	1eb1      	subs	r1, r6, #2
    c758:	0028      	movs	r0, r5
    c75a:	f000 fe19 	bl	d390 <__any_on>
    c75e:	2800      	cmp	r0, #0
    c760:	d0f7      	beq.n	c752 <__gethex+0x226>
    c762:	2403      	movs	r4, #3
    c764:	0031      	movs	r1, r6
    c766:	0028      	movs	r0, r5
    c768:	f7ff fe97 	bl	c49a <rshift>
    c76c:	19bf      	adds	r7, r7, r6
    c76e:	e00e      	b.n	c78e <__gethex+0x262>
    c770:	9b01      	ldr	r3, [sp, #4]
    c772:	2400      	movs	r4, #0
    c774:	429e      	cmp	r6, r3
    c776:	da0a      	bge.n	c78e <__gethex+0x262>
    c778:	1b9e      	subs	r6, r3, r6
    c77a:	0029      	movs	r1, r5
    c77c:	0032      	movs	r2, r6
    c77e:	9805      	ldr	r0, [sp, #20]
    c780:	f000 fc2c 	bl	cfdc <__lshift>
    c784:	0003      	movs	r3, r0
    c786:	0005      	movs	r5, r0
    c788:	3314      	adds	r3, #20
    c78a:	1bbf      	subs	r7, r7, r6
    c78c:	9303      	str	r3, [sp, #12]
    c78e:	9b02      	ldr	r3, [sp, #8]
    c790:	689b      	ldr	r3, [r3, #8]
    c792:	9304      	str	r3, [sp, #16]
    c794:	429f      	cmp	r7, r3
    c796:	dd08      	ble.n	c7aa <__gethex+0x27e>
    c798:	9805      	ldr	r0, [sp, #20]
    c79a:	0029      	movs	r1, r5
    c79c:	f000 fa59 	bl	cc52 <_Bfree>
    c7a0:	2300      	movs	r3, #0
    c7a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c7a4:	20a3      	movs	r0, #163	; 0xa3
    c7a6:	6013      	str	r3, [r2, #0]
    c7a8:	e0e8      	b.n	c97c <__gethex+0x450>
    c7aa:	9b02      	ldr	r3, [sp, #8]
    c7ac:	685e      	ldr	r6, [r3, #4]
    c7ae:	42b7      	cmp	r7, r6
    c7b0:	da59      	bge.n	c866 <__gethex+0x33a>
    c7b2:	9b01      	ldr	r3, [sp, #4]
    c7b4:	1bf6      	subs	r6, r6, r7
    c7b6:	42b3      	cmp	r3, r6
    c7b8:	dc32      	bgt.n	c820 <__gethex+0x2f4>
    c7ba:	9b02      	ldr	r3, [sp, #8]
    c7bc:	68db      	ldr	r3, [r3, #12]
    c7be:	2b02      	cmp	r3, #2
    c7c0:	d01e      	beq.n	c800 <__gethex+0x2d4>
    c7c2:	2b03      	cmp	r3, #3
    c7c4:	d020      	beq.n	c808 <__gethex+0x2dc>
    c7c6:	2b01      	cmp	r3, #1
    c7c8:	d121      	bne.n	c80e <__gethex+0x2e2>
    c7ca:	9b01      	ldr	r3, [sp, #4]
    c7cc:	42b3      	cmp	r3, r6
    c7ce:	d11e      	bne.n	c80e <__gethex+0x2e2>
    c7d0:	2b01      	cmp	r3, #1
    c7d2:	dc0d      	bgt.n	c7f0 <__gethex+0x2c4>
    c7d4:	9b02      	ldr	r3, [sp, #8]
    c7d6:	2062      	movs	r0, #98	; 0x62
    c7d8:	685b      	ldr	r3, [r3, #4]
    c7da:	9301      	str	r3, [sp, #4]
    c7dc:	9a01      	ldr	r2, [sp, #4]
    c7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c7e0:	601a      	str	r2, [r3, #0]
    c7e2:	2301      	movs	r3, #1
    c7e4:	9a03      	ldr	r2, [sp, #12]
    c7e6:	612b      	str	r3, [r5, #16]
    c7e8:	6013      	str	r3, [r2, #0]
    c7ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c7ec:	601d      	str	r5, [r3, #0]
    c7ee:	e0c5      	b.n	c97c <__gethex+0x450>
    c7f0:	9901      	ldr	r1, [sp, #4]
    c7f2:	0028      	movs	r0, r5
    c7f4:	3901      	subs	r1, #1
    c7f6:	f000 fdcb 	bl	d390 <__any_on>
    c7fa:	2800      	cmp	r0, #0
    c7fc:	d1ea      	bne.n	c7d4 <__gethex+0x2a8>
    c7fe:	e006      	b.n	c80e <__gethex+0x2e2>
    c800:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c802:	2b00      	cmp	r3, #0
    c804:	d0e6      	beq.n	c7d4 <__gethex+0x2a8>
    c806:	e002      	b.n	c80e <__gethex+0x2e2>
    c808:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c80a:	2b00      	cmp	r3, #0
    c80c:	d1e2      	bne.n	c7d4 <__gethex+0x2a8>
    c80e:	9805      	ldr	r0, [sp, #20]
    c810:	0029      	movs	r1, r5
    c812:	f000 fa1e 	bl	cc52 <_Bfree>
    c816:	2300      	movs	r3, #0
    c818:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c81a:	2050      	movs	r0, #80	; 0x50
    c81c:	6013      	str	r3, [r2, #0]
    c81e:	e0ad      	b.n	c97c <__gethex+0x450>
    c820:	1e77      	subs	r7, r6, #1
    c822:	2c00      	cmp	r4, #0
    c824:	d107      	bne.n	c836 <__gethex+0x30a>
    c826:	2f00      	cmp	r7, #0
    c828:	d006      	beq.n	c838 <__gethex+0x30c>
    c82a:	0039      	movs	r1, r7
    c82c:	0028      	movs	r0, r5
    c82e:	f000 fdaf 	bl	d390 <__any_on>
    c832:	0004      	movs	r4, r0
    c834:	e000      	b.n	c838 <__gethex+0x30c>
    c836:	2401      	movs	r4, #1
    c838:	231f      	movs	r3, #31
    c83a:	117a      	asrs	r2, r7, #5
    c83c:	401f      	ands	r7, r3
    c83e:	3b1e      	subs	r3, #30
    c840:	40bb      	lsls	r3, r7
    c842:	9903      	ldr	r1, [sp, #12]
    c844:	0092      	lsls	r2, r2, #2
    c846:	5852      	ldr	r2, [r2, r1]
    c848:	421a      	tst	r2, r3
    c84a:	d001      	beq.n	c850 <__gethex+0x324>
    c84c:	2302      	movs	r3, #2
    c84e:	431c      	orrs	r4, r3
    c850:	9b01      	ldr	r3, [sp, #4]
    c852:	0031      	movs	r1, r6
    c854:	1b9b      	subs	r3, r3, r6
    c856:	0028      	movs	r0, r5
    c858:	9301      	str	r3, [sp, #4]
    c85a:	f7ff fe1e 	bl	c49a <rshift>
    c85e:	9b02      	ldr	r3, [sp, #8]
    c860:	2602      	movs	r6, #2
    c862:	685f      	ldr	r7, [r3, #4]
    c864:	e000      	b.n	c868 <__gethex+0x33c>
    c866:	2601      	movs	r6, #1
    c868:	2c00      	cmp	r4, #0
    c86a:	d100      	bne.n	c86e <__gethex+0x342>
    c86c:	e081      	b.n	c972 <__gethex+0x446>
    c86e:	9b02      	ldr	r3, [sp, #8]
    c870:	68db      	ldr	r3, [r3, #12]
    c872:	2b02      	cmp	r3, #2
    c874:	d00b      	beq.n	c88e <__gethex+0x362>
    c876:	2b03      	cmp	r3, #3
    c878:	d00d      	beq.n	c896 <__gethex+0x36a>
    c87a:	2b01      	cmp	r3, #1
    c87c:	d177      	bne.n	c96e <__gethex+0x442>
    c87e:	07a2      	lsls	r2, r4, #30
    c880:	d575      	bpl.n	c96e <__gethex+0x442>
    c882:	9a03      	ldr	r2, [sp, #12]
    c884:	6812      	ldr	r2, [r2, #0]
    c886:	4314      	orrs	r4, r2
    c888:	421c      	tst	r4, r3
    c88a:	d107      	bne.n	c89c <__gethex+0x370>
    c88c:	e06f      	b.n	c96e <__gethex+0x442>
    c88e:	2301      	movs	r3, #1
    c890:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c892:	1a9b      	subs	r3, r3, r2
    c894:	9313      	str	r3, [sp, #76]	; 0x4c
    c896:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c898:	2b00      	cmp	r3, #0
    c89a:	d068      	beq.n	c96e <__gethex+0x442>
    c89c:	692c      	ldr	r4, [r5, #16]
    c89e:	00a3      	lsls	r3, r4, #2
    c8a0:	9304      	str	r3, [sp, #16]
    c8a2:	002b      	movs	r3, r5
    c8a4:	00a2      	lsls	r2, r4, #2
    c8a6:	3314      	adds	r3, #20
    c8a8:	1899      	adds	r1, r3, r2
    c8aa:	2200      	movs	r2, #0
    c8ac:	4694      	mov	ip, r2
    c8ae:	681a      	ldr	r2, [r3, #0]
    c8b0:	1c50      	adds	r0, r2, #1
    c8b2:	d002      	beq.n	c8ba <__gethex+0x38e>
    c8b4:	3201      	adds	r2, #1
    c8b6:	601a      	str	r2, [r3, #0]
    c8b8:	e021      	b.n	c8fe <__gethex+0x3d2>
    c8ba:	4662      	mov	r2, ip
    c8bc:	c304      	stmia	r3!, {r2}
    c8be:	4299      	cmp	r1, r3
    c8c0:	d8f5      	bhi.n	c8ae <__gethex+0x382>
    c8c2:	68ab      	ldr	r3, [r5, #8]
    c8c4:	429c      	cmp	r4, r3
    c8c6:	db12      	blt.n	c8ee <__gethex+0x3c2>
    c8c8:	686b      	ldr	r3, [r5, #4]
    c8ca:	9805      	ldr	r0, [sp, #20]
    c8cc:	1c59      	adds	r1, r3, #1
    c8ce:	f000 f988 	bl	cbe2 <_Balloc>
    c8d2:	0029      	movs	r1, r5
    c8d4:	692b      	ldr	r3, [r5, #16]
    c8d6:	9003      	str	r0, [sp, #12]
    c8d8:	1c9a      	adds	r2, r3, #2
    c8da:	0092      	lsls	r2, r2, #2
    c8dc:	310c      	adds	r1, #12
    c8de:	300c      	adds	r0, #12
    c8e0:	f7fc feb1 	bl	9646 <memcpy>
    c8e4:	0029      	movs	r1, r5
    c8e6:	9805      	ldr	r0, [sp, #20]
    c8e8:	f000 f9b3 	bl	cc52 <_Bfree>
    c8ec:	9d03      	ldr	r5, [sp, #12]
    c8ee:	692b      	ldr	r3, [r5, #16]
    c8f0:	1c5a      	adds	r2, r3, #1
    c8f2:	612a      	str	r2, [r5, #16]
    c8f4:	2201      	movs	r2, #1
    c8f6:	3304      	adds	r3, #4
    c8f8:	009b      	lsls	r3, r3, #2
    c8fa:	18eb      	adds	r3, r5, r3
    c8fc:	605a      	str	r2, [r3, #4]
    c8fe:	002b      	movs	r3, r5
    c900:	3314      	adds	r3, #20
    c902:	2e02      	cmp	r6, #2
    c904:	d112      	bne.n	c92c <__gethex+0x400>
    c906:	9a02      	ldr	r2, [sp, #8]
    c908:	9901      	ldr	r1, [sp, #4]
    c90a:	6812      	ldr	r2, [r2, #0]
    c90c:	3a01      	subs	r2, #1
    c90e:	4291      	cmp	r1, r2
    c910:	d12b      	bne.n	c96a <__gethex+0x43e>
    c912:	114a      	asrs	r2, r1, #5
    c914:	211f      	movs	r1, #31
    c916:	9801      	ldr	r0, [sp, #4]
    c918:	0092      	lsls	r2, r2, #2
    c91a:	4001      	ands	r1, r0
    c91c:	2001      	movs	r0, #1
    c91e:	0004      	movs	r4, r0
    c920:	408c      	lsls	r4, r1
    c922:	58d3      	ldr	r3, [r2, r3]
    c924:	4223      	tst	r3, r4
    c926:	d020      	beq.n	c96a <__gethex+0x43e>
    c928:	0006      	movs	r6, r0
    c92a:	e01e      	b.n	c96a <__gethex+0x43e>
    c92c:	692a      	ldr	r2, [r5, #16]
    c92e:	4294      	cmp	r4, r2
    c930:	da0b      	bge.n	c94a <__gethex+0x41e>
    c932:	2101      	movs	r1, #1
    c934:	0028      	movs	r0, r5
    c936:	f7ff fdb0 	bl	c49a <rshift>
    c93a:	9b02      	ldr	r3, [sp, #8]
    c93c:	3701      	adds	r7, #1
    c93e:	689b      	ldr	r3, [r3, #8]
    c940:	2601      	movs	r6, #1
    c942:	429f      	cmp	r7, r3
    c944:	dd00      	ble.n	c948 <__gethex+0x41c>
    c946:	e727      	b.n	c798 <__gethex+0x26c>
    c948:	e00f      	b.n	c96a <__gethex+0x43e>
    c94a:	241f      	movs	r4, #31
    c94c:	9a01      	ldr	r2, [sp, #4]
    c94e:	2601      	movs	r6, #1
    c950:	4022      	ands	r2, r4
    c952:	1e14      	subs	r4, r2, #0
    c954:	d009      	beq.n	c96a <__gethex+0x43e>
    c956:	9a04      	ldr	r2, [sp, #16]
    c958:	189b      	adds	r3, r3, r2
    c95a:	3b04      	subs	r3, #4
    c95c:	6818      	ldr	r0, [r3, #0]
    c95e:	f000 fa0c 	bl	cd7a <__hi0bits>
    c962:	2120      	movs	r1, #32
    c964:	1b0c      	subs	r4, r1, r4
    c966:	42a0      	cmp	r0, r4
    c968:	dbe3      	blt.n	c932 <__gethex+0x406>
    c96a:	2320      	movs	r3, #32
    c96c:	e000      	b.n	c970 <__gethex+0x444>
    c96e:	2310      	movs	r3, #16
    c970:	431e      	orrs	r6, r3
    c972:	0030      	movs	r0, r6
    c974:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c976:	601d      	str	r5, [r3, #0]
    c978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c97a:	601f      	str	r7, [r3, #0]
    c97c:	b00d      	add	sp, #52	; 0x34
    c97e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c980 <L_shift>:
    c980:	2308      	movs	r3, #8
    c982:	b570      	push	{r4, r5, r6, lr}
    c984:	2520      	movs	r5, #32
    c986:	1a9a      	subs	r2, r3, r2
    c988:	0092      	lsls	r2, r2, #2
    c98a:	1aad      	subs	r5, r5, r2
    c98c:	6843      	ldr	r3, [r0, #4]
    c98e:	6806      	ldr	r6, [r0, #0]
    c990:	001c      	movs	r4, r3
    c992:	40ac      	lsls	r4, r5
    c994:	40d3      	lsrs	r3, r2
    c996:	4334      	orrs	r4, r6
    c998:	6004      	str	r4, [r0, #0]
    c99a:	6043      	str	r3, [r0, #4]
    c99c:	3004      	adds	r0, #4
    c99e:	4288      	cmp	r0, r1
    c9a0:	d3f4      	bcc.n	c98c <L_shift+0xc>
    c9a2:	bd70      	pop	{r4, r5, r6, pc}

0000c9a4 <__match>:
    c9a4:	b530      	push	{r4, r5, lr}
    c9a6:	6803      	ldr	r3, [r0, #0]
    c9a8:	780c      	ldrb	r4, [r1, #0]
    c9aa:	3301      	adds	r3, #1
    c9ac:	2c00      	cmp	r4, #0
    c9ae:	d00a      	beq.n	c9c6 <__match+0x22>
    c9b0:	781a      	ldrb	r2, [r3, #0]
    c9b2:	0015      	movs	r5, r2
    c9b4:	3d41      	subs	r5, #65	; 0x41
    c9b6:	2d19      	cmp	r5, #25
    c9b8:	d800      	bhi.n	c9bc <__match+0x18>
    c9ba:	3220      	adds	r2, #32
    c9bc:	3101      	adds	r1, #1
    c9be:	42a2      	cmp	r2, r4
    c9c0:	d0f2      	beq.n	c9a8 <__match+0x4>
    c9c2:	2000      	movs	r0, #0
    c9c4:	e001      	b.n	c9ca <__match+0x26>
    c9c6:	6003      	str	r3, [r0, #0]
    c9c8:	2001      	movs	r0, #1
    c9ca:	bd30      	pop	{r4, r5, pc}

0000c9cc <__hexnan>:
    c9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9ce:	b089      	sub	sp, #36	; 0x24
    c9d0:	9200      	str	r2, [sp, #0]
    c9d2:	680a      	ldr	r2, [r1, #0]
    c9d4:	9900      	ldr	r1, [sp, #0]
    c9d6:	1153      	asrs	r3, r2, #5
    c9d8:	009b      	lsls	r3, r3, #2
    c9da:	18cb      	adds	r3, r1, r3
    c9dc:	9302      	str	r3, [sp, #8]
    c9de:	231f      	movs	r3, #31
    c9e0:	401a      	ands	r2, r3
    c9e2:	9007      	str	r0, [sp, #28]
    c9e4:	9205      	str	r2, [sp, #20]
    c9e6:	d002      	beq.n	c9ee <__hexnan+0x22>
    c9e8:	9b02      	ldr	r3, [sp, #8]
    c9ea:	3304      	adds	r3, #4
    c9ec:	9302      	str	r3, [sp, #8]
    c9ee:	9b02      	ldr	r3, [sp, #8]
    c9f0:	2500      	movs	r5, #0
    c9f2:	1f1e      	subs	r6, r3, #4
    c9f4:	0037      	movs	r7, r6
    c9f6:	0034      	movs	r4, r6
    c9f8:	9b07      	ldr	r3, [sp, #28]
    c9fa:	6035      	str	r5, [r6, #0]
    c9fc:	681b      	ldr	r3, [r3, #0]
    c9fe:	9506      	str	r5, [sp, #24]
    ca00:	9303      	str	r3, [sp, #12]
    ca02:	9501      	str	r5, [sp, #4]
    ca04:	9b03      	ldr	r3, [sp, #12]
    ca06:	3301      	adds	r3, #1
    ca08:	9303      	str	r3, [sp, #12]
    ca0a:	781b      	ldrb	r3, [r3, #0]
    ca0c:	9304      	str	r3, [sp, #16]
    ca0e:	2b00      	cmp	r3, #0
    ca10:	d03b      	beq.n	ca8a <__hexnan+0xbe>
    ca12:	9804      	ldr	r0, [sp, #16]
    ca14:	f7ff fd75 	bl	c502 <__hexdig_fun>
    ca18:	2800      	cmp	r0, #0
    ca1a:	d122      	bne.n	ca62 <__hexnan+0x96>
    ca1c:	9b04      	ldr	r3, [sp, #16]
    ca1e:	2b20      	cmp	r3, #32
    ca20:	d817      	bhi.n	ca52 <__hexnan+0x86>
    ca22:	9b01      	ldr	r3, [sp, #4]
    ca24:	9a06      	ldr	r2, [sp, #24]
    ca26:	4293      	cmp	r3, r2
    ca28:	ddec      	ble.n	ca04 <__hexnan+0x38>
    ca2a:	42bc      	cmp	r4, r7
    ca2c:	d206      	bcs.n	ca3c <__hexnan+0x70>
    ca2e:	2d07      	cmp	r5, #7
    ca30:	dc04      	bgt.n	ca3c <__hexnan+0x70>
    ca32:	002a      	movs	r2, r5
    ca34:	0039      	movs	r1, r7
    ca36:	0020      	movs	r0, r4
    ca38:	f7ff ffa2 	bl	c980 <L_shift>
    ca3c:	9b00      	ldr	r3, [sp, #0]
    ca3e:	2508      	movs	r5, #8
    ca40:	429c      	cmp	r4, r3
    ca42:	d9df      	bls.n	ca04 <__hexnan+0x38>
    ca44:	2500      	movs	r5, #0
    ca46:	9b01      	ldr	r3, [sp, #4]
    ca48:	1f27      	subs	r7, r4, #4
    ca4a:	603d      	str	r5, [r7, #0]
    ca4c:	9306      	str	r3, [sp, #24]
    ca4e:	003c      	movs	r4, r7
    ca50:	e7d8      	b.n	ca04 <__hexnan+0x38>
    ca52:	9b04      	ldr	r3, [sp, #16]
    ca54:	2b29      	cmp	r3, #41	; 0x29
    ca56:	d14b      	bne.n	caf0 <__hexnan+0x124>
    ca58:	9b03      	ldr	r3, [sp, #12]
    ca5a:	9a07      	ldr	r2, [sp, #28]
    ca5c:	3301      	adds	r3, #1
    ca5e:	6013      	str	r3, [r2, #0]
    ca60:	e013      	b.n	ca8a <__hexnan+0xbe>
    ca62:	9b01      	ldr	r3, [sp, #4]
    ca64:	3501      	adds	r5, #1
    ca66:	3301      	adds	r3, #1
    ca68:	9301      	str	r3, [sp, #4]
    ca6a:	2d08      	cmp	r5, #8
    ca6c:	dd06      	ble.n	ca7c <__hexnan+0xb0>
    ca6e:	9b00      	ldr	r3, [sp, #0]
    ca70:	429c      	cmp	r4, r3
    ca72:	d9c7      	bls.n	ca04 <__hexnan+0x38>
    ca74:	2300      	movs	r3, #0
    ca76:	2501      	movs	r5, #1
    ca78:	3c04      	subs	r4, #4
    ca7a:	6023      	str	r3, [r4, #0]
    ca7c:	220f      	movs	r2, #15
    ca7e:	6823      	ldr	r3, [r4, #0]
    ca80:	4010      	ands	r0, r2
    ca82:	011b      	lsls	r3, r3, #4
    ca84:	4318      	orrs	r0, r3
    ca86:	6020      	str	r0, [r4, #0]
    ca88:	e7bc      	b.n	ca04 <__hexnan+0x38>
    ca8a:	9b01      	ldr	r3, [sp, #4]
    ca8c:	2b00      	cmp	r3, #0
    ca8e:	d02f      	beq.n	caf0 <__hexnan+0x124>
    ca90:	42bc      	cmp	r4, r7
    ca92:	d206      	bcs.n	caa2 <__hexnan+0xd6>
    ca94:	2d07      	cmp	r5, #7
    ca96:	dc04      	bgt.n	caa2 <__hexnan+0xd6>
    ca98:	002a      	movs	r2, r5
    ca9a:	0039      	movs	r1, r7
    ca9c:	0020      	movs	r0, r4
    ca9e:	f7ff ff6f 	bl	c980 <L_shift>
    caa2:	9b00      	ldr	r3, [sp, #0]
    caa4:	429c      	cmp	r4, r3
    caa6:	d90a      	bls.n	cabe <__hexnan+0xf2>
    caa8:	3304      	adds	r3, #4
    caaa:	cc02      	ldmia	r4!, {r1}
    caac:	1f1a      	subs	r2, r3, #4
    caae:	6011      	str	r1, [r2, #0]
    cab0:	42a6      	cmp	r6, r4
    cab2:	d2f9      	bcs.n	caa8 <__hexnan+0xdc>
    cab4:	2200      	movs	r2, #0
    cab6:	c304      	stmia	r3!, {r2}
    cab8:	429e      	cmp	r6, r3
    caba:	d2fc      	bcs.n	cab6 <__hexnan+0xea>
    cabc:	e00d      	b.n	cada <__hexnan+0x10e>
    cabe:	9b05      	ldr	r3, [sp, #20]
    cac0:	2b00      	cmp	r3, #0
    cac2:	d00a      	beq.n	cada <__hexnan+0x10e>
    cac4:	2120      	movs	r1, #32
    cac6:	9a05      	ldr	r2, [sp, #20]
    cac8:	9b02      	ldr	r3, [sp, #8]
    caca:	1a89      	subs	r1, r1, r2
    cacc:	2201      	movs	r2, #1
    cace:	4252      	negs	r2, r2
    cad0:	40ca      	lsrs	r2, r1
    cad2:	3b04      	subs	r3, #4
    cad4:	6819      	ldr	r1, [r3, #0]
    cad6:	400a      	ands	r2, r1
    cad8:	601a      	str	r2, [r3, #0]
    cada:	6833      	ldr	r3, [r6, #0]
    cadc:	2b00      	cmp	r3, #0
    cade:	d109      	bne.n	caf4 <__hexnan+0x128>
    cae0:	9b00      	ldr	r3, [sp, #0]
    cae2:	429e      	cmp	r6, r3
    cae4:	d102      	bne.n	caec <__hexnan+0x120>
    cae6:	2301      	movs	r3, #1
    cae8:	6033      	str	r3, [r6, #0]
    caea:	e003      	b.n	caf4 <__hexnan+0x128>
    caec:	3e04      	subs	r6, #4
    caee:	e7f4      	b.n	cada <__hexnan+0x10e>
    caf0:	2004      	movs	r0, #4
    caf2:	e000      	b.n	caf6 <__hexnan+0x12a>
    caf4:	2005      	movs	r0, #5
    caf6:	b009      	add	sp, #36	; 0x24
    caf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000cafc <_localeconv_r>:
    cafc:	4800      	ldr	r0, [pc, #0]	; (cb00 <_localeconv_r+0x4>)
    cafe:	4770      	bx	lr
    cb00:	20000104 	.word	0x20000104

0000cb04 <__swhatbuf_r>:
    cb04:	b570      	push	{r4, r5, r6, lr}
    cb06:	000e      	movs	r6, r1
    cb08:	001d      	movs	r5, r3
    cb0a:	230e      	movs	r3, #14
    cb0c:	5ec9      	ldrsh	r1, [r1, r3]
    cb0e:	b090      	sub	sp, #64	; 0x40
    cb10:	0014      	movs	r4, r2
    cb12:	2900      	cmp	r1, #0
    cb14:	da06      	bge.n	cb24 <__swhatbuf_r+0x20>
    cb16:	2300      	movs	r3, #0
    cb18:	602b      	str	r3, [r5, #0]
    cb1a:	89b3      	ldrh	r3, [r6, #12]
    cb1c:	061b      	lsls	r3, r3, #24
    cb1e:	d50f      	bpl.n	cb40 <__swhatbuf_r+0x3c>
    cb20:	2340      	movs	r3, #64	; 0x40
    cb22:	e00f      	b.n	cb44 <__swhatbuf_r+0x40>
    cb24:	aa01      	add	r2, sp, #4
    cb26:	f000 fea5 	bl	d874 <_fstat_r>
    cb2a:	2800      	cmp	r0, #0
    cb2c:	dbf3      	blt.n	cb16 <__swhatbuf_r+0x12>
    cb2e:	23f0      	movs	r3, #240	; 0xf0
    cb30:	9a02      	ldr	r2, [sp, #8]
    cb32:	021b      	lsls	r3, r3, #8
    cb34:	4013      	ands	r3, r2
    cb36:	4a05      	ldr	r2, [pc, #20]	; (cb4c <__swhatbuf_r+0x48>)
    cb38:	189b      	adds	r3, r3, r2
    cb3a:	425a      	negs	r2, r3
    cb3c:	4153      	adcs	r3, r2
    cb3e:	602b      	str	r3, [r5, #0]
    cb40:	2380      	movs	r3, #128	; 0x80
    cb42:	00db      	lsls	r3, r3, #3
    cb44:	2000      	movs	r0, #0
    cb46:	6023      	str	r3, [r4, #0]
    cb48:	b010      	add	sp, #64	; 0x40
    cb4a:	bd70      	pop	{r4, r5, r6, pc}
    cb4c:	ffffe000 	.word	0xffffe000

0000cb50 <__smakebuf_r>:
    cb50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cb52:	2602      	movs	r6, #2
    cb54:	898b      	ldrh	r3, [r1, #12]
    cb56:	0005      	movs	r5, r0
    cb58:	000c      	movs	r4, r1
    cb5a:	4233      	tst	r3, r6
    cb5c:	d110      	bne.n	cb80 <__smakebuf_r+0x30>
    cb5e:	ab01      	add	r3, sp, #4
    cb60:	466a      	mov	r2, sp
    cb62:	f7ff ffcf 	bl	cb04 <__swhatbuf_r>
    cb66:	9900      	ldr	r1, [sp, #0]
    cb68:	0007      	movs	r7, r0
    cb6a:	0028      	movs	r0, r5
    cb6c:	f7fc fdd8 	bl	9720 <_malloc_r>
    cb70:	2800      	cmp	r0, #0
    cb72:	d10c      	bne.n	cb8e <__smakebuf_r+0x3e>
    cb74:	220c      	movs	r2, #12
    cb76:	5ea3      	ldrsh	r3, [r4, r2]
    cb78:	059a      	lsls	r2, r3, #22
    cb7a:	d423      	bmi.n	cbc4 <__smakebuf_r+0x74>
    cb7c:	4333      	orrs	r3, r6
    cb7e:	81a3      	strh	r3, [r4, #12]
    cb80:	0023      	movs	r3, r4
    cb82:	3347      	adds	r3, #71	; 0x47
    cb84:	6023      	str	r3, [r4, #0]
    cb86:	6123      	str	r3, [r4, #16]
    cb88:	2301      	movs	r3, #1
    cb8a:	6163      	str	r3, [r4, #20]
    cb8c:	e01a      	b.n	cbc4 <__smakebuf_r+0x74>
    cb8e:	2280      	movs	r2, #128	; 0x80
    cb90:	4b0d      	ldr	r3, [pc, #52]	; (cbc8 <__smakebuf_r+0x78>)
    cb92:	62ab      	str	r3, [r5, #40]	; 0x28
    cb94:	89a3      	ldrh	r3, [r4, #12]
    cb96:	6020      	str	r0, [r4, #0]
    cb98:	4313      	orrs	r3, r2
    cb9a:	81a3      	strh	r3, [r4, #12]
    cb9c:	9b00      	ldr	r3, [sp, #0]
    cb9e:	6120      	str	r0, [r4, #16]
    cba0:	6163      	str	r3, [r4, #20]
    cba2:	9b01      	ldr	r3, [sp, #4]
    cba4:	2b00      	cmp	r3, #0
    cba6:	d00a      	beq.n	cbbe <__smakebuf_r+0x6e>
    cba8:	230e      	movs	r3, #14
    cbaa:	5ee1      	ldrsh	r1, [r4, r3]
    cbac:	0028      	movs	r0, r5
    cbae:	f000 fe73 	bl	d898 <_isatty_r>
    cbb2:	2800      	cmp	r0, #0
    cbb4:	d003      	beq.n	cbbe <__smakebuf_r+0x6e>
    cbb6:	2201      	movs	r2, #1
    cbb8:	89a3      	ldrh	r3, [r4, #12]
    cbba:	4313      	orrs	r3, r2
    cbbc:	81a3      	strh	r3, [r4, #12]
    cbbe:	89a3      	ldrh	r3, [r4, #12]
    cbc0:	431f      	orrs	r7, r3
    cbc2:	81a7      	strh	r7, [r4, #12]
    cbc4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    cbc6:	46c0      	nop			; (mov r8, r8)
    cbc8:	0000c2f1 	.word	0x0000c2f1

0000cbcc <memchr>:
    cbcc:	b2c9      	uxtb	r1, r1
    cbce:	1882      	adds	r2, r0, r2
    cbd0:	4290      	cmp	r0, r2
    cbd2:	d004      	beq.n	cbde <memchr+0x12>
    cbd4:	7803      	ldrb	r3, [r0, #0]
    cbd6:	428b      	cmp	r3, r1
    cbd8:	d002      	beq.n	cbe0 <memchr+0x14>
    cbda:	3001      	adds	r0, #1
    cbdc:	e7f8      	b.n	cbd0 <memchr+0x4>
    cbde:	2000      	movs	r0, #0
    cbe0:	4770      	bx	lr

0000cbe2 <_Balloc>:
    cbe2:	b570      	push	{r4, r5, r6, lr}
    cbe4:	6a46      	ldr	r6, [r0, #36]	; 0x24
    cbe6:	0004      	movs	r4, r0
    cbe8:	000d      	movs	r5, r1
    cbea:	2e00      	cmp	r6, #0
    cbec:	d107      	bne.n	cbfe <_Balloc+0x1c>
    cbee:	2010      	movs	r0, #16
    cbf0:	f7fc fd06 	bl	9600 <malloc>
    cbf4:	6260      	str	r0, [r4, #36]	; 0x24
    cbf6:	6046      	str	r6, [r0, #4]
    cbf8:	6086      	str	r6, [r0, #8]
    cbfa:	6006      	str	r6, [r0, #0]
    cbfc:	60c6      	str	r6, [r0, #12]
    cbfe:	6a66      	ldr	r6, [r4, #36]	; 0x24
    cc00:	68f3      	ldr	r3, [r6, #12]
    cc02:	2b00      	cmp	r3, #0
    cc04:	d009      	beq.n	cc1a <_Balloc+0x38>
    cc06:	6a63      	ldr	r3, [r4, #36]	; 0x24
    cc08:	00aa      	lsls	r2, r5, #2
    cc0a:	68db      	ldr	r3, [r3, #12]
    cc0c:	189b      	adds	r3, r3, r2
    cc0e:	6818      	ldr	r0, [r3, #0]
    cc10:	2800      	cmp	r0, #0
    cc12:	d00e      	beq.n	cc32 <_Balloc+0x50>
    cc14:	6802      	ldr	r2, [r0, #0]
    cc16:	601a      	str	r2, [r3, #0]
    cc18:	e017      	b.n	cc4a <_Balloc+0x68>
    cc1a:	2221      	movs	r2, #33	; 0x21
    cc1c:	2104      	movs	r1, #4
    cc1e:	0020      	movs	r0, r4
    cc20:	f000 fbd7 	bl	d3d2 <_calloc_r>
    cc24:	6a63      	ldr	r3, [r4, #36]	; 0x24
    cc26:	60f0      	str	r0, [r6, #12]
    cc28:	68db      	ldr	r3, [r3, #12]
    cc2a:	2b00      	cmp	r3, #0
    cc2c:	d1eb      	bne.n	cc06 <_Balloc+0x24>
    cc2e:	2000      	movs	r0, #0
    cc30:	e00e      	b.n	cc50 <_Balloc+0x6e>
    cc32:	2101      	movs	r1, #1
    cc34:	000e      	movs	r6, r1
    cc36:	40ae      	lsls	r6, r5
    cc38:	1d72      	adds	r2, r6, #5
    cc3a:	0092      	lsls	r2, r2, #2
    cc3c:	0020      	movs	r0, r4
    cc3e:	f000 fbc8 	bl	d3d2 <_calloc_r>
    cc42:	2800      	cmp	r0, #0
    cc44:	d0f3      	beq.n	cc2e <_Balloc+0x4c>
    cc46:	6045      	str	r5, [r0, #4]
    cc48:	6086      	str	r6, [r0, #8]
    cc4a:	2300      	movs	r3, #0
    cc4c:	6103      	str	r3, [r0, #16]
    cc4e:	60c3      	str	r3, [r0, #12]
    cc50:	bd70      	pop	{r4, r5, r6, pc}

0000cc52 <_Bfree>:
    cc52:	b570      	push	{r4, r5, r6, lr}
    cc54:	6a45      	ldr	r5, [r0, #36]	; 0x24
    cc56:	0006      	movs	r6, r0
    cc58:	000c      	movs	r4, r1
    cc5a:	2d00      	cmp	r5, #0
    cc5c:	d107      	bne.n	cc6e <_Bfree+0x1c>
    cc5e:	2010      	movs	r0, #16
    cc60:	f7fc fcce 	bl	9600 <malloc>
    cc64:	6270      	str	r0, [r6, #36]	; 0x24
    cc66:	6045      	str	r5, [r0, #4]
    cc68:	6085      	str	r5, [r0, #8]
    cc6a:	6005      	str	r5, [r0, #0]
    cc6c:	60c5      	str	r5, [r0, #12]
    cc6e:	2c00      	cmp	r4, #0
    cc70:	d007      	beq.n	cc82 <_Bfree+0x30>
    cc72:	6a72      	ldr	r2, [r6, #36]	; 0x24
    cc74:	6863      	ldr	r3, [r4, #4]
    cc76:	68d2      	ldr	r2, [r2, #12]
    cc78:	009b      	lsls	r3, r3, #2
    cc7a:	18d3      	adds	r3, r2, r3
    cc7c:	681a      	ldr	r2, [r3, #0]
    cc7e:	6022      	str	r2, [r4, #0]
    cc80:	601c      	str	r4, [r3, #0]
    cc82:	bd70      	pop	{r4, r5, r6, pc}

0000cc84 <__multadd>:
    cc84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cc86:	0007      	movs	r7, r0
    cc88:	0008      	movs	r0, r1
    cc8a:	000c      	movs	r4, r1
    cc8c:	690d      	ldr	r5, [r1, #16]
    cc8e:	001e      	movs	r6, r3
    cc90:	2100      	movs	r1, #0
    cc92:	9201      	str	r2, [sp, #4]
    cc94:	3014      	adds	r0, #20
    cc96:	9a01      	ldr	r2, [sp, #4]
    cc98:	8803      	ldrh	r3, [r0, #0]
    cc9a:	3101      	adds	r1, #1
    cc9c:	4353      	muls	r3, r2
    cc9e:	199b      	adds	r3, r3, r6
    cca0:	6806      	ldr	r6, [r0, #0]
    cca2:	0c36      	lsrs	r6, r6, #16
    cca4:	4356      	muls	r6, r2
    cca6:	0c1a      	lsrs	r2, r3, #16
    cca8:	4694      	mov	ip, r2
    ccaa:	44b4      	add	ip, r6
    ccac:	4662      	mov	r2, ip
    ccae:	0c16      	lsrs	r6, r2, #16
    ccb0:	0412      	lsls	r2, r2, #16
    ccb2:	4694      	mov	ip, r2
    ccb4:	b29b      	uxth	r3, r3
    ccb6:	4463      	add	r3, ip
    ccb8:	c008      	stmia	r0!, {r3}
    ccba:	428d      	cmp	r5, r1
    ccbc:	dceb      	bgt.n	cc96 <__multadd+0x12>
    ccbe:	2e00      	cmp	r6, #0
    ccc0:	d01b      	beq.n	ccfa <__multadd+0x76>
    ccc2:	68a3      	ldr	r3, [r4, #8]
    ccc4:	429d      	cmp	r5, r3
    ccc6:	db12      	blt.n	ccee <__multadd+0x6a>
    ccc8:	6863      	ldr	r3, [r4, #4]
    ccca:	0038      	movs	r0, r7
    cccc:	1c59      	adds	r1, r3, #1
    ccce:	f7ff ff88 	bl	cbe2 <_Balloc>
    ccd2:	0021      	movs	r1, r4
    ccd4:	6923      	ldr	r3, [r4, #16]
    ccd6:	9001      	str	r0, [sp, #4]
    ccd8:	1c9a      	adds	r2, r3, #2
    ccda:	0092      	lsls	r2, r2, #2
    ccdc:	310c      	adds	r1, #12
    ccde:	300c      	adds	r0, #12
    cce0:	f7fc fcb1 	bl	9646 <memcpy>
    cce4:	0021      	movs	r1, r4
    cce6:	0038      	movs	r0, r7
    cce8:	f7ff ffb3 	bl	cc52 <_Bfree>
    ccec:	9c01      	ldr	r4, [sp, #4]
    ccee:	1d2b      	adds	r3, r5, #4
    ccf0:	009b      	lsls	r3, r3, #2
    ccf2:	18e3      	adds	r3, r4, r3
    ccf4:	3501      	adds	r5, #1
    ccf6:	605e      	str	r6, [r3, #4]
    ccf8:	6125      	str	r5, [r4, #16]
    ccfa:	0020      	movs	r0, r4
    ccfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000ccfe <__s2b>:
    ccfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cd00:	0006      	movs	r6, r0
    cd02:	0018      	movs	r0, r3
    cd04:	000c      	movs	r4, r1
    cd06:	3008      	adds	r0, #8
    cd08:	2109      	movs	r1, #9
    cd0a:	9301      	str	r3, [sp, #4]
    cd0c:	0015      	movs	r5, r2
    cd0e:	f7f9 fecd 	bl	6aac <__aeabi_idiv>
    cd12:	2301      	movs	r3, #1
    cd14:	2100      	movs	r1, #0
    cd16:	4283      	cmp	r3, r0
    cd18:	da02      	bge.n	cd20 <__s2b+0x22>
    cd1a:	005b      	lsls	r3, r3, #1
    cd1c:	3101      	adds	r1, #1
    cd1e:	e7fa      	b.n	cd16 <__s2b+0x18>
    cd20:	0030      	movs	r0, r6
    cd22:	f7ff ff5e 	bl	cbe2 <_Balloc>
    cd26:	9b08      	ldr	r3, [sp, #32]
    cd28:	6143      	str	r3, [r0, #20]
    cd2a:	2301      	movs	r3, #1
    cd2c:	6103      	str	r3, [r0, #16]
    cd2e:	2d09      	cmp	r5, #9
    cd30:	dd12      	ble.n	cd58 <__s2b+0x5a>
    cd32:	0023      	movs	r3, r4
    cd34:	3309      	adds	r3, #9
    cd36:	001f      	movs	r7, r3
    cd38:	9300      	str	r3, [sp, #0]
    cd3a:	1964      	adds	r4, r4, r5
    cd3c:	783b      	ldrb	r3, [r7, #0]
    cd3e:	0001      	movs	r1, r0
    cd40:	3b30      	subs	r3, #48	; 0x30
    cd42:	220a      	movs	r2, #10
    cd44:	0030      	movs	r0, r6
    cd46:	3701      	adds	r7, #1
    cd48:	f7ff ff9c 	bl	cc84 <__multadd>
    cd4c:	42a7      	cmp	r7, r4
    cd4e:	d1f5      	bne.n	cd3c <__s2b+0x3e>
    cd50:	9b00      	ldr	r3, [sp, #0]
    cd52:	195c      	adds	r4, r3, r5
    cd54:	3c08      	subs	r4, #8
    cd56:	e001      	b.n	cd5c <__s2b+0x5e>
    cd58:	2509      	movs	r5, #9
    cd5a:	340a      	adds	r4, #10
    cd5c:	002f      	movs	r7, r5
    cd5e:	9b01      	ldr	r3, [sp, #4]
    cd60:	429f      	cmp	r7, r3
    cd62:	da09      	bge.n	cd78 <__s2b+0x7a>
    cd64:	1b63      	subs	r3, r4, r5
    cd66:	5ddb      	ldrb	r3, [r3, r7]
    cd68:	0001      	movs	r1, r0
    cd6a:	3b30      	subs	r3, #48	; 0x30
    cd6c:	220a      	movs	r2, #10
    cd6e:	0030      	movs	r0, r6
    cd70:	f7ff ff88 	bl	cc84 <__multadd>
    cd74:	3701      	adds	r7, #1
    cd76:	e7f2      	b.n	cd5e <__s2b+0x60>
    cd78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000cd7a <__hi0bits>:
    cd7a:	2200      	movs	r2, #0
    cd7c:	0003      	movs	r3, r0
    cd7e:	0c01      	lsrs	r1, r0, #16
    cd80:	4291      	cmp	r1, r2
    cd82:	d101      	bne.n	cd88 <__hi0bits+0xe>
    cd84:	0403      	lsls	r3, r0, #16
    cd86:	3210      	adds	r2, #16
    cd88:	0e19      	lsrs	r1, r3, #24
    cd8a:	d101      	bne.n	cd90 <__hi0bits+0x16>
    cd8c:	3208      	adds	r2, #8
    cd8e:	021b      	lsls	r3, r3, #8
    cd90:	0f19      	lsrs	r1, r3, #28
    cd92:	d101      	bne.n	cd98 <__hi0bits+0x1e>
    cd94:	3204      	adds	r2, #4
    cd96:	011b      	lsls	r3, r3, #4
    cd98:	0f99      	lsrs	r1, r3, #30
    cd9a:	d101      	bne.n	cda0 <__hi0bits+0x26>
    cd9c:	3202      	adds	r2, #2
    cd9e:	009b      	lsls	r3, r3, #2
    cda0:	0010      	movs	r0, r2
    cda2:	2b00      	cmp	r3, #0
    cda4:	db03      	blt.n	cdae <__hi0bits+0x34>
    cda6:	2020      	movs	r0, #32
    cda8:	005b      	lsls	r3, r3, #1
    cdaa:	d500      	bpl.n	cdae <__hi0bits+0x34>
    cdac:	1c50      	adds	r0, r2, #1
    cdae:	4770      	bx	lr

0000cdb0 <__lo0bits>:
    cdb0:	2207      	movs	r2, #7
    cdb2:	6803      	ldr	r3, [r0, #0]
    cdb4:	b510      	push	{r4, lr}
    cdb6:	0001      	movs	r1, r0
    cdb8:	401a      	ands	r2, r3
    cdba:	d00c      	beq.n	cdd6 <__lo0bits+0x26>
    cdbc:	2401      	movs	r4, #1
    cdbe:	2000      	movs	r0, #0
    cdc0:	4223      	tst	r3, r4
    cdc2:	d123      	bne.n	ce0c <__lo0bits+0x5c>
    cdc4:	2202      	movs	r2, #2
    cdc6:	4213      	tst	r3, r2
    cdc8:	d003      	beq.n	cdd2 <__lo0bits+0x22>
    cdca:	40e3      	lsrs	r3, r4
    cdcc:	0020      	movs	r0, r4
    cdce:	600b      	str	r3, [r1, #0]
    cdd0:	e01c      	b.n	ce0c <__lo0bits+0x5c>
    cdd2:	089b      	lsrs	r3, r3, #2
    cdd4:	e018      	b.n	ce08 <__lo0bits+0x58>
    cdd6:	b298      	uxth	r0, r3
    cdd8:	2800      	cmp	r0, #0
    cdda:	d101      	bne.n	cde0 <__lo0bits+0x30>
    cddc:	2210      	movs	r2, #16
    cdde:	0c1b      	lsrs	r3, r3, #16
    cde0:	b2d8      	uxtb	r0, r3
    cde2:	2800      	cmp	r0, #0
    cde4:	d101      	bne.n	cdea <__lo0bits+0x3a>
    cde6:	3208      	adds	r2, #8
    cde8:	0a1b      	lsrs	r3, r3, #8
    cdea:	0718      	lsls	r0, r3, #28
    cdec:	d101      	bne.n	cdf2 <__lo0bits+0x42>
    cdee:	3204      	adds	r2, #4
    cdf0:	091b      	lsrs	r3, r3, #4
    cdf2:	0798      	lsls	r0, r3, #30
    cdf4:	d101      	bne.n	cdfa <__lo0bits+0x4a>
    cdf6:	3202      	adds	r2, #2
    cdf8:	089b      	lsrs	r3, r3, #2
    cdfa:	07d8      	lsls	r0, r3, #31
    cdfc:	d404      	bmi.n	ce08 <__lo0bits+0x58>
    cdfe:	085b      	lsrs	r3, r3, #1
    ce00:	2020      	movs	r0, #32
    ce02:	2b00      	cmp	r3, #0
    ce04:	d002      	beq.n	ce0c <__lo0bits+0x5c>
    ce06:	3201      	adds	r2, #1
    ce08:	0010      	movs	r0, r2
    ce0a:	600b      	str	r3, [r1, #0]
    ce0c:	bd10      	pop	{r4, pc}

0000ce0e <__i2b>:
    ce0e:	b510      	push	{r4, lr}
    ce10:	000c      	movs	r4, r1
    ce12:	2101      	movs	r1, #1
    ce14:	f7ff fee5 	bl	cbe2 <_Balloc>
    ce18:	2301      	movs	r3, #1
    ce1a:	6144      	str	r4, [r0, #20]
    ce1c:	6103      	str	r3, [r0, #16]
    ce1e:	bd10      	pop	{r4, pc}

0000ce20 <__multiply>:
    ce20:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce22:	690b      	ldr	r3, [r1, #16]
    ce24:	0014      	movs	r4, r2
    ce26:	6912      	ldr	r2, [r2, #16]
    ce28:	b089      	sub	sp, #36	; 0x24
    ce2a:	000d      	movs	r5, r1
    ce2c:	4293      	cmp	r3, r2
    ce2e:	da01      	bge.n	ce34 <__multiply+0x14>
    ce30:	0025      	movs	r5, r4
    ce32:	000c      	movs	r4, r1
    ce34:	692f      	ldr	r7, [r5, #16]
    ce36:	6926      	ldr	r6, [r4, #16]
    ce38:	68aa      	ldr	r2, [r5, #8]
    ce3a:	19bb      	adds	r3, r7, r6
    ce3c:	6869      	ldr	r1, [r5, #4]
    ce3e:	9301      	str	r3, [sp, #4]
    ce40:	4293      	cmp	r3, r2
    ce42:	dd00      	ble.n	ce46 <__multiply+0x26>
    ce44:	3101      	adds	r1, #1
    ce46:	f7ff fecc 	bl	cbe2 <_Balloc>
    ce4a:	0002      	movs	r2, r0
    ce4c:	19bb      	adds	r3, r7, r6
    ce4e:	3214      	adds	r2, #20
    ce50:	009b      	lsls	r3, r3, #2
    ce52:	18d3      	adds	r3, r2, r3
    ce54:	469c      	mov	ip, r3
    ce56:	2100      	movs	r1, #0
    ce58:	0013      	movs	r3, r2
    ce5a:	9002      	str	r0, [sp, #8]
    ce5c:	4563      	cmp	r3, ip
    ce5e:	d201      	bcs.n	ce64 <__multiply+0x44>
    ce60:	c302      	stmia	r3!, {r1}
    ce62:	e7fb      	b.n	ce5c <__multiply+0x3c>
    ce64:	3514      	adds	r5, #20
    ce66:	00bf      	lsls	r7, r7, #2
    ce68:	19eb      	adds	r3, r5, r7
    ce6a:	3414      	adds	r4, #20
    ce6c:	00b6      	lsls	r6, r6, #2
    ce6e:	9305      	str	r3, [sp, #20]
    ce70:	19a3      	adds	r3, r4, r6
    ce72:	9503      	str	r5, [sp, #12]
    ce74:	9307      	str	r3, [sp, #28]
    ce76:	9b07      	ldr	r3, [sp, #28]
    ce78:	429c      	cmp	r4, r3
    ce7a:	d251      	bcs.n	cf20 <__multiply+0x100>
    ce7c:	8820      	ldrh	r0, [r4, #0]
    ce7e:	2800      	cmp	r0, #0
    ce80:	d01e      	beq.n	cec0 <__multiply+0xa0>
    ce82:	0015      	movs	r5, r2
    ce84:	2600      	movs	r6, #0
    ce86:	9f03      	ldr	r7, [sp, #12]
    ce88:	cf08      	ldmia	r7!, {r3}
    ce8a:	9506      	str	r5, [sp, #24]
    ce8c:	9304      	str	r3, [sp, #16]
    ce8e:	466b      	mov	r3, sp
    ce90:	8a1b      	ldrh	r3, [r3, #16]
    ce92:	4343      	muls	r3, r0
    ce94:	0019      	movs	r1, r3
    ce96:	882b      	ldrh	r3, [r5, #0]
    ce98:	18cb      	adds	r3, r1, r3
    ce9a:	9904      	ldr	r1, [sp, #16]
    ce9c:	199b      	adds	r3, r3, r6
    ce9e:	0c09      	lsrs	r1, r1, #16
    cea0:	4341      	muls	r1, r0
    cea2:	682e      	ldr	r6, [r5, #0]
    cea4:	0c36      	lsrs	r6, r6, #16
    cea6:	1989      	adds	r1, r1, r6
    cea8:	0c1e      	lsrs	r6, r3, #16
    ceaa:	1989      	adds	r1, r1, r6
    ceac:	0c0e      	lsrs	r6, r1, #16
    ceae:	b29b      	uxth	r3, r3
    ceb0:	0409      	lsls	r1, r1, #16
    ceb2:	430b      	orrs	r3, r1
    ceb4:	c508      	stmia	r5!, {r3}
    ceb6:	9b05      	ldr	r3, [sp, #20]
    ceb8:	42bb      	cmp	r3, r7
    ceba:	d8e5      	bhi.n	ce88 <__multiply+0x68>
    cebc:	9b06      	ldr	r3, [sp, #24]
    cebe:	605e      	str	r6, [r3, #4]
    cec0:	6823      	ldr	r3, [r4, #0]
    cec2:	0c1d      	lsrs	r5, r3, #16
    cec4:	d01f      	beq.n	cf06 <__multiply+0xe6>
    cec6:	2100      	movs	r1, #0
    cec8:	0010      	movs	r0, r2
    ceca:	6813      	ldr	r3, [r2, #0]
    cecc:	9f03      	ldr	r7, [sp, #12]
    cece:	9104      	str	r1, [sp, #16]
    ced0:	883e      	ldrh	r6, [r7, #0]
    ced2:	6801      	ldr	r1, [r0, #0]
    ced4:	436e      	muls	r6, r5
    ced6:	0c09      	lsrs	r1, r1, #16
    ced8:	1871      	adds	r1, r6, r1
    ceda:	9e04      	ldr	r6, [sp, #16]
    cedc:	b29b      	uxth	r3, r3
    cede:	1989      	adds	r1, r1, r6
    cee0:	040e      	lsls	r6, r1, #16
    cee2:	4333      	orrs	r3, r6
    cee4:	6003      	str	r3, [r0, #0]
    cee6:	cf08      	ldmia	r7!, {r3}
    cee8:	8886      	ldrh	r6, [r0, #4]
    ceea:	0c1b      	lsrs	r3, r3, #16
    ceec:	436b      	muls	r3, r5
    ceee:	0c09      	lsrs	r1, r1, #16
    cef0:	199b      	adds	r3, r3, r6
    cef2:	185b      	adds	r3, r3, r1
    cef4:	0c19      	lsrs	r1, r3, #16
    cef6:	9104      	str	r1, [sp, #16]
    cef8:	9905      	ldr	r1, [sp, #20]
    cefa:	9006      	str	r0, [sp, #24]
    cefc:	3004      	adds	r0, #4
    cefe:	42b9      	cmp	r1, r7
    cf00:	d8e6      	bhi.n	ced0 <__multiply+0xb0>
    cf02:	9906      	ldr	r1, [sp, #24]
    cf04:	604b      	str	r3, [r1, #4]
    cf06:	3404      	adds	r4, #4
    cf08:	3204      	adds	r2, #4
    cf0a:	e7b4      	b.n	ce76 <__multiply+0x56>
    cf0c:	2304      	movs	r3, #4
    cf0e:	425b      	negs	r3, r3
    cf10:	449c      	add	ip, r3
    cf12:	4663      	mov	r3, ip
    cf14:	681b      	ldr	r3, [r3, #0]
    cf16:	2b00      	cmp	r3, #0
    cf18:	d105      	bne.n	cf26 <__multiply+0x106>
    cf1a:	9b01      	ldr	r3, [sp, #4]
    cf1c:	3b01      	subs	r3, #1
    cf1e:	9301      	str	r3, [sp, #4]
    cf20:	9b01      	ldr	r3, [sp, #4]
    cf22:	2b00      	cmp	r3, #0
    cf24:	dcf2      	bgt.n	cf0c <__multiply+0xec>
    cf26:	9b02      	ldr	r3, [sp, #8]
    cf28:	9a01      	ldr	r2, [sp, #4]
    cf2a:	0018      	movs	r0, r3
    cf2c:	611a      	str	r2, [r3, #16]
    cf2e:	b009      	add	sp, #36	; 0x24
    cf30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000cf34 <__pow5mult>:
    cf34:	2303      	movs	r3, #3
    cf36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cf38:	4013      	ands	r3, r2
    cf3a:	0005      	movs	r5, r0
    cf3c:	000e      	movs	r6, r1
    cf3e:	0014      	movs	r4, r2
    cf40:	2b00      	cmp	r3, #0
    cf42:	d008      	beq.n	cf56 <__pow5mult+0x22>
    cf44:	4923      	ldr	r1, [pc, #140]	; (cfd4 <__pow5mult+0xa0>)
    cf46:	3b01      	subs	r3, #1
    cf48:	009a      	lsls	r2, r3, #2
    cf4a:	5852      	ldr	r2, [r2, r1]
    cf4c:	2300      	movs	r3, #0
    cf4e:	0031      	movs	r1, r6
    cf50:	f7ff fe98 	bl	cc84 <__multadd>
    cf54:	0006      	movs	r6, r0
    cf56:	10a3      	asrs	r3, r4, #2
    cf58:	9301      	str	r3, [sp, #4]
    cf5a:	d038      	beq.n	cfce <__pow5mult+0x9a>
    cf5c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    cf5e:	2c00      	cmp	r4, #0
    cf60:	d107      	bne.n	cf72 <__pow5mult+0x3e>
    cf62:	2010      	movs	r0, #16
    cf64:	f7fc fb4c 	bl	9600 <malloc>
    cf68:	6268      	str	r0, [r5, #36]	; 0x24
    cf6a:	6044      	str	r4, [r0, #4]
    cf6c:	6084      	str	r4, [r0, #8]
    cf6e:	6004      	str	r4, [r0, #0]
    cf70:	60c4      	str	r4, [r0, #12]
    cf72:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    cf74:	68bc      	ldr	r4, [r7, #8]
    cf76:	2c00      	cmp	r4, #0
    cf78:	d110      	bne.n	cf9c <__pow5mult+0x68>
    cf7a:	4917      	ldr	r1, [pc, #92]	; (cfd8 <__pow5mult+0xa4>)
    cf7c:	0028      	movs	r0, r5
    cf7e:	f7ff ff46 	bl	ce0e <__i2b>
    cf82:	2300      	movs	r3, #0
    cf84:	60b8      	str	r0, [r7, #8]
    cf86:	0004      	movs	r4, r0
    cf88:	6003      	str	r3, [r0, #0]
    cf8a:	e007      	b.n	cf9c <__pow5mult+0x68>
    cf8c:	9b01      	ldr	r3, [sp, #4]
    cf8e:	105b      	asrs	r3, r3, #1
    cf90:	9301      	str	r3, [sp, #4]
    cf92:	d01c      	beq.n	cfce <__pow5mult+0x9a>
    cf94:	6820      	ldr	r0, [r4, #0]
    cf96:	2800      	cmp	r0, #0
    cf98:	d010      	beq.n	cfbc <__pow5mult+0x88>
    cf9a:	0004      	movs	r4, r0
    cf9c:	2201      	movs	r2, #1
    cf9e:	9b01      	ldr	r3, [sp, #4]
    cfa0:	4213      	tst	r3, r2
    cfa2:	d0f3      	beq.n	cf8c <__pow5mult+0x58>
    cfa4:	0031      	movs	r1, r6
    cfa6:	0022      	movs	r2, r4
    cfa8:	0028      	movs	r0, r5
    cfaa:	f7ff ff39 	bl	ce20 <__multiply>
    cfae:	0007      	movs	r7, r0
    cfb0:	0031      	movs	r1, r6
    cfb2:	0028      	movs	r0, r5
    cfb4:	f7ff fe4d 	bl	cc52 <_Bfree>
    cfb8:	003e      	movs	r6, r7
    cfba:	e7e7      	b.n	cf8c <__pow5mult+0x58>
    cfbc:	0022      	movs	r2, r4
    cfbe:	0021      	movs	r1, r4
    cfc0:	0028      	movs	r0, r5
    cfc2:	f7ff ff2d 	bl	ce20 <__multiply>
    cfc6:	2300      	movs	r3, #0
    cfc8:	6020      	str	r0, [r4, #0]
    cfca:	6003      	str	r3, [r0, #0]
    cfcc:	e7e5      	b.n	cf9a <__pow5mult+0x66>
    cfce:	0030      	movs	r0, r6
    cfd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    cfd2:	46c0      	nop			; (mov r8, r8)
    cfd4:	0000ef30 	.word	0x0000ef30
    cfd8:	00000271 	.word	0x00000271

0000cfdc <__lshift>:
    cfdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cfde:	000c      	movs	r4, r1
    cfe0:	0017      	movs	r7, r2
    cfe2:	6923      	ldr	r3, [r4, #16]
    cfe4:	1155      	asrs	r5, r2, #5
    cfe6:	b085      	sub	sp, #20
    cfe8:	18eb      	adds	r3, r5, r3
    cfea:	9301      	str	r3, [sp, #4]
    cfec:	3301      	adds	r3, #1
    cfee:	9300      	str	r3, [sp, #0]
    cff0:	6849      	ldr	r1, [r1, #4]
    cff2:	68a3      	ldr	r3, [r4, #8]
    cff4:	9002      	str	r0, [sp, #8]
    cff6:	9a00      	ldr	r2, [sp, #0]
    cff8:	4293      	cmp	r3, r2
    cffa:	da02      	bge.n	d002 <__lshift+0x26>
    cffc:	3101      	adds	r1, #1
    cffe:	005b      	lsls	r3, r3, #1
    d000:	e7f9      	b.n	cff6 <__lshift+0x1a>
    d002:	9802      	ldr	r0, [sp, #8]
    d004:	f7ff fded 	bl	cbe2 <_Balloc>
    d008:	2300      	movs	r3, #0
    d00a:	0002      	movs	r2, r0
    d00c:	0006      	movs	r6, r0
    d00e:	0019      	movs	r1, r3
    d010:	3214      	adds	r2, #20
    d012:	42ab      	cmp	r3, r5
    d014:	da03      	bge.n	d01e <__lshift+0x42>
    d016:	0098      	lsls	r0, r3, #2
    d018:	5011      	str	r1, [r2, r0]
    d01a:	3301      	adds	r3, #1
    d01c:	e7f9      	b.n	d012 <__lshift+0x36>
    d01e:	43eb      	mvns	r3, r5
    d020:	17db      	asrs	r3, r3, #31
    d022:	401d      	ands	r5, r3
    d024:	0023      	movs	r3, r4
    d026:	00ad      	lsls	r5, r5, #2
    d028:	1955      	adds	r5, r2, r5
    d02a:	6922      	ldr	r2, [r4, #16]
    d02c:	3314      	adds	r3, #20
    d02e:	0092      	lsls	r2, r2, #2
    d030:	189a      	adds	r2, r3, r2
    d032:	4694      	mov	ip, r2
    d034:	221f      	movs	r2, #31
    d036:	4017      	ands	r7, r2
    d038:	d014      	beq.n	d064 <__lshift+0x88>
    d03a:	3201      	adds	r2, #1
    d03c:	1bd2      	subs	r2, r2, r7
    d03e:	9203      	str	r2, [sp, #12]
    d040:	2200      	movs	r2, #0
    d042:	6819      	ldr	r1, [r3, #0]
    d044:	0028      	movs	r0, r5
    d046:	40b9      	lsls	r1, r7
    d048:	430a      	orrs	r2, r1
    d04a:	c504      	stmia	r5!, {r2}
    d04c:	cb04      	ldmia	r3!, {r2}
    d04e:	9903      	ldr	r1, [sp, #12]
    d050:	40ca      	lsrs	r2, r1
    d052:	459c      	cmp	ip, r3
    d054:	d8f5      	bhi.n	d042 <__lshift+0x66>
    d056:	6042      	str	r2, [r0, #4]
    d058:	2a00      	cmp	r2, #0
    d05a:	d007      	beq.n	d06c <__lshift+0x90>
    d05c:	9b01      	ldr	r3, [sp, #4]
    d05e:	3302      	adds	r3, #2
    d060:	9300      	str	r3, [sp, #0]
    d062:	e003      	b.n	d06c <__lshift+0x90>
    d064:	cb04      	ldmia	r3!, {r2}
    d066:	c504      	stmia	r5!, {r2}
    d068:	459c      	cmp	ip, r3
    d06a:	d8fb      	bhi.n	d064 <__lshift+0x88>
    d06c:	9b00      	ldr	r3, [sp, #0]
    d06e:	9802      	ldr	r0, [sp, #8]
    d070:	3b01      	subs	r3, #1
    d072:	6133      	str	r3, [r6, #16]
    d074:	0021      	movs	r1, r4
    d076:	f7ff fdec 	bl	cc52 <_Bfree>
    d07a:	0030      	movs	r0, r6
    d07c:	b005      	add	sp, #20
    d07e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d080 <__mcmp>:
    d080:	6903      	ldr	r3, [r0, #16]
    d082:	690a      	ldr	r2, [r1, #16]
    d084:	b510      	push	{r4, lr}
    d086:	1a9b      	subs	r3, r3, r2
    d088:	0004      	movs	r4, r0
    d08a:	1e18      	subs	r0, r3, #0
    d08c:	d112      	bne.n	d0b4 <__mcmp+0x34>
    d08e:	0093      	lsls	r3, r2, #2
    d090:	3414      	adds	r4, #20
    d092:	3114      	adds	r1, #20
    d094:	18e2      	adds	r2, r4, r3
    d096:	18c9      	adds	r1, r1, r3
    d098:	3a04      	subs	r2, #4
    d09a:	3904      	subs	r1, #4
    d09c:	6813      	ldr	r3, [r2, #0]
    d09e:	6808      	ldr	r0, [r1, #0]
    d0a0:	4283      	cmp	r3, r0
    d0a2:	d004      	beq.n	d0ae <__mcmp+0x2e>
    d0a4:	4283      	cmp	r3, r0
    d0a6:	419b      	sbcs	r3, r3
    d0a8:	2001      	movs	r0, #1
    d0aa:	4318      	orrs	r0, r3
    d0ac:	e002      	b.n	d0b4 <__mcmp+0x34>
    d0ae:	4294      	cmp	r4, r2
    d0b0:	d3f2      	bcc.n	d098 <__mcmp+0x18>
    d0b2:	2000      	movs	r0, #0
    d0b4:	bd10      	pop	{r4, pc}

0000d0b6 <__mdiff>:
    d0b6:	b5f0      	push	{r4, r5, r6, r7, lr}
    d0b8:	000c      	movs	r4, r1
    d0ba:	b085      	sub	sp, #20
    d0bc:	0007      	movs	r7, r0
    d0be:	0011      	movs	r1, r2
    d0c0:	0020      	movs	r0, r4
    d0c2:	0015      	movs	r5, r2
    d0c4:	f7ff ffdc 	bl	d080 <__mcmp>
    d0c8:	1e06      	subs	r6, r0, #0
    d0ca:	d107      	bne.n	d0dc <__mdiff+0x26>
    d0cc:	0001      	movs	r1, r0
    d0ce:	0038      	movs	r0, r7
    d0d0:	f7ff fd87 	bl	cbe2 <_Balloc>
    d0d4:	2301      	movs	r3, #1
    d0d6:	6146      	str	r6, [r0, #20]
    d0d8:	6103      	str	r3, [r0, #16]
    d0da:	e055      	b.n	d188 <__mdiff+0xd2>
    d0dc:	2300      	movs	r3, #0
    d0de:	9301      	str	r3, [sp, #4]
    d0e0:	4298      	cmp	r0, r3
    d0e2:	da04      	bge.n	d0ee <__mdiff+0x38>
    d0e4:	0023      	movs	r3, r4
    d0e6:	002c      	movs	r4, r5
    d0e8:	001d      	movs	r5, r3
    d0ea:	2301      	movs	r3, #1
    d0ec:	9301      	str	r3, [sp, #4]
    d0ee:	6861      	ldr	r1, [r4, #4]
    d0f0:	0038      	movs	r0, r7
    d0f2:	f7ff fd76 	bl	cbe2 <_Balloc>
    d0f6:	9b01      	ldr	r3, [sp, #4]
    d0f8:	6926      	ldr	r6, [r4, #16]
    d0fa:	002f      	movs	r7, r5
    d0fc:	60c3      	str	r3, [r0, #12]
    d0fe:	3414      	adds	r4, #20
    d100:	00b3      	lsls	r3, r6, #2
    d102:	18e3      	adds	r3, r4, r3
    d104:	0002      	movs	r2, r0
    d106:	9302      	str	r3, [sp, #8]
    d108:	692b      	ldr	r3, [r5, #16]
    d10a:	2500      	movs	r5, #0
    d10c:	3714      	adds	r7, #20
    d10e:	009b      	lsls	r3, r3, #2
    d110:	18fb      	adds	r3, r7, r3
    d112:	9303      	str	r3, [sp, #12]
    d114:	3214      	adds	r2, #20
    d116:	cc08      	ldmia	r4!, {r3}
    d118:	4669      	mov	r1, sp
    d11a:	469c      	mov	ip, r3
    d11c:	cf08      	ldmia	r7!, {r3}
    d11e:	3204      	adds	r2, #4
    d120:	9300      	str	r3, [sp, #0]
    d122:	4663      	mov	r3, ip
    d124:	808b      	strh	r3, [r1, #4]
    d126:	888b      	ldrh	r3, [r1, #4]
    d128:	195d      	adds	r5, r3, r5
    d12a:	9b00      	ldr	r3, [sp, #0]
    d12c:	b29b      	uxth	r3, r3
    d12e:	1aeb      	subs	r3, r5, r3
    d130:	4665      	mov	r5, ip
    d132:	9301      	str	r3, [sp, #4]
    d134:	9b00      	ldr	r3, [sp, #0]
    d136:	0c2d      	lsrs	r5, r5, #16
    d138:	0c19      	lsrs	r1, r3, #16
    d13a:	9b01      	ldr	r3, [sp, #4]
    d13c:	1a69      	subs	r1, r5, r1
    d13e:	141d      	asrs	r5, r3, #16
    d140:	1f13      	subs	r3, r2, #4
    d142:	469c      	mov	ip, r3
    d144:	466b      	mov	r3, sp
    d146:	1949      	adds	r1, r1, r5
    d148:	889b      	ldrh	r3, [r3, #4]
    d14a:	140d      	asrs	r5, r1, #16
    d14c:	0409      	lsls	r1, r1, #16
    d14e:	430b      	orrs	r3, r1
    d150:	4661      	mov	r1, ip
    d152:	600b      	str	r3, [r1, #0]
    d154:	9b03      	ldr	r3, [sp, #12]
    d156:	42bb      	cmp	r3, r7
    d158:	d8dd      	bhi.n	d116 <__mdiff+0x60>
    d15a:	9902      	ldr	r1, [sp, #8]
    d15c:	0013      	movs	r3, r2
    d15e:	428c      	cmp	r4, r1
    d160:	d20b      	bcs.n	d17a <__mdiff+0xc4>
    d162:	cc02      	ldmia	r4!, {r1}
    d164:	b28b      	uxth	r3, r1
    d166:	195b      	adds	r3, r3, r5
    d168:	141d      	asrs	r5, r3, #16
    d16a:	0c09      	lsrs	r1, r1, #16
    d16c:	1949      	adds	r1, r1, r5
    d16e:	140d      	asrs	r5, r1, #16
    d170:	b29b      	uxth	r3, r3
    d172:	0409      	lsls	r1, r1, #16
    d174:	430b      	orrs	r3, r1
    d176:	c208      	stmia	r2!, {r3}
    d178:	e7ef      	b.n	d15a <__mdiff+0xa4>
    d17a:	3b04      	subs	r3, #4
    d17c:	681a      	ldr	r2, [r3, #0]
    d17e:	2a00      	cmp	r2, #0
    d180:	d101      	bne.n	d186 <__mdiff+0xd0>
    d182:	3e01      	subs	r6, #1
    d184:	e7f9      	b.n	d17a <__mdiff+0xc4>
    d186:	6106      	str	r6, [r0, #16]
    d188:	b005      	add	sp, #20
    d18a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d18c <__ulp>:
    d18c:	4b0f      	ldr	r3, [pc, #60]	; (d1cc <__ulp+0x40>)
    d18e:	b510      	push	{r4, lr}
    d190:	4019      	ands	r1, r3
    d192:	4b0f      	ldr	r3, [pc, #60]	; (d1d0 <__ulp+0x44>)
    d194:	18c9      	adds	r1, r1, r3
    d196:	2900      	cmp	r1, #0
    d198:	dd02      	ble.n	d1a0 <__ulp+0x14>
    d19a:	2200      	movs	r2, #0
    d19c:	000b      	movs	r3, r1
    d19e:	e012      	b.n	d1c6 <__ulp+0x3a>
    d1a0:	4249      	negs	r1, r1
    d1a2:	1509      	asrs	r1, r1, #20
    d1a4:	2200      	movs	r2, #0
    d1a6:	2300      	movs	r3, #0
    d1a8:	2913      	cmp	r1, #19
    d1aa:	dc04      	bgt.n	d1b6 <__ulp+0x2a>
    d1ac:	2080      	movs	r0, #128	; 0x80
    d1ae:	0300      	lsls	r0, r0, #12
    d1b0:	4108      	asrs	r0, r1
    d1b2:	0003      	movs	r3, r0
    d1b4:	e007      	b.n	d1c6 <__ulp+0x3a>
    d1b6:	3914      	subs	r1, #20
    d1b8:	2001      	movs	r0, #1
    d1ba:	291e      	cmp	r1, #30
    d1bc:	dc02      	bgt.n	d1c4 <__ulp+0x38>
    d1be:	241f      	movs	r4, #31
    d1c0:	1a61      	subs	r1, r4, r1
    d1c2:	4088      	lsls	r0, r1
    d1c4:	0002      	movs	r2, r0
    d1c6:	0010      	movs	r0, r2
    d1c8:	0019      	movs	r1, r3
    d1ca:	bd10      	pop	{r4, pc}
    d1cc:	7ff00000 	.word	0x7ff00000
    d1d0:	fcc00000 	.word	0xfcc00000

0000d1d4 <__b2d>:
    d1d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d1d6:	0006      	movs	r6, r0
    d1d8:	6903      	ldr	r3, [r0, #16]
    d1da:	3614      	adds	r6, #20
    d1dc:	009b      	lsls	r3, r3, #2
    d1de:	18f3      	adds	r3, r6, r3
    d1e0:	1f1d      	subs	r5, r3, #4
    d1e2:	682c      	ldr	r4, [r5, #0]
    d1e4:	000f      	movs	r7, r1
    d1e6:	0020      	movs	r0, r4
    d1e8:	9301      	str	r3, [sp, #4]
    d1ea:	f7ff fdc6 	bl	cd7a <__hi0bits>
    d1ee:	2320      	movs	r3, #32
    d1f0:	1a1b      	subs	r3, r3, r0
    d1f2:	603b      	str	r3, [r7, #0]
    d1f4:	491c      	ldr	r1, [pc, #112]	; (d268 <__b2d+0x94>)
    d1f6:	280a      	cmp	r0, #10
    d1f8:	dc13      	bgt.n	d222 <__b2d+0x4e>
    d1fa:	230b      	movs	r3, #11
    d1fc:	0027      	movs	r7, r4
    d1fe:	1a1b      	subs	r3, r3, r0
    d200:	40df      	lsrs	r7, r3
    d202:	4339      	orrs	r1, r7
    d204:	469c      	mov	ip, r3
    d206:	000b      	movs	r3, r1
    d208:	2100      	movs	r1, #0
    d20a:	42ae      	cmp	r6, r5
    d20c:	d202      	bcs.n	d214 <__b2d+0x40>
    d20e:	9901      	ldr	r1, [sp, #4]
    d210:	3908      	subs	r1, #8
    d212:	6809      	ldr	r1, [r1, #0]
    d214:	3015      	adds	r0, #21
    d216:	4084      	lsls	r4, r0
    d218:	4660      	mov	r0, ip
    d21a:	40c1      	lsrs	r1, r0
    d21c:	430c      	orrs	r4, r1
    d21e:	0022      	movs	r2, r4
    d220:	e01e      	b.n	d260 <__b2d+0x8c>
    d222:	2700      	movs	r7, #0
    d224:	42ae      	cmp	r6, r5
    d226:	d202      	bcs.n	d22e <__b2d+0x5a>
    d228:	9d01      	ldr	r5, [sp, #4]
    d22a:	3d08      	subs	r5, #8
    d22c:	682f      	ldr	r7, [r5, #0]
    d22e:	380b      	subs	r0, #11
    d230:	4684      	mov	ip, r0
    d232:	1e03      	subs	r3, r0, #0
    d234:	d011      	beq.n	d25a <__b2d+0x86>
    d236:	409c      	lsls	r4, r3
    d238:	2020      	movs	r0, #32
    d23a:	4321      	orrs	r1, r4
    d23c:	003c      	movs	r4, r7
    d23e:	1ac0      	subs	r0, r0, r3
    d240:	40c4      	lsrs	r4, r0
    d242:	4321      	orrs	r1, r4
    d244:	000b      	movs	r3, r1
    d246:	2100      	movs	r1, #0
    d248:	42b5      	cmp	r5, r6
    d24a:	d901      	bls.n	d250 <__b2d+0x7c>
    d24c:	3d04      	subs	r5, #4
    d24e:	6829      	ldr	r1, [r5, #0]
    d250:	4664      	mov	r4, ip
    d252:	40c1      	lsrs	r1, r0
    d254:	40a7      	lsls	r7, r4
    d256:	430f      	orrs	r7, r1
    d258:	e001      	b.n	d25e <__b2d+0x8a>
    d25a:	4321      	orrs	r1, r4
    d25c:	000b      	movs	r3, r1
    d25e:	003a      	movs	r2, r7
    d260:	0010      	movs	r0, r2
    d262:	0019      	movs	r1, r3
    d264:	b003      	add	sp, #12
    d266:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d268:	3ff00000 	.word	0x3ff00000

0000d26c <__d2b>:
    d26c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d26e:	001d      	movs	r5, r3
    d270:	2101      	movs	r1, #1
    d272:	9f08      	ldr	r7, [sp, #32]
    d274:	0014      	movs	r4, r2
    d276:	f7ff fcb4 	bl	cbe2 <_Balloc>
    d27a:	032b      	lsls	r3, r5, #12
    d27c:	006d      	lsls	r5, r5, #1
    d27e:	0006      	movs	r6, r0
    d280:	0b1b      	lsrs	r3, r3, #12
    d282:	0d6d      	lsrs	r5, r5, #21
    d284:	d002      	beq.n	d28c <__d2b+0x20>
    d286:	2280      	movs	r2, #128	; 0x80
    d288:	0352      	lsls	r2, r2, #13
    d28a:	4313      	orrs	r3, r2
    d28c:	9301      	str	r3, [sp, #4]
    d28e:	2c00      	cmp	r4, #0
    d290:	d018      	beq.n	d2c4 <__d2b+0x58>
    d292:	4668      	mov	r0, sp
    d294:	9400      	str	r4, [sp, #0]
    d296:	f7ff fd8b 	bl	cdb0 <__lo0bits>
    d29a:	9c00      	ldr	r4, [sp, #0]
    d29c:	2800      	cmp	r0, #0
    d29e:	d009      	beq.n	d2b4 <__d2b+0x48>
    d2a0:	9b01      	ldr	r3, [sp, #4]
    d2a2:	2120      	movs	r1, #32
    d2a4:	001a      	movs	r2, r3
    d2a6:	1a09      	subs	r1, r1, r0
    d2a8:	408a      	lsls	r2, r1
    d2aa:	40c3      	lsrs	r3, r0
    d2ac:	4322      	orrs	r2, r4
    d2ae:	6172      	str	r2, [r6, #20]
    d2b0:	9301      	str	r3, [sp, #4]
    d2b2:	e000      	b.n	d2b6 <__d2b+0x4a>
    d2b4:	6174      	str	r4, [r6, #20]
    d2b6:	9c01      	ldr	r4, [sp, #4]
    d2b8:	61b4      	str	r4, [r6, #24]
    d2ba:	1e63      	subs	r3, r4, #1
    d2bc:	419c      	sbcs	r4, r3
    d2be:	3401      	adds	r4, #1
    d2c0:	6134      	str	r4, [r6, #16]
    d2c2:	e007      	b.n	d2d4 <__d2b+0x68>
    d2c4:	a801      	add	r0, sp, #4
    d2c6:	f7ff fd73 	bl	cdb0 <__lo0bits>
    d2ca:	2401      	movs	r4, #1
    d2cc:	9b01      	ldr	r3, [sp, #4]
    d2ce:	6134      	str	r4, [r6, #16]
    d2d0:	6173      	str	r3, [r6, #20]
    d2d2:	3020      	adds	r0, #32
    d2d4:	2d00      	cmp	r5, #0
    d2d6:	d006      	beq.n	d2e6 <__d2b+0x7a>
    d2d8:	4b0b      	ldr	r3, [pc, #44]	; (d308 <__d2b+0x9c>)
    d2da:	18ed      	adds	r5, r5, r3
    d2dc:	2335      	movs	r3, #53	; 0x35
    d2de:	182d      	adds	r5, r5, r0
    d2e0:	603d      	str	r5, [r7, #0]
    d2e2:	1a18      	subs	r0, r3, r0
    d2e4:	e00b      	b.n	d2fe <__d2b+0x92>
    d2e6:	4b09      	ldr	r3, [pc, #36]	; (d30c <__d2b+0xa0>)
    d2e8:	18c0      	adds	r0, r0, r3
    d2ea:	4b09      	ldr	r3, [pc, #36]	; (d310 <__d2b+0xa4>)
    d2ec:	6038      	str	r0, [r7, #0]
    d2ee:	18e3      	adds	r3, r4, r3
    d2f0:	009b      	lsls	r3, r3, #2
    d2f2:	18f3      	adds	r3, r6, r3
    d2f4:	6958      	ldr	r0, [r3, #20]
    d2f6:	f7ff fd40 	bl	cd7a <__hi0bits>
    d2fa:	0164      	lsls	r4, r4, #5
    d2fc:	1a20      	subs	r0, r4, r0
    d2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d300:	6018      	str	r0, [r3, #0]
    d302:	0030      	movs	r0, r6
    d304:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d306:	46c0      	nop			; (mov r8, r8)
    d308:	fffffbcd 	.word	0xfffffbcd
    d30c:	fffffbce 	.word	0xfffffbce
    d310:	3fffffff 	.word	0x3fffffff

0000d314 <__ratio>:
    d314:	b5f0      	push	{r4, r5, r6, r7, lr}
    d316:	b085      	sub	sp, #20
    d318:	000e      	movs	r6, r1
    d31a:	a902      	add	r1, sp, #8
    d31c:	0007      	movs	r7, r0
    d31e:	f7ff ff59 	bl	d1d4 <__b2d>
    d322:	0004      	movs	r4, r0
    d324:	000d      	movs	r5, r1
    d326:	0030      	movs	r0, r6
    d328:	a903      	add	r1, sp, #12
    d32a:	9400      	str	r4, [sp, #0]
    d32c:	9501      	str	r5, [sp, #4]
    d32e:	f7ff ff51 	bl	d1d4 <__b2d>
    d332:	6936      	ldr	r6, [r6, #16]
    d334:	693f      	ldr	r7, [r7, #16]
    d336:	0002      	movs	r2, r0
    d338:	1bbf      	subs	r7, r7, r6
    d33a:	017e      	lsls	r6, r7, #5
    d33c:	46b4      	mov	ip, r6
    d33e:	9f03      	ldr	r7, [sp, #12]
    d340:	9e02      	ldr	r6, [sp, #8]
    d342:	000b      	movs	r3, r1
    d344:	1bf6      	subs	r6, r6, r7
    d346:	4466      	add	r6, ip
    d348:	2e00      	cmp	r6, #0
    d34a:	dd03      	ble.n	d354 <__ratio+0x40>
    d34c:	0536      	lsls	r6, r6, #20
    d34e:	1971      	adds	r1, r6, r5
    d350:	9101      	str	r1, [sp, #4]
    d352:	e001      	b.n	d358 <__ratio+0x44>
    d354:	0536      	lsls	r6, r6, #20
    d356:	1b8b      	subs	r3, r1, r6
    d358:	9800      	ldr	r0, [sp, #0]
    d35a:	9901      	ldr	r1, [sp, #4]
    d35c:	f7fa fd5c 	bl	7e18 <__aeabi_ddiv>
    d360:	b005      	add	sp, #20
    d362:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d364 <__copybits>:
    d364:	0013      	movs	r3, r2
    d366:	3901      	subs	r1, #1
    d368:	b510      	push	{r4, lr}
    d36a:	1149      	asrs	r1, r1, #5
    d36c:	6912      	ldr	r2, [r2, #16]
    d36e:	3101      	adds	r1, #1
    d370:	0089      	lsls	r1, r1, #2
    d372:	3314      	adds	r3, #20
    d374:	0092      	lsls	r2, r2, #2
    d376:	1841      	adds	r1, r0, r1
    d378:	189a      	adds	r2, r3, r2
    d37a:	429a      	cmp	r2, r3
    d37c:	d902      	bls.n	d384 <__copybits+0x20>
    d37e:	cb10      	ldmia	r3!, {r4}
    d380:	c010      	stmia	r0!, {r4}
    d382:	e7fa      	b.n	d37a <__copybits+0x16>
    d384:	2300      	movs	r3, #0
    d386:	4281      	cmp	r1, r0
    d388:	d901      	bls.n	d38e <__copybits+0x2a>
    d38a:	c008      	stmia	r0!, {r3}
    d38c:	e7fb      	b.n	d386 <__copybits+0x22>
    d38e:	bd10      	pop	{r4, pc}

0000d390 <__any_on>:
    d390:	b530      	push	{r4, r5, lr}
    d392:	0004      	movs	r4, r0
    d394:	6902      	ldr	r2, [r0, #16]
    d396:	3414      	adds	r4, #20
    d398:	114b      	asrs	r3, r1, #5
    d39a:	429a      	cmp	r2, r3
    d39c:	db0c      	blt.n	d3b8 <__any_on+0x28>
    d39e:	dd0c      	ble.n	d3ba <__any_on+0x2a>
    d3a0:	221f      	movs	r2, #31
    d3a2:	4011      	ands	r1, r2
    d3a4:	d009      	beq.n	d3ba <__any_on+0x2a>
    d3a6:	009a      	lsls	r2, r3, #2
    d3a8:	5915      	ldr	r5, [r2, r4]
    d3aa:	2001      	movs	r0, #1
    d3ac:	002a      	movs	r2, r5
    d3ae:	40ca      	lsrs	r2, r1
    d3b0:	408a      	lsls	r2, r1
    d3b2:	4295      	cmp	r5, r2
    d3b4:	d10c      	bne.n	d3d0 <__any_on+0x40>
    d3b6:	e000      	b.n	d3ba <__any_on+0x2a>
    d3b8:	0013      	movs	r3, r2
    d3ba:	009b      	lsls	r3, r3, #2
    d3bc:	18e3      	adds	r3, r4, r3
    d3be:	42a3      	cmp	r3, r4
    d3c0:	d905      	bls.n	d3ce <__any_on+0x3e>
    d3c2:	3b04      	subs	r3, #4
    d3c4:	681a      	ldr	r2, [r3, #0]
    d3c6:	2a00      	cmp	r2, #0
    d3c8:	d0f9      	beq.n	d3be <__any_on+0x2e>
    d3ca:	2001      	movs	r0, #1
    d3cc:	e000      	b.n	d3d0 <__any_on+0x40>
    d3ce:	2000      	movs	r0, #0
    d3d0:	bd30      	pop	{r4, r5, pc}

0000d3d2 <_calloc_r>:
    d3d2:	434a      	muls	r2, r1
    d3d4:	b570      	push	{r4, r5, r6, lr}
    d3d6:	0011      	movs	r1, r2
    d3d8:	0014      	movs	r4, r2
    d3da:	f7fc f9a1 	bl	9720 <_malloc_r>
    d3de:	1e05      	subs	r5, r0, #0
    d3e0:	d003      	beq.n	d3ea <_calloc_r+0x18>
    d3e2:	0022      	movs	r2, r4
    d3e4:	2100      	movs	r1, #0
    d3e6:	f7fc f94c 	bl	9682 <memset>
    d3ea:	0028      	movs	r0, r5
    d3ec:	bd70      	pop	{r4, r5, r6, pc}

0000d3ee <_realloc_r>:
    d3ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3f0:	0006      	movs	r6, r0
    d3f2:	000c      	movs	r4, r1
    d3f4:	0015      	movs	r5, r2
    d3f6:	2900      	cmp	r1, #0
    d3f8:	d104      	bne.n	d404 <_realloc_r+0x16>
    d3fa:	0011      	movs	r1, r2
    d3fc:	f7fc f990 	bl	9720 <_malloc_r>
    d400:	0004      	movs	r4, r0
    d402:	e018      	b.n	d436 <_realloc_r+0x48>
    d404:	2a00      	cmp	r2, #0
    d406:	d103      	bne.n	d410 <_realloc_r+0x22>
    d408:	f7fc f944 	bl	9694 <_free_r>
    d40c:	002c      	movs	r4, r5
    d40e:	e012      	b.n	d436 <_realloc_r+0x48>
    d410:	f000 fa68 	bl	d8e4 <_malloc_usable_size_r>
    d414:	4285      	cmp	r5, r0
    d416:	d90e      	bls.n	d436 <_realloc_r+0x48>
    d418:	0029      	movs	r1, r5
    d41a:	0030      	movs	r0, r6
    d41c:	f7fc f980 	bl	9720 <_malloc_r>
    d420:	1e07      	subs	r7, r0, #0
    d422:	d007      	beq.n	d434 <_realloc_r+0x46>
    d424:	0021      	movs	r1, r4
    d426:	002a      	movs	r2, r5
    d428:	f7fc f90d 	bl	9646 <memcpy>
    d42c:	0021      	movs	r1, r4
    d42e:	0030      	movs	r0, r6
    d430:	f7fc f930 	bl	9694 <_free_r>
    d434:	003c      	movs	r4, r7
    d436:	0020      	movs	r0, r4
    d438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000d43c <__ssputs_r>:
    d43c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d43e:	688e      	ldr	r6, [r1, #8]
    d440:	b085      	sub	sp, #20
    d442:	0007      	movs	r7, r0
    d444:	000c      	movs	r4, r1
    d446:	9203      	str	r2, [sp, #12]
    d448:	9301      	str	r3, [sp, #4]
    d44a:	429e      	cmp	r6, r3
    d44c:	d843      	bhi.n	d4d6 <__ssputs_r+0x9a>
    d44e:	2390      	movs	r3, #144	; 0x90
    d450:	898a      	ldrh	r2, [r1, #12]
    d452:	00db      	lsls	r3, r3, #3
    d454:	421a      	tst	r2, r3
    d456:	d03e      	beq.n	d4d6 <__ssputs_r+0x9a>
    d458:	2503      	movs	r5, #3
    d45a:	6909      	ldr	r1, [r1, #16]
    d45c:	6823      	ldr	r3, [r4, #0]
    d45e:	9801      	ldr	r0, [sp, #4]
    d460:	1a5b      	subs	r3, r3, r1
    d462:	9302      	str	r3, [sp, #8]
    d464:	6963      	ldr	r3, [r4, #20]
    d466:	435d      	muls	r5, r3
    d468:	0feb      	lsrs	r3, r5, #31
    d46a:	195d      	adds	r5, r3, r5
    d46c:	9b02      	ldr	r3, [sp, #8]
    d46e:	106d      	asrs	r5, r5, #1
    d470:	3301      	adds	r3, #1
    d472:	181b      	adds	r3, r3, r0
    d474:	42ab      	cmp	r3, r5
    d476:	d900      	bls.n	d47a <__ssputs_r+0x3e>
    d478:	001d      	movs	r5, r3
    d47a:	0553      	lsls	r3, r2, #21
    d47c:	d510      	bpl.n	d4a0 <__ssputs_r+0x64>
    d47e:	0029      	movs	r1, r5
    d480:	0038      	movs	r0, r7
    d482:	f7fc f94d 	bl	9720 <_malloc_r>
    d486:	1e06      	subs	r6, r0, #0
    d488:	d014      	beq.n	d4b4 <__ssputs_r+0x78>
    d48a:	9a02      	ldr	r2, [sp, #8]
    d48c:	6921      	ldr	r1, [r4, #16]
    d48e:	f7fc f8da 	bl	9646 <memcpy>
    d492:	89a2      	ldrh	r2, [r4, #12]
    d494:	4b19      	ldr	r3, [pc, #100]	; (d4fc <__ssputs_r+0xc0>)
    d496:	4013      	ands	r3, r2
    d498:	2280      	movs	r2, #128	; 0x80
    d49a:	4313      	orrs	r3, r2
    d49c:	81a3      	strh	r3, [r4, #12]
    d49e:	e012      	b.n	d4c6 <__ssputs_r+0x8a>
    d4a0:	002a      	movs	r2, r5
    d4a2:	0038      	movs	r0, r7
    d4a4:	f7ff ffa3 	bl	d3ee <_realloc_r>
    d4a8:	1e06      	subs	r6, r0, #0
    d4aa:	d10c      	bne.n	d4c6 <__ssputs_r+0x8a>
    d4ac:	6921      	ldr	r1, [r4, #16]
    d4ae:	0038      	movs	r0, r7
    d4b0:	f7fc f8f0 	bl	9694 <_free_r>
    d4b4:	230c      	movs	r3, #12
    d4b6:	2240      	movs	r2, #64	; 0x40
    d4b8:	2001      	movs	r0, #1
    d4ba:	603b      	str	r3, [r7, #0]
    d4bc:	89a3      	ldrh	r3, [r4, #12]
    d4be:	4240      	negs	r0, r0
    d4c0:	4313      	orrs	r3, r2
    d4c2:	81a3      	strh	r3, [r4, #12]
    d4c4:	e017      	b.n	d4f6 <__ssputs_r+0xba>
    d4c6:	9b02      	ldr	r3, [sp, #8]
    d4c8:	6126      	str	r6, [r4, #16]
    d4ca:	18f6      	adds	r6, r6, r3
    d4cc:	6026      	str	r6, [r4, #0]
    d4ce:	6165      	str	r5, [r4, #20]
    d4d0:	9e01      	ldr	r6, [sp, #4]
    d4d2:	1aed      	subs	r5, r5, r3
    d4d4:	60a5      	str	r5, [r4, #8]
    d4d6:	9b01      	ldr	r3, [sp, #4]
    d4d8:	42b3      	cmp	r3, r6
    d4da:	d200      	bcs.n	d4de <__ssputs_r+0xa2>
    d4dc:	001e      	movs	r6, r3
    d4de:	0032      	movs	r2, r6
    d4e0:	9903      	ldr	r1, [sp, #12]
    d4e2:	6820      	ldr	r0, [r4, #0]
    d4e4:	f7fc f8b8 	bl	9658 <memmove>
    d4e8:	2000      	movs	r0, #0
    d4ea:	68a3      	ldr	r3, [r4, #8]
    d4ec:	1b9b      	subs	r3, r3, r6
    d4ee:	60a3      	str	r3, [r4, #8]
    d4f0:	6823      	ldr	r3, [r4, #0]
    d4f2:	199e      	adds	r6, r3, r6
    d4f4:	6026      	str	r6, [r4, #0]
    d4f6:	b005      	add	sp, #20
    d4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d4fa:	46c0      	nop			; (mov r8, r8)
    d4fc:	fffffb7f 	.word	0xfffffb7f

0000d500 <_svfiprintf_r>:
    d500:	b5f0      	push	{r4, r5, r6, r7, lr}
    d502:	b09f      	sub	sp, #124	; 0x7c
    d504:	9002      	str	r0, [sp, #8]
    d506:	9305      	str	r3, [sp, #20]
    d508:	898b      	ldrh	r3, [r1, #12]
    d50a:	000f      	movs	r7, r1
    d50c:	0016      	movs	r6, r2
    d50e:	061b      	lsls	r3, r3, #24
    d510:	d510      	bpl.n	d534 <_svfiprintf_r+0x34>
    d512:	690b      	ldr	r3, [r1, #16]
    d514:	2b00      	cmp	r3, #0
    d516:	d10d      	bne.n	d534 <_svfiprintf_r+0x34>
    d518:	2140      	movs	r1, #64	; 0x40
    d51a:	f7fc f901 	bl	9720 <_malloc_r>
    d51e:	6038      	str	r0, [r7, #0]
    d520:	6138      	str	r0, [r7, #16]
    d522:	2800      	cmp	r0, #0
    d524:	d104      	bne.n	d530 <_svfiprintf_r+0x30>
    d526:	230c      	movs	r3, #12
    d528:	9a02      	ldr	r2, [sp, #8]
    d52a:	3801      	subs	r0, #1
    d52c:	6013      	str	r3, [r2, #0]
    d52e:	e0d8      	b.n	d6e2 <_svfiprintf_r+0x1e2>
    d530:	2340      	movs	r3, #64	; 0x40
    d532:	617b      	str	r3, [r7, #20]
    d534:	2300      	movs	r3, #0
    d536:	ad06      	add	r5, sp, #24
    d538:	616b      	str	r3, [r5, #20]
    d53a:	3320      	adds	r3, #32
    d53c:	766b      	strb	r3, [r5, #25]
    d53e:	3310      	adds	r3, #16
    d540:	76ab      	strb	r3, [r5, #26]
    d542:	0034      	movs	r4, r6
    d544:	7823      	ldrb	r3, [r4, #0]
    d546:	2b00      	cmp	r3, #0
    d548:	d103      	bne.n	d552 <_svfiprintf_r+0x52>
    d54a:	1ba3      	subs	r3, r4, r6
    d54c:	9304      	str	r3, [sp, #16]
    d54e:	d012      	beq.n	d576 <_svfiprintf_r+0x76>
    d550:	e003      	b.n	d55a <_svfiprintf_r+0x5a>
    d552:	2b25      	cmp	r3, #37	; 0x25
    d554:	d0f9      	beq.n	d54a <_svfiprintf_r+0x4a>
    d556:	3401      	adds	r4, #1
    d558:	e7f4      	b.n	d544 <_svfiprintf_r+0x44>
    d55a:	1ba3      	subs	r3, r4, r6
    d55c:	0032      	movs	r2, r6
    d55e:	0039      	movs	r1, r7
    d560:	9802      	ldr	r0, [sp, #8]
    d562:	f7ff ff6b 	bl	d43c <__ssputs_r>
    d566:	1c43      	adds	r3, r0, #1
    d568:	d100      	bne.n	d56c <_svfiprintf_r+0x6c>
    d56a:	e0b4      	b.n	d6d6 <_svfiprintf_r+0x1d6>
    d56c:	696a      	ldr	r2, [r5, #20]
    d56e:	9b04      	ldr	r3, [sp, #16]
    d570:	4694      	mov	ip, r2
    d572:	4463      	add	r3, ip
    d574:	616b      	str	r3, [r5, #20]
    d576:	7823      	ldrb	r3, [r4, #0]
    d578:	2b00      	cmp	r3, #0
    d57a:	d100      	bne.n	d57e <_svfiprintf_r+0x7e>
    d57c:	e0ab      	b.n	d6d6 <_svfiprintf_r+0x1d6>
    d57e:	2201      	movs	r2, #1
    d580:	2300      	movs	r3, #0
    d582:	4252      	negs	r2, r2
    d584:	606a      	str	r2, [r5, #4]
    d586:	a902      	add	r1, sp, #8
    d588:	3254      	adds	r2, #84	; 0x54
    d58a:	1852      	adds	r2, r2, r1
    d58c:	3401      	adds	r4, #1
    d58e:	602b      	str	r3, [r5, #0]
    d590:	60eb      	str	r3, [r5, #12]
    d592:	60ab      	str	r3, [r5, #8]
    d594:	7013      	strb	r3, [r2, #0]
    d596:	65ab      	str	r3, [r5, #88]	; 0x58
    d598:	4e53      	ldr	r6, [pc, #332]	; (d6e8 <_svfiprintf_r+0x1e8>)
    d59a:	7821      	ldrb	r1, [r4, #0]
    d59c:	2205      	movs	r2, #5
    d59e:	0030      	movs	r0, r6
    d5a0:	f7ff fb14 	bl	cbcc <memchr>
    d5a4:	2800      	cmp	r0, #0
    d5a6:	d007      	beq.n	d5b8 <_svfiprintf_r+0xb8>
    d5a8:	2301      	movs	r3, #1
    d5aa:	1b80      	subs	r0, r0, r6
    d5ac:	4083      	lsls	r3, r0
    d5ae:	682a      	ldr	r2, [r5, #0]
    d5b0:	3401      	adds	r4, #1
    d5b2:	4313      	orrs	r3, r2
    d5b4:	602b      	str	r3, [r5, #0]
    d5b6:	e7ef      	b.n	d598 <_svfiprintf_r+0x98>
    d5b8:	682b      	ldr	r3, [r5, #0]
    d5ba:	06da      	lsls	r2, r3, #27
    d5bc:	d504      	bpl.n	d5c8 <_svfiprintf_r+0xc8>
    d5be:	2253      	movs	r2, #83	; 0x53
    d5c0:	2120      	movs	r1, #32
    d5c2:	a802      	add	r0, sp, #8
    d5c4:	1812      	adds	r2, r2, r0
    d5c6:	7011      	strb	r1, [r2, #0]
    d5c8:	071a      	lsls	r2, r3, #28
    d5ca:	d504      	bpl.n	d5d6 <_svfiprintf_r+0xd6>
    d5cc:	2253      	movs	r2, #83	; 0x53
    d5ce:	212b      	movs	r1, #43	; 0x2b
    d5d0:	a802      	add	r0, sp, #8
    d5d2:	1812      	adds	r2, r2, r0
    d5d4:	7011      	strb	r1, [r2, #0]
    d5d6:	7822      	ldrb	r2, [r4, #0]
    d5d8:	2a2a      	cmp	r2, #42	; 0x2a
    d5da:	d003      	beq.n	d5e4 <_svfiprintf_r+0xe4>
    d5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d5de:	2000      	movs	r0, #0
    d5e0:	210a      	movs	r1, #10
    d5e2:	e00e      	b.n	d602 <_svfiprintf_r+0x102>
    d5e4:	9a05      	ldr	r2, [sp, #20]
    d5e6:	1d11      	adds	r1, r2, #4
    d5e8:	6812      	ldr	r2, [r2, #0]
    d5ea:	9105      	str	r1, [sp, #20]
    d5ec:	2a00      	cmp	r2, #0
    d5ee:	db01      	blt.n	d5f4 <_svfiprintf_r+0xf4>
    d5f0:	9209      	str	r2, [sp, #36]	; 0x24
    d5f2:	e004      	b.n	d5fe <_svfiprintf_r+0xfe>
    d5f4:	4252      	negs	r2, r2
    d5f6:	60ea      	str	r2, [r5, #12]
    d5f8:	2202      	movs	r2, #2
    d5fa:	4313      	orrs	r3, r2
    d5fc:	602b      	str	r3, [r5, #0]
    d5fe:	3401      	adds	r4, #1
    d600:	e00b      	b.n	d61a <_svfiprintf_r+0x11a>
    d602:	7822      	ldrb	r2, [r4, #0]
    d604:	3a30      	subs	r2, #48	; 0x30
    d606:	2a09      	cmp	r2, #9
    d608:	d804      	bhi.n	d614 <_svfiprintf_r+0x114>
    d60a:	434b      	muls	r3, r1
    d60c:	3401      	adds	r4, #1
    d60e:	189b      	adds	r3, r3, r2
    d610:	2001      	movs	r0, #1
    d612:	e7f6      	b.n	d602 <_svfiprintf_r+0x102>
    d614:	2800      	cmp	r0, #0
    d616:	d000      	beq.n	d61a <_svfiprintf_r+0x11a>
    d618:	9309      	str	r3, [sp, #36]	; 0x24
    d61a:	7823      	ldrb	r3, [r4, #0]
    d61c:	2b2e      	cmp	r3, #46	; 0x2e
    d61e:	d11e      	bne.n	d65e <_svfiprintf_r+0x15e>
    d620:	7863      	ldrb	r3, [r4, #1]
    d622:	2b2a      	cmp	r3, #42	; 0x2a
    d624:	d10a      	bne.n	d63c <_svfiprintf_r+0x13c>
    d626:	9b05      	ldr	r3, [sp, #20]
    d628:	3402      	adds	r4, #2
    d62a:	1d1a      	adds	r2, r3, #4
    d62c:	681b      	ldr	r3, [r3, #0]
    d62e:	9205      	str	r2, [sp, #20]
    d630:	2b00      	cmp	r3, #0
    d632:	da01      	bge.n	d638 <_svfiprintf_r+0x138>
    d634:	2301      	movs	r3, #1
    d636:	425b      	negs	r3, r3
    d638:	9307      	str	r3, [sp, #28]
    d63a:	e010      	b.n	d65e <_svfiprintf_r+0x15e>
    d63c:	2300      	movs	r3, #0
    d63e:	200a      	movs	r0, #10
    d640:	001a      	movs	r2, r3
    d642:	3401      	adds	r4, #1
    d644:	606b      	str	r3, [r5, #4]
    d646:	7821      	ldrb	r1, [r4, #0]
    d648:	3930      	subs	r1, #48	; 0x30
    d64a:	2909      	cmp	r1, #9
    d64c:	d804      	bhi.n	d658 <_svfiprintf_r+0x158>
    d64e:	4342      	muls	r2, r0
    d650:	3401      	adds	r4, #1
    d652:	1852      	adds	r2, r2, r1
    d654:	2301      	movs	r3, #1
    d656:	e7f6      	b.n	d646 <_svfiprintf_r+0x146>
    d658:	2b00      	cmp	r3, #0
    d65a:	d000      	beq.n	d65e <_svfiprintf_r+0x15e>
    d65c:	9207      	str	r2, [sp, #28]
    d65e:	4e23      	ldr	r6, [pc, #140]	; (d6ec <_svfiprintf_r+0x1ec>)
    d660:	7821      	ldrb	r1, [r4, #0]
    d662:	2203      	movs	r2, #3
    d664:	0030      	movs	r0, r6
    d666:	f7ff fab1 	bl	cbcc <memchr>
    d66a:	2800      	cmp	r0, #0
    d66c:	d006      	beq.n	d67c <_svfiprintf_r+0x17c>
    d66e:	2340      	movs	r3, #64	; 0x40
    d670:	1b80      	subs	r0, r0, r6
    d672:	4083      	lsls	r3, r0
    d674:	682a      	ldr	r2, [r5, #0]
    d676:	3401      	adds	r4, #1
    d678:	4313      	orrs	r3, r2
    d67a:	602b      	str	r3, [r5, #0]
    d67c:	7821      	ldrb	r1, [r4, #0]
    d67e:	2206      	movs	r2, #6
    d680:	481b      	ldr	r0, [pc, #108]	; (d6f0 <_svfiprintf_r+0x1f0>)
    d682:	1c66      	adds	r6, r4, #1
    d684:	7629      	strb	r1, [r5, #24]
    d686:	f7ff faa1 	bl	cbcc <memchr>
    d68a:	2800      	cmp	r0, #0
    d68c:	d012      	beq.n	d6b4 <_svfiprintf_r+0x1b4>
    d68e:	4b19      	ldr	r3, [pc, #100]	; (d6f4 <_svfiprintf_r+0x1f4>)
    d690:	2b00      	cmp	r3, #0
    d692:	d106      	bne.n	d6a2 <_svfiprintf_r+0x1a2>
    d694:	2207      	movs	r2, #7
    d696:	9b05      	ldr	r3, [sp, #20]
    d698:	3307      	adds	r3, #7
    d69a:	4393      	bics	r3, r2
    d69c:	3308      	adds	r3, #8
    d69e:	9305      	str	r3, [sp, #20]
    d6a0:	e014      	b.n	d6cc <_svfiprintf_r+0x1cc>
    d6a2:	ab05      	add	r3, sp, #20
    d6a4:	9300      	str	r3, [sp, #0]
    d6a6:	003a      	movs	r2, r7
    d6a8:	4b13      	ldr	r3, [pc, #76]	; (d6f8 <_svfiprintf_r+0x1f8>)
    d6aa:	0029      	movs	r1, r5
    d6ac:	9802      	ldr	r0, [sp, #8]
    d6ae:	f7fc fa67 	bl	9b80 <_printf_float>
    d6b2:	e007      	b.n	d6c4 <_svfiprintf_r+0x1c4>
    d6b4:	ab05      	add	r3, sp, #20
    d6b6:	9300      	str	r3, [sp, #0]
    d6b8:	003a      	movs	r2, r7
    d6ba:	4b0f      	ldr	r3, [pc, #60]	; (d6f8 <_svfiprintf_r+0x1f8>)
    d6bc:	0029      	movs	r1, r5
    d6be:	9802      	ldr	r0, [sp, #8]
    d6c0:	f7fc fd1c 	bl	a0fc <_printf_i>
    d6c4:	9003      	str	r0, [sp, #12]
    d6c6:	9b03      	ldr	r3, [sp, #12]
    d6c8:	3301      	adds	r3, #1
    d6ca:	d004      	beq.n	d6d6 <_svfiprintf_r+0x1d6>
    d6cc:	696b      	ldr	r3, [r5, #20]
    d6ce:	9a03      	ldr	r2, [sp, #12]
    d6d0:	189b      	adds	r3, r3, r2
    d6d2:	616b      	str	r3, [r5, #20]
    d6d4:	e735      	b.n	d542 <_svfiprintf_r+0x42>
    d6d6:	89bb      	ldrh	r3, [r7, #12]
    d6d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d6da:	065b      	lsls	r3, r3, #25
    d6dc:	d501      	bpl.n	d6e2 <_svfiprintf_r+0x1e2>
    d6de:	2001      	movs	r0, #1
    d6e0:	4240      	negs	r0, r0
    d6e2:	b01f      	add	sp, #124	; 0x7c
    d6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d6e6:	46c0      	nop			; (mov r8, r8)
    d6e8:	0000ec40 	.word	0x0000ec40
    d6ec:	0000ec46 	.word	0x0000ec46
    d6f0:	0000ec4a 	.word	0x0000ec4a
    d6f4:	00009b81 	.word	0x00009b81
    d6f8:	0000d43d 	.word	0x0000d43d

0000d6fc <_raise_r>:
    d6fc:	b570      	push	{r4, r5, r6, lr}
    d6fe:	0004      	movs	r4, r0
    d700:	1e0d      	subs	r5, r1, #0
    d702:	2d1f      	cmp	r5, #31
    d704:	d904      	bls.n	d710 <_raise_r+0x14>
    d706:	2316      	movs	r3, #22
    d708:	6003      	str	r3, [r0, #0]
    d70a:	2001      	movs	r0, #1
    d70c:	4240      	negs	r0, r0
    d70e:	e01e      	b.n	d74e <_raise_r+0x52>
    d710:	6c42      	ldr	r2, [r0, #68]	; 0x44
    d712:	2a00      	cmp	r2, #0
    d714:	d004      	beq.n	d720 <_raise_r+0x24>
    d716:	008b      	lsls	r3, r1, #2
    d718:	18d2      	adds	r2, r2, r3
    d71a:	6813      	ldr	r3, [r2, #0]
    d71c:	2b00      	cmp	r3, #0
    d71e:	d108      	bne.n	d732 <_raise_r+0x36>
    d720:	0020      	movs	r0, r4
    d722:	f000 f831 	bl	d788 <_getpid_r>
    d726:	002a      	movs	r2, r5
    d728:	0001      	movs	r1, r0
    d72a:	0020      	movs	r0, r4
    d72c:	f000 f81a 	bl	d764 <_kill_r>
    d730:	e00d      	b.n	d74e <_raise_r+0x52>
    d732:	2000      	movs	r0, #0
    d734:	2b01      	cmp	r3, #1
    d736:	d00a      	beq.n	d74e <_raise_r+0x52>
    d738:	1c59      	adds	r1, r3, #1
    d73a:	d103      	bne.n	d744 <_raise_r+0x48>
    d73c:	3317      	adds	r3, #23
    d73e:	6023      	str	r3, [r4, #0]
    d740:	3001      	adds	r0, #1
    d742:	e004      	b.n	d74e <_raise_r+0x52>
    d744:	2400      	movs	r4, #0
    d746:	0028      	movs	r0, r5
    d748:	6014      	str	r4, [r2, #0]
    d74a:	4798      	blx	r3
    d74c:	0020      	movs	r0, r4
    d74e:	bd70      	pop	{r4, r5, r6, pc}

0000d750 <raise>:
    d750:	b510      	push	{r4, lr}
    d752:	4b03      	ldr	r3, [pc, #12]	; (d760 <raise+0x10>)
    d754:	0001      	movs	r1, r0
    d756:	6818      	ldr	r0, [r3, #0]
    d758:	f7ff ffd0 	bl	d6fc <_raise_r>
    d75c:	bd10      	pop	{r4, pc}
    d75e:	46c0      	nop			; (mov r8, r8)
    d760:	200000fc 	.word	0x200000fc

0000d764 <_kill_r>:
    d764:	2300      	movs	r3, #0
    d766:	b570      	push	{r4, r5, r6, lr}
    d768:	4c06      	ldr	r4, [pc, #24]	; (d784 <_kill_r+0x20>)
    d76a:	0005      	movs	r5, r0
    d76c:	0008      	movs	r0, r1
    d76e:	0011      	movs	r1, r2
    d770:	6023      	str	r3, [r4, #0]
    d772:	f000 f939 	bl	d9e8 <_kill>
    d776:	1c43      	adds	r3, r0, #1
    d778:	d103      	bne.n	d782 <_kill_r+0x1e>
    d77a:	6823      	ldr	r3, [r4, #0]
    d77c:	2b00      	cmp	r3, #0
    d77e:	d000      	beq.n	d782 <_kill_r+0x1e>
    d780:	602b      	str	r3, [r5, #0]
    d782:	bd70      	pop	{r4, r5, r6, pc}
    d784:	20000e74 	.word	0x20000e74

0000d788 <_getpid_r>:
    d788:	b510      	push	{r4, lr}
    d78a:	f000 f91d 	bl	d9c8 <_getpid>
    d78e:	bd10      	pop	{r4, pc}

0000d790 <__sread>:
    d790:	b570      	push	{r4, r5, r6, lr}
    d792:	000c      	movs	r4, r1
    d794:	250e      	movs	r5, #14
    d796:	5f49      	ldrsh	r1, [r1, r5]
    d798:	f000 f8b0 	bl	d8fc <_read_r>
    d79c:	2800      	cmp	r0, #0
    d79e:	db03      	blt.n	d7a8 <__sread+0x18>
    d7a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    d7a2:	181b      	adds	r3, r3, r0
    d7a4:	6563      	str	r3, [r4, #84]	; 0x54
    d7a6:	e003      	b.n	d7b0 <__sread+0x20>
    d7a8:	89a2      	ldrh	r2, [r4, #12]
    d7aa:	4b02      	ldr	r3, [pc, #8]	; (d7b4 <__sread+0x24>)
    d7ac:	4013      	ands	r3, r2
    d7ae:	81a3      	strh	r3, [r4, #12]
    d7b0:	bd70      	pop	{r4, r5, r6, pc}
    d7b2:	46c0      	nop			; (mov r8, r8)
    d7b4:	ffffefff 	.word	0xffffefff

0000d7b8 <__swrite>:
    d7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d7ba:	001f      	movs	r7, r3
    d7bc:	898b      	ldrh	r3, [r1, #12]
    d7be:	0005      	movs	r5, r0
    d7c0:	000c      	movs	r4, r1
    d7c2:	0016      	movs	r6, r2
    d7c4:	05db      	lsls	r3, r3, #23
    d7c6:	d505      	bpl.n	d7d4 <__swrite+0x1c>
    d7c8:	230e      	movs	r3, #14
    d7ca:	5ec9      	ldrsh	r1, [r1, r3]
    d7cc:	2200      	movs	r2, #0
    d7ce:	2302      	movs	r3, #2
    d7d0:	f000 f874 	bl	d8bc <_lseek_r>
    d7d4:	89a2      	ldrh	r2, [r4, #12]
    d7d6:	4b05      	ldr	r3, [pc, #20]	; (d7ec <__swrite+0x34>)
    d7d8:	0028      	movs	r0, r5
    d7da:	4013      	ands	r3, r2
    d7dc:	81a3      	strh	r3, [r4, #12]
    d7de:	0032      	movs	r2, r6
    d7e0:	230e      	movs	r3, #14
    d7e2:	5ee1      	ldrsh	r1, [r4, r3]
    d7e4:	003b      	movs	r3, r7
    d7e6:	f000 f81f 	bl	d828 <_write_r>
    d7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d7ec:	ffffefff 	.word	0xffffefff

0000d7f0 <__sseek>:
    d7f0:	b570      	push	{r4, r5, r6, lr}
    d7f2:	000c      	movs	r4, r1
    d7f4:	250e      	movs	r5, #14
    d7f6:	5f49      	ldrsh	r1, [r1, r5]
    d7f8:	f000 f860 	bl	d8bc <_lseek_r>
    d7fc:	89a3      	ldrh	r3, [r4, #12]
    d7fe:	1c42      	adds	r2, r0, #1
    d800:	d103      	bne.n	d80a <__sseek+0x1a>
    d802:	4a05      	ldr	r2, [pc, #20]	; (d818 <__sseek+0x28>)
    d804:	4013      	ands	r3, r2
    d806:	81a3      	strh	r3, [r4, #12]
    d808:	e004      	b.n	d814 <__sseek+0x24>
    d80a:	2280      	movs	r2, #128	; 0x80
    d80c:	0152      	lsls	r2, r2, #5
    d80e:	4313      	orrs	r3, r2
    d810:	81a3      	strh	r3, [r4, #12]
    d812:	6560      	str	r0, [r4, #84]	; 0x54
    d814:	bd70      	pop	{r4, r5, r6, pc}
    d816:	46c0      	nop			; (mov r8, r8)
    d818:	ffffefff 	.word	0xffffefff

0000d81c <__sclose>:
    d81c:	b510      	push	{r4, lr}
    d81e:	230e      	movs	r3, #14
    d820:	5ec9      	ldrsh	r1, [r1, r3]
    d822:	f000 f815 	bl	d850 <_close_r>
    d826:	bd10      	pop	{r4, pc}

0000d828 <_write_r>:
    d828:	b570      	push	{r4, r5, r6, lr}
    d82a:	0005      	movs	r5, r0
    d82c:	0008      	movs	r0, r1
    d82e:	0011      	movs	r1, r2
    d830:	2200      	movs	r2, #0
    d832:	4c06      	ldr	r4, [pc, #24]	; (d84c <_write_r+0x24>)
    d834:	6022      	str	r2, [r4, #0]
    d836:	001a      	movs	r2, r3
    d838:	f000 f8fc 	bl	da34 <_write>
    d83c:	1c43      	adds	r3, r0, #1
    d83e:	d103      	bne.n	d848 <_write_r+0x20>
    d840:	6823      	ldr	r3, [r4, #0]
    d842:	2b00      	cmp	r3, #0
    d844:	d000      	beq.n	d848 <_write_r+0x20>
    d846:	602b      	str	r3, [r5, #0]
    d848:	bd70      	pop	{r4, r5, r6, pc}
    d84a:	46c0      	nop			; (mov r8, r8)
    d84c:	20000e74 	.word	0x20000e74

0000d850 <_close_r>:
    d850:	2300      	movs	r3, #0
    d852:	b570      	push	{r4, r5, r6, lr}
    d854:	4c06      	ldr	r4, [pc, #24]	; (d870 <_close_r+0x20>)
    d856:	0005      	movs	r5, r0
    d858:	0008      	movs	r0, r1
    d85a:	6023      	str	r3, [r4, #0]
    d85c:	f000 f8a4 	bl	d9a8 <_close>
    d860:	1c43      	adds	r3, r0, #1
    d862:	d103      	bne.n	d86c <_close_r+0x1c>
    d864:	6823      	ldr	r3, [r4, #0]
    d866:	2b00      	cmp	r3, #0
    d868:	d000      	beq.n	d86c <_close_r+0x1c>
    d86a:	602b      	str	r3, [r5, #0]
    d86c:	bd70      	pop	{r4, r5, r6, pc}
    d86e:	46c0      	nop			; (mov r8, r8)
    d870:	20000e74 	.word	0x20000e74

0000d874 <_fstat_r>:
    d874:	2300      	movs	r3, #0
    d876:	b570      	push	{r4, r5, r6, lr}
    d878:	4c06      	ldr	r4, [pc, #24]	; (d894 <_fstat_r+0x20>)
    d87a:	0005      	movs	r5, r0
    d87c:	0008      	movs	r0, r1
    d87e:	0011      	movs	r1, r2
    d880:	6023      	str	r3, [r4, #0]
    d882:	f000 f899 	bl	d9b8 <_fstat>
    d886:	1c43      	adds	r3, r0, #1
    d888:	d103      	bne.n	d892 <_fstat_r+0x1e>
    d88a:	6823      	ldr	r3, [r4, #0]
    d88c:	2b00      	cmp	r3, #0
    d88e:	d000      	beq.n	d892 <_fstat_r+0x1e>
    d890:	602b      	str	r3, [r5, #0]
    d892:	bd70      	pop	{r4, r5, r6, pc}
    d894:	20000e74 	.word	0x20000e74

0000d898 <_isatty_r>:
    d898:	2300      	movs	r3, #0
    d89a:	b570      	push	{r4, r5, r6, lr}
    d89c:	4c06      	ldr	r4, [pc, #24]	; (d8b8 <_isatty_r+0x20>)
    d89e:	0005      	movs	r5, r0
    d8a0:	0008      	movs	r0, r1
    d8a2:	6023      	str	r3, [r4, #0]
    d8a4:	f000 f898 	bl	d9d8 <_isatty>
    d8a8:	1c43      	adds	r3, r0, #1
    d8aa:	d103      	bne.n	d8b4 <_isatty_r+0x1c>
    d8ac:	6823      	ldr	r3, [r4, #0]
    d8ae:	2b00      	cmp	r3, #0
    d8b0:	d000      	beq.n	d8b4 <_isatty_r+0x1c>
    d8b2:	602b      	str	r3, [r5, #0]
    d8b4:	bd70      	pop	{r4, r5, r6, pc}
    d8b6:	46c0      	nop			; (mov r8, r8)
    d8b8:	20000e74 	.word	0x20000e74

0000d8bc <_lseek_r>:
    d8bc:	b570      	push	{r4, r5, r6, lr}
    d8be:	0005      	movs	r5, r0
    d8c0:	0008      	movs	r0, r1
    d8c2:	0011      	movs	r1, r2
    d8c4:	2200      	movs	r2, #0
    d8c6:	4c06      	ldr	r4, [pc, #24]	; (d8e0 <_lseek_r+0x24>)
    d8c8:	6022      	str	r2, [r4, #0]
    d8ca:	001a      	movs	r2, r3
    d8cc:	f000 f894 	bl	d9f8 <_lseek>
    d8d0:	1c43      	adds	r3, r0, #1
    d8d2:	d103      	bne.n	d8dc <_lseek_r+0x20>
    d8d4:	6823      	ldr	r3, [r4, #0]
    d8d6:	2b00      	cmp	r3, #0
    d8d8:	d000      	beq.n	d8dc <_lseek_r+0x20>
    d8da:	602b      	str	r3, [r5, #0]
    d8dc:	bd70      	pop	{r4, r5, r6, pc}
    d8de:	46c0      	nop			; (mov r8, r8)
    d8e0:	20000e74 	.word	0x20000e74

0000d8e4 <_malloc_usable_size_r>:
    d8e4:	1f0b      	subs	r3, r1, #4
    d8e6:	681a      	ldr	r2, [r3, #0]
    d8e8:	1f10      	subs	r0, r2, #4
    d8ea:	2a00      	cmp	r2, #0
    d8ec:	da04      	bge.n	d8f8 <_malloc_usable_size_r+0x14>
    d8ee:	1889      	adds	r1, r1, r2
    d8f0:	3904      	subs	r1, #4
    d8f2:	680b      	ldr	r3, [r1, #0]
    d8f4:	18d0      	adds	r0, r2, r3
    d8f6:	3804      	subs	r0, #4
    d8f8:	4770      	bx	lr
	...

0000d8fc <_read_r>:
    d8fc:	b570      	push	{r4, r5, r6, lr}
    d8fe:	0005      	movs	r5, r0
    d900:	0008      	movs	r0, r1
    d902:	0011      	movs	r1, r2
    d904:	2200      	movs	r2, #0
    d906:	4c06      	ldr	r4, [pc, #24]	; (d920 <_read_r+0x24>)
    d908:	6022      	str	r2, [r4, #0]
    d90a:	001a      	movs	r2, r3
    d90c:	f000 f87c 	bl	da08 <_read>
    d910:	1c43      	adds	r3, r0, #1
    d912:	d103      	bne.n	d91c <_read_r+0x20>
    d914:	6823      	ldr	r3, [r4, #0]
    d916:	2b00      	cmp	r3, #0
    d918:	d000      	beq.n	d91c <_read_r+0x20>
    d91a:	602b      	str	r3, [r5, #0]
    d91c:	bd70      	pop	{r4, r5, r6, pc}
    d91e:	46c0      	nop			; (mov r8, r8)
    d920:	20000e74 	.word	0x20000e74

0000d924 <__aeabi_i2d>:
    d924:	b570      	push	{r4, r5, r6, lr}
    d926:	2800      	cmp	r0, #0
    d928:	d030      	beq.n	d98c <__aeabi_i2d+0x68>
    d92a:	17c3      	asrs	r3, r0, #31
    d92c:	18c4      	adds	r4, r0, r3
    d92e:	405c      	eors	r4, r3
    d930:	0fc5      	lsrs	r5, r0, #31
    d932:	0020      	movs	r0, r4
    d934:	f7fb fdd0 	bl	94d8 <__clzsi2>
    d938:	4b17      	ldr	r3, [pc, #92]	; (d998 <__aeabi_i2d+0x74>)
    d93a:	4a18      	ldr	r2, [pc, #96]	; (d99c <__aeabi_i2d+0x78>)
    d93c:	1a1b      	subs	r3, r3, r0
    d93e:	1ad2      	subs	r2, r2, r3
    d940:	2a1f      	cmp	r2, #31
    d942:	dd18      	ble.n	d976 <__aeabi_i2d+0x52>
    d944:	4a16      	ldr	r2, [pc, #88]	; (d9a0 <__aeabi_i2d+0x7c>)
    d946:	1ad2      	subs	r2, r2, r3
    d948:	4094      	lsls	r4, r2
    d94a:	2200      	movs	r2, #0
    d94c:	0324      	lsls	r4, r4, #12
    d94e:	055b      	lsls	r3, r3, #21
    d950:	0b24      	lsrs	r4, r4, #12
    d952:	0d5b      	lsrs	r3, r3, #21
    d954:	2100      	movs	r1, #0
    d956:	0010      	movs	r0, r2
    d958:	0324      	lsls	r4, r4, #12
    d95a:	0d0a      	lsrs	r2, r1, #20
    d95c:	0512      	lsls	r2, r2, #20
    d95e:	0b24      	lsrs	r4, r4, #12
    d960:	4314      	orrs	r4, r2
    d962:	4a10      	ldr	r2, [pc, #64]	; (d9a4 <__aeabi_i2d+0x80>)
    d964:	051b      	lsls	r3, r3, #20
    d966:	4014      	ands	r4, r2
    d968:	431c      	orrs	r4, r3
    d96a:	0064      	lsls	r4, r4, #1
    d96c:	07ed      	lsls	r5, r5, #31
    d96e:	0864      	lsrs	r4, r4, #1
    d970:	432c      	orrs	r4, r5
    d972:	0021      	movs	r1, r4
    d974:	bd70      	pop	{r4, r5, r6, pc}
    d976:	0021      	movs	r1, r4
    d978:	4091      	lsls	r1, r2
    d97a:	000a      	movs	r2, r1
    d97c:	210b      	movs	r1, #11
    d97e:	1a08      	subs	r0, r1, r0
    d980:	40c4      	lsrs	r4, r0
    d982:	055b      	lsls	r3, r3, #21
    d984:	0324      	lsls	r4, r4, #12
    d986:	0b24      	lsrs	r4, r4, #12
    d988:	0d5b      	lsrs	r3, r3, #21
    d98a:	e7e3      	b.n	d954 <__aeabi_i2d+0x30>
    d98c:	2500      	movs	r5, #0
    d98e:	2300      	movs	r3, #0
    d990:	2400      	movs	r4, #0
    d992:	2200      	movs	r2, #0
    d994:	e7de      	b.n	d954 <__aeabi_i2d+0x30>
    d996:	46c0      	nop			; (mov r8, r8)
    d998:	0000041e 	.word	0x0000041e
    d99c:	00000433 	.word	0x00000433
    d9a0:	00000413 	.word	0x00000413
    d9a4:	800fffff 	.word	0x800fffff

0000d9a8 <_close>:
    d9a8:	2258      	movs	r2, #88	; 0x58
    d9aa:	2001      	movs	r0, #1
    d9ac:	4b01      	ldr	r3, [pc, #4]	; (d9b4 <_close+0xc>)
    d9ae:	4240      	negs	r0, r0
    d9b0:	601a      	str	r2, [r3, #0]
    d9b2:	4770      	bx	lr
    d9b4:	20000e74 	.word	0x20000e74

0000d9b8 <_fstat>:
    d9b8:	2258      	movs	r2, #88	; 0x58
    d9ba:	2001      	movs	r0, #1
    d9bc:	4b01      	ldr	r3, [pc, #4]	; (d9c4 <_fstat+0xc>)
    d9be:	4240      	negs	r0, r0
    d9c0:	601a      	str	r2, [r3, #0]
    d9c2:	4770      	bx	lr
    d9c4:	20000e74 	.word	0x20000e74

0000d9c8 <_getpid>:
    d9c8:	2258      	movs	r2, #88	; 0x58
    d9ca:	2001      	movs	r0, #1
    d9cc:	4b01      	ldr	r3, [pc, #4]	; (d9d4 <_getpid+0xc>)
    d9ce:	4240      	negs	r0, r0
    d9d0:	601a      	str	r2, [r3, #0]
    d9d2:	4770      	bx	lr
    d9d4:	20000e74 	.word	0x20000e74

0000d9d8 <_isatty>:
    d9d8:	2258      	movs	r2, #88	; 0x58
    d9da:	4b02      	ldr	r3, [pc, #8]	; (d9e4 <_isatty+0xc>)
    d9dc:	2000      	movs	r0, #0
    d9de:	601a      	str	r2, [r3, #0]
    d9e0:	4770      	bx	lr
    d9e2:	46c0      	nop			; (mov r8, r8)
    d9e4:	20000e74 	.word	0x20000e74

0000d9e8 <_kill>:
    d9e8:	2258      	movs	r2, #88	; 0x58
    d9ea:	2001      	movs	r0, #1
    d9ec:	4b01      	ldr	r3, [pc, #4]	; (d9f4 <_kill+0xc>)
    d9ee:	4240      	negs	r0, r0
    d9f0:	601a      	str	r2, [r3, #0]
    d9f2:	4770      	bx	lr
    d9f4:	20000e74 	.word	0x20000e74

0000d9f8 <_lseek>:
    d9f8:	2258      	movs	r2, #88	; 0x58
    d9fa:	2001      	movs	r0, #1
    d9fc:	4b01      	ldr	r3, [pc, #4]	; (da04 <_lseek+0xc>)
    d9fe:	4240      	negs	r0, r0
    da00:	601a      	str	r2, [r3, #0]
    da02:	4770      	bx	lr
    da04:	20000e74 	.word	0x20000e74

0000da08 <_read>:
    da08:	2258      	movs	r2, #88	; 0x58
    da0a:	2001      	movs	r0, #1
    da0c:	4b01      	ldr	r3, [pc, #4]	; (da14 <_read+0xc>)
    da0e:	4240      	negs	r0, r0
    da10:	601a      	str	r2, [r3, #0]
    da12:	4770      	bx	lr
    da14:	20000e74 	.word	0x20000e74

0000da18 <_sbrk>:
    da18:	4a04      	ldr	r2, [pc, #16]	; (da2c <_sbrk+0x14>)
    da1a:	6813      	ldr	r3, [r2, #0]
    da1c:	2b00      	cmp	r3, #0
    da1e:	d003      	beq.n	da28 <_sbrk+0x10>
    da20:	1818      	adds	r0, r3, r0
    da22:	6010      	str	r0, [r2, #0]
    da24:	0018      	movs	r0, r3
    da26:	4770      	bx	lr
    da28:	4b01      	ldr	r3, [pc, #4]	; (da30 <_sbrk+0x18>)
    da2a:	e7f9      	b.n	da20 <_sbrk+0x8>
    da2c:	20000e70 	.word	0x20000e70
    da30:	20000e78 	.word	0x20000e78

0000da34 <_write>:
    da34:	2258      	movs	r2, #88	; 0x58
    da36:	2001      	movs	r0, #1
    da38:	4b01      	ldr	r3, [pc, #4]	; (da40 <_write+0xc>)
    da3a:	4240      	negs	r0, r0
    da3c:	601a      	str	r2, [r3, #0]
    da3e:	4770      	bx	lr
    da40:	20000e74 	.word	0x20000e74

0000da44 <_exit>:
    da44:	e7fe      	b.n	da44 <_exit>
    da46:	46c0      	nop			; (mov r8, r8)

0000da48 <_init>:
    da48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da4a:	46c0      	nop			; (mov r8, r8)
    da4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    da4e:	bc08      	pop	{r3}
    da50:	469e      	mov	lr, r3
    da52:	4770      	bx	lr

0000da54 <_fini>:
    da54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da56:	46c0      	nop			; (mov r8, r8)
    da58:	bcf8      	pop	{r3, r4, r5, r6, r7}
    da5a:	bc08      	pop	{r3}
    da5c:	469e      	mov	lr, r3
    da5e:	4770      	bx	lr

0000da60 <_ZTV13Adafruit_FONA>:
	...
    da68:	0123 0000 4495 0000 0115 0000 0131 0000     #....D......1...
    da78:	013f 0000 014d 0000 5441 432b 4950 3d4e     ?...M...AT+CPIN=
    da88:	0000 0000 0000 5441 432b 474d 3d53 0022     ......AT+CMGS=".
	...
    daac:	5441 432b 5355 3d44 2c31 0022 0000 0000     AT+CUSD=1,".....
	...
    dac8:	0000 5441 432b 4147 5455 3d48 2c31 2c31     ..AT+CGAUTH=1,1,
    dad8:	0022 0000 0000 0000 0000 0000 0000 0000     "...............
	...
    db2c:	0000 4f46 414e 656e 0074 4f46 414e 4100     ..FONAnet.FONA.A
    db3c:	2b54 5448 5054 4150 4152 223d 4100 2b54     T+HTTPPARA=".AT+
    db4c:	4943 5350 4e45 3d44 5300 4e45 2044 4b4f     CIPSEND=.SEND OK
    db5c:	4100 2b54 5448 5054 4144 4154 003d 4f44     .AT+HTTPDATA=.DO
    db6c:	4e57 4f4c 4441 4100 2b54 4343 4449 4100     WNLOAD.AT+CCID.A
    db7c:	2b54 5347 004e 5441 0048 4f56 4349 2045     T+GSN.ATH.VOICE 
    db8c:	4143 4c4c 203a 4e45 0044 5441 432b 4c43     CALL: END.AT+CCL
    db9c:	3f4b 2b00 4343 4b4c 203a 4100 2b54 4743     K?.+CCLK: .AT+CG
    dbac:	534e 4e49 0046 432b 4e47 4953 464e 203a     NSINF.+CGNSINF: 
    dbbc:	4100 2b54 4743 5350 4e49 4f46 2b00 4743     .AT+CGPSINFO.+CG
    dbcc:	5350 4e49 4f46 003a 5441 432b 5047 5353     PSINFO:.AT+CGPSS
    dbdc:	4154 5554 3f53 5300 5453 5441 5355 203a     TATUS?.SSTATUS: 
    dbec:	6f4c 6163 6974 6e6f 0020 5441 462b 534d     Location .AT+FMS
    dbfc:	4749 414e 3d4c 2b00 4d46 4953 4e47 4c41     IGNAL=.+FMSIGNAL
    dc0c:	203a 4100 2b54 4743 5350 4e49 3d46 4100     : .AT+CGPSINF=.A
    dc1c:	0054 5441 3045 4100 2b54 5643 5548 303d     T.ATE0.AT+CVHU=0
    dc2c:	4100 4954 5300 4d49 3038 2038 3152 0034     .ATI.SIM808 R14.
    dc3c:	4953 384d 3830 5220 3331 5300 4d49 3038     SIM808 R13.SIM80
    dc4c:	2030 3152 0033 4953 434d 4d4f 535f 4d49     0 R13.SIMCOM_SIM
    dc5c:	3335 3032 0041 4953 434d 4d4f 535f 4d49     5320A.SIMCOM_SIM
    dc6c:	3335 3032 0045 5441 472b 4d4d 5300 4d49     5320E.AT+GMM.SIM
    dc7c:	3038 4830 4100 2b54 5043 534d 223d 4d53     800H.AT+CPMS="SM
    dc8c:	0022 5441 3048 4100 4154 5600 494f 4543     ".ATH0.ATA.VOICE
    dc9c:	4320 4c41 3a4c 4220 4745 4e49 4100 2b54      CALL: BEGIN.AT+
    dcac:	4c43 5049 313d 4100 2b54 4c43 5049 303d     CLIP=1.AT+CLIP=0
    dcbc:	4100 2b54 4c43 5354 313d 4100 2b54 4c43     .AT+CLTS=1.AT+CL
    dccc:	5354 303d 5300 5548 2054 4b4f 4100 2b54     TS=0.SHUT OK.AT+
    dcdc:	4943 5350 5548 0054 5441 432b 5049 554d     CIPSHUT.AT+CIPMU
    dcec:	3d58 0030 5441 432b 5049 5852 4547 3d54     X=0.AT+CIPRXGET=
    dcfc:	0031 5441 432b 5049 5453 5241 3d54 5422     1.AT+CIPSTART="T
    dd0c:	5043 2c22 0022 5441 432b 5049 4c43 534f     CP",".AT+CIPCLOS
    dd1c:	0045 5441 432b 5049 5453 5441 5355 5300     E.AT+CIPSTATUS.S
    dd2c:	4154 4554 203a 4f43 4e4e 4345 2054 4b4f     TATE: CONNECT OK
    dd3c:	4100 2b54 5448 5054 4e49 5449 4100 2b54     .AT+HTTPINIT.AT+
    dd4c:	5448 5054 4554 4d52 4100 2b54 4d43 4647     HTTPTERM.AT+CMGF
    dd5c:	313d 2b00 4d43 5347 4100 2b54 4d43 4447     =1.+CMGS.AT+CMGD
    dd6c:	303d 3030 4100 2b54 5543 4453 313d 2b00     =000.AT+CUSD=1.+
    dd7c:	5543 4453 203a 4100 2b54 4743 534e 5354     CUSD: .AT+CGNSTS
    dd8c:	3d54 0031 5441 432b 4e47 5453 5453 303d     T=1.AT+CGNSTST=0
    dd9c:	4100 2b54 4743 5350 554f 3d54 3030 0030     .AT+CGPSOUT=000.
    ddac:	5441 432b 444c 4d54 3d46 2c33 4100 2b54     AT+CLDTMF=3,.AT+
    ddbc:	5049 4552 3d58 4100 2b54 4c43 5354 003d     IPREX=.AT+CLTS=.
    ddcc:	5441 5726 4100 2b54 4843 4146 003d 5441     AT&W.AT+CHFA=.AT
    dddc:	432b 564c 3d4c 4100 2b54 5043 4f54 454e     +CLVL=.AT+CPTONE
    ddec:	003d 5441 432b 5450 4e4f 3d45 0030 5441     =.AT+CPTONE=0.AT
    ddfc:	462b 434d 4f4c 4553 4100 2b54 4d46 504f     +FMCLOSE.AT+FMOP
    de0c:	4e45 003d 5441 462b 464d 4552 3d51 4100     EN=.AT+FMFREQ=.A
    de1c:	2b54 4d46 4f56 554c 454d 003d 5441 432b     T+FMVOLUME=.AT+C
    de2c:	4746 4952 003d 5441 482b 5454 5350 4c53     FGRI=.AT+HTTPSSL
    de3c:	003d 4155 5500 4c52 5200 4445 5249 4100     =.UA.URL.REDIR.A
    de4c:	2b54 5453 4f54 454e 313d 002c 5441 432b     T+STTONE=1,.AT+C
    de5c:	494d 3d43 4100 2b54 5053 4d57 303d 002c     MIC=.AT+SPWM=0,.
    de6c:	5441 432b 4147 5454 313d 4100 2b54 4153     AT+CGATT=1.AT+SA
    de7c:	4250 3d52 2c33 2c31 4322 4e4f 5954 4550     PBR=3,1,"CONTYPE
    de8c:	2c22 4722 5250 2253 4100 2b54 4153 4250     ","GPRS".AT+SAPB
    de9c:	3d52 2c31 0031 5441 532b 5041 5242 333d     R=1,1.AT+SAPBR=3
    deac:	312c 222c 5041 224e 002c 5441 432b 5453     ,1,"APN",.AT+CST
    debc:	3d54 0022 5441 532b 5041 5242 333d 312c     T=".AT+SAPBR=3,1
    decc:	222c 5355 5245 2c22 4100 2b54 4153 4250     ,"USER",.AT+SAPB
    dedc:	3d52 2c33 2c31 5022 4457 2c22 4100 2b54     R=3,1,"PWD",.AT+
    deec:	4943 4349 0052 5441 532b 5041 5242 303d     CIICR.AT+SAPBR=0
    defc:	312c 4100 2b54 4743 5441 3d54 0030 5441     ,1.AT+CGATT=0.AT
    df0c:	432b 5347 434f 434b 4e4f 3d54 2c31 4922     +CGSOCKCONT=1,"I
    df1c:	2250 002c 5441 432b 5049 4f4d 4544 313d     P",.AT+CIPMODE=1
    df2c:	4e00 7465 6f77 6b72 6f20 6570 656e 0064     .Network opened.
    df3c:	5441 4e2b 5445 504f 4e45 2c3d 312c 4e00     AT+NETOPEN=,,1.N
    df4c:	7465 6f77 6b72 6320 6f6c 6573 0064 5441     etwork closed.AT
    df5c:	4e2b 5445 4c43 534f 0045 5441 432b 4453     +NETCLOSE.AT+CSD
    df6c:	3d48 0031 5441 432b 474d 3d52 2b00 4d43     H=1.AT+CMGR=.+CM
    df7c:	5247 003a 5441 432b 544e 4350 4449 313d     GR:.AT+CNTPCID=1
    df8c:	4100 2b54 4e43 5054 223d 7000 6f6f 2e6c     .AT+CNTP=".pool.
    df9c:	746e 2e70 726f 0067 2c22 0030 5441 432b     ntp.org.",0.AT+C
    dfac:	544e 0050 432b 544e 3a50 4100 2b54 4e43     NTP.+CNTP:.AT+CN
    dfbc:	5054 4943 3d44 0030 5441 432b 5049 5347     TPCID=0.AT+CIPGS
    dfcc:	4c4d 434f 313d 312c 2b00 4943 4750 4d53     MLOC=1,1.+CIPGSM
    dfdc:	4f4c 3a43 0020 5441 432b 5049 5852 4547     LOC: .AT+CIPRXGE
    dfec:	3d54 2c32 2b00 4943 5250 4758 5445 203a     T=2,.+CIPRXGET: 
    dffc:	2c32 4100 2b54 5448 5054 4552 4441 2b00     2,.AT+HTTPREAD.+
    e00c:	5448 5054 4552 4441 003a 5441 482b 5454     HTTPREAD:.AT+HTT
    e01c:	4150 5443 4f49 3d4e 2b00 5448 5054 4341     PACTION=.+HTTPAC
    e02c:	4954 4e4f 003a 4f43 544e 4e45 0054 4952     TION:.CONTENT.RI
    e03c:	474e 2b00 4c43 5049 203a 0022 432b 4342     NG.+CLIP: ".+CBC
    e04c:	203a 4100 2b54 4243 0043 432b 4441 3a43     : .AT+CBC.+CADC:
    e05c:	3120 002c 5441 432b 4441 3f43 2b00 5243      1,.AT+CADC?.+CR
    e06c:	4745 203a 4100 2b54 5243 4745 003f 432b     EG: .AT+CREG?.+C
    e07c:	5153 203a 4100 2b54 5343 0051 432b 564c     SQ: .AT+CSQ.+CLV
    e08c:	3a4c 0020 5441 432b 564c 3f4c 2b00 4d46     L: .AT+CLVL?.+FM
    e09c:	4f56 554c 454d 203a 4100 2b54 4d46 4f56     VOLUME: .AT+FMVO
    e0ac:	554c 454d 003f 432b 4150 3a53 0020 5441     LUME?.+CPAS: .AT
    e0bc:	432b 4150 0053 432b 4746 4952 203a 4100     +CPAS.+CFGRI: .A
    e0cc:	2b54 4643 5247 3f49 2200 4d53 2c22 4100     T+CFGRI?."SM",.A
    e0dc:	2b54 5043 534d 003f 5322 5f4d 2250 002c     T+CPMS?."SM_P",.
    e0ec:	432b 4e47 5053 5257 203a 4100 2b54 4743     +CGNSPWR: .AT+CG
    e0fc:	534e 5750 3f52 2b00 4743 5350 5750 3a52     NSPWR?.+CGPSPWR:
    e10c:	0020 5441 432b 5047 5053 5257 003f 5441      .AT+CGPSPWR?.AT
    e11c:	432b 4e47 5053 5257 313d 4100 2b54 4743     +CGNSPWR=1.AT+CG
    e12c:	5350 5750 3d52 0031 5441 432b 4e47 5053     PSPWR=1.AT+CGNSP
    e13c:	5257 303d 4100 2b54 4743 5350 5750 3d52     WR=0.AT+CGPSPWR=
    e14c:	0030 432b 5047 3a53 0020 5441 432b 5047     0.+CGPS: .AT+CGP
    e15c:	3f53 4100 2b54 4743 5350 313d 4100 2b54     S?.AT+CGPS=1.AT+
    e16c:	4743 5350 303d 2b00 4743 5441 3a54 0020     CGPS=0.+CGATT: .
    e17c:	5441 432b 4147 5454 003f 432b 5049 5852     AT+CGATT?.+CIPRX
    e18c:	4547 3a54 3420 002c 5441 432b 5049 5852     GET: 4,.AT+CIPRX
    e19c:	4547 3d54 0034 0000 e38b 0000 e391 0000     GET=4...........
    e1ac:	e398 0000 6157 7469 6e69 2067 6f66 2072     ....Waiting for 
    e1bc:	6572 7073 6e6f 6573 0020 3c3c 0020 6f50     response .<< .Po
    e1cc:	6577 6972 676e 6f20 206e 6f52 6b63 4c42     wering on RockBL
    e1dc:	434f 2e4b 2e2e 0d21 000a 6f50 6577 6972     OCK...!...Poweri
    e1ec:	676e 6f20 6666 5220 636f 426b 4f4c 4b43     ng off RockBLOCK
    e1fc:	2e2e 212e 0a0d 3e00 203e 4300 6c61 696c     ...!...>> .Calli
    e20c:	676e 6920 746e 7265 616e 426c 6765 6e69     ng internalBegin
    e21c:	0a0d 4900 746e 7265 616e 426c 6765 6e69     ...InternalBegin
    e22c:	203a 7573 6363 7365 2173 0a0d 4100 0d54     : success!...AT.
    e23c:	4e00 206f 6f6d 6564 206d 6564 6574 7463     .No modem detect
    e24c:	6465 0d2e 000a 5441 432b 5153 000d 432b     ed....AT+CSQ..+C
    e25c:	5153 003a 5441 4d2d 5353 4d54 000d 4d2d     SQ:.AT-MSSTM..-M
    e26c:	5353 4d54 203a 4100 2a54 0d46 4100 2b54     SSTM: .AT*F..AT+
    e27c:	4253 4944 0d58 2b00 4253 4944 3a58 0020     SBDIX..+SBDIX: .
    e28c:	202c 4100 2b54 4253 5244 0d42 5b00 6942     , .AT+SBDRB..[Bi
    e29c:	616e 7972 7320 7a69 3a65 5b00 7363 6d75     nary size:.[csum
    e2ac:	003a 6e69 6574 6e72 6c61 6553 646e 6552     :.internalSendRe
    e2bc:	6563 7669 0d65 000a 5441 532b 4442 4257     ceive...AT+SBDWB
    e2cc:	003d 4552 4441 0d59 000a 005b 6220 7479     =.READY...[. byt
    e2dc:	7365 005d 6843 6365 736b 6d75 003a 0d30     es].Checksum:.0.
    e2ec:	0d0a 4f0a 0d4b 000a 5441 532b 4442 5457     ...OK...AT+SBDWT
    e2fc:	003d 4253 4944 2058 4f4d 6320 646f 3a65     =.SBDIX MO code:
    e30c:	0020 4253 4944 2058 7573 6363 7365 2173      .SBDIX success!
    e31c:	0a0d 4900 636e 6d6f 6e69 2067 656d 7373     ...Incoming mess
    e32c:	6761 2165 0a0d 5300 4442 5849 6620 7461     age!...SBDIX fat
    e33c:	6c61 0d21 000a 6157 7469 6e69 2067 6f66     al!...Waiting fo
    e34c:	2072 4253 4944 2058 6572 7274 2e79 2e2e     r SBDIX retry...
    e35c:	0a0d 5700 6961 6974 676e 6620 726f 4320     ...Waiting for C
    e36c:	5153 7220 7465 7972 2e2e 0d2e 000a 4253     SQ retry......SB
    e37c:	4944 2058 6974 656d 756f 2174 0a0d 4100     DIX timeout!...A
    e38c:	4554 0d31 4100 2654 3044 000d 5441 4b26     TE1..AT&D0..AT&K
    e39c:	0d30 0000                                   0...

0000e3a0 <_ZTVN5SDLib4FileE>:
	...
    e3a8:	1a8f 0000 1aa3 0000 1ba9 0000 1af3 0000     ................
    e3b8:	1b07 0000 1ac9 0000 002f 3c7c 5e3e 3d2b     ......../.|<>^+=
    e3c8:	2f3f 5d5b 2c3b 222a 005c 0000               ?/[];,*"\...

0000e3d4 <_ZTV6SdFile>:
	...
    e3dc:	2bf5 0000 4495 0000                         .+...D..

0000e3e4 <_ZZN8SPIClassC4EP6SERCOMhhh14SercomSpiTXPad11SercomRXPadE19__PRETTY_FUNCTION__>:
    e3e4:	5053 4349 616c 7373 3a3a 5053 4349 616c     SPIClass::SPICla
    e3f4:	7373 5328 5245 4f43 2a4d 202c 6975 746e     ss(SERCOM*, uint
    e404:	5f38 2c74 7520 6e69 3874 745f 202c 6975     8_t, uint8_t, ui
    e414:	746e 5f38 2c74 5320 7265 6f63 536d 6970     nt8_t, SercomSpi
    e424:	5854 6150 2c64 5320 7265 6f63 526d 5058     TXPad, SercomRXP
    e434:	6461 0029 5f70 6573 6372 6d6f 2120 203d     ad).p_sercom != 
    e444:	554e 4c4c 2e00 2f2e 696c 7262 7261 6569     NULL.../librarie
    e454:	2f73 5053 2f49 5053 2e49 7063 0070 0000     s/SPI/SPI.cpp...

0000e464 <_ZTVN10IridiumSBD10StreamShimE>:
	...
    e46c:	31b1 0000 4495 0000 5349 4442 4c20 7369     .1...D..ISBD Lis
    e47c:	6f74 6b00 6c6f 6962 6733 4600 4e4f 2041     to.kolbi3g.FONA 
    e48c:	696c 7473 006f 4453 6c20 7369 6174 4300     listo.SD lista.C
    e49c:	6c6f 7369 6f69 206e 6f63 206e 7261 6165     olision con area
    e4ac:	0020 7345 7263 6269 6569 646e 206f 6e65      .Escribiendo en
    e4bc:	5320 0044 7245 6f72 2072 4453 6300 6e6f      SD.Error SD.con
    e4cc:	6966 2e67 7874 0074 694c 656e 2061 6663     fig.txt.Linea cf
    e4dc:	3a67 0020 656e 2e74 7874 0074 694c 656e     g: .net.txt.Line
    e4ec:	2061 656e 3a74 0020 7273 2e76 7874 0074     a net: .srv.txt.
    e4fc:	694c 656e 2061 7273 3a76 0020 414d 0050     Linea srv: .MAP.
    e50c:	414d 2050 5055 0044 4d53 2053 6f43 666e     MAP UPD.SMS Conf
    e51c:	6769 4300 4746 4120 4b43 5300 534d 4e20     ig.CFG ACK.SMS N
    e52c:	7465 4e00 5445 4120 4b43 5300 534d 5320     et.NET ACK.SMS S
    e53c:	7265 6576 0072 5253 2056 4341 004b 6143     erver.SRV ACK.Ca
    e54c:	636c 6c75 6e61 6f64 5520 6962 6163 6963     lculando Ubicaci
    e55c:	6e6f 2e2e 002e 227b 6566 6863 2261 003a     on....{"fecha":.
    e56c:	222c 616c 2274 003a 222c 6f6c 226e 003a     ,"lat":.,"lon":.
    e57c:	222c 6576 226c 003a 222c 6c61 2274 003a     ,"vel":.,"alt":.
    e58c:	007d 7245 6f72 2072 5047 0053 5245 4f52     }.Error GPS.ERRO
    e59c:	0052 6954 6d65 6f70 7420 6172 736e 7563     R.Tiempo transcu
    e5ac:	7272 6469 3a6f 0020 6f6c 2e67 7874 0074     rrido: .log.txt.
    e5bc:	7061 6c70 6369 7461 6f69 2f6e 736a 6e6f     application/json
    e5cc:	5000 534f 0054 7245 6f72 2072 6564 6320     .POST.Error de c
    e5dc:	6e6f 7865 6f69 006e 4547 2054 6572 7073     onexion.GET resp
    e5ec:	5300 5245 4f43 204d 696c 7473 006f 614d     .SERCOM listo.Ma
    e5fc:	2070 6946 656c 203a 4c00 6e69 6165 6d20     p File: .Linea m
    e60c:	203a 4c00 7461 203a 4c00 6e6f 203a 4600     : .Lat: .Lon: .F
    e61c:	616c 7367 203a 3d00 3d3d 3d3d 443d 4245     lags: .======DEB
    e62c:	4755 3d3d 3d3d 3d3d 5200 5353 3a49 0020     UG======.RSSI: .
    e63c:	4d53 2053 756e 3a6d 0020 4e49 5f54 4d53     SMS num: .INT_SM
    e64c:	0053 227b 616c 2274 003a 0a7d 6100 2e76     S.{"lat":.}..av.
    e65c:	7874 0074 3156 5600 4f49 414c 4943 4e4f     txt.V1.VIOLACION
    e66c:	4420 2045 5241 4145 2500 2525 2e64 6425      DE AREA.%%%d.%d
    e67c:	0066 616e 006e 766f 0066 6e69 0066 0000     f.nan.ovf.inf...

0000e68c <_ZTV4Uart>:
	...
    e694:	4d41 0000 4495 0000 4d23 0000 4d37 0000     AM...D..#M..7M..
    e6a4:	4d2d 0000 4d19 0000 4cf9 0000 4e1d 0000     -M...M...L...N..
    e6b4:	4d05 0000 4cf5 0000                         .M...L..

0000e6bc <_ZTV7Serial_>:
	...
    e6c4:	4ea9 0000 4ed5 0000 4ebd 0000 4ef1 0000     .N...N...N...N..
    e6d4:	4f15 0000 4ec9 0000 4ea5 0000               .O...N...N..

0000e6e0 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    e6e8:	5209 0000 52cd 0000 5145 0000               .R...R..EQ..

0000e6f4 <_ZL19STRING_MANUFACTURER>:
    e6f4:	7053 7261 466b 6e75 0000                    SparkFun..

0000e6fe <_ZL15STRING_LANGUAGE>:
    e6fe:	0304 0409                                   ....

0000e702 <_ZL21USB_DeviceDescriptorB>:
    e702:	0112 0200 02ef 4001 1b4f 8d21 0100 0201     .......@O.!.....
    e712:	0103                                        ..

0000e714 <_ZL14STRING_PRODUCT>:
    e714:	4653 2045 4153 444d 3132 0000               SFE SAMD21..

0000e720 <g_APinDescription>:
    e720:	0000 0000 000b 0000 0002 0000 0004 0000     ................
    e730:	00ff ffff ffff 000b 0000 0000 000a 0000     ................
    e740:	0002 0000 0004 0000 00ff ffff ffff 000a     ................
    e750:	0000 0000 000e 0000 0008 0000 0004 0000     ................
    e760:	00ff ffff ffff 000e 0000 0000 0009 0000     ................
    e770:	0004 0000 001c 0000 00ff 0001 0001 0009     ................
    e780:	0000 0000 0008 0000 0004 0000 001c 0000     ................
    e790:	00ff 0000 0000 0010 0000 0000 000f 0000     ................
    e7a0:	0004 0000 001c 0000 00ff 0301 0301 000f     ................
    e7b0:	0000 0000 0014 0000 0005 0000 002c 0000     ............,...
    e7c0:	00ff 0002 0002 0004 0000 0000 0015 0000     ................
    e7d0:	0008 0000 0004 0000 00ff ffff ffff 0005     ................
    e7e0:	0000 0000 0006 0000 0004 0000 001c 0000     ................
    e7f0:	00ff 0100 0100 0006 0000 0000 0007 0000     ................
    e800:	0004 0000 001c 0000 00ff 0101 0101 0007     ................
    e810:	0000 0000 0012 0000 0002 0000 001c 0000     ................
    e820:	00ff 0300 0300 0002 0000 0000 0010 0000     ................
    e830:	0002 0000 001c 0000 00ff 0200 0200 0000     ................
    e840:	0000 0000 0013 0000 0002 0000 001c 0000     ................
    e850:	00ff 0003 0003 0003 0000 0000 0011 0000     ................
    e860:	0002 0000 000c 0000 00ff 0201 ffff 0001     ................
    e870:	0000 0000 0002 0000 0001 0000 0002 0000     ................
    e880:	0000 ffff ffff 0002 0001 0000 0008 0000     ................
    e890:	0001 0000 0002 0000 0002 ffff ffff 0008     ................
    e8a0:	0001 0000 0009 0000 0001 0000 0002 0000     ................
    e8b0:	0003 ffff ffff 0009 0000 0000 0004 0000     ................
    e8c0:	0001 0000 0002 0000 0004 ffff ffff 0004     ................
    e8d0:	0000 0000 0005 0000 0001 0000 0002 0000     ................
    e8e0:	0005 ffff ffff 0005 0001 0000 0002 0000     ................
    e8f0:	0001 0000 0002 0000 000a ffff ffff 0002     ................
    e900:	0000 0000 0016 0000 0002 0000 0004 0000     ................
    e910:	00ff ffff ffff 0006 0000 0000 0017 0000     ................
    e920:	0002 0000 0004 0000 00ff ffff ffff 0007     ................
    e930:	0000 0000 000c 0000 0003 0000 0004 0000     ................
    e940:	00ff ffff ffff 000c 0001 0000 000a 0000     ................
    e950:	0003 0000 0004 0000 00ff ffff ffff 000a     ................
    e960:	0001 0000 000b 0000 0003 0000 0004 0000     ................
    e970:	00ff ffff ffff 000b 0001 0000 0003 0000     ................
    e980:	000b 0000 0004 0000 00ff ffff ffff 00ff     ................
    e990:	0000 0000 001b 0000 000b 0000 0004 0000     ................
    e9a0:	00ff ffff ffff 00ff 0000 0000 001c 0000     ................
    e9b0:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    e9c0:	0000 0000 0018 0000 0006 0000 0000 0000     ................
    e9d0:	00ff ffff ffff 00ff 0000 0000 0019 0000     ................
    e9e0:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    e9f0:	0001 0000 0016 0000 0003 0000 0000 0000     ................
    ea00:	00ff ffff ffff 00ff 0001 0000 0017 0000     ................
    ea10:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    ea20:	0000 0000 0016 0000 0002 0000 0000 0000     ................
    ea30:	00ff ffff ffff 00ff 0000 0000 0017 0000     ................
    ea40:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    ea50:	0000 0000 0013 0000 0002 0000 0000 0000     ................
    ea60:	00ff ffff ffff 00ff 0000 0000 0010 0000     ................
    ea70:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    ea80:	0000 0000 0012 0000 0002 0000 0000 0000     ................
    ea90:	00ff ffff ffff 00ff 0000 0000 0011 0000     ................
    eaa0:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    eab0:	0000 0000 000d 0000 0004 0000 000c 0000     ................
    eac0:	00ff 0001 ffff 000d 0000 0000 0015 0000     ................
    ead0:	0005 0000 000c 0000 00ff 0003 ffff 00ff     ................
    eae0:	0000 0000 0006 0000 0004 0000 000c 0000     ................
    eaf0:	00ff 0100 ffff 00ff 0000 0000 0007 0000     ................
    eb00:	0004 0000 000c 0000 00ff 0101 ffff 00ff     ................
    eb10:	0000 0000 0003 0000 0001 0000 0002 0000     ................
    eb20:	00ff ffff ffff 00ff 0000 0000 0002 0000     ................
    eb30:	0001 0000 0002 0000 0014 ffff ffff 0002     ................
    eb40:	7318 0000 7276 0000 7276 0000 7274 0000     .s..vr..vr..tr..
    eb50:	730a 0000 730a 0000 7300 0000 7274 0000     .s...s...s..tr..
    eb60:	730a 0000 7300 0000 730a 0000 7274 0000     .s...s...s..tr..
    eb70:	7310 0000 7310 0000 7310 0000 739a 0000     .s...s...s...s..
    eb80:	8008 0000 7ed6 0000 7fdc 0000 7ecc 0000     .....~.......~..
    eb90:	7fdc 0000 7fe6 0000 7fdc 0000 7ecc 0000     .............~..
    eba0:	7ed6 0000 7ed6 0000 7fe6 0000 7ecc 0000     .~...~.......~..
    ebb0:	7ec2 0000 7ec2 0000 7ec2 0000 8238 0000     .~...~...~..8...
    ebc0:	8850 0000 8710 0000 8710 0000 870e 0000     P...............
    ebd0:	8828 0000 8828 0000 881a 0000 870e 0000     (...(...........
    ebe0:	8828 0000 881a 0000 8828 0000 870e 0000     (.......(.......
    ebf0:	8830 0000 8830 0000 8830 0000 8a30 0000     0...0...0...0...
    ec00:	202c 7566 636e 6974 6e6f 203a 6100 7373     , function: .ass
    ec10:	7265 6974 6e6f 2220 7325 2022 6166 6c69     ertion "%s" fail
    ec20:	6465 203a 6966 656c 2220 7325 2c22 6c20     ed: file "%s", l
    ec30:	6e69 2065 6425 7325 7325 000a               ine %d%s%s..

0000ec3c <_global_impure_ptr>:
    ec3c:	009c 2000 2d23 2b30 0020 6c68 004c 6665     ... #-0+ .hlL.ef
    ec4c:	4567 4746 4e00 4e41 3000 3231 3433 3635     gEFG.NAN.0123456
    ec5c:	3837 4139 4342 4544 0046 3130 3332 3534     789ABCDEF.012345
    ec6c:	3736 3938 6261 6463 6665 0000               6789abcdef..

0000ec78 <fpi.5342>:
    ec78:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
    ec88:	0000 0000                                   ....

0000ec8c <fpinan.5378>:
    ec8c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
    ec9c:	0000 0000                                   ....

0000eca0 <tinytens>:
    eca0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
    ecb0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
    ecc0:	6f43 64ac 0628 1168                         Co.d(.h.

0000ecc8 <_ctype_>:
    ecc8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    ecd8:	2020 2020 2020 2020 2020 2020 2020 2020                     
    ece8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    ecf8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    ed08:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    ed18:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    ed28:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    ed38:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    ed48:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
    edc8:	4900 666e 6e69 7469 0079 614e 004e 0000     .Infinity.NaN...

0000edd8 <__sf_fake_stdin>:
	...

0000edf8 <__sf_fake_stdout>:
	...

0000ee18 <__sf_fake_stderr>:
	...
    ee38:	4f50 4953 0058 0000                         POSIX...

0000ee40 <__mprec_tens>:
    ee40:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
    ee50:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
    ee60:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
    ee70:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
    ee80:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
    ee90:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
    eea0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
    eeb0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
    eec0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
    eed0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
    eee0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
    eef0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
    ef00:	9db4 79d9 7843 44ea                         ...yCx.D

0000ef08 <__mprec_bigtens>:
    ef08:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
    ef18:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
    ef28:	bf3c 7f73 4fdd 7515                         <.s..O.u

0000ef30 <p05.5385>:
    ef30:	0005 0000 0019 0000 007d 0000               ........}...

0000ef3c <__EH_FRAME_BEGIN__>:
    ef3c:	0000 0000                                   ....
